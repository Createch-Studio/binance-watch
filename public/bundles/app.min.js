!function(n){function I(g){if(t[g])return t[g].exports;var c=t[g]={i:g,l:!1,exports:{}};return n[g].call(c.exports,c,c.exports,I),c.l=!0,c.exports}var t={};I.m=n,I.c=t,I.d=function(n,t,g){I.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:g})},I.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return I.d(t,"a",t),t},I.o=function(n,I){return Object.prototype.hasOwnProperty.call(n,I)},I.p="",I(I.s=32)}([function(module,exports){eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanM/NTU0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciAvKiBzZXJ2ZXIgb25seSAqL1xuKSB7XG4gIHZhciBlc01vZHVsZVxuICB2YXIgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBlc01vZHVsZSA9IHJhd1NjcmlwdEV4cG9ydHNcbiAgICBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKGNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZFRlbXBsYXRlLnN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgdmFyIGZ1bmN0aW9uYWwgPSBvcHRpb25zLmZ1bmN0aW9uYWxcbiAgICB2YXIgZXhpc3RpbmcgPSBmdW5jdGlvbmFsXG4gICAgICA/IG9wdGlvbnMucmVuZGVyXG4gICAgICA6IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG5cbiAgICBpZiAoIWZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gZXhpc3RpbmcoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVzTW9kdWxlOiBlc01vZHVsZSxcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/**\n * Common utils\n */\nmodule.exports = {\n\n  // timeout cache\n  _sto: {},\n\n  // custom wrapper for setTimeout\n  delay: function delay(name, seconds, callback) {\n    if (!name || typeof callback !== 'function') return;\n    if (this._sto[name]) clearTimeout(this._sto[name]);\n    this._sto[name] = setTimeout(callback, 1000 * (seconds | 0));\n  },\n\n\n  // convert url string into an anchor element (parser)\n  parseUrl: function parseUrl(url, prop) {\n    var link = document.createElement('a');\n    link.href = url;\n    var data = link[prop] || '';\n    link = null;\n    return data;\n  },\n\n\n  // convert html tags to text content\n  stripHtml: function stripHtml(text, removeUrls) {\n    var div = document.createElement('div');\n    div.innerHTML = String(text || '');\n    var output = String(div.textContent || div.innerText || '');\n    if (removeUrls) output = output.replace(/(https?\\:\\/\\/[\\w\\-\\.\\?\\=\\&\\%\\/\\#]+)/gi, '');\n    return output;\n  },\n\n\n  // convert relative path to full url\n  fullUrl: function fullUrl(relpath) {\n    if (/^([\\w\\-]+\\:)?\\/\\/.*$/.test(relpath)) return relpath;\n    var loc = window.location;\n    var path = String(loc.pathname || '').replace(/\\/+$/g, '');\n    var rel = String(relpath || '').replace(/^\\/+/g, '');\n    return loc.protocol + '//' + loc.host + path + '/' + rel;\n  },\n\n\n  // play audio file\n  playAudio: function playAudio(file, vol) {\n    if (!file || typeof file !== 'string') return;\n    // normalize volume\n    vol = parseFloat(vol) || 1;\n    vol = vol > 1 ? vol / 100 : vol;\n    vol = vol > 1 || vol < 0 ? 1 : vol;\n    // load and play audio\n    var audio = new Audio();\n    audio.src = this.fullUrl(file);\n    audio.volume = vol;\n    audio.crossOrigin = 'anonymous';\n    audio.addEventListener('canplaythrough', function (e) {\n      return audio.play();\n    });\n    audio.load();\n  },\n\n\n  // to trimmed string\n  toStr: function toStr(input, deft) {\n    return String(String(input) || deft).trim();\n  },\n\n\n  // to integer\n  toInt: function toInt(input, deft) {\n    input = parseInt(input) || false;\n    deft = parseInt(deft) || 0;\n    return input !== false ? input : deft;\n  },\n\n\n  // to float\n  toFloat: function toFloat(input, deft) {\n    input = parseFloat(input) || false;\n    deft = parseFloat(deft) || 0;\n    return input !== false ? input : deft;\n  },\n\n\n  // to boolean\n  toBool: function toBool(input) {\n    if (typeof input === 'string') {\n      // assume true, unless...\n      return (/^(0|n|no|off|false)$/i.test(input) ? false : true\n      );\n    }\n    return input ? true : false;\n  },\n\n\n  // clamp a number between min and max\n  clamp: function clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  },\n\n\n  // cut part of a string\n  limit: function limit(str, length, append) {\n    str = String(str);\n    length = parseInt(length) || 50;\n    append = String(append || '');\n    return str.length > length ? str.substring(0, length) + append : str;\n  },\n\n\n  // alway keep a string at a certain length\n  fill: function fill(str, length, char, append) {\n    str = String(str);\n    length = parseInt(length) || 20;\n    char = String(char || ' ');\n    append = String(append || '');\n    if (str.length > length) return str.substring(0, length - 3) + '...';\n    return str + char.repeat(length - str.length) + append;\n  },\n\n\n  // get noun word for a number\n  noun: function noun(num, singular, plutal, append) {\n    append = String(append || '');\n    return String(num + ' ' + (parseFloat(num) === 1 ? singular : plutal) + ' ' + append).trim();\n  },\n\n\n  // format number to money\n  money: function money(num, fixed) {\n    num = parseFloat(num) || 0;\n    fixed = parseInt(fixed) || 0;\n    var o = { style: 'decimal', minimumFractionDigits: fixed, maximumFractionDigits: fixed };\n    return new Intl.NumberFormat('en-US', o).format(num);\n  },\n\n\n  // convert candle time (1m, 1h, etc) into readable string\n  candleTime: function candleTime(candle, count, add) {\n    count = Math.max(1, parseInt(count) || 1);\n    add = parseInt(add) || 0;\n    var numb = parseInt(candle) || 1;\n    var letter = String(candle).replace(/[^a-zA-Z]+/g, '');\n    var map = { 'm': 60, 'h': 3600, 'd': 86400, 'w': 604800, 'M': 2419200 };\n    var seconds = Number(map[letter] || 0) * numb * count + add;\n    return this.elapsed(seconds);\n  },\n\n\n  // get info about how long something has been\n  elapsed: function elapsed(seconds) {\n    seconds = parseInt(seconds) || 0;\n    if (!seconds) return '0s';\n\n    var out = [],\n        list = [];\n    list.push(['M', Math.floor(seconds / 2419200)]);\n    list.push(['w', Math.floor(seconds / 604800 % 4)]);\n    list.push(['d', Math.floor(seconds / 86400 % 7)]);\n    list.push(['h', Math.floor(seconds / 3600 % 24)]);\n    list.push(['m', Math.floor(seconds / 60 % 60)]);;\n    list.push(['s', Math.floor(seconds % 60)]);\n    list.forEach(function (arr) {\n      var _arr = _slicedToArray(arr, 2),\n          letter = _arr[0],\n          time = _arr[1];\n\n      if (time) out.push(time + letter);\n    });\n    return out.join(' ');\n  },\n\n\n  // get data about current date and time\n  dateData: function dateData(time) {\n    var now = Date.now();\n\n    if (time) {\n      // timestamp or datestring, keep as is\n      if (typeof time === 'number' || /^[\\w\\-\\+\\:]+$/.test(time)) {\n        now = time;\n      }\n      // other string, assume timezone\n      else if (typeof time === 'string') {\n          now = new Date().toLocaleString('en-US', { time: time });\n        }\n    }\n    var _p = function _p(n) {\n      return n < 10 ? '0' + n : '' + n;\n    };\n    var date = new Date(now);\n    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][date.getMonth()];\n    var year = date.getFullYear();\n    var day = _p(date.getDate());\n    var minute = _p(date.getMinutes());\n    var second = _p(date.getSeconds());\n    var fullh = date.getHours();\n    var ampm = fullh > 12 ? 'PM' : 'AM';\n    var hour = fullh > 12 ? fullh - 12 : fullh;\n    hour = _p(hour === 0 ? 12 : hour);\n    return { month: month, day: day, year: year, hour: hour, minute: minute, second: second, ampm: ampm };\n  },\n\n\n  // get readable date\n  date: function date(time) {\n    var _dateData = this.dateData(time),\n        month = _dateData.month,\n        day = _dateData.day,\n        year = _dateData.year,\n        hour = _dateData.hour,\n        minute = _dateData.minute,\n        second = _dateData.second,\n        ampm = _dateData.ampm;\n\n    return month + ' ' + day + ' ' + year + ' ' + hour + ':' + minute + ':' + second + ' ' + ampm;\n  },\n\n\n  // get current time\n  time: function time(_time) {\n    var _dateData2 = this.dateData(_time),\n        month = _dateData2.month,\n        day = _dateData2.day,\n        year = _dateData2.year,\n        hour = _dateData2.hour,\n        minute = _dateData2.minute,\n        second = _dateData2.second,\n        ampm = _dateData2.ampm;\n\n    return hour + ':' + minute + ':' + second + ' ' + ampm;\n  },\n\n\n  // calculate percent change\n  percent: function percent(current, last) {\n    var isnum = Boolean(last > 0);\n    var isup = Boolean(current >= last);\n    var change = isup ? current - last : last - current;\n    var percent = isnum ? change / last * 100.0 : 0.0;\n    var sign = isup ? '+' : '-';\n    var arrow = isup ? '▲' : '▼';\n    var color = isup ? 'green' : 'red';\n    return { change: change, percent: percent, sign: sign, arrow: arrow, color: color };\n  },\n\n\n  // calc chart points for given dimensions and values\n  points: function points(width, height, values) {\n    width = parseFloat(width) || 0;\n    height = parseFloat(height) || 0;\n    values = Array.isArray(values) ? values : [];\n    values = values.map(function (n) {\n      return parseFloat(n) || 0;\n    });\n\n    var min = values.reduce(function (min, val) {\n      return val < min ? val : min;\n    }, values[0]);\n    var max = values.reduce(function (max, val) {\n      return val > max ? val : max;\n    }, values[0]);\n    var len = values.length;\n    var half = height / 2;\n    var range = max > min ? max - min : height;\n    var gap = len > 1 ? width / (len - 1) : 1;\n    var out = [];\n\n    for (var i = 0; i < len; ++i) {\n      var d = values[i];\n      var val = 2 * ((d - min) / range - 0.5);\n      var x = i * gap;\n      var y = -val * half * 0.8 + half;\n      out.push({ x: x, y: y });\n    }\n    return out;\n  },\n\n\n  // shuffle an array\n  shuffle: function shuffle(o) {\n    for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) {}\n    return o;\n  },\n\n\n  // deep merge obj arguments\n  deepMerge: function deepMerge() {\n    for (var i = 1; i < arguments.length; i++) {\n      for (var key in arguments[i]) {\n        if (arguments[i].hasOwnProperty(key)) {\n          if (_typeof(arguments[0][key]) === 'object' && _typeof(arguments[i][key]) === 'object') {\n            this.deepMerge(arguments[0][key], arguments[i][key]);\n          } else {\n            arguments[0][key] = arguments[i][key];\n          }\n        }\n      }\n    }\n    return arguments[0];\n  },\n\n\n  // return matching results from a list\n  search: function search(list, key, match, strict) {\n    if (!Array.isArray(list) || !key || !match) return [];\n    var search = '\\\\b' + String(match || '').replace(/[\\|]+/g, '\\\\b|\\\\b') + '\\\\b';\n    var options = strict ? 'g' : 'gi';\n    var regex = new RegExp(search, options);\n    return list.filter(function (obj) {\n      return obj[key].search(regex) >= 0;\n    });\n  },\n\n\n  // sort objects in an array by a key\n  sort: function sort(list, key, order) {\n    if (!Array.isArray(list) || !key) return [];\n    if (!key || typeof key !== 'string') return list;\n\n    // check order, default to ascending\n    order = order && /^(asc|desc)$/i.test(order) ? order.toLowerCase() : 'asc';\n\n    return list.sort(function (a, b) {\n      var _a = a[key];\n      var _b = b[key];\n\n      if (_a && _b) {\n        // ignore case when sorting strings\n        _a = typeof _a === 'string' ? _a.toUpperCase() : _a;\n        _b = typeof _b === 'string' ? _b.toUpperCase() : _b;\n\n        if (order === 'asc') {\n          if (_a < _b) return -1;\n          if (_a > _b) return 1;\n        }\n        if (order === 'desc') {\n          if (_a > _b) return -1;\n          if (_a < _b) return 1;\n        }\n      }\n      return 0;\n    });\n  },\n\n\n  // look over anything with a custom callback: loop( data, ( key, val ) => { ... } )\n  loop: function loop(data, callback) {\n    if (Array.isArray(data)) {\n      return data.forEach(function (item, i) {\n        callback(i, item);\n      });\n    } else if (typeof data === 'string') {\n      data.trim().split(/\\s+/g).forEach(function (word, i) {\n        callback(i, word);\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n      Object.keys(data).forEach(function (key, i) {\n        callback(key, data[key]);\n      });\n    } else if (typeof data === 'number') {\n      var i = 0,\n          len = parseInt(data) || 1;\n      for (i; i < len; ++i) {\n        callback(i, null);\n      }\n    }\n  },\n\n\n  // random string for a given length\n  randString: function randString(length) {\n    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    var total = parseInt(length) || 10;\n    var output = '';\n\n    while (total) {\n      output += chars.charAt(Math.floor(Math.random() * chars.length));\n      total--;\n    }\n    return output;\n  },\n\n\n  // get a unique ID string that uses the current timestamp and a random value\n  idString: function idString() {\n    return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)).toUpperCase();\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * Web cache handler\r\n */\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // local props\n  _api: 'localStorage',\n  _prefix: 'webcache_',\n  _ttl: 0,\n\n  // save data to cache\n  setData: function setData(key, data, time) {\n    return this._save(key, data, time);\n  },\n\n\n  // get saved data for a key as is\n  getData: function getData(key) {\n    this._clean();\n    return this._fetch(key);\n  },\n\n\n  // delete saved data for key\n  deleteData: function deleteData(key) {\n    return this._delete(key);\n  },\n\n\n  // santizer for keys\n  _key: function _key(key) {\n    return this._prefix + String(key || '').replace(/[^\\w]+/g, '_');\n  },\n\n\n  // error handler\n  _error: function _error(e) {\n    var _code = e.code | 0;\n    var _name = e.name || 'UnknownError';\n    var _info = e.message || 'Problem with ' + this._api + ' browser API.';\n    console.error('StorageError (' + _code + '):', _info, '(' + _name + ').');\n    return false;\n  },\n\n\n  // try saving the data and handle any errors\n  _save: function _save(key, data, ttl) {\n    try {\n      var _store = window[this._api];\n      var _key = this._key(key);\n      var _time = Date.now();\n      var _ttl = parseInt(ttl) || this._ttl;\n      var _string = JSON.stringify({ _time: _time, _ttl: _ttl, data: data });\n      _store.setItem(_key, _string);\n      return true;\n    } catch (e) {\n      return this._error(e);\n    }\n  },\n\n\n  // try fetching data for key\n  _fetch: function _fetch(key) {\n    try {\n      var _store = window[this._api];\n      var _key = this._key(key);\n      var _parsed = JSON.parse(_store.getItem(_key) || '{}');\n      return _parsed && _parsed.data ? _parsed.data : null;\n    } catch (e) {\n      return this._error(e);\n    }\n  },\n\n\n  // try deleting data by key\n  _delete: function _delete(key) {\n    try {\n      var _store = window[this._api];\n      var _key = this._key(key);\n      _store.removeItem(_key);\n      return true;\n    } catch (e) {\n      return this._error(e);\n    }\n  },\n\n\n  // clean all expired items from storage\n  _clean: function _clean() {\n    try {\n      var _store = window[this._api];\n      var _time = Date.now();\n\n      // loop keys\n      for (var i = 0; i < _store.length; i++) {\n\n        // make sure it's a key managed by this object\n        var _key = _store.key(i);\n        if (_key.indexOf(this._prefix) < 0) continue;\n\n        // get data for key\n        var _data = JSON.parse(_store.getItem(_key) || '{}');\n        if (!_data._time || !_data._ttl) continue; // need these\n\n        // check if enough time has passed and delete key\n        var _secs = (_time - _data._time) / 1000;\n        if (_secs < _data._ttl) continue; // still fresh\n        _store.removeItem(_key);\n      }\n      return true;\n    } catch (e) {\n      return this._error(e);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dropdown_vue__ = __webpack_require__(10);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c0d1f896_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dropdown_vue__ = __webpack_require__(54);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(53)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dropdown_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c0d1f896_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dropdown_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWU/MWFlZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQSx3QkFBb1Y7QUFDcFY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1jMGQxZjg5NlxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXBvc3Rjc3MtbG9hZGVyIXNhc3MtbG9hZGVyP2RhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0Ryb3Bkb3duLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Ryb3Bkb3duLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRHJvcGRvd24udnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQgX192dWVfdGVtcGxhdGVfXyBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1jMGQxZjg5NlxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Ryb3Bkb3duLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWVcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenIcon_vue__ = __webpack_require__(17);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_800c115e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenIcon_vue__ = __webpack_require__(71);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(70)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenIcon_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_800c115e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenIcon_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkljb24udnVlPzc2MWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtODAwYzExNWVcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Ub2tlbkljb24udnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVG9rZW5JY29uLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVG9rZW5JY29uLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtODAwYzExNWVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ub2tlbkljb24udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1Rva2VuSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Tabs_vue__ = __webpack_require__(25);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c2fce824_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Tabs_vue__ = __webpack_require__(85);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(84)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Tabs_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c2fce824_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Tabs_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZT9mNmQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWMyZmNlODI0XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVGFicy52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UYWJzLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVGFicy52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWMyZmNlODI0XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVGFicy52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvVGFicy52dWVcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\r\n * Viewport Object.\r\n * Helper for working with viewport data.\r\n */\nvar _w = window || {};\nvar _s = window.screen || {};\nvar _d = document.documentElement || {};\nvar _b = document.body || {};\n\n/* harmony default export */ __webpack_exports__["a"] = ({\n  screenWidth: function screenWidth() {\n    return Math.max(0, _s.width || _s.availWidth || 0);\n  },\n  screenHeight: function screenHeight() {\n    return Math.max(0, _s.height || _s.availHeight || 0);\n  },\n  clientWidth: function clientWidth() {\n    return Math.max(0, _w.innerWidth || _d.clientWidth || _b.clientWidth || 0);\n  },\n  clientHeight: function clientHeight() {\n    return Math.max(0, _w.innerHeight || _d.clientHeight || _b.clientHeight || 0);\n  },\n  pageWidth: function pageWidth() {\n    return Math.max(0, _b.scrollWidth || 0, _b.offsetWidth || 0, _d.clientWidth || 0, _d.offsetWidth || 0, _d.scrollWidth || 0);\n  },\n  pageHeight: function pageHeight() {\n    return Math.max(0, _b.scrollHeight || 0, _b.offsetHeight || 0, _d.clientHeight || 0, _d.offsetHeight || 0, _d.scrollHeight || 0);\n  },\n  pageLeft: function pageLeft() {\n    return Math.max(0, _d.clientLeft || _b.clientLeft || 0);\n  },\n  pageTop: function pageTop() {\n    return Math.max(0, _d.clientTop || _b.clientTop || 0);\n  },\n  scrollLeft: function scrollLeft() {\n    return Math.max(0, _w.pageXOffset || _d.scrollLeft || _b.scrollLeft || 0) - this.pageLeft();\n  },\n  scrollTop: function scrollTop() {\n    return Math.max(0, _w.pageYOffset || _d.scrollTop || _b.scrollTop || 0) - this.pageTop();\n  },\n  scrollRight: function scrollRight() {\n    // max right\n    return Math.max(0, Math.floor(this.pageWidth() - this.clientWidth()));\n  },\n  scrollBottom: function scrollBottom() {\n    // max bottom\n    return Math.max(0, Math.floor(this.pageHeight() - this.clientHeight()));\n  },\n  mouseLeft: function mouseLeft(e) {\n    var t = e && e.changedTouches ? e.changedTouches[0] : {};\n    return e ? Math.max(0, t.pageX || e.pageX || e.clientX || 0) : 0;\n  },\n  mouseTop: function mouseTop(e) {\n    var t = e && e.changedTouches ? e.changedTouches[0] : {};\n    return e ? Math.max(0, t.pageY || e.pageY || e.clientY || 0) : 0;\n  },\n  centerX: function centerX(e) {\n    // pointer axis from center\n    return this.mouseLeft(e) - this.clientWidth() / 2;\n  },\n  centerY: function centerY(e) {\n    // pointer axis from center\n    return this.mouseTop(e) - this.clientHeight() / 2;\n  },\n  elementWidth: function elementWidth(e) {\n    // border-box\n    return e ? Math.max(0, e.offsetWidth || 0) : 0;\n  },\n  elementHeight: function elementHeight(e) {\n    // border-box\n    return e ? Math.max(0, e.offsetHeight || 0) : 0;\n  },\n  elementLeft: function elementLeft(e) {\n    // from window\n    return e ? e.getBoundingClientRect().left : 0;\n  },\n  elementTop: function elementTop(e) {\n    // from window\n    return e ? e.getBoundingClientRect().top : 0;\n  },\n  clampValue: function clampValue(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__configs_options__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_binance__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_binance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__modules_binance__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_scroller__ = __webpack_require__(47);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_queue__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_queue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__modules_queue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_mailgun__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_telegram__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__modules_utils__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Topbar_vue__ = __webpack_require__(51);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Modal_vue__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Notify_vue__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__WatchForm_vue__ = __webpack_require__(62);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__TokenList_vue__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__NewsPage_vue__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__AboutPage_vue__ = __webpack_require__(81);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__OptionsPage_vue__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__HistoryPage_vue__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__AlarmsList_vue__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__DonatePage_vue__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__TokenPage_vue__ = __webpack_require__(93);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// custom modules\n\n\n\n\n\n\n\n\n// sub components\n\n\n\n\n\n\n\n\n\n\n\n\n\n// helper class instances\nvar _binance = new __WEBPACK_IMPORTED_MODULE_1__modules_binance___default.a();\nvar _scroller = new __WEBPACK_IMPORTED_MODULE_2__modules_scroller__[\"a\" /* default */]();\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: {\n    Topbar: __WEBPACK_IMPORTED_MODULE_7__Topbar_vue__[\"a\" /* default */],\n    Modal: __WEBPACK_IMPORTED_MODULE_8__Modal_vue__[\"a\" /* default */],\n    Notify: __WEBPACK_IMPORTED_MODULE_9__Notify_vue__[\"a\" /* default */],\n    WatchForm: __WEBPACK_IMPORTED_MODULE_10__WatchForm_vue__[\"a\" /* default */],\n    AboutPage: __WEBPACK_IMPORTED_MODULE_13__AboutPage_vue__[\"a\" /* default */],\n    OptionsPage: __WEBPACK_IMPORTED_MODULE_14__OptionsPage_vue__[\"a\" /* default */],\n    HistoryPage: __WEBPACK_IMPORTED_MODULE_15__HistoryPage_vue__[\"a\" /* default */],\n    TokenList: __WEBPACK_IMPORTED_MODULE_11__TokenList_vue__[\"a\" /* default */],\n    AlarmsList: __WEBPACK_IMPORTED_MODULE_16__AlarmsList_vue__[\"a\" /* default */],\n    NewsPage: __WEBPACK_IMPORTED_MODULE_12__NewsPage_vue__[\"a\" /* default */],\n    DonatePage: __WEBPACK_IMPORTED_MODULE_17__DonatePage_vue__[\"a\" /* default */],\n    TokenPage: __WEBPACK_IMPORTED_MODULE_18__TokenPage_vue__[\"a\" /* default */]\n  },\n\n  // component data\n  data: function data() {\n    return {\n      refid: '12268078',\n      title: 'Binance Watch',\n      optKey: 'app_options_data',\n      options: __WEBPACK_IMPORTED_MODULE_0__configs_options__[\"a\" /* default */],\n      watching: false,\n      // app data\n      priceList: [],\n      priceData: [],\n      assetsList: [],\n      historyData: [],\n      alarmsData: {},\n      newsData: {},\n      coinsData: {},\n      // page and modal related\n      mainComp: '',\n      modalComp: '',\n      modalData: {},\n      // socket related data\n      socketStatus: 0, // ( 0: off, 1: wait, 2: on )\n      socketStart: 0,\n      socketInt: null,\n      socketReconnect: false,\n      socketTime: '',\n      // page scroll data\n      scrollDir: '',\n      scrollPos: 0\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // merge new options and save\n    setOptions: function setOptions(options) {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.options = __WEBPACK_IMPORTED_MODULE_6__modules_utils___default.a.deepMerge({}, _this.options, options);\n        var a = _this.options.audio;\n\n        _this.$ajax.setOptions({ proxy: _this.options.proxy });\n        _this.$notify.setOptions({ soundEnabled: a.enabled, soundVolume: a.volume, soundFile: a.file });\n        _this.$store.setData(_this.optKey, _this.options);\n      }, 100);\n    },\n\n\n    // load saved options data from local store\n    loadOptions: function loadOptions() {\n      var options = this.$store.getData(this.optKey);\n      var a = this.options.audio;\n\n      this.options = __WEBPACK_IMPORTED_MODULE_6__modules_utils___default.a.deepMerge({}, this.options, options);\n      this.$ajax.setOptions({ proxy: this.options.proxy });\n      this.$notify.setOptions({ soundEnabled: a.enabled, soundVolume: a.volume, soundFile: a.file });\n    },\n\n\n    // set loaded news data from somewhere\n    updateNewsData: function updateNewsData(data) {\n      this.newsData = Object.assign({}, this.newsData, data);\n    },\n\n\n    // set a url hash route\n    setRoute: function setRoute(route) {\n      this.$router.setRoute(route);\n    },\n\n\n    // setup app routes\n    setupRoutes: function setupRoutes() {\n      var _this2 = this;\n\n      // page routes\n      this.$router.on('/', function () {\n        _this2.showPage('TokenList', 'Price List');\n      });\n      this.$router.on('/news', function () {\n        _this2.showPage('NewsPage', 'Latest News');\n      });\n      // modal routes\n      this.$router.on('/history', function () {\n        _this2.showModal('HistoryPage', 'Recent Alert History');\n      });\n      this.$router.on('/alarms', function () {\n        _this2.showModal('AlarmsList', 'Active Price Alarms');\n      });\n      this.$router.on('/about', function () {\n        _this2.showModal('AboutPage', 'About This App');\n      });\n      this.$router.on('/options', function () {\n        _this2.showModal('OptionsPage', 'Options & Settings');\n      });\n      this.$router.on('/donate', function () {\n        _this2.showModal('DonatePage', 'Make a Donation');\n      });\n      // symbol modal route\n      this.$router.on('/symbol/([A-Z]+)', function (symbol) {\n        var d = _this2.priceData.filter(function (p) {\n          return p.symbol === symbol;\n        }).shift();\n        if (d) _this2.showModal('TokenPage', d.pair + ' Info ', d);\n      });\n      // show current route asap\n      setTimeout(function () {\n        _this2.$router.trigger(window.location.hash || '/');\n      }, 400);\n    },\n\n\n    // setup msg queue to go off on a timer\n    setupMsgQueue: function setupMsgQueue() {\n      var _this3 = this;\n\n      __WEBPACK_IMPORTED_MODULE_3__modules_queue___default.a.onBatch(60, function (queue) {\n        var plist = [];\n        plist.push(Object(__WEBPACK_IMPORTED_MODULE_4__modules_mailgun__[\"a\" /* default */])(_this3.$ajax, _this3.options.mailgun, queue));\n        plist.push(Object(__WEBPACK_IMPORTED_MODULE_5__modules_telegram__[\"a\" /* default */])(_this3.$ajax, _this3.options.telegram, queue));\n\n        Promise.all(plist).then(function (msgs) {\n          msgs.forEach(function (msg) {\n            if (msg) _this3.showNotice(msg, 'info');\n          });\n        }).catch(function (err) {\n          if (err) _this3.showNotice(err, 'warning');\n        });\n      });\n    },\n\n\n    // add data to outgoing msg queue\n    addMsgQueue: function addMsgQueue(data) {\n      __WEBPACK_IMPORTED_MODULE_3__modules_queue___default.a.add(data);\n    },\n\n\n    // setup notifications data handler\n    setupNotifications: function setupNotifications() {\n      var _this4 = this;\n\n      this.$notify.permission();\n      this.$notify.loadAlarms();\n      this.$notify.onChange(function (alarms) {\n        _this4.alarmsData = alarms;\n      });\n      this.alarmsData = this.$notify.getAlarms();\n    },\n\n\n    // setup history data handler\n    setupHistoryData: function setupHistoryData() {\n      var _this5 = this;\n\n      this.$history.loadData();\n      this.$history.onChange(function (data) {\n        _this5.historyData = data;\n      });\n      this.historyData = this.$history.getData();\n    },\n\n\n    // setup global event bus handlers\n    setupGlobalHandlers: function setupGlobalHandlers() {\n      this.$bus.on('setOptions', this.setOptions);\n      this.$bus.on('setTitle', this.setTitle);\n      this.$bus.on('setRoute', this.setRoute);\n      this.$bus.on('toggleSocket', this.toggleSocket);\n      this.$bus.on('toggleWatchform', this.toggleWatchform);\n      this.$bus.on('newsData', this.updateNewsData);\n      this.$bus.on('showModal', this.showModal);\n      this.$bus.on('closeModal', this.closeModal);\n      this.$bus.on('showNotice', this.showNotice);\n      this.$bus.on('handleClick', this.handleClick);\n      this.$bus.on('msgQueue', this.addMsgQueue);\n    },\n\n\n    // setup scroller handlers\n    setupScrollHandlers: function setupScrollHandlers() {\n      var _this6 = this;\n\n      this.$bus.on('jumpTo', function (dest, cb) {\n        return _scroller.jumpTo(dest, cb);\n      });\n      _scroller.onChange(function (pos) {\n        _this6.scrollPos = pos;\n      });\n      _scroller.onDown(function (pos) {\n        _this6.scrollDir = 'down';\n      });\n      _scroller.onUp(function (pos) {\n        _this6.scrollDir = 'up';\n      });\n    },\n\n\n    // setup socket handlers\n    setupSocketHandlers: function setupSocketHandlers() {\n      _binance.on('open', this.onSocketOpen);\n      _binance.on('error', this.onSocketError);\n      _binance.on('close', this.onSocketClose);\n    },\n\n\n    // show socket related notifications\n    socketNotify: function socketNotify(message) {\n      if (document.hasFocus()) return;\n      var d = new Date();\n      this.$notify.add('Socket Status', message + ' \\nNow: ' + d.toLocaleString());\n    },\n\n\n    // when socket connection opens\n    onSocketOpen: function onSocketOpen(ws, e) {\n      this.socketStatus = 1;\n      this.socketStart = Date.now();\n      this.socketInt = setInterval(this.priceDataIntervalHandler, 1000);\n      this.showNotice('Socket connection active.', 'success');\n      this.socketNotify('Socket connection is now active.');\n    },\n\n\n    // when socket connection ends\n    onSocketClose: function onSocketClose(ws, e) {\n      var _this7 = this;\n\n      if (this.socketInt) clearInterval(this.socketInt);\n      this.socketStatus = 0;\n      this.socketStart = 0;\n      this.toggleWatchform('stop');\n      this.showNotice('Socket connection closed.', 'warning');\n      this.socketNotify('Socket connection has closed.');\n\n      if (this.socketReconnect) {\n        setTimeout(function () {\n          _this7.toggleSocket(true);\n        }, 5000);\n      }\n    },\n\n\n    // when socket connection ends\n    onSocketError: function onSocketError(ws, e) {\n      if (this.socketInt) clearInterval(this.socketInt);\n      this.socketStatus = 0;\n      this.socketStart = 0;\n      this.showNotice('Socket connection error.', 'warning');\n      this.socketNotify('Socket connection error, check the console for more details.');\n      console.info('Socket-Error:', e.message || e);\n    },\n\n\n    // handle socket connection\n    toggleSocket: function toggleSocket(toggle) {\n      this.socketStatus = 1;\n      this.socketReconnect = toggle;\n\n      if (toggle === true && !this.socketStart) {\n        _binance.getPrices(this.onTickerData);\n      }\n      if (toggle === false && this.socketStart) {\n        _binance.close();\n      }\n    },\n\n\n    // add base asset pair to the list\n    saveAssetPair: function saveAssetPair(asset) {\n      if (!asset || this.assetsList.indexOf(asset) >= 0) return;\n      this.assetsList.push(asset);\n    },\n\n\n    // update pair data inside modals\n    updateModalPairData: function updateModalPairData(pair) {\n      if (!this.modalData || !this.modalData.symbol) return;\n      if (!pair || !pair.symbol || this.modalData.symbol !== pair.symbol) return;\n      this.modalData = pair;\n    },\n\n\n    // updates price data list from socket on an interval\n    priceDataIntervalHandler: function priceDataIntervalHandler() {\n      var _this8 = this;\n\n      var data = [];\n      var total = this.priceList.length;\n      var secs = (Date.now() - this.socketStart) / 1000;\n\n      for (var i = 0; i < total; ++i) {\n        var p = this.priceList[i];\n        p.alarms = this.$notify.alarmsCount(p.symbol);\n\n        if (p.alarms) {\n          this.$notify.checkAlarm(p.symbol, p.close, function (title, info, alertData) {\n            var icon = __WEBPACK_IMPORTED_MODULE_6__modules_utils___default.a.fullUrl(alertData.image);\n            _this8.addMsgQueue({ title: title, info: info, icon: icon });\n            _this8.$history.add(title, info, icon);\n            _this8.$bus.emit('mainMenuAlert');\n          });\n        }\n        this.saveAssetPair(p.asset);\n        this.updateModalPairData(p);\n        data.push(p);\n      }\n      this.socketTime = __WEBPACK_IMPORTED_MODULE_6__modules_utils___default.a.elapsed(secs);\n      this.priceData = data;\n    },\n\n\n    // when live price data is recieved\n    onTickerData: function onTickerData(list) {\n      this.priceList = list;\n      this.socketStatus = 2;\n    },\n\n\n    // control watchform component\n    toggleWatchform: function toggleWatchform(action) {\n      if (!this.$refs.watchform) return;\n      switch (action) {\n        case 'open':\n          return this.$refs.watchform.open();\n        case 'close':\n          return this.$refs.watchform.close();\n        case 'toggle':\n          return this.$refs.watchform.toggle();\n        case 'start':\n          return this.$refs.watchform.startWatch();\n        case 'stop':\n          return this.$refs.watchform.stopWatch();\n      }\n    },\n\n\n    // build page title\n    setTitle: function setTitle(info) {\n      var title = String(info || '').trim();\n      var list = [this.title];\n      if (title) list.unshift(title);\n      document.title = list.join(' | ');\n    },\n\n\n    // handler for click events passed through the event bus\n    handleClick: function handleClick() {\n      var args = Array.from(arguments);\n      var action = args.length ? args.shift() : '';\n      var dest = args.length ? args.shift() : '';\n      var target = args.length ? args.shift() : '_blank';\n\n      if (action === 'scroll') return _scroller.jumpTo(dest);\n      if (action === 'link') return window.open(dest, target);\n      if (action === 'reload') return window.location.reload();\n      if (action === 'return') return window.history.back();\n\n      if (action === 'binance') {\n        var symb = /\\?/g.test(dest) ? '&' : '?';\n        var base = 'https://www.binance.com' + dest + symb + 'ref=' + this.refid;\n        return window.open(base, target);\n      }\n    },\n\n\n    // change visible page component\n    showPage: function showPage(component, title) {\n      title = title || component;\n      this.mainComp = component;\n      this.setTitle(title);\n      this.toggleWatchform('close');\n      this.closeModal();\n    },\n\n\n    // show modal window\n    showModal: function showModal(component, title, data) {\n      if (!this.$refs.modal) return;\n      title = title || component;\n      this.setTitle(title);\n      this.modalComp = component;\n      this.modalData = data;\n      this.$refs.modal.show(title);\n    },\n\n\n    // close modal window, if open\n    closeModal: function closeModal() {\n      if (!this.$refs.modal) return;\n      this.$refs.modal.close();\n    },\n\n\n    // on modal close event\n    modalDone: function modalDone() {\n      this.modalComp = '';\n      this.modalData = {};\n      window.history.back();\n    },\n\n\n    // show css alert\n    showNotice: function showNotice(message, type, timeout) {\n      if (!this.$refs.notify) return;\n      this.$refs.notify.show(message, type, timeout);\n    },\n\n\n    // fetch wordlist files for sentiment analysis\n    fetchSentimentWords: function fetchSentimentWords() {\n      var _this9 = this;\n\n      Array('words').forEach(function (file) {\n        _this9.$ajax.get('public/afinn/' + file + '.json', {\n          type: 'json',\n          proxy: false,\n          done: function done(xhr, status, words) {\n            if ((typeof words === 'undefined' ? 'undefined' : _typeof(words)) !== 'object') return;\n            _this9.$sentiment.merge(words);\n          }\n        });\n      });\n    },\n\n\n    // fetch list of all tokens and their names from API\n    fetchCoinsData: function fetchCoinsData() {\n      var _this10 = this;\n\n      this.$ajax.get('https://coincap.io/map', {\n        type: 'json',\n        proxy: false,\n        done: function done(xhr, status, list) {\n          if (!Array.isArray(list)) return;\n          var data = {};\n          for (var i = 0; i < list.length; ++i) {\n            var token = String(list[i].symbol || '').toUpperCase();\n            var name = String(list[i].name || '').replace(/[^\\w\\.\\-]+/g, ' ').replace(/[\\.]+/g, '.').replace(/[\\-]+/g, '-').replace(/[\\n\\r\\t\\s]+/g, ' ').trim();\n            if (token === 'BCH') token = 'BCC';\n            if (token === 'MIOTA') token = 'IOTA';\n            if (token && name) data[token] = name;\n          }\n          _binance.setNames(data);\n          _this10.coinsData = data;\n        }\n      });\n    }\n  },\n\n  // init app data and handlers\n  beforeMount: function beforeMount() {\n    this.loadOptions();\n    this.setupRoutes();\n    this.setupMsgQueue();\n    this.setupNotifications();\n    this.setupHistoryData();\n    this.setupGlobalHandlers();\n    this.setupSocketHandlers();\n    this.setupScrollHandlers();\n    this.fetchSentimentWords();\n    this.fetchCoinsData();\n  },\n\n\n  // start socket and other external data\n  mounted: function mounted() {\n    this.setTitle();\n    this.toggleSocket(true);\n  },\n\n\n  // cleanup and close connetions\n  destroyed: function destroyed() {\n    this.toggleSocket(false);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Dropdown_vue__ = __webpack_require__(3);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// components\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Dropdown: __WEBPACK_IMPORTED_MODULE_0__Dropdown_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    watching: { type: Boolean, default: false },\n    socketStatus: { type: Number, default: 0 },\n    socketTime: { type: String, default: '' },\n    scrollDir: { type: String, default: '' },\n    scrollPos: { type: Number, default: 0 },\n    priceData: { type: Array, default: [] },\n    historyData: { type: Array, default: [] },\n    alarmsData: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    newsData: { type: Object, default: function _default() {\n        return {};\n      }\n    }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      alertCount: 0\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // check if socket is connected\n    isConnected: function isConnected() {\n      return this.socketStatus > 0 ? true : false;\n    },\n\n\n    // get total number of alerms\n    alarmsCount: function alarmsCount() {\n      var _this = this;\n\n      var count = 0;\n      Object.keys(this.alarmsData).forEach(function (a) {\n        count += _this.alarmsData[a].length;\n      });\n      return count;\n    },\n\n\n    // get a few top tokens to be listed on topbar\n    assetPrices: function assetPrices() {\n      var tokens = /^(BTC|ETH|LTC)$/;\n      var asset = 'USDT';\n      return this.priceData.filter(function (p) {\n        return tokens.test(p.token) && p.asset === asset;\n      });\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // reset bubble alert count\n    resetCount: function resetCount() {\n      this.alertCount = 0;\n    },\n\n\n    // increase bubble alert count\n    increaseCount: function increaseCount() {\n      this.alertCount += 1;\n    },\n\n\n    // toggle socket connection\n    toggleConnection: function toggleConnection() {\n      this.$bus.emit('toggleSocket', !this.isConnected);\n    },\n\n\n    // proxy for settings a route\n    setRoute: function setRoute(route, reset) {\n      this.$bus.emit('setRoute', route);\n      if (reset) this.resetCount();\n    }\n  },\n\n  // component mounted\n  mounted: function mounted() {\n    // used to add the alert bubble to the menu\n    this.$bus.on('mainMenuAlert', this.increaseCount);\n    this.$bus.on('mainMenuReset', this.resetCount);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_viewport__ = __webpack_require__(7);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__["a"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      visible: false,\n      top: true,\n      right: false,\n      bottom: false,\n      left: true\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show dropdown\n    listShow: function listShow(e) {\n      if (!this.visible) {\n        // get position of the trigger and window size\n        var trigger = this.$refs.trigger;\n        var box = trigger.getBoundingClientRect();\n        var posx = box.left + trigger.offsetWidth / 2;\n        var posy = box.top + trigger.offsetHeight / 2;\n        var centerx = __WEBPACK_IMPORTED_MODULE_0__modules_viewport__["a" /* default */].clientWidth() / 2;\n        var centery = __WEBPACK_IMPORTED_MODULE_0__modules_viewport__["a" /* default */].clientHeight() / 2;\n        // menu show position depends on trigger position in relation to window center\n        this.top = posy < centery ? true : false;\n        this.right = posx > centerx ? true : false;\n        this.bottom = posy > centery ? true : false;\n        this.left = posx < centerx ? true : false;\n        this.visible = true;\n      }\n    },\n\n\n    // hide dropdown\n    listHide: function listHide(e) {\n      this.visible = false;\n    },\n\n\n    // detect click outside container\n    _clickOut: function _clickOut(e) {\n      if (!this.$refs.menu.contains(e.target)) {\n        this.listHide(e);\n      }\n    }\n  },\n\n  // comonent mounted\n  mounted: function mounted() {\n    document.addEventListener(\'click\', this._clickOut);\n  },\n\n\n  // comonent destroyed\n  destroyed: function destroyed() {\n    document.removeEventListener(\'click\', this._clickOut);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvRHJvcGRvd24udnVlPzJhYjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVlBOztBQUVBOztBQUVBO0FBQ0EsTUFIQSxrQkFHQTtBQUNBO0FBQ0Esb0JBREE7QUFFQSxlQUZBO0FBR0Esa0JBSEE7QUFJQSxtQkFKQTtBQUtBO0FBTEE7QUFPQSxHQVhBOzs7QUFhQTtBQUNBOztBQUVBO0FBQ0EsWUFIQSxvQkFHQSxDQUhBLEVBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQW5CQTs7O0FBcUJBO0FBQ0EsWUF0QkEsb0JBc0JBLENBdEJBLEVBc0JBO0FBQ0E7QUFDQSxLQXhCQTs7O0FBMEJBO0FBQ0EsYUEzQkEscUJBMkJBLENBM0JBLEVBMkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEvQkEsR0FkQTs7QUFpREE7QUFDQSxTQWxEQSxxQkFrREE7QUFDQTtBQUNBLEdBcERBOzs7QUFzREE7QUFDQSxXQXZEQSx1QkF1REE7QUFDQTtBQUNBO0FBekRBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIHJlZj1cIm1lbnVcIiBAbW91c2VsZWF2ZT1cImxpc3RIaWRlXCI+XG4gICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duLXRyaWdnZXIgY2xpY2thYmxlXCIgcmVmPVwidHJpZ2dlclwiIEBjbGljaz1cImxpc3RTaG93XCI+XG4gICAgICA8c2xvdCBuYW1lPVwidHJpZ2dlclwiPjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbGlzdFwiIDpjbGFzcz1cInsgJ3Zpc2libGUnOiB2aXNpYmxlLCAndG9wJzogdG9wLCAncmlnaHQnOiByaWdodCwgJ2JvdHRvbSc6IGJvdHRvbSwgJ2xlZnQnOiBsZWZ0IH1cIiBAY2xpY2suc3RvcD5cbiAgICAgIDxzbG90IG5hbWU9XCJsaXN0XCI+PC9zbG90PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVmlld3BvcnQgZnJvbSAnLi4vbW9kdWxlcy92aWV3cG9ydCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb21wb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIHRvcDogdHJ1ZSxcbiAgICAgIHJpZ2h0OiBmYWxzZSxcbiAgICAgIGJvdHRvbTogZmFsc2UsXG4gICAgICBsZWZ0OiB0cnVlLFxuICAgIH1cbiAgfSxcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBtZXRob2RzOiB7XG5cbiAgICAvLyBzaG93IGRyb3Bkb3duXG4gICAgbGlzdFNob3coIGUgKSB7XG4gICAgICBpZiAoICF0aGlzLnZpc2libGUgKSB7XG4gICAgICAgIC8vIGdldCBwb3NpdGlvbiBvZiB0aGUgdHJpZ2dlciBhbmQgd2luZG93IHNpemVcbiAgICAgICAgbGV0IHRyaWdnZXIgID0gdGhpcy4kcmVmcy50cmlnZ2VyO1xuICAgICAgICBsZXQgYm94ICAgICAgPSB0cmlnZ2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBsZXQgcG9zeCAgICAgPSBib3gubGVmdCArICggdHJpZ2dlci5vZmZzZXRXaWR0aCAvIDIgKTtcbiAgICAgICAgbGV0IHBvc3kgICAgID0gYm94LnRvcCArICggdHJpZ2dlci5vZmZzZXRIZWlnaHQgLyAyICk7XG4gICAgICAgIGxldCBjZW50ZXJ4ICA9IFZpZXdwb3J0LmNsaWVudFdpZHRoKCkgLyAyO1xuICAgICAgICBsZXQgY2VudGVyeSAgPSBWaWV3cG9ydC5jbGllbnRIZWlnaHQoKSAvIDI7XG4gICAgICAgIC8vIG1lbnUgc2hvdyBwb3NpdGlvbiBkZXBlbmRzIG9uIHRyaWdnZXIgcG9zaXRpb24gaW4gcmVsYXRpb24gdG8gd2luZG93IGNlbnRlclxuICAgICAgICB0aGlzLnRvcCAgICAgPSAoIHBvc3kgPCBjZW50ZXJ5ICkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHRoaXMucmlnaHQgICA9ICggcG9zeCA+IGNlbnRlcnggKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5ib3R0b20gID0gKCBwb3N5ID4gY2VudGVyeSApID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB0aGlzLmxlZnQgICAgPSAoIHBvc3ggPCBjZW50ZXJ4ICkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIGhpZGUgZHJvcGRvd25cbiAgICBsaXN0SGlkZSggZSApIHtcbiAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBkZXRlY3QgY2xpY2sgb3V0c2lkZSBjb250YWluZXJcbiAgICBfY2xpY2tPdXQoIGUgKSB7XG4gICAgICBpZiAoICF0aGlzLiRyZWZzLm1lbnUuY29udGFpbnMoIGUudGFyZ2V0ICkgKSB7XG4gICAgICAgIHRoaXMubGlzdEhpZGUoIGUgKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gIH0sXG5cbiAgLy8gY29tb25lbnQgbW91bnRlZFxuICBtb3VudGVkKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuX2NsaWNrT3V0ICk7XG4gIH0sXG5cbiAgLy8gY29tb25lbnQgZGVzdHJveWVkXG4gIGRlc3Ryb3llZCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCB0aGlzLl9jbGlja091dCApO1xuICB9XG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9J3Njc3MnPlxuXG5Aa2V5ZnJhbWVzIGRyb3BTbGlkZVVwIHtcbiAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSggMjBweCApOyBvcGFjaXR5OiAwLjAwMDAwMDAwMTsgfVxuICAxMDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAwICk7IG9wYWNpdHk6IDE7IH1cbn1cbkBrZXlmcmFtZXMgZHJvcFNsaWRlRG93biB7XG4gICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIC0yMHB4ICk7IG9wYWNpdHk6IDAuMDAwMDAwMDAxOyB9XG4gIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIDAgKTsgb3BhY2l0eTogMTsgfVxufVxuXG4uZHJvcGRvd24tbWVudSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAmID4gLmRyb3Bkb3duLXRyaWdnZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cblxuICAmID4gLmRyb3Bkb3duLWxpc3Qge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgb3BhY2l0eTogMC4wMDAwMDAwMDE7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6ICRwYWRTcGFjZSAwO1xuICAgIG1pbi13aWR0aDogMjAwcHg7XG4gICAgbWF4LXdpZHRoOiA0MDBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGVuKCAkY29sb3JEb2N1bWVudCwgOCUgKTtcbiAgICBib3JkZXItcmFkaXVzOiAkbGluZUpvaW47XG4gICAgYm94LXNoYWRvdzogJHNoYWRvd0JvbGQ7XG4gICAgei1pbmRleDogKCAkemluZGV4TW9kYWxzICsgMiApO1xuXG4gICAgJi5sZWZ0IHsgLy8gc2hvdyBmcm9tIGxlZnRcbiAgICAgIGxlZnQ6IDA7XG4gICAgICByaWdodDogYXV0bztcbiAgICB9XG4gICAgJi5yaWdodCB7IC8vIHNob3cgZnJvbSByaWdodFxuICAgICAgbGVmdDogYXV0bztcbiAgICAgIHJpZ2h0OiAwO1xuICAgIH1cbiAgICAmLnRvcCB7IC8vIHNob3cgZnJvbSB0b3BcbiAgICAgIHRvcDogNTAlO1xuICAgICAgYm90dG9tOiBhdXRvO1xuICAgICAgYW5pbWF0aW9uOiBkcm9wU2xpZGVVcCAkZnhTcGVlZCAkZnhFYXNlQm91bmNlIGZvcndhcmRzO1xuICAgIH1cbiAgICAmLmJvdHRvbSB7IC8vIHNob3cgZnJvbSBib3R0b21cbiAgICAgIHRvcDogYXV0bztcbiAgICAgIGJvdHRvbTogNTAlO1xuICAgICAgYW5pbWF0aW9uOiBkcm9wU2xpZGVEb3duICRmeFNwZWVkICRmeEVhc2VCb3VuY2UgZm9yd2FyZHM7XG4gICAgfVxuICAgICYudmlzaWJsZSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAmID4gdWwge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgcGFkZGluZzogMDtcblxuICAgICAgLy8gZHJvcGRvd24gbGlzdCBpdGVtXG4gICAgICAmID4gbGkge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAoICRwYWRTcGFjZSAvIDIgKSAoICRwYWRTcGFjZSAqIDEuNiApO1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuXG4gICAgICAgICYuY2xpY2thYmxlIHtcbiAgICAgICAgICBib3JkZXItdG9wOiAkbGluZVdpZHRoICRsaW5lU3R5bGUgJGxpbmVDb2xvcjtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCAwLCAwLCAwLCAwICk7XG5cbiAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoIDAsIDAsIDAsIDAuMSApO1xuICAgICAgICAgIH1cbiAgICAgICAgICAmOmZpcnN0LW9mLXR5cGUge1xuICAgICAgICAgICAgYm9yZGVyLXRvcDogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCB7XG4gICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgbGluZS1oZWlnaHQ6IDJlbTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL0Ryb3Bkb3duLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// modal component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      title: '',\n      visible: false,\n      under: true,\n      sto: null\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show the modal window\n    show: function show(title) {\n      if (this.visible) return;\n      this.$emit('onShow');\n      this.title = title || 'Modal Window';\n      this.under = false;\n      this.visible = true;\n    },\n\n\n    // close the modal\n    close: function close(e) {\n      if (!this.visible) return;\n      if (this.sto) clearTimeout(this.sto);\n      this.sto = setTimeout(this.onDone, 400);\n      this.$emit('onClose', e);\n      this.visible = false;\n    },\n\n\n    // when the modal is done animating out\n    onDone: function onDone(e) {\n      if (this.under) return;\n      this.$emit('onDone', e);\n      this.under = true;\n    },\n\n\n    // check for escape key\n    onKey: function onKey(e) {\n      if (e.keyCode !== 27) return;\n      this.close(e);\n    }\n  },\n\n  // on destroyed\n  destroyed: function destroyed() {\n    document.removeEventListener('keydown', this.onKey);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlPzAwODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7QUFDQTs7QUFFQTtBQUNBLE1BSEEsa0JBR0E7QUFDQTtBQUNBLGVBREE7QUFFQSxvQkFGQTtBQUdBLGlCQUhBO0FBSUE7QUFKQTtBQU1BLEdBVkE7OztBQVlBO0FBQ0E7O0FBRUE7QUFDQSxRQUhBLGdCQUdBLEtBSEEsRUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQVRBOzs7QUFXQTtBQUNBLFNBWkEsaUJBWUEsQ0FaQSxFQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBbEJBOzs7QUFvQkE7QUFDQSxVQXJCQSxrQkFxQkEsQ0FyQkEsRUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQXpCQTs7O0FBMkJBO0FBQ0EsU0E1QkEsaUJBNEJBLENBNUJBLEVBNEJBO0FBQ0E7QUFDQTtBQUNBO0FBL0JBLEdBYkE7O0FBK0NBO0FBQ0EsV0FoREEsdUJBZ0RBO0FBQ0E7QUFDQTtBQWxEQSIsImZpbGUiOiIxMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLW92ZXJsYXlcIiA6Y2xhc3M9XCJ7ICd2aXNpYmxlJzogdmlzaWJsZSwgJ3VuZGVyJzogdW5kZXIgfVwiIEBjbGljay5zdG9wPVwiY2xvc2VcIj5cbiAgICA8c2VjdGlvbiBjbGFzcz1cIm1vZGFsLWNvbnRhaW5lclwiIHJlZj1cImNvbnRhaW5lclwiIEBjbGljay5zdG9wPlxuICAgICAgPGhlYWRlciBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtdGl0bGUgdGV4dC1jbGlwXCI+e3sgdGl0bGUgfX08L2Rpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cIm1vZGFsLWNsb3NlIGljb24tY2xvc2VcIiBAY2xpY2suc3RvcD1cImNsb3NlXCI+PC9idXR0b24+XG4gICAgICA8L2hlYWRlcj5cbiAgICAgIDxtYWluIGNsYXNzPVwibW9kYWwtYm9keVwiPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICA8L21haW4+XG4gICAgPC9zZWN0aW9uPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4vLyBtb2RhbCBjb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb21wb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0aXRsZTogJycsXG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIHVuZGVyOiB0cnVlLFxuICAgICAgc3RvOiBudWxsLFxuICAgIH1cbiAgfSxcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBtZXRob2RzOiB7XG5cbiAgICAvLyBzaG93IHRoZSBtb2RhbCB3aW5kb3dcbiAgICBzaG93KCB0aXRsZSApIHtcbiAgICAgIGlmICggdGhpcy52aXNpYmxlICkgcmV0dXJuO1xuICAgICAgdGhpcy4kZW1pdCggJ29uU2hvdycgKTtcbiAgICAgIHRoaXMudGl0bGUgPSB0aXRsZSB8fCAnTW9kYWwgV2luZG93JztcbiAgICAgIHRoaXMudW5kZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgfSxcblxuICAgIC8vIGNsb3NlIHRoZSBtb2RhbFxuICAgIGNsb3NlKCBlICkge1xuICAgICAgaWYgKCAhdGhpcy52aXNpYmxlICkgcmV0dXJuO1xuICAgICAgaWYgKCB0aGlzLnN0byApIGNsZWFyVGltZW91dCggdGhpcy5zdG8gKTtcbiAgICAgIHRoaXMuc3RvID0gc2V0VGltZW91dCggdGhpcy5vbkRvbmUsIDQwMCApO1xuICAgICAgdGhpcy4kZW1pdCggJ29uQ2xvc2UnLCBlICk7XG4gICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gd2hlbiB0aGUgbW9kYWwgaXMgZG9uZSBhbmltYXRpbmcgb3V0XG4gICAgb25Eb25lKCBlICkge1xuICAgICAgaWYgKCB0aGlzLnVuZGVyICkgcmV0dXJuO1xuICAgICAgdGhpcy4kZW1pdCggJ29uRG9uZScsIGUgKTtcbiAgICAgIHRoaXMudW5kZXIgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvLyBjaGVjayBmb3IgZXNjYXBlIGtleVxuICAgIG9uS2V5KCBlICkge1xuICAgICAgaWYgKCBlLmtleUNvZGUgIT09IDI3ICkgcmV0dXJuO1xuICAgICAgdGhpcy5jbG9zZSggZSApO1xuICAgIH0sXG4gIH0sXG5cbiAgLy8gb24gZGVzdHJveWVkXG4gIGRlc3Ryb3llZCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMub25LZXkgKTtcbiAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nc2Nzcyc+XG4vLyBtb2RhbCBvdmVybGF5XG4ubW9kYWwtb3ZlcmxheSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGxlZnQ6IDA7XG4gIHRvcDogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yT3ZlcmxheTtcbiAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gIG9wYWNpdHk6IDA7XG4gIHotaW5kZXg6ICggJHppbmRleE1vZGFscyAtIDEgKTtcblxuICAubW9kYWwtY29udGFpbmVyIHtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICB3aWR0aDogY2FsYyggMTAwJSAtICggI3skcGFkU3BhY2V9ICogMiApICk7XG4gICAgbWF4LXdpZHRoOiBjYWxjKCAjeyRzaXplTWVkaXVtfSArICggI3skcGFkU3BhY2V9ICogMiApICk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yRG9jdW1lbnRMaWdodDtcbiAgICBib3JkZXItcmFkaXVzOiAkbGluZUpvaW47XG4gICAgYm94LXNoYWRvdzogJHNoYWRvd0JvbGQ7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSggMC41ICk7XG5cbiAgICAubW9kYWwtaGVhZGVyIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgYWxpZ24tY29udGVudDogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgcGFkZGluZzogJHBhZFNwYWNlO1xuICAgICAgbGluZS1oZWlnaHQ6IDEuMmVtO1xuICAgICAgYm9yZGVyLWJvdHRvbTogJGxpbmVXaWR0aCAkbGluZVN0eWxlICRsaW5lQ29sb3I7XG5cbiAgICAgIC5tb2RhbC10aXRsZSwgLm1vZGFsLWNsb3NlIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBmb250LXNpemU6IDEyMCU7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICBsaW5lLWhlaWdodDogMS4yZW07XG4gICAgICB9XG5cbiAgICAgIC5tb2RhbC10aXRsZSB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG9wYWNpdHk6IDAuNjtcbiAgICAgIH1cbiAgICAgIC5tb2RhbC1jbG9zZSB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgY29sb3I6ICRjb2xvckJyaWdodDtcbiAgICAgICAgb3BhY2l0eTogMTtcblxuICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAubW9kYWwtYm9keSB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgbWFyZ2luOiAkcGFkU3BhY2UgMDtcbiAgICAgIHBhZGRpbmc6IDAgJHBhZFNwYWNlO1xuICAgICAgbWluLWhlaWdodDogMTAwcHg7XG4gICAgICBtYXgtaGVpZ2h0OiBjYWxjKCAxMDB2aCAtIDE1MHB4ICk7XG4gICAgfVxuICB9XG59XG5cbi5tb2RhbC1vdmVybGF5LnZpc2libGUge1xuICBvcGFjaXR5OiAxO1xuXG4gIC5tb2RhbC1jb250YWluZXIge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoIDEgKTtcbiAgfVxufVxuXG4ubW9kYWwtb3ZlcmxheS51bmRlciB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB6LWluZGV4OiAkemluZGV4VW5kZXI7XG59XG5cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      alerts: []\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show new alert, types: (success, error, warning, info)\n    show: function show(message, type, timeout) {\n      var _this = this;\n\n      timeout = !timeout && type !== 'error' ? 5000 : timeout;\n\n      var alert = {\n        id: 'alert-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5),\n        message: message || 'No message available.',\n        type: type || 'info',\n        closed: false\n      };\n      if (timeout && typeof timeout === 'number') {\n        setTimeout(function () {\n          _this.close(alert.id);\n        }, timeout);\n      }\n      this.$emit('onShow', alert);\n      this.alerts.push(alert);\n    },\n\n\n    // close alert by id\n    close: function close(id) {\n      var _this2 = this;\n\n      var _loop = function _loop(i) {\n        var alert = _this2.alerts[i];\n        if (alert.id === id && !alert.closed) {\n          _this2.$emit('onClose', alert);\n          _this2.alerts[i].closed = true; // animate out, then...\n          setTimeout(function () {\n            _this2.alerts.splice(i, 1);\n          }, 500);\n        }\n      };\n\n      for (var i = 0; i < this.alerts.length; ++i) {\n        _loop(i);\n      }\n    },\n\n\n    // alias\n    info: function info(message, timeout) {\n      this.show(message, 'info', timeout);\n    },\n\n\n    // alias\n    success: function success(message, timeout) {\n      this.show(message, 'success', timeout);\n    },\n\n\n    // alias\n    warning: function warning(message, timeout) {\n      this.show(message, 'warning', timeout);\n    },\n\n\n    // alias\n    error: function error(message, timeout) {\n      this.show(message, 'error', timeout);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTm90aWZ5LnZ1ZT83OWI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFhQTs7QUFFQTtBQUNBLE1BSEEsa0JBR0E7QUFDQTtBQUNBO0FBREE7QUFHQSxHQVBBOzs7QUFTQTtBQUNBOztBQUVBO0FBQ0EsUUFIQSxnQkFHQSxPQUhBLEVBR0EsSUFIQSxFQUdBLE9BSEEsRUFHQTtBQUFBOztBQUNBOztBQUVBO0FBQ0Esc0ZBREE7QUFFQSxtREFGQTtBQUdBLDRCQUhBO0FBSUE7QUFKQTtBQU1BO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FqQkE7OztBQW1CQTtBQUNBLFNBcEJBLGlCQW9CQSxFQXBCQSxFQW9CQTtBQUFBOztBQUFBLGlDQUNBLENBREE7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FGQSxDQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFQQTs7QUFDQTtBQUFBO0FBT0E7QUFDQSxLQTdCQTs7O0FBK0JBO0FBQ0EsUUFoQ0EsZ0JBZ0NBLE9BaENBLEVBZ0NBLE9BaENBLEVBZ0NBO0FBQ0E7QUFDQSxLQWxDQTs7O0FBb0NBO0FBQ0EsV0FyQ0EsbUJBcUNBLE9BckNBLEVBcUNBLE9BckNBLEVBcUNBO0FBQ0E7QUFDQSxLQXZDQTs7O0FBeUNBO0FBQ0EsV0ExQ0EsbUJBMENBLE9BMUNBLEVBMENBLE9BMUNBLEVBMENBO0FBQ0E7QUFDQSxLQTVDQTs7O0FBOENBO0FBQ0EsU0EvQ0EsaUJBK0NBLE9BL0NBLEVBK0NBLE9BL0NBLEVBK0NBO0FBQ0E7QUFDQTtBQWpEQTtBQVZBIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwibm90aWZ5LXdyYXBcIj5cbiAgICA8ZGl2IGNsYXNzPVwibm90aWZ5LWFsZXJ0XCJcbiAgICAgIHYtZm9yPVwiYWxlcnQgaW4gYWxlcnRzXCJcbiAgICAgIDpjbGFzcz1cIlsgJ25vdGlmeS0nICsgYWxlcnQudHlwZSwgeyAnbm90aWZ5LWNsb3NlZCc6IGFsZXJ0LmNsb3NlZCB9IF1cIlxuICAgICAgOmtleT1cImFsZXJ0LmlkXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwibm90aWZ5LW1lc3NhZ2VcIj57eyBhbGVydC5tZXNzYWdlIH19PC9zcGFuPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwibm90aWZ5LWNsb3NlIGljb24tY2xvc2VcIiBAY2xpY2suc3RvcD1cImNsb3NlKCBhbGVydC5pZCApXCI+PC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb21wb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGVydHM6IFtdLFxuICAgIH1cbiAgfSxcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBtZXRob2RzOiB7XG5cbiAgICAvLyBzaG93IG5ldyBhbGVydCwgdHlwZXM6IChzdWNjZXNzLCBlcnJvciwgd2FybmluZywgaW5mbylcbiAgICBzaG93KCBtZXNzYWdlLCB0eXBlLCB0aW1lb3V0ICkge1xuICAgICAgdGltZW91dCA9ICggIXRpbWVvdXQgJiYgdHlwZSAhPT0gJ2Vycm9yJyApID8gNTAwMCA6IHRpbWVvdXQ7XG5cbiAgICAgIGxldCBhbGVydCA9IHtcbiAgICAgICAgaWQ6ICdhbGVydC0nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZyggMzYgKS5yZXBsYWNlKCAvW15hLXpdKy9nLCAnJyApLnN1YnN0ciggMCwgNSApLFxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlIHx8ICdObyBtZXNzYWdlIGF2YWlsYWJsZS4nLFxuICAgICAgICB0eXBlOiB0eXBlIHx8ICdpbmZvJyxcbiAgICAgICAgY2xvc2VkOiBmYWxzZSxcbiAgICAgIH07XG4gICAgICBpZiAoIHRpbWVvdXQgJiYgdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInICkge1xuICAgICAgICBzZXRUaW1lb3V0KCAoKSA9PiB7IHRoaXMuY2xvc2UoIGFsZXJ0LmlkICk7IH0sIHRpbWVvdXQgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVtaXQoICdvblNob3cnLCBhbGVydCApO1xuICAgICAgdGhpcy5hbGVydHMucHVzaCggYWxlcnQgKTtcbiAgICB9LFxuXG4gICAgLy8gY2xvc2UgYWxlcnQgYnkgaWRcbiAgICBjbG9zZSggaWQgKSB7XG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmFsZXJ0cy5sZW5ndGg7ICsraSApIHtcbiAgICAgICAgbGV0IGFsZXJ0ID0gdGhpcy5hbGVydHNbIGkgXTtcbiAgICAgICAgaWYgKCBhbGVydC5pZCA9PT0gaWQgJiYgIWFsZXJ0LmNsb3NlZCApIHtcbiAgICAgICAgICB0aGlzLiRlbWl0KCAnb25DbG9zZScsIGFsZXJ0ICk7XG4gICAgICAgICAgdGhpcy5hbGVydHNbIGkgXS5jbG9zZWQgPSB0cnVlOyAvLyBhbmltYXRlIG91dCwgdGhlbi4uLlxuICAgICAgICAgIHNldFRpbWVvdXQoICgpID0+IHsgdGhpcy5hbGVydHMuc3BsaWNlKCBpLCAxICk7IH0sIDUwMCApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgaW5mbyggbWVzc2FnZSwgdGltZW91dCApIHtcbiAgICAgIHRoaXMuc2hvdyggbWVzc2FnZSwgJ2luZm8nLCB0aW1lb3V0ICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgc3VjY2VzcyggbWVzc2FnZSwgdGltZW91dCApIHtcbiAgICAgIHRoaXMuc2hvdyggbWVzc2FnZSwgJ3N1Y2Nlc3MnLCB0aW1lb3V0ICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgd2FybmluZyggbWVzc2FnZSwgdGltZW91dCApIHtcbiAgICAgIHRoaXMuc2hvdyggbWVzc2FnZSwgJ3dhcm5pbmcnLCB0aW1lb3V0ICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgZXJyb3IoIG1lc3NhZ2UsIHRpbWVvdXQgKSB7XG4gICAgICB0aGlzLnNob3coIG1lc3NhZ2UsICdlcnJvcicsIHRpbWVvdXQgKTtcbiAgICB9LFxuXG4gIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9J3Njc3MnPlxuXG5Aa2V5ZnJhbWVzIG5vdGlmeVNob3cge1xuICAgIDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKCAyMHB4ICkgc2NhbGUoIDAuOCApOyBvcGFjaXR5OiAwOyB9XG4gIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoIDAgKSBzY2FsZSggMSApOyBvcGFjaXR5OiAxOyB9XG59XG5Aa2V5ZnJhbWVzIG5vdGlmeVJlbW92ZSB7XG4gICAgMCUgeyB0cmFuc2Zvcm06IHNjYWxlKCAxICk7IG9wYWNpdHk6IDE7IH1cbiAgMTAwJSB7IHRyYW5zZm9ybTogc2NhbGUoIDAuOCApOyBvcGFjaXR5OiAwOyB9XG59XG5cbi5ub3RpZnktd3JhcCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAkcGFkU3BhY2U7XG4gIGxlZnQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgdHJhbnNpdGlvbjogbm9uZTtcbiAgei1pbmRleDogJHppbmRleEFsZXJ0cztcblxuICAubm90aWZ5LWFsZXJ0IHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgbWFyZ2luOiAwIDAgJHBhZFNwYWNlIDA7XG4gICAgcGFkZGluZzogJHBhZFNwYWNlIDJlbTtcbiAgICBsaW5lLWhlaWdodDogMS4yZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yRGVmYXVsdDtcbiAgICBjb2xvcjogJGNvbG9yRGVmYXVsdFRleHQ7XG4gICAgQGluY2x1ZGUgYm9yZGVyQWNjZW50O1xuICAgIGJvcmRlci1yYWRpdXM6ICRsaW5lSm9pbjtcbiAgICBib3gtc2hhZG93OiAkc2hhZG93Qm9sZDtcbiAgICBhbmltYXRpb246IG5vdGlmeVNob3cgJGZ4U3BlZWQgJGZ4RWFzZUJvdW5jZSBmb3J3YXJkcztcblxuICAgIEBtZWRpYSAjeyRzY3JlZW5NZWRpdW19IHtcbiAgICAgIHdpZHRoOiA2MDBweDtcbiAgICAgIG1hcmdpbjogMCBhdXRvICRwYWRTcGFjZSBhdXRvO1xuICAgIH1cblxuICAgICYubm90aWZ5LWNsb3NlZCB7XG4gICAgICBhbmltYXRpb246IG5vdGlmeVJlbW92ZSAkZnhTcGVlZCAkZnhFYXNlIGZvcndhcmRzO1xuICAgIH1cblxuICAgICYubm90aWZ5LXN1Y2Nlc3Mge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yU3VjY2VzcztcbiAgICAgIGNvbG9yOiAkY29sb3JTdWNjZXNzVGV4dDtcbiAgICB9XG4gICAgJi5ub3RpZnktd2FybmluZyB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JXYXJuaW5nO1xuICAgICAgY29sb3I6ICRjb2xvcldhcm5pbmdUZXh0O1xuICAgIH1cbiAgICAmLm5vdGlmeS1lcnJvciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JEYW5nZXI7XG4gICAgICBjb2xvcjogJGNvbG9yRGFuZ2VyVGV4dDtcbiAgICB9XG4gICAgJi5ub3RpZnktaW5mbyB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JJbmZvO1xuICAgICAgY29sb3I6ICRjb2xvckluZm9UZXh0O1xuICAgIH1cblxuICAgIC5ub3RpZnktbWVzc2FnZSB7XG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIH1cblxuICAgIC5ub3RpZnktY2xvc2Uge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgdG9wOiAtMTBweDtcbiAgICAgIHJpZ2h0OiAtMTBweDtcbiAgICAgIHdpZHRoOiAyZW07XG4gICAgICBsaW5lLWhlaWdodDogMWVtO1xuICAgICAgcGFkZGluZzogMC41ZW07XG4gICAgICBjb2xvcjogZGFya2VuKCAkY29sb3JCcmlnaHQsIDYwJSApO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yQnJpZ2h0O1xuICAgICAgYm9yZGVyLXJhZGl1czogMTAwcHg7XG4gICAgICBib3gtc2hhZG93OiAkc2hhZG93UGFwZXI7XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZW4oICRjb2xvckJyaWdodCwgMTAlICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvTm90aWZ5LnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__configs_presets__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__modules_utils__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// modules\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    options: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    socketStatus: { type: Number, default: 0, required: false },\n    scrollDir: { type: String, default: '', required: false },\n    scrollPos: { type: Number, default: 0, required: false },\n    assetsList: { type: Array, default: [], required: false },\n    priceData: { type: Array, default: [], required: true }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      // display\n      visible: false,\n      under: true,\n      closeSto: null,\n      // price watch\n      active: false,\n      watchSto: null,\n      timerSto: null,\n      start: 0,\n      elapsed: '',\n      snapshot: {},\n      // watchform options\n      watchPresets: __WEBPACK_IMPORTED_MODULE_0__configs_presets__[\"a\" /* default */],\n      watchOptions: {\n        asset: 'BTC', // asset pair\n        priceType: 'change', // change, gain, loss\n        priceChange: '2', // change percent\n        priceCheck: 'below', // above, below\n        price: '', // custom price limit\n        volumeType: 'gain', // change, gain, loss\n        volumeChange: '2', // change percent\n        volumeCheck: 'above', // above, below\n        volume: '', // custom volume limit\n        timeCheck: 'less', // more, less\n        timeLimit: '30', // limit change by time (mins)\n        filterType: 'deny', // deny, allow\n        filterText: '' // csv tokens str\n      }\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // open from container\n    open: function open(e) {\n      if (this.visible) return;\n      this.$emit('onOpen');\n      this.under = false;\n      this.visible = true;\n      var elm = this.$refs.watchform;\n      var box = elm.firstChild.getBoundingClientRect();\n      elm.style.maxHeight = box.height + 'px';\n    },\n\n\n    // close from container\n    close: function close(e) {\n      if (!this.visible) return;\n      if (this.closeSto) clearTimeout(this.closeSto);\n      this.$emit('onClose', e);\n      this.closeSto = setTimeout(this.onDone, 400);\n      this.$refs.watchform.style.maxHeight = '0px';\n      this.visible = false;\n    },\n\n\n    // toggle open/close\n    toggle: function toggle(e) {\n      if (this.visible) {\n        this.close(e);\n      } else {\n        this.open(e);\n      }\n    },\n\n\n    // when the form is done animating out\n    onDone: function onDone(e) {\n      if (this.under) return;\n      this.$emit('onDone', e);\n      this.under = true;\n    },\n\n\n    // only allow numbers for some form inputs\n    numInput: function numInput(e) {\n      this.watchOptions.price = String(this.watchOptions.price).replace(/[^\\d\\.\\-]+/g, '');\n      this.watchOptions.volume = String(this.watchOptions.volume).replace(/[^\\d\\.\\-]+/g, '');\n    },\n\n\n    // compute elapsed time for price watch\n    computeWatchTime: function computeWatchTime() {\n      var seconds = (Date.now() - this.start) / 1000;\n      var elapsed = __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.elapsed(seconds);\n      this.elapsed = elapsed ? elapsed : '0s';\n    },\n\n\n    // add a preset\n    addPreset: function addPreset(name, options) {\n      if (!name || this.watchPresets.filter(function (p) {\n        return p.name === name;\n      }).length) return;\n      options = Object.assign({}, this.watchOptions, options);\n      this.watchPresets.push({ name: name, options: options });\n    },\n\n\n    // remove preset\n    removePreset: function removePreset(name) {\n      if (!name) return;\n      this.watchPresets = this.watchPresets.filter(function (p) {\n        return p.name !== name;\n      });\n    },\n\n\n    // apply a preset\n    applyPreset: function applyPreset(name) {\n      var preset = name ? this.watchPresets.filter(function (p) {\n        return p.name === name;\n      }).shift() : null;\n      if (preset) {\n        this.watchOptions = Object.assign(this.watchOptions, preset.options);\n        this.formChange();\n      }\n    },\n\n\n    // watch tick handler\n    onWatch: function onWatch() {\n      this.computeWatchTime();\n      this.checkPrices();\n    },\n\n\n    // start price watch\n    startWatch: function startWatch() {\n      if (this.active) return;\n      if (this.socketStatus !== 2) return this.$bus.emit('showNotice', 'Socket connection is not active.', 'warning');\n      if (this.watchSto) clearInterval(this.watchSto);\n\n      this.start = Date.now();\n      this.watchSto = setInterval(this.onWatch, 1000);\n      this.active = true;\n      this.buildSnapshot();\n      this.onWatch();\n\n      this.$bus.emit('showNotice', 'Price watch is now active.', 'success');\n      this.$emit('onStartWatch');\n    },\n\n\n    // stop price watch\n    stopWatch: function stopWatch() {\n      if (!this.active) return;\n      if (this.watchSto) clearInterval(this.watchSto);\n\n      this.active = false;\n      this.snapshot = {};\n      this.$notify.flush();\n      this.$bus.emit('showNotice', 'Price watch has stopped.', 'warning');\n      this.$emit('onStopWatch');\n    },\n\n\n    // toggle price watch\n    toggleWatch: function toggleWatch(e) {\n      e && e.preventDefault();\n      if (this.active) {\n        this.stopWatch();\n      } else {\n        this.startWatch();\n      }\n    },\n\n\n    // reset some things when the form is changed while runnig\n    formChange: function formChange(e) {\n      this.buildSnapshot();\n      this.$notify.flush();\n    },\n\n\n    // make a copy of current prices to start comparing against\n    buildSnapshot: function buildSnapshot() {\n      var _this = this;\n\n      var checked = Date.now();\n      this.priceData.forEach(function (p) {\n        var symbol = p.symbol,\n            token = p.token,\n            asset = p.asset,\n            close = p.close,\n            assetVolume = p.assetVolume;\n\n        _this.snapshot[symbol] = { symbol: symbol, token: token, asset: asset, close: close, assetVolume: assetVolume, checked: checked };\n      });\n    },\n\n\n    // compare watch form options against pair data from price list, snapshot, or both\n    checkFormOptions: function checkFormOptions(p) {\n      var asset = String(this.watchOptions.asset || '');\n      var priceCheck = String(this.watchOptions.priceCheck || '');\n      var price = parseFloat(this.watchOptions.price) || 0;\n      var volumeCheck = String(this.watchOptions.volumeCheck || '');\n      var volume = parseInt(this.watchOptions.volume) || 0;\n\n      if (asset && p.asset !== asset) return false;\n      if (price && priceCheck === 'above' && p.close < price) return false;\n      if (price && priceCheck === 'below' && p.close > price) return false;\n      if (volume && volumeCheck === 'above' && p.assetVolume < volume) return false;\n      if (volume && volumeCheck === 'below' && p.assetVolume > volume) return false;\n      return true;\n    },\n\n\n    // count total pairs for select option\n    pairsCount: function pairsCount() {\n      var _this2 = this;\n\n      var count = 0;\n      var asset = String(this.watchOptions.asset || '');\n      this.priceData.forEach(function (p) {\n        if (_this2.checkFormOptions(p)) count++;\n      });\n      return __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.noun(count, asset + ' pair', asset + ' pairs');\n    },\n\n\n    // check current prices against snapshot based on options\n    checkPrices: function checkPrices() {\n      var _this3 = this;\n\n      var priceType = String(this.watchOptions.priceType || '');\n      var priceChange = parseFloat(this.watchOptions.priceChange) || 0;\n      var volumeType = String(this.watchOptions.volumeType || '');\n      var volumeChange = parseFloat(this.watchOptions.volumeChange) || 0;\n      var timeCheck = String(this.watchOptions.timeCheck || 'less');\n      var timeLimit = (parseInt(this.watchOptions.timeLimit) || 0) * 60; // convert mins to secs\n      var filterType = String(this.watchOptions.filterType || '');\n      var filterText = String(this.watchOptions.filterText || '');\n      var now = Date.now();\n\n      this.priceData.forEach(function (p) {\n        if (!_this3.snapshot.hasOwnProperty(p.symbol)) return;\n        if (!_this3.checkFormOptions(p)) return;\n\n        // filter token name\n        if (filterText && filterText.length > 1) {\n          var reg = new RegExp('^(' + filterText.trim().split(/[^a-zA-Z]+/g).join('|').toUpperCase() + ')$');\n          if (filterType === 'allow' && !reg.test(p.token)) return;\n          if (filterType === 'deny' && reg.test(p.token)) return;\n        }\n\n        // get snapshot, price and volume change data\n        var s = _this3.snapshot[p.symbol];\n        var pc = __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.percent(p.close, s.close);\n        var vc = __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.percent(p.assetVolume, s.assetVolume);\n        var t = (now - s.checked) / 1000; // secs since last checked\n\n        // nothing to check\n        if (!priceChange && !volumeChange) return;\n\n        // check price change data\n        if (priceChange) {\n          if (priceType === 'gain' && pc.sign === '-') return;\n          if (priceType === 'loss' && pc.sign === '+') return;\n          if (pc.percent < priceChange) return;\n        }\n\n        // check volume change data\n        if (volumeChange) {\n          if (volumeType === 'gain' && vc.sign === '-') return;\n          if (volumeType === 'loss' && vc.sign === '+') return;\n          if (vc.percent < volumeChange) return;\n        }\n\n        // update symbol snapshot data\n        _this3.snapshot[p.symbol].close = p.close;\n        _this3.snapshot[p.symbol].assetVolume = p.assetVolume;\n        _this3.snapshot[p.symbol].checked = now;\n\n        // check time period\n        if (timeCheck && timeLimit) {\n          if (timeCheck === 'less' && t > timeLimit) return;\n          if (timeCheck === 'more' && t < timeLimit) return;\n        }\n\n        // we have a hit, prep notification info\n        var pricePerc = pc.sign + Number(pc.percent).toFixed(2) + '%';\n        var volPerc = vc.sign + Number(vc.percent).toFixed(2) + '%';\n        var elapsed = 'Last ' + __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.elapsed(t);\n        var curPrice = 'Price ' + pc.arrow + ' ' + pricePerc + ' (' + Number(p.close).toFixed(8) + ' ' + p.asset + ')';\n        var curVol = 'Volume ' + vc.arrow + ' ' + volPerc + ' (' + __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.money(p.assetVolume, 0) + ' ' + p.asset + ')';\n        var title = [p.name, '(' + p.pair + ')', p.sign + Number(p.percent).toFixed(2) + '%'].join(' ');\n        var info = [curPrice, curVol, elapsed].join('\\n');\n        var icon = __WEBPACK_IMPORTED_MODULE_1__modules_utils___default.a.fullUrl(p.image);\n\n        // norify, add to history and mail queue\n        _this3.$history.add(title, info, icon);\n        _this3.$notify.add(title, info, icon, function (e) {\n          _this3.$bus.emit('setRoute', p.route);\n        });\n        _this3.$bus.emit('msgQueue', { title: title, info: info, icon: icon });\n        _this3.$bus.emit('mainMenuAlert');\n      });\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__TokenIcon_vue__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Dropdown_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LineChart_vue__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__modules_utils__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// components\n\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Spinner: __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__[\"a\" /* default */], TokenIcon: __WEBPACK_IMPORTED_MODULE_1__TokenIcon_vue__[\"a\" /* default */], Dropdown: __WEBPACK_IMPORTED_MODULE_2__Dropdown_vue__[\"a\" /* default */], LineChart: __WEBPACK_IMPORTED_MODULE_3__LineChart_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    active: { type: Boolean, default: false },\n    options: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    socketStatus: { type: Number, default: 0, required: false },\n    scrollDir: { type: String, default: '', required: false },\n    scrollPos: { type: Number, default: 0, required: false },\n    assetsList: { type: Array, default: [], required: false },\n    priceData: { type: Array, default: [], required: true }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      optKey: 'tokens_sort_options',\n      // filter/sorting/limit options\n      filterAsset: 'USDT',\n      searchToken: '',\n      sortOrder: 'desc',\n      sortBy: 'assetVolume',\n      limitMin: 10,\n      limitMax: 200,\n      limitCount: 50,\n      // filtered list data\n      listCount: 0,\n      listLeft: 0\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // update spinenr based on socket and price data status\n    priceData: function priceData() {\n      if (!this.$refs.spinner) return;\n      if (!this.priceData.length) {\n        if (this.socketStatus === 0) return this.$refs.spinner.error('Socket API not connected');\n        if (this.socketStatus === 1) return this.$refs.spinner.show('Waiting for price data');\n      }\n      this.$refs.spinner.hide();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // get filtered and sorted ticker list for display\n    tickerList: function tickerList() {\n      var _this = this;\n\n      var list = this.priceData.slice(); // copy\n      var limit = parseInt(this.limitCount) | 0;\n\n      // filter by trading asset\n      if (this.filterAsset) {\n        list = list.filter(function (p) {\n          return p.asset === _this.filterAsset;\n        });\n      }\n      // filter by search text\n      if (this.searchToken && this.searchToken.length > 1) {\n        list = __WEBPACK_IMPORTED_MODULE_4__modules_utils___default.a.search(list, 'token', this.searchToken);\n      }\n      // sort list based column and order\n      list = __WEBPACK_IMPORTED_MODULE_4__modules_utils___default.a.sort(list, this.sortBy, this.sortOrder);\n\n      // compute list totals before cutting the list\n      var total = list.length;\n      this.limitMax = total;\n      this.listCount = total;\n      this.listLeft = 0;\n\n      // limit list to a number of entries\n      if (total && limit && limit < total) {\n        list = list.slice(0, limit);\n        this.listLeft = total - list.length;\n      }\n      return list;\n    },\n\n\n    // sort-by label for buttons, etc\n    sortByLabel: function sortByLabel() {\n      switch (this.sortBy) {\n        case 'token':\n          return 'Token';\n        case 'percent':\n          return 'Percent';\n        case 'close':\n          return 'Price';\n        case 'volatility':\n          return 'Volatility';\n        case 'change':\n          return 'Change';\n        case 'assetVolume':\n          return 'Volume';\n        case 'tokenVolume':\n          return 'Volume';\n        case 'trades':\n          return 'Trades';\n        default:\n          return 'Default';\n      }\n    },\n\n\n    // text to show in limit filter controls\n    limitCountLabel: function limitCountLabel() {\n      if (this.limitCount && this.limitCount < this.listCount) {\n        return this.limitCount + '/' + this.listCount;\n      }\n      return 'All ' + this.listCount;\n    },\n\n\n    // text about hidden list pair\n    listLeftText: function listLeftText() {\n      var count = this.listLeft;\n      var asset = this.filterAsset;\n      return __WEBPACK_IMPORTED_MODULE_4__modules_utils___default.a.noun(count, asset + ' pair', asset + ' pairs');\n    }\n  },\n\n  // custom mounted\n  methods: {\n\n    // proxy for setting a route\n    setRoute: function setRoute(route) {\n      this.$bus.emit('setRoute', route);\n    },\n\n\n    // lick to binance site with ref id added\n    tradeLink: function tradeLink(token, asset) {\n      this.$bus.emit('handleClick', 'binance', '/en/trade/' + token + '_' + asset + '/', '_blank');\n    },\n\n\n    // set list limit value\n    limitList: function limitList(num) {\n      this.limitCount = parseInt(num) | 0;\n      this.saveSortOptions();\n    },\n\n\n    // change list sort order for selected key\n    toggleSort: function toggleSort(sort, order) {\n      if (this.sortBy !== sort) {\n        this.sortOrder = order || 'asc';\n      } // initial order\n      else {\n          this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n        } // toggle order\n      this.sortBy = sort; // sort column\n      this.saveSortOptions();\n    },\n\n\n    // filter by asset\n    toggleAsset: function toggleAsset(asset) {\n      this.filterAsset = String(asset || 'BTC');\n      this.saveSortOptions();\n    },\n\n\n    // process volatility value for a token\n    calcVolatility: function calcVolatility(value) {\n      var str = 'Low';\n      if (value > 1) str = 'Normal';\n      if (value > 3) str = 'High';\n      if (value > 5) str = 'Volitile';\n      if (value > 9) str = 'Extreme';\n      return str;\n    },\n\n\n    // load sorting options from store\n    loadSortOptions: function loadSortOptions() {\n      var options = this.$store.getData(this.optKey);\n      if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') return;\n      if (options.filterAsset) this.filterAsset = options.filterAsset;\n      if (options.sortOrder) this.sortOrder = options.sortOrder;\n      if (options.sortBy) this.sortBy = options.sortBy;\n      if (options.limitCount) this.limitCount = options.limitCount;\n    },\n\n\n    // save current sorting options\n    saveSortOptions: function saveSortOptions() {\n      this.$store.setData(this.optKey, {\n        filterAsset: this.filterAsset,\n        sortOrder: this.sortOrder,\n        sortBy: this.sortBy,\n        limitCount: this.limitCount\n      });\n    }\n  },\n\n  // before mounted\n  beforeMount: function beforeMount() {\n    this.loadSortOptions();\n  },\n\n\n  // waiting for socket\n  mounted: function mounted() {\n    if (!this.$refs.spinner) return;\n    this.$refs.spinner.show('Connecting to socket API');\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Spinner_vue__ = __webpack_require__(16);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_332ce47e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Spinner_vue__ = __webpack_require__(69);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(68)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Spinner_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_332ce47e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Spinner_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZT80MjMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0zMzJjZTQ3ZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXBvc3Rjc3MtbG9hZGVyIXNhc3MtbG9hZGVyP2RhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NwaW5uZXIudnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU3Bpbm5lci52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NwaW5uZXIudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQgX192dWVfdGVtcGxhdGVfXyBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zMzJjZTQ3ZVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NwaW5uZXIudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1NwaW5uZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      visible: false,\n      failed: false,\n      message: ''\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show the spinner\n    show: function show(message) {\n      this.$emit('onShow');\n      this.visible = true;\n      this.failed = false;\n      this.message = String(message || '').trim();\n    },\n\n\n    // show error state spinner\n    error: function error(message) {\n      this.$emit('onError');\n      this.visible = true;\n      this.failed = true;\n      this.message = String(message || '').trim();\n    },\n\n\n    // hise the spinner\n    hide: function hide() {\n      this.$emit('onHide');\n      this.visible = false;\n      this.failed = false;\n      this.message = '';\n    },\n\n\n    // on spinner click\n    click: function click(e) {\n      this.$emit('onClick', e);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvU3Bpbm5lci52dWU/NjFjNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUE7O0FBRUE7QUFDQSxNQUhBLGtCQUdBO0FBQ0E7QUFDQSxvQkFEQTtBQUVBLG1CQUZBO0FBR0E7QUFIQTtBQUtBLEdBVEE7OztBQVdBO0FBQ0E7O0FBRUE7QUFDQSxRQUhBLGdCQUdBLE9BSEEsRUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FSQTs7O0FBVUE7QUFDQSxTQVhBLGlCQVdBLE9BWEEsRUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FoQkE7OztBQWtCQTtBQUNBLFFBbkJBLGtCQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0F4QkE7OztBQTBCQTtBQUNBLFNBM0JBLGlCQTJCQSxDQTNCQSxFQTJCQTtBQUNBO0FBQ0E7QUE3QkE7QUFaQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInNwaW5uZXItb3ZlcmxheVwiIDpjbGFzcz1cInsgJ3Zpc2libGUnOiB2aXNpYmxlLCAnZmFpbGVkJzogZmFpbGVkIH1cIiBAY2xpY2suc3RvcD1cImNsaWNrXCI+XG4gICAgPGRpdiBjbGFzcz1cInNwaW5uZXItY29udGVudFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItd2hlZWxcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLW1lc3NnZVwiIHYtaWY9XCJtZXNzYWdlXCIgdi10ZXh0PVwibWVzc2FnZVwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IGRhdGFcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICBmYWlsZWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJycsXG4gICAgfVxuICB9LFxuXG4gIC8vIGN1c3RvbSBtZXRob2RzXG4gIG1ldGhvZHM6IHtcblxuICAgIC8vIHNob3cgdGhlIHNwaW5uZXJcbiAgICBzaG93KCBtZXNzYWdlICkge1xuICAgICAgdGhpcy4kZW1pdCggJ29uU2hvdycgKTtcbiAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLmZhaWxlZCAgPSBmYWxzZTtcbiAgICAgIHRoaXMubWVzc2FnZSA9IFN0cmluZyggbWVzc2FnZSB8fCAnJyApLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgLy8gc2hvdyBlcnJvciBzdGF0ZSBzcGlubmVyXG4gICAgZXJyb3IoIG1lc3NhZ2UgKSB7XG4gICAgICB0aGlzLiRlbWl0KCAnb25FcnJvcicgKTtcbiAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICB0aGlzLmZhaWxlZCAgPSB0cnVlO1xuICAgICAgdGhpcy5tZXNzYWdlID0gU3RyaW5nKCBtZXNzYWdlIHx8ICcnICkudHJpbSgpO1xuICAgIH0sXG5cbiAgICAvLyBoaXNlIHRoZSBzcGlubmVyXG4gICAgaGlkZSgpIHtcbiAgICAgIHRoaXMuJGVtaXQoICdvbkhpZGUnICk7XG4gICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZmFpbGVkICA9IGZhbHNlO1xuICAgICAgdGhpcy5tZXNzYWdlID0gJyc7XG4gICAgfSxcblxuICAgIC8vIG9uIHNwaW5uZXIgY2xpY2tcbiAgICBjbGljayggZSApIHtcbiAgICAgIHRoaXMuJGVtaXQoICdvbkNsaWNrJywgZSApO1xuICAgIH0sXG5cbiAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nc2Nzcyc+XG5cbkBrZXlmcmFtZXMgc2hvd1NwaW5uZXIge1xuICAgIDAlIHsgb3BhY2l0eTogMDsgfVxuICAxMDAlIHsgb3BhY2l0eTogMTsgfVxufVxuQGtleWZyYW1lcyBzcGluUmlnaHQge1xuICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoIDBkZWcgKTsgfVxuICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoIDM1OWRlZyApOyB9XG59XG5Aa2V5ZnJhbWVzIHNwaW5MZWZ0IHtcbiAgICAwJSB7IHRyYW5zZm9ybTogcm90YXRlKCAzNTlkZWcgKTsgfVxuICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoIDBkZWcgKTsgfVxufVxuXG4vLyBpbm5lciBjb250ZW50IHNwaW5uZXJcbi5zcGlubmVyLW92ZXJsYXkge1xuICBkaXNwbGF5OiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGxlZnQ6IDA7XG4gIHRvcDogMDtcblxuICAvLyB2aXNpYmxlIHN0YXRlXG4gICYudmlzaWJsZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuXG4gIC8vIGZ1bGwtcGFnZSBmaXhlZCBzcGlubmVyIHdpdGggb3ZlcmxheVxuICAmLmZpeGVkIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yT3ZlcmxheTtcbiAgICB6LWluZGV4OiAoICR6aW5kZXhBbGVydHMgLSAxMCApO1xuICB9XG5cbiAgLy8gYWJzb2x1dGUgcG9zaXRpb25lZCBzcGlubmVyIHdpdGggb3ZlcmxheVxuICAmLmFicyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvck92ZXJsYXk7XG4gICAgei1pbmRleDogJHppbmRleEVsZW1lbnRzO1xuICB9XG5cbiAgLy8gbWFpbiBmbGV4IGNlbnRlcmVkIGNvbnRlbnRcbiAgLnNwaW5uZXItY29udGVudCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGFuaW1hdGlvbjogc2hvd1NwaW5uZXIgJGZ4U3BlZWQgJGZ4RWFzZSBmb3J3YXJkcztcblxuICAgIC5zcGlubmVyLXdoZWVsIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgd2lkdGg6IDQycHg7XG4gICAgICBoZWlnaHQ6IDQycHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAgICY6YmVmb3JlLCAmOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYm9yZGVyOiA0cHggc29saWQgJGNvbG9yUHJpbWFyeTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICAgICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgYm94LXNoYWRvdzogJHNoYWRvd0Rhcms7XG4gICAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBvcGFjaXR5OiAwLjk7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgICAgIGFuaW1hdGlvbjogc3BpblJpZ2h0IDFzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgIH1cbiAgICAgICY6YWZ0ZXIge1xuICAgICAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIG9wYWNpdHk6IDAuMjtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYW5pbWF0aW9uOiBzcGluTGVmdCAxLjVzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuc3Bpbm5lci1tZXNzZ2Uge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIG1hcmdpbjogLjRlbSAwIDAgMDtcbiAgICAgIGZvbnQtc2l6ZTogODAlO1xuICAgICAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICB9XG4gIH1cblxuICAvLyBmYWlsZWQgc3RhdGVcbiAgJi5mYWlsZWQge1xuICAgIC5zcGlubmVyLWNvbnRlbnQgLnNwaW5uZXItd2hlZWw6YmVmb3JlLFxuICAgIC5zcGlubmVyLWNvbnRlbnQgLnNwaW5uZXItd2hlZWw6YWZ0ZXIge1xuICAgICAgYW5pbWF0aW9uOiBub25lO1xuICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3JEYW5nZXI7XG4gICAgfVxuICB9XG5cbn1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvU3Bpbm5lci52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    image: { type: String, default: '', required: true },\n    alt: { type: String, default: 'ICON' }\n  },\n\n  // custom mounted\n  methods: {\n\n    // handler for token images that don't exist\n    imageError: function imageError(e) {\n      e.target.classList.add('default');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVG9rZW5JY29uLnZ1ZT9hNTZjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFEQTtBQUVBO0FBRkEsR0FIQTs7QUFRQTtBQUNBOztBQUVBO0FBQ0EsY0FIQSxzQkFHQSxDQUhBLEVBR0E7QUFDQTtBQUNBO0FBTEE7QUFUQSIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInRva2VuaWNvbi13cmFwXCI+XG4gICAgPGltZyBjbGFzcz1cInRva2VuaWNvbi1pbWFnZVwiIEBlcnJvcj1cImltYWdlRXJyb3JcIiA6c3JjPVwiaW1hZ2VcIiA6YWx0PVwiYWx0XCIgLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgaW1hZ2U6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnJywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBhbHQ6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnSUNPTicgfSxcbiAgfSxcblxuICAvLyBjdXN0b20gbW91bnRlZFxuICBtZXRob2RzOiB7XG5cbiAgICAvLyBoYW5kbGVyIGZvciB0b2tlbiBpbWFnZXMgdGhhdCBkb24ndCBleGlzdFxuICAgIGltYWdlRXJyb3IoIGUgKSB7XG4gICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCAnZGVmYXVsdCcgKTtcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuLy8gY29tcCB3cmFwcGVyXG4udG9rZW5pY29uLXdyYXAge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogJGljb25TaXplO1xuICBtaW4taGVpZ2h0OiAkaWNvblNpemU7XG5cbiAgLnRva2VuaWNvbi1pbWFnZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAkaWNvblNpemU7XG4gICAgaGVpZ2h0OiBhdXRvO1xuXG4gICAgJi5kZWZhdWx0IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgY29sb3I6ICRjb2xvckluZm9UZXh0O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9ySW5mbztcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgICBoZWlnaHQ6ICRpY29uU2l6ZTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAkaWNvblNpemU7XG4gICAgICBsZXR0ZXItc3BhY2luZzogLTFweDtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKCAtMjVkZWcgKTtcbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvVG9rZW5JY29uLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LineChart_vue__ = __webpack_require__(19);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_56cb6971_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LineChart_vue__ = __webpack_require__(73);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(72)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LineChart_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_56cb6971_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LineChart_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlP2UwYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTU2Y2I2OTcxXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vTGluZUNoYXJ0LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpbmVDaGFydC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0xpbmVDaGFydC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTU2Y2I2OTcxXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTGluZUNoYXJ0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__modules_utils__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    width: { type: Number, default: 800, required: true },\n    height: { type: Number, default: 100, required: true },\n    values: { type: Array, default: [], required: true }\n  },\n\n  // data\n  data: function data() {\n    return {\n      cx: 0,\n      cy: 0\n    };\n  },\n\n\n  // computed methods\n  computed: {\n    circX: function circX() {},\n\n\n    // svg view box size\n    svgBox: function svgBox() {\n      return '0 0 ' + this.width + ' ' + this.height;\n    },\n\n\n    // build points for SVG polyline\n    chartPoints: function chartPoints() {\n      var data = __WEBPACK_IMPORTED_MODULE_0__modules_utils___default.a.points(this.width, this.height, this.values);\n      var last = data.length ? data[data.length - 1] : { x: 0, y: 0 };\n      var list = data.map(function (d) {\n        return d.x - 8 + ',' + d.y;\n      });\n      this.cx = last.x - 3;\n      this.cy = last.y;\n      return list.join(' ');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTGluZUNoYXJ0LnZ1ZT83ZmRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx5REFEQTtBQUVBLDBEQUZBO0FBR0E7QUFIQSxHQUhBOztBQVNBO0FBQ0EsTUFWQSxrQkFVQTtBQUNBO0FBQ0EsV0FEQTtBQUVBO0FBRkE7QUFJQSxHQWZBOzs7QUFpQkE7QUFDQTtBQUVBLFNBRkEsbUJBRUEsQ0FFQSxDQUpBOzs7QUFNQTtBQUNBLFVBUEEsb0JBT0E7QUFDQTtBQUNBLEtBVEE7OztBQVdBO0FBQ0EsZUFaQSx5QkFZQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5CQTtBQWxCQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPHNlY3Rpb24gY2xhc3M9XCJsaW5lY2hhcnQtd3JhcFwiPlxuICAgIDxzdmcgOnZpZXdCb3g9XCJzdmdCb3hcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICA8cG9seWxpbmUgY2xhc3M9XCJwb2x5bGluZVwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiI2YwZjBmMFwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgOnBvaW50cz1cImNoYXJ0UG9pbnRzXCIgLz5cbiAgICAgIDxjaXJjbGUgY2xhc3M9XCJjaXJjbGVcIiA6Y3g9XCJjeFwiIDpjeT1cImN5XCIgcj1cIjNcIiBmaWxsPVwiI2YwZjBmMFwiIHN0cm9rZT1cIm5vbmVcIiAvPlxuICAgIDwvc3ZnPlxuICA8L3NlY3Rpb24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL21vZHVsZXMvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgd2lkdGg6IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiA4MDAsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgaGVpZ2h0OiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMTAwLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHZhbHVlczogeyB0eXBlOiBBcnJheSwgZGVmYXVsdDogW10sIHJlcXVpcmVkOiB0cnVlIH0sXG4gIH0sXG5cbiAgLy8gZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjeDogMCxcbiAgICAgIGN5OiAwLFxuICAgIH1cbiAgfSxcblxuICAvLyBjb21wdXRlZCBtZXRob2RzXG4gIGNvbXB1dGVkOiB7XG5cbiAgICBjaXJjWCgpIHtcblxuICAgIH0sXG5cbiAgICAvLyBzdmcgdmlldyBib3ggc2l6ZVxuICAgIHN2Z0JveCgpIHtcbiAgICAgIHJldHVybiAnMCAwICcrIHRoaXMud2lkdGggKycgJysgdGhpcy5oZWlnaHQ7XG4gICAgfSxcblxuICAgIC8vIGJ1aWxkIHBvaW50cyBmb3IgU1ZHIHBvbHlsaW5lXG4gICAgY2hhcnRQb2ludHMoKSB7XG4gICAgICBsZXQgZGF0YSA9IHV0aWxzLnBvaW50cyggdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMudmFsdWVzICk7XG4gICAgICBsZXQgbGFzdCA9IGRhdGEubGVuZ3RoID8gZGF0YVsgZGF0YS5sZW5ndGggLSAxIF0gOiB7IHg6IDAsIHk6IDAgfTtcbiAgICAgIGxldCBsaXN0ID0gZGF0YS5tYXAoIGQgPT4gKCBkLnggLSA4ICkgKycsJysgZC55ICk7XG4gICAgICB0aGlzLmN4ICA9IGxhc3QueCAtIDM7XG4gICAgICB0aGlzLmN5ICA9IGxhc3QueTtcbiAgICAgIHJldHVybiBsaXN0LmpvaW4oICcgJyApO1xuICAgIH0sXG4gIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG4ubGluZWNoYXJ0LXdyYXAge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Dropdown_vue__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Toggle_vue__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_twitter__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__modules_utils__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// modules\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Dropdown: __WEBPACK_IMPORTED_MODULE_0__Dropdown_vue__[\"a\" /* default */], Toggle: __WEBPACK_IMPORTED_MODULE_1__Toggle_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    options: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    active: { type: Boolean, default: false },\n    scrollDir: { type: String, default: '' },\n    scrollPos: { type: Number, default: 0 },\n    priceData: { type: Array, default: [] }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      storeKey: 'tweets_list_data',\n      // news data\n      twitterHandlers: [],\n      twitterEntries: [],\n      twitterChecking: [],\n      twitterIgnore: [],\n      twitterCounter: 0,\n      twitterInterval: null,\n      twitterDelay: 1000,\n      // filter options\n      filterSearch: '',\n      filterHandle: '',\n      // coins data\n      totalTokens: 0,\n      chartData: [],\n      chartSort: 'name',\n      chartOrder: 'asc',\n      // count data\n      newCount: 0,\n      maxCount: 50\n    };\n  },\n\n\n  // watchers\n  watch: {\n\n    // update chart data when new tokens load from socket api\n    priceData: function priceData() {\n      if (this.priceData.length > this.totalTokens) {\n        this.totalTokens = this.priceData.length;\n        this.updateChart();\n      }\n    },\n\n\n    // update chart data when tweets change\n    twitterEntries: function twitterEntries() {\n      this.updateChart();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // get sorted chart list\n    chartList: function chartList() {\n      var list = this.chartData.slice(); // copy\n      list = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.sort(list, this.chartSort, this.chartOrder);\n      return list;\n    },\n\n\n    // get filtered list\n    tweetsList: function tweetsList() {\n      var _this = this;\n\n      var list = this.twitterEntries.slice(); // copy\n\n      // filter by account handle\n      if (this.filterHandle) {\n        list = list.filter(function (t) {\n          return t.handle === _this.filterHandle;\n        });\n      }\n      // filter by search text against tweet name, handle and text\n      if (this.filterSearch && this.filterSearch.length > 1) {\n        list = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.search(list, 'text', this.filterSearch, this.options.search.strict);\n      }\n      // limit number of tweets visible\n      if (this.options.news.max) {\n        list = list.slice(0, this.options.news.max);\n      }\n      // done\n      return list;\n    },\n\n\n    // build twitter accounts list from handler list with checking indicator\n    accountsList: function accountsList() {\n      var _this2 = this;\n\n      var list = this.twitterHandlers.map(function (tw) {\n        var _tw$getData = tw.getData(),\n            uid = _tw$getData.uid,\n            handle = _tw$getData.handle,\n            name = _tw$getData.name,\n            avatar = _tw$getData.avatar,\n            url = _tw$getData.url,\n            last = _tw$getData.last,\n            error = _tw$getData.error;\n\n        var active = handle === _this2.filterHandle;\n        var checking = _this2.twitterChecking.filter(function (h) {\n          return h === handle;\n        }).length;\n        var count = _this2.twitterEntries.filter(function (t) {\n          return t.handle === handle;\n        }).length;\n        return { uid: uid, handle: handle, name: name, avatar: avatar, url: url, last: last, error: error, active: active, checking: checking, count: count };\n      });\n      return __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.sort(list, 'name', 'asc');\n    },\n\n\n    // sort-by label for buttons, etc\n    filterLabel: function filterLabel() {\n      var _this3 = this;\n\n      var l = this.twitterHandlers.length;\n      var t = this.twitterHandlers.filter(function (tw) {\n        return tw.handle === _this3.filterHandle;\n      }).shift();\n      if (t && t.handle) return '@' + t.handle;\n      return 'All Sources (' + l + ')';\n    },\n\n\n    // calculate default message for sentiment chart\n    sentimentInfoText: function sentimentInfoText() {\n      // no twitter handles to fetch from\n      if (!this.twitterHandlers.length) {\n        return 'Not tracking any Twitter accounts, use the Sources menu above to track accounts...';\n      }\n      // option enabled, but no token data loaded yet\n      if (this.options.news.refetch && !this.priceData.length) {\n        return 'Currently waiting for tokens to load from the Binance socket API...';\n      }\n      // option enabled, but no tweets data loaded yet\n      if (this.options.news.refetch && !this.twitterEntries.length) {\n        return 'Currently waiting for tweets data to load for tracked Twitter accounts...';\n      }\n      // option to fetch disabled and there are no tweets to scan\n      if (!this.options.news.refetch && !this.twitterEntries.length) {\n        return 'No tweets loaded, use the <i class=\"icon-config\"></i> Gear icon to enable fetching.';\n      }\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // open external link\n    openLink: function openLink(link) {\n      window.open(link, '_blank');\n    },\n\n\n    // apply options\n    applyOptions: function applyOptions(options) {\n      this.$bus.emit('setOptions', options);\n      this.updateHandlerOptions();\n      this.setupTwitterInterval();\n      this.sortCapTweets();\n      this.saveTweets();\n    },\n\n\n    // emit news data\n    emitData: function emitData() {\n      var count = this.newCount;\n      var total = this.twitterEntries.length;\n      var list = this.twitterEntries.slice();\n      this.$bus.emit('newsData', { count: count, total: total, list: list });\n    },\n\n\n    // apply filters\n    applyFilters: function applyFilters(search, handle) {\n      this.filterSearch = String(search || '').trim();\n      this.filterHandle = String(handle || '').trim();\n    },\n\n\n    // reset filters\n    resetFilters: function resetFilters() {\n      this.filterSearch = '';\n      this.filterHandle = '';\n    },\n\n\n    // add news to notification and msg queue\n    setNotification: function setNotification(tweet) {\n      var time = tweet.time,\n          handle = tweet.handle,\n          name = tweet.name,\n          text = tweet.text,\n          avatar = tweet.avatar,\n          link = tweet.link;\n\n      var isaway = !this.active || !document.hasFocus();\n\n      // remove html and urls from tweet text\n      text = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.stripHtml(text, true);\n      if (!text) return;\n\n      // show tweet notification only if enabled and away\n      if (this.options.news.notify && isaway) {\n        var secs = (Date.now() - time) / 1000;\n        var elapsed = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.elapsed(secs);\n        text = 'Tweeted ' + elapsed + ' ago... \\n\\n' + text;\n        this.$notify.add('@' + handle, text, avatar, link);\n        this.$bus.emit('mainMenuAlert');\n      }\n      // always send notification via api if enabled\n      if (this.options.news.send) {\n        var info = '<a href=\"' + link + '\">' + text + '</a>';\n        this.$bus.emit('msgQueue', { name: name, info: info, avatar: avatar });\n      }\n    },\n\n\n    // sort sentiment chart\n    sortChart: function sortChart(prop) {\n      if (!this.chartData.length) return;\n      if (!prop || typeof prop !== 'string') return;\n\n      if (prop === this.chartSort) {\n        this.chartOrder = this.chartOrder === 'asc' ? 'desc' : 'asc';\n      } else {\n        this.chartOrder = 'asc';\n      }\n      this.chartSort = prop;\n    },\n\n\n    // scan tweets against list of tokens from api and build sentiment analysis data for chart\n    updateChart: function updateChart(notify) {\n      var _this4 = this;\n\n      var data = [];\n      var tokens = [];\n\n      // build unique list of tokens from binance api\n      this.priceData.forEach(function (p) {\n        if (tokens.filter(function (t) {\n          return t.token === p.token;\n        }).length) return;\n        var token = p.token,\n            name = p.name;\n\n        var asset = token === 'BTC' ? 'USDT' : 'BTC';\n        var route = '/symbol/' + token + asset;\n        tokens.push({ token: token, name: name, route: route });\n      });\n\n      // add other things to the list\n      if (this.priceData.length) {\n        tokens.push({ token: 'Crypto', name: 'Cryptocurrency', route: '/symbol/BTCUSDT' });\n        tokens.push({ token: 'XBT', name: 'BTC Contract', route: '/symbol/BTCUSDT' });\n      }\n\n      // build sentiment\n      tokens.forEach(function (p) {\n        var token = p.token;\n        var name = p.name;\n        var route = p.route;\n        var search = token + '|' + name;\n        var list = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.search(_this4.twitterEntries, 'text', search, _this4.options.search.strict);\n        var count = list.length;\n        if (!count) return;\n        var text = list.reduce(function (a, t) {\n          return a += ' ' + t.text;\n        }, '').trim();\n        var sdata = _this4.$sentiment.analyze(text);\n        var score = sdata.score,\n            positive = sdata.positive,\n            negative = sdata.negative,\n            comparative = sdata.comparative,\n            sign = sdata.sign,\n            word = sdata.word,\n            styles = sdata.styles,\n            sentiment = sdata.sentiment;\n\n        data.push({ token: token, name: name, search: search, route: route, count: count, score: score, styles: styles, sentiment: sentiment });\n      });\n\n      // calculate percent\n      var max = data.reduce(function (m, d) {\n        return d.count > m ? d.count : m;\n      }, 0);\n      this.chartData = data.map(function (d) {\n        var ratio = max > 0 ? d.count / max : 0.1;\n        var barPercent = Math.round(ratio * 100);\n        var barColor = 'bg-grey';\n        if (barPercent > 20) {\n          barColor = 'bg-bright';\n        }\n        if (barPercent > 40) {\n          barColor = 'bg-secondary';\n        }\n        if (barPercent > 60) {\n          barColor = 'bg-primary';\n        }\n        return Object.assign(d, { barPercent: barPercent, barColor: barColor });\n      });\n\n      if (notify === true) {\n        if (!data.length) return this.$bus.emit('showNotice', 'No token mentions found yet.', 'warning');\n        return this.$bus.emit('showNotice', 'Sentiment table has been reloaded.', 'success');\n      }\n    },\n\n\n    // export list of account handles as json file\n    exportAccounts: function exportAccounts() {\n      var list = this.twitterHandlers.map(function (t) {\n        return t.handle;\n      }); // list of handles\n      var data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(list));\n      var link = document.createElement('a');\n      link.setAttribute('style', 'display:block; overflow:hidden; visibility:hidden; max-height:0;');\n      link.setAttribute('href', data);\n      link.setAttribute('download', 'twitter_handles_' + Date.now() + '.json');\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    },\n\n\n    // import list of account handles from json file\n    importAccounts: function importAccounts() {\n      var input = document.createElement('input');\n      input.setAttribute('style', 'display:block; overflow:hidden; visibility:hidden; max-height:0;');\n      input.setAttribute('type', 'file');\n      input.setAttribute('accept', '.json');\n      input.addEventListener('change', this.onFileImport);\n      document.body.appendChild(input);\n      input.click();\n      input.remove();\n    },\n\n\n    // handler for file select event\n    onFileImport: function onFileImport(e) {\n      var _this5 = this;\n\n      if (!e || !e.target) return;\n      if (!e.target.files || !e.target.files.length) return;\n      if (!('FileReader' in window)) return this.$bus.emit('showNotice', 'File import not supported.', 'warning');\n\n      var reader = new FileReader();\n      reader.readAsText(e.target.files[0], 'utf-8');\n      reader.addEventListener('load', function (e) {\n\n        var list = JSON.parse(e.target.result || '[]') || [];\n        var total = list.length || 0;\n        var loaded = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.noun(total, 'account', 'accounts');\n        var count = 0;\n\n        if (!Array.isArray(list) || !total) {\n          return _this5.$bus.emit('showNotice', 'Invalid file data.', 'warning');\n        }\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var handle = _step.value;\n\n            if (_this5.createTwitterHandler(handle)) count++;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (!count) {\n          return _this5.$bus.emit('showNotice', 'There was a problem importing ' + loaded + ' from file.', 'warning');\n        }\n        _this5.$bus.emit('showNotice', 'Imported ' + count + '/' + total + ' accounts from file.', 'success');\n        _this5.saveNewsSources();\n      });\n    },\n\n\n    // check if tweets needs to be ignored\n    checkIgnore: function checkIgnore(tweet) {\n      return this.twitterIgnore.filter(function (tid) {\n        return tid === tweet.id;\n      }).length;\n    },\n\n\n    // check if tweets exists\n    hasTweet: function hasTweet(tweet) {\n      return this.twitterEntries.filter(function (t) {\n        return t.id === tweet.id;\n      }).length;\n    },\n\n\n    // check if tweet is too old\n    oldTweet: function oldTweet(tweet) {\n      var days = parseInt(this.options.news.days) | 0;\n      var secs = (Date.now() - tweet.time) / 1000;\n      var age = Math.ceil(secs / 86400);\n      return age > days;\n    },\n\n\n    // manage tweets list\n    sortCapTweets: function sortCapTweets(tweet) {\n      var _this6 = this;\n\n      var list = this.twitterEntries.slice(); // copy\n      var total = parseInt(this.options.news.total) || 10;\n      var istw = (typeof tweet === 'undefined' ? 'undefined' : _typeof(tweet)) === 'object' && 'id' in tweet;\n\n      // add new tweet to list\n      if (istw) {\n        tweet.isNew = true;\n        list.push(tweet);\n      }\n\n      // filter out old tweets\n      list = list.filter(function (t) {\n        return !_this6.oldTweet(t);\n      });\n\n      // sort tweets from new to old\n      list = list.sort(function (a, b) {\n        if (a.time > b.time) return -1;\n        if (a.time < b.time) return 1;\n        return 0;\n      });\n\n      // cap and update\n      list = list.slice(0, total);\n      this.newCount = list.filter(function (t) {\n        return t.isNew;\n      }).length;\n      this.twitterEntries = list;\n\n      // check if new tweet is still in the list after sorting and slicing\n      if (istw) return list.filter(function (t) {\n        return t.id === tweet.id;\n      }).length ? true : false;\n      return true;\n    },\n\n\n    // remove single tweet from list by id\n    deleteTweet: function deleteTweet(id) {\n      if (!id) return;\n      this.twitterEntries = this.twitterEntries.filter(function (t) {\n        return t.id !== id;\n      });\n      this.twitterIgnore = this.twitterIgnore.filter(function (tid) {\n        return tid !== id;\n      });\n      this.twitterIgnore.push(id); // remember\n    },\n\n\n    // reset number of new entries\n    resetTweets: function resetTweets() {\n      this.twitterEntries.forEach(function (t) {\n        t.isNew = false;\n      });\n      this.newCount = 0;\n      this.emitData();\n      this.saveTweets();\n    },\n\n\n    // save tweets list to local store\n    saveTweets: function saveTweets() {\n      if (!this.twitterEntries.length) return;\n      this.$store.setData(this.storeKey, this.twitterEntries);\n    },\n\n\n    // flush list of saved tweets from store\n    flushTweets: function flushTweets() {\n      if (!confirm('Delete cached tweets?')) return;\n      this.twitterEntries = [];\n      this.twitterIgnore = [];\n      this.newCount = 0;\n      this.$store.setData(this.storeKey, this.twitterEntries);\n      this.$bus.emit('showNotice', 'Cached tweets have been deleted.', 'success');\n      this.emitData();\n    },\n\n\n    // load saved tweets from local store\n    loadTweets: function loadTweets() {\n      var tweets = this.$store.getData(this.storeKey);\n      if (Array.isArray(tweets)) this.twitterEntries = tweets;\n      this.emitData();\n    },\n\n\n    // fetch handler\n    onTweetsHandler: function onTweetsHandler(err, handle, tweets) {\n      // there was a problem fetching tweets, log\n      if (err) console.warn(err);\n      // done checking this handle, remove indicator\n      if (handle) this.twitterChecking = this.twitterChecking.filter(function (h) {\n        return h !== handle;\n      });\n      // no tweets found for this handle\n      if (!Array.isArray(tweets) || !tweets.length) return;\n      // add new tweets to the list\n      var count = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = tweets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var tweet = _step2.value;\n\n          if (this.checkIgnore(tweet)) continue; // ignore\n          if (this.oldTweet(tweet)) continue; // too old\n          if (this.hasTweet(tweet)) continue; // already exists\n          if (!this.sortCapTweets(tweet)) continue; // was not added\n          this.setNotification(tweet); // added\n          count++;\n        }\n        // update and save only if something was added\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      if (count) {\n        this.saveTweets();\n        this.emitData();\n      }\n    },\n\n\n    // save current list of tracked accounts to store\n    saveNewsSources: function saveNewsSources(notice) {\n      var sources = this.twitterHandlers.map(function (tw) {\n        return tw.handle;\n      });\n      this.options.news.sources = sources;\n      this.applyOptions(this.options);\n      if (notice) {\n        if (typeof notice === 'string') this.$bus.emit('showNotice', notice, 'success');\n        this.$bus.emit('showNotice', 'Accounts list updated successfully.', 'success');\n      }\n    },\n\n\n    // handle adding accounts from a form\n    accountFormHandler: function accountFormHandler(e) {\n      if (!e || !e.target) return;\n      var handle = String(e.target.handle.value || '').replace(/[^\\w]+/g, '').trim();\n      if (!handle) return this.$bus.emit('showNotice', 'Please enter a valid twitter handle.', 'warning');\n      this.createTwitterHandler(handle, true, true);\n      this.resetFilters();\n      e.target.reset();\n    },\n\n\n    // update common options for twitter handler instances\n    updateHandlerOptions: function updateHandlerOptions(handler) {\n      var limitCount = parseInt(this.options.news.tweets) || 1;\n      var fetchDelay = parseInt(this.options.news.delay) || 300;\n      if (handler) return handler.setOptions({ fetchDelay: fetchDelay, limitCount: limitCount }); // update one\n      this.twitterHandlers.forEach(function (h) {\n        return h.setOptions({ fetchDelay: fetchDelay, limitCount: limitCount });\n      }); // update all\n    },\n\n\n    // create new instance of Twitter handler for a handle\n    createTwitterHandler: function createTwitterHandler(handle, fetch, save) {\n      if (!handle) return false;\n\n      if (this.twitterHandlers.filter(function (t) {\n        return t.handle === handle;\n      }).length) {\n        if (save) this.$bus.emit('showNotice', 'Account already exists.', 'warning');\n        return true;\n      }\n      try {\n        var handler = new __WEBPACK_IMPORTED_MODULE_2__modules_twitter__[\"a\" /* default */](handle);\n        this.updateHandlerOptions(handler);\n        this.twitterHandlers.push(handler);\n        if (fetch) this.fetchByHandle(handle);\n        if (save) this.saveNewsSources(true);\n        return true;\n      } catch (err) {\n        console.warn('createTwitterHandlerError:', err.message || err);\n        return false;\n      }\n    },\n\n\n    // remove instance of Twitter handler from list\n    removeTwitterHandler: function removeTwitterHandler(handle) {\n      if (!confirm('Stop tracking tweets from @' + handle + '?')) return;\n      this.twitterHandlers = this.twitterHandlers.filter(function (t) {\n        return t.handle !== handle;\n      });\n      this.twitterEntries = this.twitterEntries.filter(function (t) {\n        return t.handle !== handle;\n      });\n      this.twitterChecking = this.twitterChecking.filter(function (h) {\n        return h !== handle;\n      });\n      this.resetFilters();\n      this.sortCapTweets();\n      this.emitData();\n      this.saveNewsSources(true);\n      this.saveTweets();\n    },\n\n\n    // main method to fetch tweets for a handle\n    fetchByHandle: function fetchByHandle(handle) {\n      var tw = this.twitterHandlers.filter(function (t) {\n        return t.handle === handle;\n      }).shift();\n      if (!tw) return this.$bus.emit('showNotice', 'Could not find account @' + handle + '.', 'warning');\n      if (this.twitterChecking.filter(function (h) {\n        return h === tw.handle;\n      }).length) return; // already fetching\n      this.twitterChecking.push(tw.handle); // fetching indicator\n      tw.fetchTweets(this.$ajax, this.onTweetsHandler); // fetch\n    },\n\n\n    // used to auto-fetch tweets from an interval goin down the list\n    fetchByInterval: function fetchByInterval() {\n      if (!this.options.news.refetch) return;\n      if (!this.twitterHandlers.length) return;\n      var last = this.twitterHandlers.length - 1;\n      var tw = this.twitterHandlers[this.twitterCounter];\n      if (tw) this.fetchByHandle(tw.handle);\n      this.twitterCounter = this.twitterCounter < last ? this.twitterCounter + 1 : 0;\n    },\n\n\n    // start the tweets interval handler\n    setupTwitterInterval: function setupTwitterInterval() {\n      var seconds = parseInt(this.options.news.interval) || 5;\n      if (this.twitterInterval) clearInterval(this.twitterInterval);\n      this.twitterInterval = setInterval(this.fetchByInterval, 1000 * seconds);\n    },\n\n\n    // load and start tracking twitter accounts for latest tweets\n    setupTwitterTrackers: function setupTwitterTrackers() {\n      this.twitterHandlers = [];\n      var accounts = __WEBPACK_IMPORTED_MODULE_3__modules_utils___default.a.shuffle(this.options.news.sources || []);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = accounts[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var handle = _step3.value;\n          this.createTwitterHandler(handle);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  },\n\n  // component before mount\n  beforeMount: function beforeMount() {\n    this.loadTweets();\n    this.sortCapTweets();\n  },\n\n\n  // component mounted\n  mounted: function mounted() {\n    this.setupTwitterTrackers();\n    this.setupTwitterInterval();\n    this.fetchByInterval();\n    this.$bus.on('resetNews', this.resetTweets);\n    // set new tweets as read when going away from page\n    document.body.setAttribute('tabindex', '0'); // chrome fix\n    document.body.addEventListener('blur', this.resetTweets);\n  },\n\n\n  // component destroyed\n  destroyed: function destroyed() {\n    this.twitterHandlers = [];\n    this.twitterEntries = [];\n    this.twitterChecking = [];\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Toggle_vue__ = __webpack_require__(22);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_715bc3d3_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Toggle_vue__ = __webpack_require__(78);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(77)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Toggle_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_715bc3d3_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Toggle_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlPzk4MzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTcxNWJjM2QzXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9nZ2xlLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RvZ2dsZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RvZ2dsZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTcxNWJjM2QzXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9nZ2xlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlXG4vLyBtb2R1bGUgaWQgPSAyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  props: {\n    value: { type: Boolean, default: false },\n    text: { type: String, default: '...' }\n  },\n\n  methods: {\n    onClick: function onClick(e) {\n      this.$emit('click', e);\n    },\n    onChange: function onChange(e) {\n      this.$emit('input', !this.value);\n      this.$emit('change', e);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVG9nZ2xlLnZ1ZT8zMzU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBOztBQUVBO0FBQ0EsNENBREE7QUFFQTtBQUZBLEdBRkE7O0FBT0E7QUFFQSxXQUZBLG1CQUVBLENBRkEsRUFFQTtBQUNBO0FBQ0EsS0FKQTtBQU1BLFlBTkEsb0JBTUEsQ0FOQSxFQU1BO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFQQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGxhYmVsIGNsYXNzPVwidG9nZ2xlLXdyYXBcIiBAY2xpY2s9XCJvbkNsaWNrXCI+XG4gICAgPGlucHV0IGNsYXNzPVwidG9nZ2xlLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgOmNoZWNrZWQ9XCJ2YWx1ZVwiIEBjaGFuZ2U9XCJvbkNoYW5nZVwiIC8+XG4gICAgPGRpdiBjbGFzcz1cInRvZ2dsZS1zd2l0Y2hcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidG9nZ2xlLXRleHRcIj57eyB0ZXh0IH19PC9kaXY+XG4gIDwvbGFiZWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB0ZXh0OiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJy4uLicgfSxcbiAgfSxcblxuICBtZXRob2RzOiB7XG5cbiAgICBvbkNsaWNrKCBlICkge1xuICAgICAgdGhpcy4kZW1pdCggJ2NsaWNrJywgZSApO1xuICAgIH0sXG5cbiAgICBvbkNoYW5nZSggZSApIHtcbiAgICAgIHRoaXMuJGVtaXQoICdpbnB1dCcsICF0aGlzLnZhbHVlICk7XG4gICAgICB0aGlzLiRlbWl0KCAnY2hhbmdlJywgZSApO1xuICAgIH1cbiAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbi50b2dnbGUtd3JhcCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzdHJldGNoO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogLjJlbSAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgLnRvZ2dsZS1pbnB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgbWF4LXdpZHRoOiAwO1xuICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgbGVmdDogLTEwMDAwcHg7XG4gIH1cbiAgLnRvZ2dsZS1zd2l0Y2gge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAgLjZlbSAwIDA7XG4gICAgd2lkdGg6IDIuOGVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbiggJGNvbG9yRG9jdW1lbnQsIDIlICk7XG4gICAgYm94LXNoYWRvdzogJHNoYWRvd0hvbGxvdztcblxuICAgICY6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgIHdpZHRoOiAxLjRlbTtcbiAgICAgIGhlaWdodDogMS40ZW07XG4gICAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yR3JleTtcbiAgICAgIGJveC1zaGFkb3c6ICRzaGFkb3dQYXBlcjtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCggLTUwJSApO1xuICAgIH1cbiAgfVxuICAudG9nZ2xlLXRleHQge1xuICAgIEBpbmNsdWRlIHRleHROb1NlbGVjdDtcbiAgICBAaW5jbHVkZSB0ZXh0Q2xpcDtcbiAgICBtYXJnaW46IDAgMCAuMTVlbSAwO1xuICB9XG4gIC50b2dnbGUtaW5wdXQ6Y2hlY2tlZCB+IC50b2dnbGUtc3dpdGNoOmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yU3VjY2VzcztcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoIDUwJSApO1xuICB9XG59XG48L3N0eWxlPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL1RvZ2dsZS52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  methods: {\n\n    // lick to binance site with ref id added\n    goBinance: function goBinance(e) {\n      e.preventDefault();\n      this.$bus.emit('handleClick', 'binance', '/', '_blank');\n    }\n  }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvQWJvdXRQYWdlLnZ1ZT84NTZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxRkE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLGFBSEEscUJBR0EsQ0FIQSxFQUdBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7O0FBRkEiLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxzZWN0aW9uPlxuXG4gICAgPGRpdiBjbGFzcz1cInB1c2gtYm90dG9tXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1sYWJlbCBwdXNoLWJvdHRvbVwiPlxuICAgICAgICBCaW5hbmNlIFByaWNlIFdhdGNoIFdlYiBBcHAgPGkgY2xhc3M9XCJpY29uLWRvd24tb3BlblwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgICAgPHA+XG4gICAgICAgIFRoaXMgYXBwbGljYXRpb24gY29ubmVjdHMgdG8gdGhlIDxhIGNsYXNzPVwidGV4dC1wcmltYXJ5LWhvdmVyXCIgQGNsaWNrPVwiZ29CaW5hbmNlXCIgaHJlZj1cIiNcIj5CaW5hbmNlLmNvbTwvYT5cbiAgICAgICAgcHVibGljIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vYmluYW5jZS1leGNoYW5nZS9iaW5hbmNlLW9mZmljaWFsLWFwaS1kb2NzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QVBJPC9hPlxuICAgICAgICB0byBnZXQgbGl2ZSAyNGggcHJpY2UgY2hhbmdlIGRhdGEgZm9yIGFsbCBjcnlwdG8gdHJhZGluZyBwYWlycyBvbiB0aGVpciBwbGF0Zm9ybSBhbmQgYWxsb3dzIHlvdSB0byBzZXRcbiAgICAgICAgY3VzdG9tIGFsZXJ0cyBvciB3YXRjaCBmb3IgcHJpY2UgY2hhbmdlIGluIHJlYWwgdGltZSBhbmQgZ2V0IGRlc2t0b3Agbm90aWZpY2F0aW9ucyB3aGVuIHNvbWV0aGluZyB0cmlnZ2Vyc1xuICAgICAgICB5b3VyIGFsZXJ0cyBvciBwcmljZSB3YXRjaCBzZXR0aW5ncy5cbiAgICAgIDwvcD5cbiAgICA8L2Rpdj5cblxuICAgIDxociAvPlxuXG4gICAgPGRpdiBjbGFzcz1cInB1c2gtYm90dG9tXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1sYWJlbCBwdXNoLWJvdHRvbVwiPlxuICAgICAgICBBcHBsaWNhdGlvbiBUZWNobm9sb2d5IDxpIGNsYXNzPVwiaWNvbi1kb3duLW9wZW5cIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxwPlxuICAgICAgICBUaGlzIGFwcCBydW5zIGVudGlyZWx5IG9uIHRoZSBicm93c2VyIGFuZCBvbmx5IG1ha2VzIGV4dGVybmFsIHJlcXVlc3RzIHRvIGZldGNoIGRhdGEgZnJvbSB2YXJpb3VzXG4gICAgICAgIEFQSSBlbmRwb2ludHMgcmVsYXRlZCB0byBjcnlwdG9jdXJyZW5jeS4gQW55IHBlcnNpc3RpbmcgZGF0YSBpcyBzdG9yZWQgaW4gdGhlIGJyb3dzZXInc1xuICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1N0b3JhZ2VcIiB0YXJnZXQ9XCJfYmxhbmtcIj5sb2NhbFN0b3JhZ2U8L2E+IGVuZ2luZS5cbiAgICAgICAgSW4gb3JkZXIgdG8gZ2V0IGRlc2t0b3Agbm90aWZpY2F0aW9ucywgeW91IG11c3RcbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Ob3RpZmljYXRpb25zX0FQSS9Vc2luZ190aGVfTm90aWZpY2F0aW9uc19BUElcIiB0YXJnZXQ9XCJfYmxhbmtcIj5HcmFudCBOb3RpZmljYXRpb24gUGVybWlzc2lvbjwvYT5cbiAgICAgICAgaW4geW91ciBicm93c2VyLlxuICAgICAgPC9wPlxuICAgIDwvZGl2PlxuXG4gICAgPGhyIC8+XG5cbiAgICA8ZGl2IGNsYXNzPVwicHVzaC1ib3R0b21cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWxhYmVsIHB1c2gtYm90dG9tXCI+XG4gICAgICAgIEFQSSBFbmRwb2ludHMgJmFtcDsgQXNzZXRzIDxpIGNsYXNzPVwiaWNvbi1kb3duLW9wZW5cIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICAgIDx1bD5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vYmluYW5jZS1leGNoYW5nZS9iaW5hbmNlLW9mZmljaWFsLWFwaS1kb2NzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+QmluYW5jZSBBUEk8L2E+ICZuYnNwO1xuICAgICAgICAgIDxzcGFuPlNvY2tldCBjb25uZWN0aW9uIGZvciBsaXZlIDI0aCBwcmljZSBjaGFuZ2UgZGF0YS48L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL0NvaW5DYXBEZXYvQ29pbkNhcC5pb1wiIHRhcmdldD1cIl9ibGFua1wiPkNvaW5jYXAgQVBJPC9hPiAmbmJzcDtcbiAgICAgICAgICA8c3Bhbj5BZ2dyZWdhdGVkIGdsb2JhbCBkYXRhIGZvciBzcGVjaWZpYyB0b2tlbnMuPC9zcGFuPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1haWxndW4uY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPk1haWxndW4gQVBJPC9hPiAmbmJzcDtcbiAgICAgICAgICA8c3Bhbj5NYWlsZ3VuIEFQSSBmb3Igb3V0Z29pbmcgbm90aWZpY2F0aW9ucyB2aWEgZS1tYWlsLjwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2NvcmUudGVsZWdyYW0ub3JnL2JvdHMjY3JlYXRpbmctYS1uZXctYm90XCIgdGFyZ2V0PVwiX2JsYW5rXCI+VGVsZWdyYW0gQm90IEFQSTwvYT4gJm5ic3A7XG4gICAgICAgICAgPHNwYW4+VGVsZWdyYW0gQm90IEFQSSBmb3Igb3V0Z29pbmcgbm90aWZpY2F0aW9ucyB2aWEgdGhlIGFwcC48L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2NqZG93bmVyL2NyeXB0b2N1cnJlbmN5LWljb25zXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q3J5cHRvIEljb25zPC9hPiAmbmJzcDtcbiAgICAgICAgICA8c3Bhbj5OaWNlIGxvb2tpbmcgY3J5cHRvIGljb25zLjwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG5cbiAgICA8aHIgLz5cblxuICAgIDxkaXYgY2xhc3M9XCJwdXNoLWJvdHRvbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tbGFiZWwgcHVzaC1ib3R0b21cIj5cbiAgICAgICAgQXV0aG9yICZhbXA7IEZlZWRiYWNrIDxpIGNsYXNzPVwiaWNvbi1kb3duLW9wZW5cIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICAgIDx1bD5cbiAgICAgICAgPGxpPlxuICAgICAgICAgIDxzcGFuPkF1dGhvciAvIERldmVsb3Blcjo8L3NwYW4+ICZuYnNwO1xuICAgICAgICAgIDxhIGNsYXNzPVwiaWNvbi1naHViIGljb25MZWZ0XCIgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9yYWlubmVyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+UmFpbm5lciBMaW5zPC9hPiAmbmJzcDtcbiAgICAgICAgICA8YSBjbGFzcz1cImljb24tdHd0ciBpY29uTGVmdFwiIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL3JhaW50ZWtfXCIgdGFyZ2V0PVwiX2JsYW5rXCI+cmFpbnRla188L2E+ICZuYnNwO1xuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPHNwYW4+UmVwbyAvIElzc3VlcyAvIEZlZWRiYWNrOjwvc3Bhbj4gJm5ic3A7XG4gICAgICAgICAgPGEgY2xhc3M9XCJpY29uLWdodWIgaWNvbkxlZnRcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3JhaW5uZXIvYmluYW5jZS13YXRjaFwiIHRhcmdldD1cIl9ibGFua1wiPkJpbmFuY2UgV2F0Y2ggUmVwb3NpdG9yeTwvYT4gJm5ic3A7XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuXG4gIDwvc2VjdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4vLyBjb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IHtcblxuICBtZXRob2RzOiB7XG5cbiAgICAvLyBsaWNrIHRvIGJpbmFuY2Ugc2l0ZSB3aXRoIHJlZiBpZCBhZGRlZFxuICAgIGdvQmluYW5jZSggZSApIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnaGFuZGxlQ2xpY2snLCAnYmluYW5jZScsICcvJywgJ19ibGFuaycgKTtcbiAgICB9XG4gIH1cblxufVxuPC9zY3JpcHQ+XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvY29tcG9uZW50cy9BYm91dFBhZ2UudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Tabs_vue__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Toggle_vue__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__modules_utils__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// sub components\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Tabs: __WEBPACK_IMPORTED_MODULE_0__Tabs_vue__[\"a\" /* default */], Toggle: __WEBPACK_IMPORTED_MODULE_1__Toggle_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    options: { type: Object, required: true }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      corsProxy: '',\n      canNotify: false,\n      urlSuccess: true,\n      testing: false,\n      // notification choices\n      audioFiles: [{ name: 'Audio 1', file: 'public/audio/audio_1.mp3' }, { name: 'Audio 2', file: 'public/audio/audio_2.mp3' }, { name: 'Audio 3', file: 'public/audio/audio_3.mp3' }, { name: 'Audio 4', file: 'public/audio/audio_4.mp3' }, { name: 'Audio 5', file: 'public/audio/audio_5.mp3' }]\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // build dropdown audio list\n    audioList: function audioList() {\n      var _this = this;\n\n      return this.audioFiles.map(function (a) {\n        a.selected = a.file === _this.options.audio.file ? true : false;\n        return a;\n      });\n    },\n\n\n    // list of saved proxies\n    proxyList: function proxyList() {\n      var _this2 = this;\n\n      return this.options.proxylist.map(function (url) {\n        var selected = url === _this2.options.proxy ? true : false;\n        return { url: url, selected: selected };\n      });\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // play selected notification sound\n    playSound: function playSound() {\n      var _options$audio = this.options.audio,\n          file = _options$audio.file,\n          volume = _options$audio.volume;\n\n      __WEBPACK_IMPORTED_MODULE_2__modules_utils___default.a.playAudio(file, volume);\n    },\n\n\n    // apply options\n    applyOptions: function applyOptions(audio) {\n      var options = Object.assign({}, this.options, { proxy: this.corsProxy });\n      this.$bus.emit('setOptions', options);\n      if (audio) this.playSound();\n    },\n\n\n    // add proxy to options list\n    addProxy: function addProxy(url) {\n      if (!url) return;\n      this.options.proxylist = this.options.proxylist.filter(function (p) {\n        return p !== url;\n      });\n      this.options.proxylist.push(url);\n      this.$bus.emit('showNotice', 'Proxy URL added to list.', 'success');\n      this.applyOptions();\n    },\n\n\n    // remove proxy from options list\n    removeProxy: function removeProxy(url) {\n      if (!url) return;\n      this.options.proxylist = this.options.proxylist.filter(function (p) {\n        return p !== url;\n      });\n      this.$bus.emit('showNotice', 'Proxy URL removed from list.', 'success');\n      this.applyOptions();\n    },\n\n\n    // set active proxy from list\n    setProxy: function setProxy(url) {\n      this.corsProxy = url;\n      this.options.proxy = url;\n      this.applyOptions();\n    },\n\n\n    // test cors proxy url\n    testProxy: function testProxy(url) {\n      var _this3 = this;\n\n      this.testing = true;\n\n      this.$ajax.get(url, {\n        type: 'text',\n        proxy: false, // don't proxy the proxy\n\n        error: function error(xhr, status, _error) {\n          _this3.testing = false;\n          _this3.urlSuccess = false;\n          _this3.$bus.emit('showNotice', _error, 'warning');\n        },\n\n        success: function success(xhr, status, response) {\n          var pass = status && status > 199 && status < 400;\n          var clss = pass ? 'success' : 'warning';\n\n          _this3.testing = false;\n          _this3.urlSuccess = pass;\n          _this3.$bus.emit('showNotice', 'Proxy URL responded with status code (' + status + ').', clss);\n        }\n      });\n    },\n\n\n    // cors proxy form submit handler\n    corsFormSubmit: function corsFormSubmit(e) {\n      e.preventDefault();\n      var url = e.target.proxyurl.value || '';\n      this.testProxy(url);\n    },\n\n\n    // ask user for notification permission\n    askNotifyPermission: function askNotifyPermission(e) {\n      var _this4 = this;\n\n      e.preventDefault();\n      this.canNotify = false;\n      this.$notify.permission(function (status) {\n        _this4.canNotify = status === 'granted' ? true : false;\n      });\n    }\n  },\n\n  // test cors url when component mounts\n  mounted: function mounted() {\n    this.corsProxy = this.options.proxy;\n    this.canNotify = this.$notify.canNotify();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    data: { type: Object, default: function _default() {\n        return {};\n      } }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      slides: [], // content slides\n      tabs: [], // tabs data from slides\n      index: 0, // index of current selected tab\n      inline: false, // if tabs will be displayed inline (flex-row)\n      visible: false, // dropdown tabs visible state\n      width: 0 // computed width taken by all tabs inline\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // rebuild the tabs when some external data changes\n    data: function data() {\n      this.buildTabs();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // name of active tab\n    tabName: function tabName() {\n      if (!this.tabs.length) return '';\n      return this.tabs[this.index].name;\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // reset local data\n    resetData: function resetData() {\n      this.slides = [];\n      this.tabs = [];\n    },\n\n\n    // toggle tabs dropdown\n    toggleDropdown: function toggleDropdown(e) {\n      if (this.inline) return;\n      this.visible = !this.visible;\n    },\n\n\n    // show tabs dropdown\n    showDropdown: function showDropdown(e) {\n      if (this.inline) return;\n      this.visible = true;\n    },\n\n\n    // hide tabs dropdown\n    hideDropdown: function hideDropdown(e) {\n      if (this.inline) return;\n      this.visible = false;\n    },\n\n\n    // set active tab\n    activateTab: function activateTab(index) {\n      this.index = typeof index === 'number' ? parseInt(index) : this.index;\n\n      for (var i = 0; i < this.slides.length; ++i) {\n        this.slides[i].classList.remove('active');\n      }\n      this.slides[this.index].classList.add('active');\n      this.hideDropdown();\n      this.buildTabs();\n    },\n\n\n    // calculate total tabs width inline\n    calculateWidth: function calculateWidth() {\n      var div = document.createElement('div');\n      div.style.position = 'absolute';\n      div.style.left = '-1000px';\n      div.style.padding = '0 1em 0 0';\n\n      document.body.appendChild(div);\n      this.width = 0;\n\n      for (var i = 0; i < this.tabs.length; ++i) {\n        div.innerHTML = this.tabs[i].name;\n        this.width += div.clientWidth || 0;\n      }\n      document.body.removeChild(div);\n    },\n\n\n    // resolse tabs display type (inline, dropdown)\n    resolveTabs: function resolveTabs() {\n      var boxWidth = this.$refs.container.offsetWidth || 0;\n      this.inline = window.innerWidth > 720 && this.width < boxWidth;\n    },\n\n\n    // build tabs from slides\n    buildSlides: function buildSlides() {\n      var slots = this.$slots.default.filter(function (e) {\n        return e.elm instanceof Element;\n      });\n      var index = 0;\n      var slides = [];\n\n      for (var i = 0; i < slots.length; ++i) {\n        var slide = slots[i].elm;\n        if (slide.hasAttribute('active')) this.index = i;\n        slide.setAttribute('class', 'tabs-slide fx-on fx-fade-in');\n        slides.push(slide);\n      }\n      this.slides = slides;\n    },\n\n\n    // create list of tabs from loaded slides (sections)\n    buildTabs: function buildTabs() {\n      var tabs = [];\n\n      for (var i = 0; i < this.slides.length; ++i) {\n        var slide = this.slides[i];\n        var styles = slide.getAttribute('btn-class') || '';\n        var name = slide.getAttribute('btn-name') || 'Tab ' + (i + 1);\n        var active = i === this.index ? true : false;\n        tabs.push({ styles: styles, name: name, active: active });\n      }\n      this.tabs = tabs;\n    }\n  },\n\n  // on mounted\n  mounted: function mounted() {\n    this.buildSlides();\n    this.activateTab();\n    this.calculateWidth();\n    this.resolveTabs();\n    window.addEventListener('resize', this.resolveTabs);\n  },\n\n\n  // on destroyed\n  destroyed: function destroyed() {\n    this.resetData();\n    window.removeEventListener('resize', this.resolveTabs);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__TokenIcon_vue__ = __webpack_require__(4);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// components\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { TokenIcon: __WEBPACK_IMPORTED_MODULE_0__TokenIcon_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    modalData: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    historyData: { type: Array, default: [], required: true }\n  },\n\n  // custom methods\n  methods: {\n\n    // delete item from history\n    deleteHistory: function deleteHistory(id) {\n      var saved = this.$history.delete(id);\n      if (!saved) return this.$bus.emit('showNotice', 'There was a problem updating the history data.', 'warning');\n      this.$bus.emit('showNotice', 'History data has been updated.', 'success');\n    },\n\n\n    // flush history list\n    flushHistory: function flushHistory() {\n      var saved = this.$history.flush();\n      if (!saved) return this.$bus.emit('showNotice', 'There was a problem updating the history data.', 'warning');\n      this.$bus.emit('showNotice', 'History data has been flushed.', 'success');\n    },\n\n\n    // format info string\n    formatInfo: function formatInfo(info) {\n      return String(info || '').replace(/[\\r\\n]+/g, ', ') + '.';\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvSGlzdG9yeVBhZ2UudnVlPzA4NmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEZBSEE7O0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBLEtBREE7QUFFQTtBQUZBLEdBTkE7O0FBV0E7QUFDQTs7QUFFQTtBQUNBLGlCQUhBLHlCQUdBLEVBSEEsRUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBUEE7OztBQVNBO0FBQ0EsZ0JBVkEsMEJBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQWRBOzs7QUFnQkE7QUFDQSxjQWpCQSxzQkFpQkEsSUFqQkEsRUFpQkE7QUFDQTtBQUNBO0FBbkJBO0FBWkEiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxzZWN0aW9uIGNsYXNzPVwiaGlzdG9yeS1wYWdlXCI+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1yb3cgZmxleC1taWRkbGUgZmxleC1zdHJldGNoIHB1c2gtYm90dG9tXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmV5IHB1c2gtcmlnaHRcIj5cbiAgICAgICAgWW91ciBjdXN0b20gYWxhcm1zIGFuZCBwcmljZSB3YXRjaCBhbGVydHMgd2lsbCBiZSBhZGRlZCB0byB0aGlzIGxpc3QgaW4gY2FzZSB5b3UgbWlzc2VkIGFueS5cbiAgICAgICAgVXNlIHRoZSBGbHVzaCBidXR0b24gdG8gZGVsZXRlIGFsbCBlbnRyaWVzLlxuICAgICAgPC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiZm9ybS1idG4gYmctZGFuZ2VyLWhvdmVyIGljb24tcmVzZXQgaWNvbkxlZnRcIiA6ZGlzYWJsZWQ9XCIhaGlzdG9yeURhdGEubGVuZ3RoXCIgQGNsaWNrLnByZXZlbnQ9XCJmbHVzaEhpc3RvcnkoKVwiPlxuICAgICAgICBGbHVzaFxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IHYtaWY9XCIhaGlzdG9yeURhdGEubGVuZ3RoXCIgY2xhc3M9XCJpY29uLWluZm8gaWNvbkxlZnQgdGV4dC1ncmV5XCI+XG4gICAgICBUaGVyZSdzIG5vdGhpbmcgaGVyZSByaWdodCBub3cuXG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1saXN0IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaFwiPlxuICAgICAgPGRpdiB2LWZvcj1cImUgaW4gaGlzdG9yeURhdGFcIiA6a2V5PVwiZS5pZFwiIGNsYXNzPVwiZmxleC1pdGVtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLXJpZ2h0XCI+XG4gICAgICAgICAgPFRva2VuSWNvbiA6aW1hZ2U9XCJlLmljb25cIj48L1Rva2VuSWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1icmlnaHRcIj57eyBlLnRpdGxlIH19PC9zcGFuPiA8YnIgLz5cbiAgICAgICAgICA8c21hbGw+e3sgZm9ybWF0SW5mbyggZS5pbmZvICkgfX08L3NtYWxsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2xpcCB0ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImljb24tY2xvc2VcIiBAY2xpY2s9XCJkZWxldGVIaXN0b3J5KCBlLmlkIClcIj48L2J1dHRvbj4gPGJyIC8+XG4gICAgICAgICAgPHNtYWxsIGNsYXNzPVwidGV4dC1ncmV5XCI+e3sgZS50aW1lIHwgdG9FbGFwc2VkIH19IGFnbzwvc21hbGw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgPC9zZWN0aW9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbi8vIGNvbXBvbmVudHNcbmltcG9ydCBUb2tlbkljb24gZnJvbSAnLi9Ub2tlbkljb24udnVlJztcblxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IGxpc3RcbiAgY29tcG9uZW50czogeyBUb2tlbkljb24gfSxcblxuICAvLyBjb21wb25lbnQgcHJvcHNcbiAgcHJvcHM6IHtcbiAgICBtb2RhbERhdGE6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0KCkgeyByZXR1cm4ge30gfSB9LFxuICAgIGhpc3RvcnlEYXRhOiB7IHR5cGU6IEFycmF5LCBkZWZhdWx0OiBbXSwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgfSxcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBtZXRob2RzOiB7XG5cbiAgICAvLyBkZWxldGUgaXRlbSBmcm9tIGhpc3RvcnlcbiAgICBkZWxldGVIaXN0b3J5KCBpZCApIHtcbiAgICAgIGxldCBzYXZlZCA9IHRoaXMuJGhpc3RvcnkuZGVsZXRlKCBpZCApO1xuICAgICAgaWYgKCAhc2F2ZWQgKSByZXR1cm4gdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgJ1RoZXJlIHdhcyBhIHByb2JsZW0gdXBkYXRpbmcgdGhlIGhpc3RvcnkgZGF0YS4nLCAnd2FybmluZycgKTtcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdIaXN0b3J5IGRhdGEgaGFzIGJlZW4gdXBkYXRlZC4nLCAnc3VjY2VzcycgKTtcbiAgICB9LFxuXG4gICAgLy8gZmx1c2ggaGlzdG9yeSBsaXN0XG4gICAgZmx1c2hIaXN0b3J5KCkge1xuICAgICAgbGV0IHNhdmVkID0gdGhpcy4kaGlzdG9yeS5mbHVzaCgpO1xuICAgICAgaWYgKCAhc2F2ZWQgKSByZXR1cm4gdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgJ1RoZXJlIHdhcyBhIHByb2JsZW0gdXBkYXRpbmcgdGhlIGhpc3RvcnkgZGF0YS4nLCAnd2FybmluZycgKTtcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdIaXN0b3J5IGRhdGEgaGFzIGJlZW4gZmx1c2hlZC4nLCAnc3VjY2VzcycgKTtcbiAgICB9LFxuXG4gICAgLy8gZm9ybWF0IGluZm8gc3RyaW5nXG4gICAgZm9ybWF0SW5mbyggaW5mbyApIHtcbiAgICAgIHJldHVybiBTdHJpbmcoIGluZm8gfHwgJycgKS5yZXBsYWNlKCAvW1xcclxcbl0rL2csICcsICcgKSArICcuJztcbiAgICB9XG4gIH0sXG59XG48L3NjcmlwdD5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL0hpc3RvcnlQYWdlLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AlarmsList_vue__ = __webpack_require__(28);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1f9f2f40_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AlarmsList_vue__ = __webpack_require__(89);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AlarmsList_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1f9f2f40_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AlarmsList_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BbGFybXNMaXN0LnZ1ZT80N2U2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FsYXJtc0xpc3QudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BbGFybXNMaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMWY5ZjJmNDBcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BbGFybXNMaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0FsYXJtc0xpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    alarmsData: { type: Object, default: {}, required: true },\n    pairData: { type: Object, default: function _default() {\n        return {};\n      } }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      curPrice: ''\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // filter alarms for this token\n    alarmsList: function alarmsList() {\n      var list = [];\n      var alarms = this.alarmsData;\n      var pair = this.pairData;\n\n      // filter alarms for a specific pair\n      if (pair.symbol) {\n        list = alarms.hasOwnProperty(pair.symbol) ? alarms[pair.symbol] : [];\n      }\n      // or build list of alarms for all pairs\n      else {\n          Object.keys(alarms).forEach(function (symbol) {\n            Array.from(alarms[symbol]).forEach(function (alarm) {\n              list.push(alarm);\n            });\n          });\n        }\n      // sort by pair ascending\n      list = list.sort(function (a, b) {\n        if (a.symbol < b.symbol) return -1;\n        if (a.symbol > b.symbol) return 1;\n        return 0;\n      });\n      // update count outside\n      this.$emit('listCount', list.length);\n      return list;\n    }\n  },\n\n  // component methods\n  methods: {\n\n    // save a new alert for this token\n    saveAlarm: function saveAlarm(e) {\n      var price = parseFloat(e.target.alarmPrice.value) || 0;\n      var _pairData = this.pairData,\n          symbol = _pairData.symbol,\n          asset = _pairData.asset,\n          close = _pairData.close;\n\n\n      if (!price || price === close) {\n        var word = price === close ? 'different' : 'valid';\n        return this.$bus.emit('showNotice', 'Please enter a ' + word + ' ' + asset + ' price.', 'warning');\n      }\n      var saved = this.$notify.saveAlarm(this.pairData, price);\n      if (!saved) return this.$bus.emit('showNotice', 'There was a problem updating the alarms data.', 'warning');\n      this.$bus.emit('showNotice', 'New alarm for ' + symbol + ' has been saved.', 'success');\n    },\n\n\n    // remove an alert from the list by id\n    deleteAlarm: function deleteAlarm(symbol, id) {\n      var saved = this.$notify.deleteAlarm(symbol, id);\n      if (!saved) return this.$bus.emit('showNotice', 'There was a problem updating the alarms data.', 'warning');\n      this.$bus.emit('showNotice', 'Alarm for ' + symbol + ' has been removed from list.', 'success');\n    }\n  },\n\n  // component mounted\n  mounted: function mounted() {\n    if (this.pairData.symbol) {\n      this.curPrice = Number(this.pairData.close).toFixed(8);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvQWxhcm1zTGlzdC52dWU/Y2ZmMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZEQURBO0FBRUE7QUFBQTtBQUFBO0FBRkEsR0FIQTs7QUFRQTtBQUNBLE1BVEEsa0JBU0E7QUFDQTtBQUNBO0FBREE7QUFHQSxHQWJBOzs7QUFlQTtBQUNBOztBQUVBO0FBQ0EsY0FIQSx3QkFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEEsV0FJQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0EsV0FGQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BSkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQTNCQSxHQWhCQTs7QUE4Q0E7QUFDQTs7QUFFQTtBQUNBLGFBSEEscUJBR0EsQ0FIQSxFQUdBO0FBQ0E7QUFEQSxzQkFFQSxhQUZBO0FBQUEsVUFFQSxNQUZBLGFBRUEsTUFGQTtBQUFBLFVBRUEsS0FGQSxhQUVBLEtBRkE7QUFBQSxVQUVBLEtBRkEsYUFFQSxLQUZBOzs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBZEE7OztBQWdCQTtBQUNBLGVBakJBLHVCQWlCQSxNQWpCQSxFQWlCQSxFQWpCQSxFQWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckJBLEdBL0NBOztBQXVFQTtBQUNBLFNBeEVBLHFCQXdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBNUVBIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8c2VjdGlvbj5cblxuICAgIDxkaXYgdi1pZj1cIiFwYWlyRGF0YS5zeW1ib2xcIiBjbGFzcz1cInRleHQtZ3JleSBwdXNoLWJvdHRvbVwiPlxuICAgICAgTGlzdCBvZiBhY3RpdmUgYWxhcm1zIGZvciBhbGwgc3ltYm9scyAoe3sgYWxhcm1zTGlzdC5sZW5ndGggfX0pXG4gICAgPC9kaXY+XG5cbiAgICA8Zm9ybSB2LWlmPVwicGFpckRhdGEuc3ltYm9sXCIgY2xhc3M9XCJmbGV4LXJvdyBmbGV4LW1pZGRsZSBmbGV4LXN0cmV0Y2ggcHVzaC1ib3R0b21cIiBhY3Rpb249XCIjXCIgQHN1Ym1pdC5wcmV2ZW50PVwic2F2ZUFsYXJtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pbnB1dCBmbGV4LTEgcHVzaC1yaWdodFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbi1jaGFydC1saW5lIHB1c2gtcmlnaHRcIj48L2Rpdj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwicHVzaC1yaWdodFwiIHBsYWNlaG9sZGVyPVwiMC4wMDAwMDAwMFwiIG5hbWU9XCJhbGFybVByaWNlXCIgdi1tb2RlbD1cImN1clByaWNlXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZ3JleVwiPnt7IHBhaXJEYXRhLmFzc2V0IH19PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiZm9ybS1idG4gYmctZ3JleS1ob3ZlciBpY29uLWFsYXJtIGljb25MZWZ0XCI+U2V0PC9idXR0b24+XG4gICAgPC9mb3JtPlxuXG4gICAgPGRpdiB2LWlmPVwiIWFsYXJtc0xpc3QubGVuZ3RoXCIgY2xhc3M9XCJpY29uLWluZm8gaWNvbkxlZnQgdGV4dC1ncmV5XCI+XG4gICAgICA8c3BhbiB2LWlmPVwicGFpckRhdGEuc3ltYm9sXCI+VGhlcmUgYXJlIG5vIGFsYXJtcyBmb3Ige3sgcGFpckRhdGEuc3ltYm9sIH19Ljwvc3Bhbj5cbiAgICAgIDxzcGFuIHYtZWxzZT5UaGVyZSBhcmUgbm8gYWxhcm1zLjwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4LWxpc3RcIj5cbiAgICAgIDxkaXYgdi1mb3I9XCJhIGluIGFsYXJtc0xpc3RcIiA6a2V5PVwiYS5pZFwiIGNsYXNzPVwiZmxleC1pdGVtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgdGV4dC1jbGlwIHB1c2gtcmlnaHRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZGVmYXVsdCBpY29uLWFsYXJtIGljb25MZWZ0XCI+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1icmlnaHRcIj57eyBhLnBhaXIgfX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWJpZ1wiIDpjbGFzcz1cIlsgJ3RleHQtJysgYS5jaGVjayBdXCI+Jm5ic3A7e3sgYS5zaWduIH19Jm5ic3A7PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1icmlnaHRcIj57eyBhLmFsYXJtUHJpY2UgfCB0b0ZpeGVkKCBhLmFzc2V0ICkgfX08L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWRlZmF1bHRcIj57eyBhLmFzc2V0IH19PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2xpcCBwdXNoLXJpZ2h0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWdyZXlcIj57eyBhLnRpbWUgfCB0b0VsYXBzZWQgfX0gYWdvPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2xpcFwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJpY29uLWNsb3NlXCIgQGNsaWNrPVwiZGVsZXRlQWxhcm0oIGEuc3ltYm9sLCBhLmlkIClcIj48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICA8L3NlY3Rpb24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgYWxhcm1zRGF0YTogeyB0eXBlOiBPYmplY3QsIGRlZmF1bHQ6IHt9LCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHBhaXJEYXRhOiB7IHR5cGU6IE9iamVjdCwgZGVmYXVsdDogKCkgPT4geyByZXR1cm4ge30gfSB9LFxuICB9LFxuXG4gIC8vIGNvbW9uZW50IGRhdGFcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3VyUHJpY2U6ICcnLFxuICAgIH1cbiAgfSxcblxuICAvLyBjb21wdXRlZCBtZXRob2RzXG4gIGNvbXB1dGVkOiB7XG5cbiAgICAvLyBmaWx0ZXIgYWxhcm1zIGZvciB0aGlzIHRva2VuXG4gICAgYWxhcm1zTGlzdCgpIHtcbiAgICAgIGxldCBsaXN0ICAgPSBbXTtcbiAgICAgIGxldCBhbGFybXMgPSB0aGlzLmFsYXJtc0RhdGE7XG4gICAgICBsZXQgcGFpciAgID0gdGhpcy5wYWlyRGF0YTtcblxuICAgICAgLy8gZmlsdGVyIGFsYXJtcyBmb3IgYSBzcGVjaWZpYyBwYWlyXG4gICAgICBpZiAoIHBhaXIuc3ltYm9sICkge1xuICAgICAgICBsaXN0ID0gYWxhcm1zLmhhc093blByb3BlcnR5KCBwYWlyLnN5bWJvbCApID8gYWxhcm1zWyBwYWlyLnN5bWJvbCBdIDogW107XG4gICAgICB9XG4gICAgICAvLyBvciBidWlsZCBsaXN0IG9mIGFsYXJtcyBmb3IgYWxsIHBhaXJzXG4gICAgICBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmtleXMoIGFsYXJtcyApLmZvckVhY2goIHN5bWJvbCA9PiB7XG4gICAgICAgICAgQXJyYXkuZnJvbSggYWxhcm1zWyBzeW1ib2wgXSApLmZvckVhY2goIGFsYXJtID0+IHsgbGlzdC5wdXNoKCBhbGFybSApIH0gKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBzb3J0IGJ5IHBhaXIgYXNjZW5kaW5nXG4gICAgICBsaXN0ID0gbGlzdC5zb3J0KCAoIGEsIGIgKSA9PiB7XG4gICAgICAgIGlmICggYS5zeW1ib2wgPCBiLnN5bWJvbCApIHJldHVybiAtMTtcbiAgICAgICAgaWYgKCBhLnN5bWJvbCA+IGIuc3ltYm9sICkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSk7XG4gICAgICAvLyB1cGRhdGUgY291bnQgb3V0c2lkZVxuICAgICAgdGhpcy4kZW1pdCggJ2xpc3RDb3VudCcsIGxpc3QubGVuZ3RoICk7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuICB9LFxuXG4gIC8vIGNvbXBvbmVudCBtZXRob2RzXG4gIG1ldGhvZHM6IHtcblxuICAgIC8vIHNhdmUgYSBuZXcgYWxlcnQgZm9yIHRoaXMgdG9rZW5cbiAgICBzYXZlQWxhcm0oIGUgKSB7XG4gICAgICBsZXQgcHJpY2UgPSBwYXJzZUZsb2F0KCBlLnRhcmdldC5hbGFybVByaWNlLnZhbHVlICkgfHwgMDtcbiAgICAgIGxldCB7IHN5bWJvbCwgYXNzZXQsIGNsb3NlIH0gPSB0aGlzLnBhaXJEYXRhO1xuXG4gICAgICBpZiAoICFwcmljZSB8fCBwcmljZSA9PT0gY2xvc2UgKSB7XG4gICAgICAgIGxldCB3b3JkID0gKCBwcmljZSA9PT0gY2xvc2UgKSA/ICdkaWZmZXJlbnQnIDogJ3ZhbGlkJztcbiAgICAgICAgcmV0dXJuIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdQbGVhc2UgZW50ZXIgYSAnKyB3b3JkICsnICcrIGFzc2V0ICsnIHByaWNlLicsICd3YXJuaW5nJyApO1xuICAgICAgfVxuICAgICAgbGV0IHNhdmVkID0gdGhpcy4kbm90aWZ5LnNhdmVBbGFybSggdGhpcy5wYWlyRGF0YSwgcHJpY2UgKTtcbiAgICAgIGlmICggIXNhdmVkICkgcmV0dXJuIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdUaGVyZSB3YXMgYSBwcm9ibGVtIHVwZGF0aW5nIHRoZSBhbGFybXMgZGF0YS4nLCAnd2FybmluZycgKTtcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdOZXcgYWxhcm0gZm9yICcrIHN5bWJvbCArJyBoYXMgYmVlbiBzYXZlZC4nLCAnc3VjY2VzcycgKTtcbiAgICB9LFxuXG4gICAgLy8gcmVtb3ZlIGFuIGFsZXJ0IGZyb20gdGhlIGxpc3QgYnkgaWRcbiAgICBkZWxldGVBbGFybSggc3ltYm9sLCBpZCApIHtcbiAgICAgIGxldCBzYXZlZCA9IHRoaXMuJG5vdGlmeS5kZWxldGVBbGFybSggc3ltYm9sLCBpZCApO1xuICAgICAgaWYgKCAhc2F2ZWQgKSByZXR1cm4gdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgJ1RoZXJlIHdhcyBhIHByb2JsZW0gdXBkYXRpbmcgdGhlIGFsYXJtcyBkYXRhLicsICd3YXJuaW5nJyApO1xuICAgICAgdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgJ0FsYXJtIGZvciAnKyBzeW1ib2wgKycgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGxpc3QuJywgJ3N1Y2Nlc3MnICk7XG4gICAgfSxcbiAgfSxcblxuICAvLyBjb21wb25lbnQgbW91bnRlZFxuICBtb3VudGVkKCkge1xuICAgIGlmICggdGhpcy5wYWlyRGF0YS5zeW1ib2wgKSB7XG4gICAgICB0aGlzLmN1clByaWNlID0gTnVtYmVyKCB0aGlzLnBhaXJEYXRhLmNsb3NlICkudG9GaXhlZCggOCApO1xuICAgIH1cbiAgfSxcblxufVxuPC9zY3JpcHQ+XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvY29tcG9uZW50cy9BbGFybXNMaXN0LnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Tabs_vue__ = __webpack_require__(5);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Tabs: __WEBPACK_IMPORTED_MODULE_0__Tabs_vue__[\"a\" /* default */] },\n\n  // component data\n  data: function data() {\n    return {\n      addrlist: [{ name: 'Bitcoin', symbol: 'BTC', active: true, address: '15WptmgmALYxsrXDWgsmadL6mA1ELGGy56' }, { name: 'Etherium', symbol: 'ETH', active: false, address: '0xd069E9F04e8612B494D894A749Ef305854DbfcA0' }, { name: 'Litecoin', symbol: 'LTC', active: false, address: 'LP4WdbQgPSZAtXwZ7onx6PszPZ7oD3nN1Q' }]\n    };\n  },\n\n\n  // component methods\n  methods: {\n\n    // copy text to clipboard\n    copyText: function copyText(txt) {\n      txt = String(txt || '').trim();\n      if (!txt) return;\n\n      var input = document.createElement('input');\n      document.body.appendChild(input);\n      input.value = txt;\n      input.select();\n      document.execCommand('Copy');\n      document.body.removeChild(input);\n      this.$bus.emit('showNotice', 'Address copied to clipboard.', 'success');\n      input = null;\n    }\n  }\n\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvRG9uYXRlUGFnZS52dWU/OThiMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0ZBSEE7O0FBS0E7QUFDQSxNQU5BLGtCQU1BO0FBQ0E7QUFDQSxpQkFDQSwrRkFEQSxFQUVBLHlHQUZBLEVBR0EsaUdBSEE7QUFEQTtBQU9BLEdBZEE7OztBQWdCQTtBQUNBOztBQUVBO0FBQ0EsWUFIQSxvQkFHQSxHQUhBLEVBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBOztBQWpCQSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICA8c2VjdGlvbj5cclxuXHJcbiAgICA8ZGl2IGNsYXNzPVwicHVzaC1ib3R0b21cIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tbGFiZWwgcHVzaC1ib3R0b21cIj5cclxuICAgICAgICBIZWxwIFRoZSBEZXZlbG9wZXIgPGkgY2xhc3M9XCJpY29uLWRvd24tb3BlblwiPjwvaT5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxwPlxyXG4gICAgICAgIElmIHlvdSBmaW5kIHRoaXMgYXBwIHVzZWZ1bCBhbmQgd291bGQgbGlrZSB0byBzaG93IHlvdXJcclxuICAgICAgICBhcHByZWNpYXRpb24gYnkgbWFraW5nIGEgc21hbGwgZG9uYXRpb24gdG8gaGVscCB0aGUgZGV2ZWxvcGVyLFxyXG4gICAgICAgIGhlcmUgYXJlIHRoZSBjcnlwdG8gYWRkcmVzc2VzIHlvdSBjYW4gdXNlIHRvIHNlbmQgeW91ciBkb25hdGlvbnMgdG8uLi5cclxuICAgICAgPC9wPlxyXG4gICAgPC9kaXY+XHJcblxyXG4gICAgPGhyIC8+XHJcblxyXG4gICAgPFRhYnMgcmVmPVwidGFic1wiPlxyXG4gICAgICA8c2VjdGlvbiB2LWZvcj1cImQgaW4gYWRkcmxpc3RcIiA6a2V5PVwiZC5zeW1ib2xcIiA6YnRuLW5hbWU9XCJbIGQubmFtZSArICcgKCcrIGQuc3ltYm9sICsnKScgXVwiIDphY3RpdmU9XCJkLmFjdGl2ZVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJxci13cmFwIHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICA8aW1nIGNsYXNzPVwicXItaW1hZ2UgcHVzaC1ib3R0b21cIiA6c3JjPVwiWyAnaHR0cHM6Ly9jaGFydC5nb29nbGVhcGlzLmNvbS9jaGFydD9jaHM9MjUweDI1MCZjaHQ9cXImY2hvZT1VVEYtOCZjaGw9JyArIGQuYWRkcmVzcyBdXCIgd2lkdGg9XCIyNTBcIiBoZWlnaHQ9XCIyNTBcIiA6YWx0PVwiZC5uYW1lXCIgLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlciBwdXNoLWJvdHRvbVwiPlNlbmQgb25seSA8c3BhbiBjbGFzcz1cInRleHQtcHJpbWFyeVwiPnt7IGQuc3ltYm9sIH19PC9zcGFuPiB0byB0aGlzIGFkZHJlc3M8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtY2VudGVyIHB1c2gtYm90dG9tXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1ncmV5IHB1c2gtcmlnaHRcIj57eyBkLnN5bWJvbCB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiIHB1c2gtcmlnaHQgdGV4dC1jZW50ZXIgdGV4dC1jbGlwXCIgdi1tb2RlbD1cImQuYWRkcmVzc1wiIC8+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJpY29uLWNvcHkgdGV4dC1wcmltYXJ5LWhvdmVyXCIgQGNsaWNrPVwiY29weVRleHQoIGQuYWRkcmVzcyApXCIgdGl0bGU9XCJDb3B5XCIgdi10b29sdGlwPjwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvc2VjdGlvbj5cclxuICAgIDwvVGFicz5cclxuXHJcbiAgPC9zZWN0aW9uPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IFRhYnMgZnJvbSAnLi9UYWJzLnZ1ZSc7XHJcblxyXG4vLyBjb21wb25lbnRcclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cclxuICAvLyBjb21wb25lbnQgbGlzdFxyXG4gIGNvbXBvbmVudHM6IHsgVGFicyB9LFxyXG5cclxuICAvLyBjb21wb25lbnQgZGF0YVxyXG4gIGRhdGEoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhZGRybGlzdDogW1xyXG4gICAgICAgIHsgbmFtZTogJ0JpdGNvaW4nLCAgc3ltYm9sOiAnQlRDJywgYWN0aXZlOiB0cnVlLCAgYWRkcmVzczogJzE1V3B0bWdtQUxZeHNyWERXZ3NtYWRMNm1BMUVMR0d5NTYnLCB9LFxyXG4gICAgICAgIHsgbmFtZTogJ0V0aGVyaXVtJywgc3ltYm9sOiAnRVRIJywgYWN0aXZlOiBmYWxzZSwgYWRkcmVzczogJzB4ZDA2OUU5RjA0ZTg2MTJCNDk0RDg5NEE3NDlFZjMwNTg1NERiZmNBMCcsIH0sXHJcbiAgICAgICAgeyBuYW1lOiAnTGl0ZWNvaW4nLCBzeW1ib2w6ICdMVEMnLCBhY3RpdmU6IGZhbHNlLCBhZGRyZXNzOiAnTFA0V2RiUWdQU1pBdFh3Wjdvbng2UHN6UFo3b0Qzbk4xUScsIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gY29tcG9uZW50IG1ldGhvZHNcclxuICBtZXRob2RzOiB7XHJcblxyXG4gICAgLy8gY29weSB0ZXh0IHRvIGNsaXBib2FyZFxyXG4gICAgY29weVRleHQoIHR4dCApIHtcclxuICAgICAgdHh0ID0gU3RyaW5nKCB0eHQgfHwgJycgKS50cmltKCk7XHJcbiAgICAgIGlmICggIXR4dCApIHJldHVybjtcclxuXHJcbiAgICAgIGxldCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdpbnB1dCcgKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggaW5wdXQgKTtcclxuICAgICAgaW5wdXQudmFsdWUgPSB0eHQ7XHJcbiAgICAgIGlucHV0LnNlbGVjdCgpO1xyXG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCggJ0NvcHknICk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoIGlucHV0ICk7XHJcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdBZGRyZXNzIGNvcGllZCB0byBjbGlwYm9hcmQuJywgJ3N1Y2Nlc3MnICk7XHJcbiAgICAgIGlucHV0ID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gIH1cclxuXHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbi5xci13cmFwIHtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAucXItaW1hZ2Uge1xyXG4gICAgbWFyZ2luOiAwIGF1dG8gMWVtIGF1dG87XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgfVxyXG59XHJcbjwvc3R5bGU+XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvRG9uYXRlUGFnZS52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Tabs_vue__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TokenIcon_vue__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LineChart_vue__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AlarmsList_vue__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__NewsList_vue__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__modules_utils__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Spinner: __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__[\"a\" /* default */], Tabs: __WEBPACK_IMPORTED_MODULE_1__Tabs_vue__[\"a\" /* default */], TokenIcon: __WEBPACK_IMPORTED_MODULE_2__TokenIcon_vue__[\"a\" /* default */], LineChart: __WEBPACK_IMPORTED_MODULE_3__LineChart_vue__[\"a\" /* default */], AlarmsList: __WEBPACK_IMPORTED_MODULE_4__AlarmsList_vue__[\"a\" /* default */], NewsList: __WEBPACK_IMPORTED_MODULE_5__NewsList_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    modalData: { type: Object, default: {}, required: true }, // pair data\n    alarmsData: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    newsData: { type: Object, default: function _default() {\n        return {};\n      }\n    }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      coinRank: 0,\n      marketCap: 0,\n      totalSupply: 0,\n      totalVolume: 0,\n      curPrice: this.modalData.close,\n      usdPrice: 0,\n      alarmsCount: 0,\n      newsCount: 0,\n      // line chart\n      chartWidth: 800,\n      chartHeight: 120,\n      chartData: []\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // update title as token data changes\n    modalData: function modalData() {\n      var p = this.modalData;\n      this.$bus.emit('setTitle', p.pair + ' ' + p.arrow + ' ' + p.sign + p.percent);\n    }\n  },\n\n  // component methods\n  methods: {\n\n    // update alarms count for this token\n    onAlarmsCount: function onAlarmsCount(count) {\n      this.alarmsCount = count;\n    },\n\n\n    // update events count for this token\n    onNewsCount: function onNewsCount(count) {\n      this.newsCount = count;\n    },\n\n\n    // spinner helper\n    spinner: function spinner(name, method, message) {\n      if (!this.$refs[name] || !method) return;\n      this.$refs[name][method](message);\n    },\n\n\n    // fetch token data from api\n    fetchGlobalData: function fetchGlobalData() {\n      var _this = this;\n\n      var token = this.modalData.token;\n      token = token === 'BCC' ? 'BCH' : token;\n      token = token === 'IOTA' ? 'IOT' : token;\n\n      var endpoint = 'https://coincap.io/page/' + token;\n\n      this.spinner('globalSpinner', 'show', 'loading market data');\n      this.$ajax.get(endpoint, {\n        type: 'json',\n        cache: 3600,\n        proxy: false,\n\n        error: function error(xhr, status, _error) {\n          _this.$bus.emit('showNotice', _error, 'warning');\n          _this.spinner('globalSpinner', 'error', 'error fetching market data');\n        },\n\n        success: function success(xhr, status, response) {\n          if (!response || !response.id) return _this.spinner('globalSpinner', 'error', 'No data for ' + token);\n          _this.spinner('globalSpinner', 'hide');\n\n          if (response.rank) _this.coinRank = response.rank;\n          if (response.market_cap) _this.marketCap = response.market_cap;\n          if (response.supply) _this.totalSupply = response.supply;\n          if (response.volume) _this.totalVolume = response.volume;\n          if (response.price_usd) _this.usdPrice = response.price_usd;\n        }\n      });\n    },\n\n\n    // fetch last 24h candle data\n    fetchChartData: function fetchChartData() {\n      var _this2 = this;\n\n      var symbol = this.modalData.symbol;\n      var endpoint = 'https://api.binance.com/api/v1/klines?symbol=' + symbol + '&interval=1h&limit=168';\n\n      this.spinner('chartSpinner', 'show', 'loading chart data');\n      this.$ajax.get(endpoint, {\n        type: 'json',\n        cache: 3600,\n\n        error: function error(xhr, status, _error2) {\n          _this2.$bus.emit('showNotice', _error2, 'warning');\n          _this2.spinner('chartSpinner', 'error', 'error fetching chart data');\n        },\n\n        success: function success(xhr, status, response) {\n          if (!Array.isArray(response)) return _this2.spinner('chartSpinner', 'error', 'No chart for ' + symbol);\n          _this2.spinner('chartSpinner', 'hide');\n\n          _this2.chartData = [];\n          for (var i = 0; i < response.length; ++i) {\n            _this2.chartData.push(parseFloat(response[i][4])); // close price\n          }\n        }\n      });\n    }\n  },\n\n  // component mounted\n  mounted: function mounted() {\n    this.fetchGlobalData();\n    this.fetchChartData();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__modules_utils__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    newsData: { type: Object, default: {}, required: true },\n    pairData: { type: Object, default: function _default() {\n        return {};\n      } }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      sentimentData: null\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // get filtered list and emit list length\n    newsList: function newsList() {\n      return this.getNewsList();\n    }\n  },\n\n  // component methods\n  methods: {\n\n    // get news list for a token, or all items\n    getNewsList: function getNewsList() {\n      var pair = this.pairData;\n      var list = this.newsData.list || [];\n\n      if (pair.token) {\n        var search = pair.token + '|' + pair.name;\n        list = __WEBPACK_IMPORTED_MODULE_0__modules_utils___default.a.search(list, 'text', search, true);\n      }\n      this.$emit('listCount', list.length);\n      return list;\n    },\n\n\n    // analize news data for token\n    analizeNewsList: function analizeNewsList() {\n      var data = null;\n      var list = this.getNewsList();\n\n      if (list.length && this.pairData.token) {\n        var text = list.reduce(function (a, t) {\n          return a += ' ' + t.text;\n        }, '').trim();\n        data = this.$sentiment.analyze(text);\n      }\n      this.sentimentData = data;\n    }\n  },\n\n  // on mounted\n  mounted: function mounted() {\n    this.analizeNewsList();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlPzYyMWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkRBREE7QUFFQTtBQUFBO0FBQUE7QUFGQSxHQUhBOztBQVFBO0FBQ0EsTUFUQSxrQkFTQTtBQUNBO0FBQ0E7QUFEQTtBQUdBLEdBYkE7OztBQWVBO0FBQ0E7O0FBRUE7QUFDQSxZQUhBLHNCQUdBO0FBQ0E7QUFDQTtBQUxBLEdBaEJBOztBQXdCQTtBQUNBOztBQUVBO0FBQ0EsZUFIQSx5QkFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FiQTs7O0FBZUE7QUFDQSxtQkFoQkEsNkJBZ0JBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekJBLEdBekJBOztBQXFEQTtBQUNBLFNBdERBLHFCQXNEQTtBQUNBO0FBQ0E7QUF4REEiLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxzZWN0aW9uPlxuXG4gICAgPGRpdiB2LWlmPVwic2VudGltZW50RGF0YVwiIGNsYXNzPVwicHVzaC1ib3R0b21cIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1icmlnaHQgdGV4dC1jbGlwXCI+U2VudGltZW50IGZvciB7eyBwYWlyRGF0YS5uYW1lIH19IGlzICZuYnNwOzwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1ub3dyYXAgdGV4dC1tb25vc3BhY2VcIiA6Y2xhc3M9XCJzZW50aW1lbnREYXRhLnN0eWxlc1wiIHYtaHRtbD1cInNlbnRpbWVudERhdGEuc2VudGltZW50XCI+PC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiB2LWlmPVwiIW5ld3NMaXN0Lmxlbmd0aFwiIGNsYXNzPVwiaWNvbi1pbmZvIGljb25MZWZ0IHRleHQtZ3JleSBwdXNoLWJvdHRvbVwiPlxuICAgICAgPHNwYW4gdi1pZj1cInBhaXJEYXRhLnRva2VuXCI+VGhlcmUgYXJlIG5vIG5ld3MvZXZlbnRzIGRhdGEgZm9yIHt7IHBhaXJEYXRhLm5hbWUgfX0uPC9zcGFuPlxuICAgICAgPHNwYW4gdi1lbHNlPlRoZXJlIGFyZSBubyBuZXdzL2V2ZW50cyBsb2FkZWQuPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXgtbGlzdFwiPlxuICAgICAgPGRpdiB2LWZvcj1cInQgaW4gbmV3c0xpc3RcIiA6a2V5PVwidC5pZFwiIGNsYXNzPVwiZmxleC1pdGVtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiPlxuICAgICAgICAgIDxhIGNsYXNzPVwiaWNvbi10d3RyIGljb25MZWZ0IHRleHQtcHJpbWFyeVwiIDpocmVmPVwidC5saW5rXCIgdGFyZ2V0PVwiX2JsYW5rXCI+e3sgdC5uYW1lIH19PC9hPiAmbmJzcDtcbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJ0ZXh0LWdyZXlcIj5Ae3sgdC5oYW5kbGUgfX08L3NtYWxsPiA8YnIgLz5cbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJyaWdodFwiIHYtaHRtbD1cInQudGV4dFwiPjwvc21hbGw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgPC9zZWN0aW9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB1dGlscyBmcm9tICcuLi9tb2R1bGVzL3V0aWxzJztcblxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgbmV3c0RhdGE6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0OiB7fSwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBwYWlyRGF0YTogeyB0eXBlOiBPYmplY3QsIGRlZmF1bHQ6ICgpID0+IHsgcmV0dXJuIHt9IH0gfSxcbiAgfSxcblxuICAvLyBjb21wb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZW50aW1lbnREYXRhOiBudWxsLFxuICAgIH1cbiAgfSxcblxuICAvLyBjb21wdXRlZCBtZXRob2RzXG4gIGNvbXB1dGVkOiB7XG5cbiAgICAvLyBnZXQgZmlsdGVyZWQgbGlzdCBhbmQgZW1pdCBsaXN0IGxlbmd0aFxuICAgIG5ld3NMaXN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0TmV3c0xpc3QoKTtcbiAgICB9LFxuICB9LFxuXG4gIC8vIGNvbXBvbmVudCBtZXRob2RzXG4gIG1ldGhvZHM6IHtcblxuICAgIC8vIGdldCBuZXdzIGxpc3QgZm9yIGEgdG9rZW4sIG9yIGFsbCBpdGVtc1xuICAgIGdldE5ld3NMaXN0KCkge1xuICAgICAgbGV0IHBhaXIgPSB0aGlzLnBhaXJEYXRhO1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLm5ld3NEYXRhLmxpc3QgfHwgW107XG5cbiAgICAgIGlmICggcGFpci50b2tlbiApIHtcbiAgICAgICAgbGV0IHNlYXJjaCA9IHBhaXIudG9rZW4gKyd8JysgcGFpci5uYW1lO1xuICAgICAgICBsaXN0ID0gdXRpbHMuc2VhcmNoKCBsaXN0LCAndGV4dCcsIHNlYXJjaCwgdHJ1ZSApO1xuICAgICAgfVxuICAgICAgdGhpcy4kZW1pdCggJ2xpc3RDb3VudCcsIGxpc3QubGVuZ3RoICk7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuXG4gICAgLy8gYW5hbGl6ZSBuZXdzIGRhdGEgZm9yIHRva2VuXG4gICAgYW5hbGl6ZU5ld3NMaXN0KCkge1xuICAgICAgbGV0IGRhdGEgPSBudWxsO1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLmdldE5ld3NMaXN0KCk7XG5cbiAgICAgIGlmICggbGlzdC5sZW5ndGggJiYgdGhpcy5wYWlyRGF0YS50b2tlbiApIHtcbiAgICAgICAgbGV0IHRleHQgPSBsaXN0LnJlZHVjZSggKCBhLCB0ICkgPT4gYSArPSAnICcrIHQudGV4dCwgJycgKS50cmltKCk7XG4gICAgICAgIGRhdGEgPSB0aGlzLiRzZW50aW1lbnQuYW5hbHl6ZSggdGV4dCApO1xuICAgICAgfVxuICAgICAgdGhpcy5zZW50aW1lbnREYXRhID0gZGF0YTtcbiAgICB9LFxuICB9LFxuXG4gIC8vIG9uIG1vdW50ZWRcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLmFuYWxpemVOZXdzTGlzdCgpO1xuICB9LFxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_polyfills__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_polyfills___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__modules_polyfills__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_router__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_ajax__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_notify__ = __webpack_require__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_tooltip__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_history__ = __webpack_require__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_sentiment__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_sentiment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__modules_sentiment__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__modules_bus__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__modules_utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__modules_utils__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__components_App_vue__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_vue__ = __webpack_require__(99);\n/**\n * Main client web app entry file for webpack.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n// helper class instances\nvar _router = new __WEBPACK_IMPORTED_MODULE_1__modules_router__["a" /* default */]();\nvar _ajax = new __WEBPACK_IMPORTED_MODULE_2__modules_ajax__["a" /* default */]();\nvar _notify = new __WEBPACK_IMPORTED_MODULE_3__modules_notify__["a" /* default */]();\nvar _tooltip = new __WEBPACK_IMPORTED_MODULE_4__modules_tooltip__["a" /* default */]();\n\n// create custom global vue properties\nObject.defineProperties(__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].prototype, {\n  $router: { get: function get() {\n      return _router;\n    } },\n  $ajax: { get: function get() {\n      return _ajax;\n    } },\n  $notify: { get: function get() {\n      return _notify;\n    } },\n  $store: { get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_5__modules_store__["a" /* default */];\n    } },\n  $history: { get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_6__modules_history__["a" /* default */];\n    } },\n  $sentiment: { get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_7__modules_sentiment___default.a;\n    } },\n  $bus: { get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_8__modules_bus__["a" /* default */];\n    } }\n});\n\n// single tooltip instance for entire app\n__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].directive(\'tooltip\', {\n  bind: function bind(el) {\n    _tooltip.select(el);\n  },\n  unbind: function unbind(el) {\n    _tooltip.unselect(el);\n  }\n});\n\n// global filters used to format currency and price change values\n__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].filter(\'toNoun\', function (num, s, p) {\n  return __WEBPACK_IMPORTED_MODULE_9__modules_utils___default.a.noun(num, s, p);\n});\n__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].filter(\'toElapsed\', function (time) {\n  return __WEBPACK_IMPORTED_MODULE_9__modules_utils___default.a.elapsed((Date.now() - time) / 1000);\n});\n__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].filter(\'toDate\', function (time) {\n  return __WEBPACK_IMPORTED_MODULE_9__modules_utils___default.a.date(time);\n});\n__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].filter(\'toMoney\', function (num, decimals) {\n  return __WEBPACK_IMPORTED_MODULE_9__modules_utils___default.a.money(num, decimals);\n});\n__WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */].filter(\'toFixed\', function (num, asset) {\n  if (typeof asset === \'number\') return Number(num).toFixed(asset);\n  if (/^(T?USDT?)$/.test(asset)) return __WEBPACK_IMPORTED_MODULE_9__modules_utils___default.a.money(num, 3);\n  return Number(num).toFixed(8);\n});\n\n// init and/or render\nnew __WEBPACK_IMPORTED_MODULE_11_vue__["a" /* default */]({\n  el: \'#app\',\n  render: function render(h) {\n    return h(__WEBPACK_IMPORTED_MODULE_10__components_App_vue__["a" /* default */]);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLmpzPzdhYzkiXSwibmFtZXMiOlsiX3JvdXRlciIsIl9hamF4IiwiX25vdGlmeSIsIl90b29sdGlwIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsIlZ1ZSIsInByb3RvdHlwZSIsIiRyb3V0ZXIiLCJnZXQiLCIkYWpheCIsIiRub3RpZnkiLCIkc3RvcmUiLCIkaGlzdG9yeSIsIiRzZW50aW1lbnQiLCIkYnVzIiwiZGlyZWN0aXZlIiwiYmluZCIsInNlbGVjdCIsImVsIiwidW5iaW5kIiwidW5zZWxlY3QiLCJmaWx0ZXIiLCJudW0iLCJzIiwicCIsInV0aWxzIiwibm91biIsInRpbWUiLCJlbGFwc2VkIiwiRGF0ZSIsIm5vdyIsImRhdGUiLCJkZWNpbWFscyIsIm1vbmV5IiwiYXNzZXQiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwidGVzdCIsInJlbmRlciIsImgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQU1BLFVBQVUsSUFBSSxnRUFBSixFQUFoQjtBQUNBLElBQU1DLFFBQVEsSUFBSSw4REFBSixFQUFkO0FBQ0EsSUFBTUMsVUFBVSxJQUFJLGdFQUFKLEVBQWhCO0FBQ0EsSUFBTUMsV0FBVyxJQUFJLGlFQUFKLEVBQWpCOztBQUVBO0FBQ0FDLE9BQU9DLGdCQUFQLENBQXlCLHFEQUFBQyxDQUFJQyxTQUE3QixFQUF3QztBQUN0Q0MsV0FBUyxFQUFFQyxLQUFLLGVBQVc7QUFBRSxhQUFPVCxPQUFQO0FBQWlCLEtBQXJDLEVBRDZCO0FBRXRDVSxTQUFPLEVBQUVELEtBQUssZUFBVztBQUFFLGFBQU9SLEtBQVA7QUFBZSxLQUFuQyxFQUYrQjtBQUd0Q1UsV0FBUyxFQUFFRixLQUFLLGVBQVc7QUFBRSxhQUFPUCxPQUFQO0FBQWlCLEtBQXJDLEVBSDZCO0FBSXRDVSxVQUFRLEVBQUVILEtBQUssZUFBVztBQUFFLGFBQU8sK0RBQVA7QUFBZSxLQUFuQyxFQUo4QjtBQUt0Q0ksWUFBVSxFQUFFSixLQUFLLGVBQVc7QUFBRSxhQUFPLGlFQUFQO0FBQWlCLEtBQXJDLEVBTDRCO0FBTXRDSyxjQUFZLEVBQUVMLEtBQUssZUFBVztBQUFFLGFBQU8sMERBQVA7QUFBbUIsS0FBdkMsRUFOMEI7QUFPdENNLFFBQU0sRUFBRU4sS0FBSyxlQUFXO0FBQUUsYUFBTyw2REFBUDtBQUFhLEtBQWpDO0FBUGdDLENBQXhDOztBQVVBO0FBQ0EscURBQUFILENBQUlVLFNBQUosQ0FBZSxTQUFmLEVBQTBCO0FBQ3hCQyxRQUFNLGtCQUFNO0FBQUVkLGFBQVNlLE1BQVQsQ0FBaUJDLEVBQWpCO0FBQXdCLEdBRGQ7QUFFeEJDLFVBQVEsb0JBQU07QUFBRWpCLGFBQVNrQixRQUFULENBQW1CRixFQUFuQjtBQUEwQjtBQUZsQixDQUExQjs7QUFLQTtBQUNBLHFEQUFBYixDQUFJZ0IsTUFBSixDQUFZLFFBQVosRUFBc0IsVUFBRUMsR0FBRixFQUFPQyxDQUFQLEVBQVVDLENBQVY7QUFBQSxTQUFpQixzREFBQUMsQ0FBTUMsSUFBTixDQUFZSixHQUFaLEVBQWlCQyxDQUFqQixFQUFvQkMsQ0FBcEIsQ0FBakI7QUFBQSxDQUF0QjtBQUNBLHFEQUFBbkIsQ0FBSWdCLE1BQUosQ0FBWSxXQUFaLEVBQXlCLFVBQUVNLElBQUY7QUFBQSxTQUFZLHNEQUFBRixDQUFNRyxPQUFOLENBQWUsQ0FBRUMsS0FBS0MsR0FBTCxLQUFhSCxJQUFmLElBQXdCLElBQXZDLENBQVo7QUFBQSxDQUF6QjtBQUNBLHFEQUFBdEIsQ0FBSWdCLE1BQUosQ0FBWSxRQUFaLEVBQXNCLFVBQUVNLElBQUY7QUFBQSxTQUFZLHNEQUFBRixDQUFNTSxJQUFOLENBQVlKLElBQVosQ0FBWjtBQUFBLENBQXRCO0FBQ0EscURBQUF0QixDQUFJZ0IsTUFBSixDQUFZLFNBQVosRUFBdUIsVUFBRUMsR0FBRixFQUFPVSxRQUFQO0FBQUEsU0FBcUIsc0RBQUFQLENBQU1RLEtBQU4sQ0FBYVgsR0FBYixFQUFrQlUsUUFBbEIsQ0FBckI7QUFBQSxDQUF2QjtBQUNBLHFEQUFBM0IsQ0FBSWdCLE1BQUosQ0FBWSxTQUFaLEVBQXVCLFVBQUVDLEdBQUYsRUFBT1ksS0FBUCxFQUFrQjtBQUN2QyxNQUFLLE9BQU9BLEtBQVAsS0FBaUIsUUFBdEIsRUFBaUMsT0FBT0MsT0FBUWIsR0FBUixFQUFjYyxPQUFkLENBQXVCRixLQUF2QixDQUFQO0FBQ2pDLE1BQUssY0FBY0csSUFBZCxDQUFvQkgsS0FBcEIsQ0FBTCxFQUFtQyxPQUFPLHNEQUFBVCxDQUFNUSxLQUFOLENBQWFYLEdBQWIsRUFBa0IsQ0FBbEIsQ0FBUDtBQUNuQyxTQUFPYSxPQUFRYixHQUFSLEVBQWNjLE9BQWQsQ0FBdUIsQ0FBdkIsQ0FBUDtBQUNELENBSkQ7O0FBTUE7QUFDQSxJQUFJLHFEQUFKLENBQVE7QUFDTmxCLE1BQUksTUFERTtBQUVOb0IsVUFBUTtBQUFBLFdBQUtDLEVBQUcscUVBQUgsQ0FBTDtBQUFBO0FBRkYsQ0FBUiIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWFpbiBjbGllbnQgd2ViIGFwcCBlbnRyeSBmaWxlIGZvciB3ZWJwYWNrLlxuICovXG5pbXBvcnQgJy4vbW9kdWxlcy9wb2x5ZmlsbHMnO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL21vZHVsZXMvcm91dGVyJztcbmltcG9ydCBBamF4IGZyb20gJy4vbW9kdWxlcy9hamF4JztcbmltcG9ydCBOb3RpZnkgZnJvbSAnLi9tb2R1bGVzL25vdGlmeSc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL21vZHVsZXMvdG9vbHRpcCc7XG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9tb2R1bGVzL3N0b3JlJztcbmltcG9ydCBoaXN0b3J5IGZyb20gJy4vbW9kdWxlcy9oaXN0b3J5JztcbmltcG9ydCBzZW50aW1lbnQgZnJvbSAnLi9tb2R1bGVzL3NlbnRpbWVudCc7XG5pbXBvcnQgYnVzIGZyb20gJy4vbW9kdWxlcy9idXMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vbW9kdWxlcy91dGlscyc7XG5pbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9BcHAudnVlJztcbmltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuLy8gaGVscGVyIGNsYXNzIGluc3RhbmNlc1xuY29uc3QgX3JvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbmNvbnN0IF9hamF4ID0gbmV3IEFqYXgoKTtcbmNvbnN0IF9ub3RpZnkgPSBuZXcgTm90aWZ5KCk7XG5jb25zdCBfdG9vbHRpcCA9IG5ldyBUb29sdGlwKCk7XG5cbi8vIGNyZWF0ZSBjdXN0b20gZ2xvYmFsIHZ1ZSBwcm9wZXJ0aWVzXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlLnByb3RvdHlwZSwge1xuICAkcm91dGVyOiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBfcm91dGVyOyB9IH0sXG4gICRhamF4OiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBfYWpheDsgfSB9LFxuICAkbm90aWZ5OiB7IGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBfbm90aWZ5OyB9IH0sXG4gICRzdG9yZTogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3RvcmU7IH0gfSxcbiAgJGhpc3Rvcnk6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGhpc3Rvcnk7IH0gfSxcbiAgJHNlbnRpbWVudDogeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VudGltZW50OyB9IH0sXG4gICRidXM6IHsgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGJ1czsgfSB9LFxufSk7XG5cbi8vIHNpbmdsZSB0b29sdGlwIGluc3RhbmNlIGZvciBlbnRpcmUgYXBwXG5WdWUuZGlyZWN0aXZlKCAndG9vbHRpcCcsIHtcbiAgYmluZDogZWwgPT4geyBfdG9vbHRpcC5zZWxlY3QoIGVsICk7IH0sXG4gIHVuYmluZDogZWwgPT4geyBfdG9vbHRpcC51bnNlbGVjdCggZWwgKTsgfSxcbn0pO1xuXG4vLyBnbG9iYWwgZmlsdGVycyB1c2VkIHRvIGZvcm1hdCBjdXJyZW5jeSBhbmQgcHJpY2UgY2hhbmdlIHZhbHVlc1xuVnVlLmZpbHRlciggJ3RvTm91bicsICggbnVtLCBzLCBwICkgPT4gdXRpbHMubm91biggbnVtLCBzLCBwICkgKTtcblZ1ZS5maWx0ZXIoICd0b0VsYXBzZWQnLCAoIHRpbWUgKSA9PiB1dGlscy5lbGFwc2VkKCAoIERhdGUubm93KCkgLSB0aW1lICkgLyAxMDAwICkgKTtcblZ1ZS5maWx0ZXIoICd0b0RhdGUnLCAoIHRpbWUgKSA9PiB1dGlscy5kYXRlKCB0aW1lICkgKTtcblZ1ZS5maWx0ZXIoICd0b01vbmV5JywgKCBudW0sIGRlY2ltYWxzICkgPT4gdXRpbHMubW9uZXkoIG51bSwgZGVjaW1hbHMgKSApO1xuVnVlLmZpbHRlciggJ3RvRml4ZWQnLCAoIG51bSwgYXNzZXQgKSA9PiB7XG4gIGlmICggdHlwZW9mIGFzc2V0ID09PSAnbnVtYmVyJyApIHJldHVybiBOdW1iZXIoIG51bSApLnRvRml4ZWQoIGFzc2V0ICk7XG4gIGlmICggL14oVD9VU0RUPykkLy50ZXN0KCBhc3NldCApICkgcmV0dXJuIHV0aWxzLm1vbmV5KCBudW0sIDMgKTtcbiAgcmV0dXJuIE51bWJlciggbnVtICkudG9GaXhlZCggOCApO1xufSk7XG5cbi8vIGluaXQgYW5kL29yIHJlbmRlclxubmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIHJlbmRlcjogaCA9PiBoKCBBcHAgKVxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYXBwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n')},function(module,exports){eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\r\n * String trimming\r\n */\n(function () {\n  'use strict';\n\n  if (!String.prototype.trim) {\n    String.prototype.trim = function () {\n      return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n    };\n  }\n  if (!String.prototype.trimLeft) {\n    String.prototype.trimLeft = function () {\n      return this.replace(/^[\\s\\uFEFF\\xA0]+/g, '');\n    };\n  }\n  if (!String.prototype.trimRight) {\n    String.prototype.trimRight = function () {\n      return this.replace(/[\\s\\uFEFF\\xA0]+$/g, '');\n    };\n  }\n})();\n\n/**\r\n * Object.keys\r\n */\n(function () {\n  if (typeof Object.keys != 'function') {\n    Object.keys = function () {\n      'use strict';\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty,\n          hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),\n          dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n          dontEnumsLength = dontEnums.length;\n\n      return function (obj) {\n        if (typeof obj !== 'function' && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null)) {\n          throw new TypeError('Object.keys called on non-object');\n        }\n        var result = [],\n            prop,\n            i;\n\n        for (prop in obj) {\n          if (hasOwnProperty.call(obj, prop)) {\n            result.push(prop);\n          }\n        }\n        if (hasDontEnumBug) {\n          for (i = 0; i < dontEnumsLength; i++) {\n            if (hasOwnProperty.call(obj, dontEnums[i])) {\n              result.push(dontEnums[i]);\n            }\n          }\n        }\n        return result;\n      };\n    }();\n  }\n})();\n\n/**\r\n * Object.assign\r\n */\n(function () {\n  if (typeof Object.assign != 'function') {\n    Object.assign = function () {\n      'use strict';\n\n      return function (target) {\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n\n        for (var index = 1; index < arguments.length; index++) {\n          var source = arguments[index];\n\n          if (source !== undefined && source !== null) {\n            for (var nextKey in source) {\n              if (source.hasOwnProperty(nextKey)) {\n                output[nextKey] = source[nextKey];\n              }\n            }\n          }\n        }\n        return output;\n      };\n    }();\n  }\n})();\n\n/**\r\n * Request Animation Frame\r\n */\n(function () {\n  'use strict';\n\n  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') return;\n\n  var vendors = ['webkit', 'moz'];\n  var lastTime = 0;\n\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n  if (!window.requestAnimationFrame) {\n    window.requestAnimationFrame = function (callback, element) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n  }\n  if (!window.cancelAnimationFrame) {\n    window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n})();\n\n/**\r\n * Element selector match support\r\n */\n(function () {\n  'use strict';\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n          i = matches.length;\n      while (--i >= 0 && matches.item(i) !== this) {}\n      return i > -1;\n    };\n  }\n})();\n\n/**\r\n * Element classList support\r\n */\n(function () {\n  'use strict';\n\n  if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) !== 'object') return;\n  if (typeof window.Element === 'undefined') return;\n  if ('classList' in document.documentElement) return;\n\n  var prototype = Array.prototype,\n      push = prototype.push,\n      splice = prototype.splice,\n      join = prototype.join;\n\n  var indexOf = prototype.indexOf || function (item) {\n    for (var i = 0, t = this.length; i < t; ++i) {\n      if (i in this && this[i] === item) return i;\n    }\n    return -1;\n  };\n\n  function DOMTokenList(el) {\n    this.el = el;\n\n    var classes = String(el.className || '').trim().split(/\\s+/);\n\n    for (var i = 0, t = classes.length; i < t; ++i) {\n      push.call(this, classes[i]);\n    }\n  };\n\n  DOMTokenList.prototype = {\n\n    item: function item(index) {\n      return this[index] || null;\n    },\n    contains: function contains(token) {\n      return indexOf.call(this, token) != -1;\n    },\n    add: function add(token) {\n      if (this.contains(token)) return;\n      push.call(this, token);\n      this.el.className = this.toString();\n    },\n    remove: function remove(token) {\n      var index = indexOf.call(this, token);\n      if (index == -1) return;\n      splice.call(this, index, 1);\n      this.el.className = this.toString();\n    },\n    toggle: function toggle(token) {\n      var index = indexOf.call(this, token);\n      if (index == -1) {\n        push.call(this, token);\n      } else {\n        splice.call(this, index, 1);\n      }\n      this.el.className = this.toString();\n    },\n    toString: function toString() {\n      return join.call(this, ' ');\n    }\n  };\n\n  window.DOMTokenList = DOMTokenList;\n\n  function defineElementGetter(obj, prop, getter) {\n    if (Object.defineProperty) {\n      Object.defineProperty(obj, prop, { get: getter });\n    } else {\n      obj.__defineGetter__(prop, getter);\n    }\n  }\n  defineElementGetter(Element.prototype, 'classList', function () {\n    return new DOMTokenList(this);\n  });\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Basic URL hash router\r\n */\nvar Router = function () {\n\n  // constructor\n  function Router() {\n    _classCallCheck(this, Router);\n\n    this._routes = {};\n    this._init();\n  }\n\n  // get routes data\n\n\n  _createClass(Router, [{\n    key: 'getRoutes',\n    value: function getRoutes() {\n      return this._routes;\n    }\n\n    // set a url hash route\n\n  }, {\n    key: 'setRoute',\n    value: function setRoute(route) {\n      route = this._path(route);\n      window.location.hash = route;\n    }\n\n    // add custom route and callback to list\n\n  }, {\n    key: 'on',\n    value: function on(route, callback) {\n      route = this._path(route);\n      if (!route || typeof callback !== 'function') return;\n      this._routes[route] = callback;\n    }\n\n    // delete route handler\n\n  }, {\n    key: 'off',\n    value: function off(route) {\n      route = this._path(route);\n      if (this._routes.hasOwnProperty(route)) {\n        delete this._routes[route];\n      }\n    }\n\n    // trigger saved handler for a path\n\n  }, {\n    key: 'trigger',\n    value: function trigger(path) {\n      var _this = this;\n\n      path = this._path(path);\n      if (!path) return;\n\n      Object.keys(this._routes).forEach(function (route) {\n        var cb = _this._routes[route];\n\n        // path matches route, call handler as is\n        if (path === route) return cb();\n\n        // use regexp to test route\n        var reg = new RegExp('^' + route + '$');\n        var matches = reg.exec(path);\n\n        // found something, pass regexp matches as arguments to handler\n        if (matches) {\n          matches = Array.from(matches);\n          matches.shift();\n          cb.apply(cb, matches);\n        }\n      });\n    }\n\n    // clean path\n\n  }, {\n    key: '_path',\n    value: function _path(path) {\n      return '/' + String(path || '').replace(/^[\\#\\/]+|[\\/]+$/g, '').trim();\n    }\n\n    // start watching for hash changes\n\n  }, {\n    key: '_init',\n    value: function _init() {\n      var _this2 = this;\n\n      var _w = window;\n      _w.addEventListener('hashchange', function (e) {\n        _this2.trigger(_w.location.hash);\n      });\n      _w.addEventListener('load', function (e) {\n        _this2.trigger(_w.location.hash);\n      });\n    }\n  }]);\n\n  return Router;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Router);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yb3V0ZXIuanM/Y2Q5MSJdLCJuYW1lcyI6WyJSb3V0ZXIiLCJfcm91dGVzIiwiX2luaXQiLCJyb3V0ZSIsIl9wYXRoIiwid2luZG93IiwibG9jYXRpb24iLCJoYXNoIiwiY2FsbGJhY2siLCJoYXNPd25Qcm9wZXJ0eSIsInBhdGgiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImNiIiwicmVnIiwiUmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJBcnJheSIsImZyb20iLCJzaGlmdCIsImFwcGx5IiwiU3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJfdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztJQUdxQkEsTTs7QUFFbkI7QUFDQSxvQkFBYztBQUFBOztBQUNaLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsU0FBS0MsS0FBTDtBQUNEOztBQUVEOzs7OztnQ0FDWTtBQUNWLGFBQU8sS0FBS0QsT0FBWjtBQUNEOztBQUVEOzs7OzZCQUNVRSxLLEVBQVE7QUFDaEJBLGNBQVEsS0FBS0MsS0FBTCxDQUFZRCxLQUFaLENBQVI7QUFDQUUsYUFBT0MsUUFBUCxDQUFnQkMsSUFBaEIsR0FBdUJKLEtBQXZCO0FBQ0Q7O0FBRUQ7Ozs7dUJBQ0lBLEssRUFBT0ssUSxFQUFXO0FBQ3BCTCxjQUFRLEtBQUtDLEtBQUwsQ0FBWUQsS0FBWixDQUFSO0FBQ0EsVUFBSyxDQUFDQSxLQUFELElBQVUsT0FBT0ssUUFBUCxLQUFvQixVQUFuQyxFQUFnRDtBQUNoRCxXQUFLUCxPQUFMLENBQWNFLEtBQWQsSUFBd0JLLFFBQXhCO0FBQ0Q7O0FBRUQ7Ozs7d0JBQ0tMLEssRUFBUTtBQUNYQSxjQUFRLEtBQUtDLEtBQUwsQ0FBWUQsS0FBWixDQUFSO0FBQ0EsVUFBSyxLQUFLRixPQUFMLENBQWFRLGNBQWIsQ0FBNkJOLEtBQTdCLENBQUwsRUFBNEM7QUFDMUMsZUFBTyxLQUFLRixPQUFMLENBQWNFLEtBQWQsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7NEJBQ1NPLEksRUFBTztBQUFBOztBQUNkQSxhQUFPLEtBQUtOLEtBQUwsQ0FBWU0sSUFBWixDQUFQO0FBQ0EsVUFBSyxDQUFDQSxJQUFOLEVBQWE7O0FBRWJDLGFBQU9DLElBQVAsQ0FBYSxLQUFLWCxPQUFsQixFQUE0QlksT0FBNUIsQ0FBcUMsaUJBQVM7QUFDNUMsWUFBSUMsS0FBSyxNQUFLYixPQUFMLENBQWNFLEtBQWQsQ0FBVDs7QUFFQTtBQUNBLFlBQUtPLFNBQVNQLEtBQWQsRUFBc0IsT0FBT1csSUFBUDs7QUFFdEI7QUFDQSxZQUFJQyxNQUFNLElBQUlDLE1BQUosQ0FBWSxNQUFLYixLQUFMLEdBQVksR0FBeEIsQ0FBVjtBQUNBLFlBQUljLFVBQVVGLElBQUlHLElBQUosQ0FBVVIsSUFBVixDQUFkOztBQUVBO0FBQ0EsWUFBS08sT0FBTCxFQUFlO0FBQ2JBLG9CQUFVRSxNQUFNQyxJQUFOLENBQVlILE9BQVosQ0FBVjtBQUNBQSxrQkFBUUksS0FBUjtBQUNBUCxhQUFHUSxLQUFILENBQVVSLEVBQVYsRUFBY0csT0FBZDtBQUNEO0FBQ0YsT0FoQkQ7QUFpQkQ7O0FBRUQ7Ozs7MEJBQ09QLEksRUFBTztBQUNaLGFBQU8sTUFBS2EsT0FBUWIsUUFBUSxFQUFoQixFQUFxQmMsT0FBckIsQ0FBOEIsa0JBQTlCLEVBQWtELEVBQWxELEVBQXVEQyxJQUF2RCxFQUFaO0FBQ0Q7O0FBRUQ7Ozs7NEJBQ1E7QUFBQTs7QUFDTixVQUFNQyxLQUFLckIsTUFBWDtBQUNBcUIsU0FBR0MsZ0JBQUgsQ0FBcUIsWUFBckIsRUFBbUMsYUFBSztBQUFFLGVBQUtDLE9BQUwsQ0FBY0YsR0FBR3BCLFFBQUgsQ0FBWUMsSUFBMUI7QUFBa0MsT0FBNUU7QUFDQW1CLFNBQUdDLGdCQUFILENBQXFCLE1BQXJCLEVBQTZCLGFBQUs7QUFBRSxlQUFLQyxPQUFMLENBQWNGLEdBQUdwQixRQUFILENBQVlDLElBQTFCO0FBQWtDLE9BQXRFO0FBQ0Q7Ozs7Ozt5REFwRWtCUCxNIiwiZmlsZSI6IjM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEJhc2ljIFVSTCBoYXNoIHJvdXRlclxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHtcclxuXHJcbiAgLy8gY29uc3RydWN0b3JcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX3JvdXRlcyA9IHt9O1xyXG4gICAgdGhpcy5faW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IHJvdXRlcyBkYXRhXHJcbiAgZ2V0Um91dGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JvdXRlcztcclxuICB9XHJcblxyXG4gIC8vIHNldCBhIHVybCBoYXNoIHJvdXRlXHJcbiAgc2V0Um91dGUoIHJvdXRlICkge1xyXG4gICAgcm91dGUgPSB0aGlzLl9wYXRoKCByb3V0ZSApO1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSByb3V0ZTtcclxuICB9XHJcblxyXG4gIC8vIGFkZCBjdXN0b20gcm91dGUgYW5kIGNhbGxiYWNrIHRvIGxpc3RcclxuICBvbiggcm91dGUsIGNhbGxiYWNrICkge1xyXG4gICAgcm91dGUgPSB0aGlzLl9wYXRoKCByb3V0ZSApO1xyXG4gICAgaWYgKCAhcm91dGUgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nICkgcmV0dXJuO1xyXG4gICAgdGhpcy5fcm91dGVzWyByb3V0ZSBdID0gY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICAvLyBkZWxldGUgcm91dGUgaGFuZGxlclxyXG4gIG9mZiggcm91dGUgKSB7XHJcbiAgICByb3V0ZSA9IHRoaXMuX3BhdGgoIHJvdXRlICk7XHJcbiAgICBpZiAoIHRoaXMuX3JvdXRlcy5oYXNPd25Qcm9wZXJ0eSggcm91dGUgKSApIHtcclxuICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlc1sgcm91dGUgXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHRyaWdnZXIgc2F2ZWQgaGFuZGxlciBmb3IgYSBwYXRoXHJcbiAgdHJpZ2dlciggcGF0aCApIHtcclxuICAgIHBhdGggPSB0aGlzLl9wYXRoKCBwYXRoICk7XHJcbiAgICBpZiAoICFwYXRoICkgcmV0dXJuO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKCB0aGlzLl9yb3V0ZXMgKS5mb3JFYWNoKCByb3V0ZSA9PiB7XHJcbiAgICAgIGxldCBjYiA9IHRoaXMuX3JvdXRlc1sgcm91dGUgXTtcclxuXHJcbiAgICAgIC8vIHBhdGggbWF0Y2hlcyByb3V0ZSwgY2FsbCBoYW5kbGVyIGFzIGlzXHJcbiAgICAgIGlmICggcGF0aCA9PT0gcm91dGUgKSByZXR1cm4gY2IoKTtcclxuXHJcbiAgICAgIC8vIHVzZSByZWdleHAgdG8gdGVzdCByb3V0ZVxyXG4gICAgICBsZXQgcmVnID0gbmV3IFJlZ0V4cCggJ14nKyByb3V0ZSArJyQnICk7XHJcbiAgICAgIGxldCBtYXRjaGVzID0gcmVnLmV4ZWMoIHBhdGggKTtcclxuXHJcbiAgICAgIC8vIGZvdW5kIHNvbWV0aGluZywgcGFzcyByZWdleHAgbWF0Y2hlcyBhcyBhcmd1bWVudHMgdG8gaGFuZGxlclxyXG4gICAgICBpZiAoIG1hdGNoZXMgKSB7XHJcbiAgICAgICAgbWF0Y2hlcyA9IEFycmF5LmZyb20oIG1hdGNoZXMgKTtcclxuICAgICAgICBtYXRjaGVzLnNoaWZ0KCk7XHJcbiAgICAgICAgY2IuYXBwbHkoIGNiLCBtYXRjaGVzICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gY2xlYW4gcGF0aFxyXG4gIF9wYXRoKCBwYXRoICkge1xyXG4gICAgcmV0dXJuICcvJysgU3RyaW5nKCBwYXRoIHx8ICcnICkucmVwbGFjZSggL15bXFwjXFwvXSt8W1xcL10rJC9nLCAnJyApLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIC8vIHN0YXJ0IHdhdGNoaW5nIGZvciBoYXNoIGNoYW5nZXNcclxuICBfaW5pdCgpIHtcclxuICAgIGNvbnN0IF93ID0gd2luZG93O1xyXG4gICAgX3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBlID0+IHsgdGhpcy50cmlnZ2VyKCBfdy5sb2NhdGlvbi5oYXNoICkgfSApO1xyXG4gICAgX3cuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBlID0+IHsgdGhpcy50cmlnZ2VyKCBfdy5sb2NhdGlvbi5oYXNoICkgfSApO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9yb3V0ZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__md5__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__md5___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__md5__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Basic XHR ajax request module\n */\n\n\n\n// ajax class\n\nvar Ajax = function () {\n\n  // constructor\n  function Ajax(options) {\n    _classCallCheck(this, Ajax);\n\n    this._options = {\n      // save response data to local store cache\n      cache: false,\n      // key prefix for local store cache\n      prefix: 'ajax_data_',\n      // proxy url to preppend to outgoing requests\n      proxy: ''\n    };\n    this._url = null;\n    this.setOptions(options);\n  }\n\n  // merge news options\n\n\n  _createClass(Ajax, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this._options = Object.assign(this._options, options);\n    }\n\n    // alias for get request\n\n  }, {\n    key: 'get',\n    value: function get(address, options) {\n      this.request('GET', address, options);\n    }\n\n    // alias for post request\n\n  }, {\n    key: 'post',\n    value: function post(address, options) {\n      this.request('POST', address, options);\n    }\n\n    // alias for put request\n\n  }, {\n    key: 'put',\n    value: function put(address, options) {\n      this.request('PUT', address, options);\n    }\n\n    // alias for delete request\n\n  }, {\n    key: 'delete',\n    value: function _delete(address, options) {\n      this.request('DELETE', address, options);\n    }\n\n    // main request method\n\n  }, {\n    key: 'request',\n    value: function request(method, address, options) {\n      var _this = this;\n\n      method = String(method || '').toUpperCase();\n      address = String(address || '').trim();\n      options = Object.assign({}, this._options, options);\n\n      // setup options\n      var isDone = false;\n      var type = String(options.type || 'text');\n      var timeout = parseInt(options.timeout) || 0;\n      var headers = Object.assign({}, options.headers);\n      var cacheTime = parseInt(options.cache) || 0; // seconds to be cached\n      var cacheKey = options.prefix + __WEBPACK_IMPORTED_MODULE_1__md5___default()(method + '|' + address);\n      var xhr = new XMLHttpRequest();\n\n      // setup callbacks\n      var onError = typeof options.error === 'function' ? options.error : function () {};\n      var onSuccess = typeof options.success === 'function' ? options.success : function () {};\n      var onDone = typeof options.done === 'function' ? options.done : function () {};\n\n      // check params\n      if (!method) return onError(xhr, 0, 'Must specify a request method to make a new request.');\n      if (!address) return onError(xhr, 0, 'Must specify a request url address to make a new request.');\n\n      // check cache\n      if (cacheTime) {\n        var cacheData = __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].getData(cacheKey);\n        if (cacheData) return onSuccess(xhr, 200, cacheData);\n      }\n\n      // encode data for get requests\n      if (method === 'GET' && _typeof(options.data) === 'object') {\n        headers['Content-type'] = 'application/x-www-form-urlencoded';\n        address += '?' + this._encode(options.data);\n        options.data = null;\n      }\n\n      // add proxy to url if needed\n      if (options.proxy && typeof options.proxy === 'string') {\n        address = options.proxy.trim() + address;\n      }\n\n      // build info about url\n      try {\n        this._url = new URL(address);\n      } catch (err) {\n        this._url = null;\n      }\n\n      // init request handler\n      xhr.open(method, address, true);\n      xhr.responseType = type;\n\n      // set timeout\n      if (timeout) {\n        xhr.timeout = timeout < 1000 ? 1000 * timeout : timeout;\n      }\n\n      // default headers\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Accept', 'application/json, text/plain, text/html, */*');\n\n      // check for basic auth data and set header\n      if (options.auth && _typeof(options.auth) === 'object') {\n        var username = String(options.auth.username || '').trim();\n        var password = String(options.auth.password || '').trim();\n        xhr.setRequestHeader('Authorization', 'Basic ' + btoa(username + ':' + password));\n      }\n\n      // custom headers\n      Object.keys(headers).forEach(function (name) {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n\n      // data load handler\n      xhr.addEventListener('load', function (e) {\n        var _responseParams2 = _this._responseParams(xhr, type),\n            status = _responseParams2.status,\n            response = _responseParams2.response,\n            error = _responseParams2.error,\n            host = _responseParams2.host;\n\n        if (status && status < 400) {\n          if (cacheTime) __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].setData(cacheKey, response, cacheTime);\n          onSuccess(xhr, status, response);\n        } else {\n          onError(xhr, status, error);\n        }\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // request error handler\n      xhr.addEventListener('error', function (e) {\n        var _responseParams3 = _this._responseParams(xhr, type),\n            status = _responseParams3.status,\n            response = _responseParams3.response,\n            error = _responseParams3.error,\n            host = _responseParams3.host;\n\n        onError(xhr, status, error);\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // request abort handler\n      xhr.addEventListener('abort', function (e) {\n        var _responseParams4 = _this._responseParams(xhr, type),\n            status = _responseParams4.status,\n            response = _responseParams4.response,\n            error = _responseParams4.error,\n            host = _responseParams4.host;\n\n        onError(xhr, status, 'The HTTP request has been aborted by the client (' + host + ').');\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // request timeout handler\n      xhr.addEventListener('timeout', function (e) {\n        var _responseParams5 = _this._responseParams(xhr, type),\n            status = _responseParams5.status,\n            response = _responseParams5.response,\n            error = _responseParams5.error,\n            host = _responseParams5.host;\n\n        onError(xhr, status, 'The HTTP request has been aborted due to the server not responding in time (' + host + ').');\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // send the request\n      xhr.send(options.data || null);\n    }\n\n    // get response status and data from xhr\n\n  }, {\n    key: '_responseParams',\n    value: function _responseParams(xhr, type) {\n      var host = this._getHost();\n      var status = xhr.status | 0;\n      var response = type === 'text' ? xhr.responseText : xhr.response;\n      var error = '';\n      // error based on status codes\n      if (status === 400) error = status + ': The request could not be understood by the server due to malformed syntax (' + host + ').';\n      if (status === 401) error = status + ': You are not authorized to view the response of this request without authentication (' + host + ').';\n      if (status === 403) error = status + ': The server understood the request, but is refusing to fulfill it (' + host + ').';\n      if (status === 404) error = status + ': The server did not find anything matching the requested route (' + host + ').';\n      if (status === 405) error = status + ': The method specified for this request is not allowed for the requested route (' + host + ').';\n      if (status === 407) error = status + ': The client must first authenticate itself with the proxy server to make requests (' + host + ').';\n      if (status === 408) error = status + ': The server did not produce a response in time for the requested route (' + host + ').';\n      if (status === 500) error = status + ': The server encountered an unexpected condition which prevented it from fulfilling the request (' + host + ').';\n      if (status === 503) error = status + ': The server is unable to handle the request due to temporary overloading or maintenance (' + host + ').';\n      // fallback error messages\n      if (!error && status) error = status + ': There has been a problem with the response from the server (' + host + ').';\n      if (!error) error = 'There has been a problem sending the request to the server (' + host + ').';\n      // response params\n      return { status: status, response: response, error: error, host: host };\n    }\n\n    // get host name for current request\n\n  }, {\n    key: '_getHost',\n    value: function _getHost() {\n      if (!this._url) return '';\n      var proto = this._url.protocol || 'http:';\n      var host = this._url.host || 'localhost';\n      return proto + '//' + host + '/...';\n    }\n\n    // url encode object data\n\n  }, {\n    key: '_encode',\n    value: function _encode(data) {\n      var output = [];\n      Object.keys(data).forEach(function (key) {\n        output.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n      });\n      return output.join('&');\n    }\n  }]);\n\n  return Ajax;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Ajax);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n")},function(module,exports){eval("/*\r\n * http://www.myersdaily.org/joseph/javascript/md5-text.html\r\n */\nmodule.exports = function () {\n\n  var hex_chr = '0123456789abcdef'.split('');\n\n  var add32 = function add32(a, b) {\n    return a + b & 0xFFFFFFFF;\n  };\n\n  var cmn = function cmn(q, a, b, x, s, t) {\n    a = add32(add32(a, q), add32(x, t));\n    return add32(a << s | a >>> 32 - s, b);\n  };\n\n  var ff = function ff(a, b, c, d, x, s, t) {\n    return cmn(b & c | ~b & d, a, b, x, s, t);\n  };\n\n  var gg = function gg(a, b, c, d, x, s, t) {\n    return cmn(b & d | c & ~d, a, b, x, s, t);\n  };\n\n  var hh = function hh(a, b, c, d, x, s, t) {\n    return cmn(b ^ c ^ d, a, b, x, s, t);\n  };\n\n  var ii = function ii(a, b, c, d, x, s, t) {\n    return cmn(c ^ (b | ~d), a, b, x, s, t);\n  };\n\n  var md5cycle = function md5cycle(x, k) {\n    var a = x[0],\n        b = x[1],\n        c = x[2],\n        d = x[3];\n\n    a = ff(a, b, c, d, k[0], 7, -680876936);\n    d = ff(d, a, b, c, k[1], 12, -389564586);\n    c = ff(c, d, a, b, k[2], 17, 606105819);\n    b = ff(b, c, d, a, k[3], 22, -1044525330);\n    a = ff(a, b, c, d, k[4], 7, -176418897);\n    d = ff(d, a, b, c, k[5], 12, 1200080426);\n    c = ff(c, d, a, b, k[6], 17, -1473231341);\n    b = ff(b, c, d, a, k[7], 22, -45705983);\n    a = ff(a, b, c, d, k[8], 7, 1770035416);\n    d = ff(d, a, b, c, k[9], 12, -1958414417);\n    c = ff(c, d, a, b, k[10], 17, -42063);\n    b = ff(b, c, d, a, k[11], 22, -1990404162);\n    a = ff(a, b, c, d, k[12], 7, 1804603682);\n    d = ff(d, a, b, c, k[13], 12, -40341101);\n    c = ff(c, d, a, b, k[14], 17, -1502002290);\n    b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n    a = gg(a, b, c, d, k[1], 5, -165796510);\n    d = gg(d, a, b, c, k[6], 9, -1069501632);\n    c = gg(c, d, a, b, k[11], 14, 643717713);\n    b = gg(b, c, d, a, k[0], 20, -373897302);\n    a = gg(a, b, c, d, k[5], 5, -701558691);\n    d = gg(d, a, b, c, k[10], 9, 38016083);\n    c = gg(c, d, a, b, k[15], 14, -660478335);\n    b = gg(b, c, d, a, k[4], 20, -405537848);\n    a = gg(a, b, c, d, k[9], 5, 568446438);\n    d = gg(d, a, b, c, k[14], 9, -1019803690);\n    c = gg(c, d, a, b, k[3], 14, -187363961);\n    b = gg(b, c, d, a, k[8], 20, 1163531501);\n    a = gg(a, b, c, d, k[13], 5, -1444681467);\n    d = gg(d, a, b, c, k[2], 9, -51403784);\n    c = gg(c, d, a, b, k[7], 14, 1735328473);\n    b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n    a = hh(a, b, c, d, k[5], 4, -378558);\n    d = hh(d, a, b, c, k[8], 11, -2022574463);\n    c = hh(c, d, a, b, k[11], 16, 1839030562);\n    b = hh(b, c, d, a, k[14], 23, -35309556);\n    a = hh(a, b, c, d, k[1], 4, -1530992060);\n    d = hh(d, a, b, c, k[4], 11, 1272893353);\n    c = hh(c, d, a, b, k[7], 16, -155497632);\n    b = hh(b, c, d, a, k[10], 23, -1094730640);\n    a = hh(a, b, c, d, k[13], 4, 681279174);\n    d = hh(d, a, b, c, k[0], 11, -358537222);\n    c = hh(c, d, a, b, k[3], 16, -722521979);\n    b = hh(b, c, d, a, k[6], 23, 76029189);\n    a = hh(a, b, c, d, k[9], 4, -640364487);\n    d = hh(d, a, b, c, k[12], 11, -421815835);\n    c = hh(c, d, a, b, k[15], 16, 530742520);\n    b = hh(b, c, d, a, k[2], 23, -995338651);\n\n    a = ii(a, b, c, d, k[0], 6, -198630844);\n    d = ii(d, a, b, c, k[7], 10, 1126891415);\n    c = ii(c, d, a, b, k[14], 15, -1416354905);\n    b = ii(b, c, d, a, k[5], 21, -57434055);\n    a = ii(a, b, c, d, k[12], 6, 1700485571);\n    d = ii(d, a, b, c, k[3], 10, -1894986606);\n    c = ii(c, d, a, b, k[10], 15, -1051523);\n    b = ii(b, c, d, a, k[1], 21, -2054922799);\n    a = ii(a, b, c, d, k[8], 6, 1873313359);\n    d = ii(d, a, b, c, k[15], 10, -30611744);\n    c = ii(c, d, a, b, k[6], 15, -1560198380);\n    b = ii(b, c, d, a, k[13], 21, 1309151649);\n    a = ii(a, b, c, d, k[4], 6, -145523070);\n    d = ii(d, a, b, c, k[11], 10, -1120210379);\n    c = ii(c, d, a, b, k[2], 15, 718787259);\n    b = ii(b, c, d, a, k[9], 21, -343485551);\n\n    x[0] = add32(a, x[0]);\n    x[1] = add32(b, x[1]);\n    x[2] = add32(c, x[2]);\n    x[3] = add32(d, x[3]);\n  };\n\n  var md51 = function md51(s) {\n    var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var txt = '',\n        n = s.length,\n        state = [1732584193, -271733879, -1732584194, 271733878],\n        i;\n\n    for (i = 64; i <= s.length; i += 64) {\n      md5cycle(state, md5blk(s.substring(i - 64, i)));\n    }s = s.substring(i - 64);\n\n    for (i = 0; i < s.length; i++) {\n      tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\n    }tail[i >> 2] |= 0x80 << (i % 4 << 3);\n\n    if (i > 55) {\n      md5cycle(state, tail);\n      for (i = 0; i < 16; i++) {\n        tail[i] = 0;\n      }\n    }\n    tail[14] = n * 8;\n    md5cycle(state, tail);\n    return state;\n  };\n\n  /* there needs to be support for Unicode here,\r\n   * unless we pretend that we can redefine the MD-5\r\n   * algorithm for multi-byte characters ( perhaps\r\n   * by adding every four 16-bit characters and\r\n   * shortening the sum to 32 bits ). Otherwise\r\n   * I suggest performing MD-5 as if every character\r\n   * was two bytes--e.g., 0040 0025 = @%--but then\r\n   * how will an ordinary MD-5 sum be matched?\r\n   * There is no way to standardize text to something\r\n   * like UTF-8 before transformation; speed cost is\r\n   * utterly prohibitive. The JavaScript standard\r\n   * itself needs to look at this: it should start\r\n   * providing access to strings as preformed UTF-8\r\n   * 8-bit unsigned value arrays.\r\n   */\n  var md5blk = function md5blk(s) {\n    var md5blks = [],\n        i;\n\n    for (i = 0; i < 64; i += 4) {\n      md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n    }\n    return md5blks;\n  };\n\n  var rhex = function rhex(n) {\n    var s = '',\n        j = 0;\n    for (; j < 4; j++) {\n      s += hex_chr[n >> j * 8 + 4 & 0x0F] + hex_chr[n >> j * 8 & 0x0F];\n    }return s;\n  };\n\n  var hex = function hex(x) {\n    for (var i = 0; i < x.length; i++) {\n      x[i] = rhex(x[i]);\n    }return x.join('');\n  };\n\n  var md5 = function md5(s) {\n    return hex(md51(s));\n  };\n\n  /* Some IEs are the only ones I know of that\r\n   * need the idiotic second function, generated by an if clause.\r\n   */\n  if (md5('hello') != '5d41402abc4b2a76b9719d911017c592') {\n    add32 = function add32(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n          msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 0xFFFF;\n    };\n  }\n\n  return md5;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__utils__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Push notifications and custom alarms handler class\n */\n\n\n\nvar Notify = function () {\n\n  // constructor\n  function Notify(options) {\n    _classCallCheck(this, Notify);\n\n    this._alarms = {};\n    this._queue = [];\n    this._notices = [];\n    this._callback = null;\n    this._options = {\n      // key used for storege data\n      storeKey: 'price_alarms_data',\n      // default notification image file\n      imageFile: 'public/images/notification.png',\n      // toggle notification sound\n      soundEnabled: true,\n      // audio file to play on with notifications\n      soundFile: 'public/audio/audio_3.mp3',\n      // volume of notification sound ( 0 - 1 )\n      soundVolume: 1\n    };\n    this.setOptions(options);\n    this._watchQueue();\n  }\n\n  // add a notification message to the queue\n\n\n  _createClass(Notify, [{\n    key: 'add',\n    value: function add(title, body, icon, link) {\n      if (!title || !body) return;\n      var id = __WEBPACK_IMPORTED_MODULE_1__utils___default.a.randString(20);\n      var time = Date.now();\n      icon = String(icon || this._options.imageFile);\n      this._queue = this._queue.filter(function (n) {\n        return n.title !== title;\n      });\n      this._queue.push({ id: id, time: time, title: title, body: body, icon: icon, link: link });\n    }\n\n    // flush the queue\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this._queue = [];\n    }\n\n    // merge new options\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this._options = Object.assign({}, this._options, options);\n    }\n\n    // load saved alarms data from local store\n\n  }, {\n    key: 'loadAlarms',\n    value: function loadAlarms() {\n      var alarms = __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].getData(this._options.storeKey);\n      this._alarms = Object.assign({}, alarms);\n    }\n\n    // get current alarms data\n\n  }, {\n    key: 'getAlarms',\n    value: function getAlarms() {\n      return Object.assign({}, this._alarms);\n    }\n\n    // set handler for alarms data change\n\n  }, {\n    key: 'onChange',\n    value: function onChange(callback) {\n      this._callback = callback;\n    }\n\n    // check and call custom alarms data handler\n\n  }, {\n    key: 'callHandler',\n    value: function callHandler() {\n      if (typeof this._callback === 'function') {\n        var alarms = this.getAlarms();\n        this._callback(alarms);\n      }\n    }\n\n    // could saved alarms for a symbol\n\n  }, {\n    key: 'alarmsCount',\n    value: function alarmsCount(symbol) {\n      if (!symbol || !this._alarms.hasOwnProperty(symbol)) return 0;\n      return this._alarms[symbol].length;\n    }\n\n    // add price alert data for a symbol\n\n  }, {\n    key: 'saveAlarm',\n    value: function saveAlarm(pairData, alarmPrice) {\n      if (!pairData.symbol || pairData.close === alarmPrice) return false;\n\n      var symbol = pairData.symbol,\n          token = pairData.token,\n          asset = pairData.asset,\n          pair = pairData.pair,\n          image = pairData.image;\n\n      var id = __WEBPACK_IMPORTED_MODULE_1__utils___default.a.randString(20);\n      var time = Date.now();\n      var arrow = alarmPrice > pairData.close ? '▲' : '▼';\n      var sign = alarmPrice > pairData.close ? '≥' : '≤';\n      var check = alarmPrice > pairData.close ? 'gain' : 'loss';\n      var alert = { id: id, time: time, arrow: arrow, sign: sign, check: check, symbol: symbol, token: token, asset: asset, pair: pair, image: image, alarmPrice: alarmPrice };\n\n      if (!this._alarms.hasOwnProperty(symbol)) this._alarms[symbol] = [];\n      this._alarms[symbol] = this._alarms[symbol].filter(function (a) {\n        return a.alarmPrice !== alert.alarmPrice;\n      });\n      this._alarms[symbol].push(alert);\n      this.callHandler();\n      return __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].setData(this._options.storeKey, this._alarms);\n    }\n\n    // delete price alert data for a symbol\n\n  }, {\n    key: 'deleteAlarm',\n    value: function deleteAlarm(symbol, id) {\n      if (!symbol || !id) return false;\n      if (!this._alarms.hasOwnProperty(symbol)) return true;\n      this._alarms[symbol] = this._alarms[symbol].filter(function (a) {\n        return a.id !== id;\n      });\n      if (!this._alarms[symbol].length) delete this._alarms[symbol];\n      this.callHandler();\n      return __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].setData(this._options.storeKey, this._alarms);\n    }\n\n    // check if alert is triggered for a symbol object\n\n  }, {\n    key: 'checkAlarm',\n    value: function checkAlarm(symbol, curPrice, callback) {\n      var _this = this;\n\n      if (!this.canNotify() || !this.alarmsCount(symbol)) return;\n      callback = typeof callback === 'function' ? callback : function () {};\n\n      this._alarms[symbol].forEach(function (a) {\n        if (a.check === 'loss' && curPrice > a.alarmPrice) return;\n        if (a.check === 'gain' && curPrice < a.alarmPrice) return;\n\n        var diff = 'equal to';\n        if (curPrice > a.alarmPrice) diff = 'more than';\n        if (curPrice < a.alarmPrice) diff = 'less than';\n\n        var title = [a.symbol, 'price', a.arrow, curPrice, a.asset].join(' ');\n        var info = [a.symbol, 'is now', diff, 'your alert price of', a.alarmPrice, a.asset + '.'].join(' ');\n\n        _this.deleteAlarm(a.symbol, a.id);\n        _this.add(title, info, a.image);\n        callback(title, info, a);\n      });\n    }\n\n    // check if notification is supported\n\n  }, {\n    key: 'hasSupport',\n    value: function hasSupport() {\n      return window && 'Notification' in window;\n    }\n\n    // check if Notification is possible\n\n  }, {\n    key: 'canNotify',\n    value: function canNotify() {\n      if (!this.hasSupport()) return false;\n      if (Notification.permission !== 'granted') return false;\n      return true;\n    }\n\n    // ask for browser notifications permission\n\n  }, {\n    key: 'permission',\n    value: function permission(callback) {\n      if (!this.hasSupport()) return;\n      Notification.requestPermission().then(function (response) {\n        if (typeof callback === 'function') callback(response);\n      });\n    }\n\n    // play notification sound if enabled\n\n  }, {\n    key: 'playSound',\n    value: function playSound() {\n      if (this._options.soundEnabled) {\n        __WEBPACK_IMPORTED_MODULE_1__utils___default.a.playAudio(this._options.soundFile, this._options.soundVolume);\n      }\n    }\n\n    // limit visible notifications to a fixed number\n\n  }, {\n    key: '_cleanupNotifications',\n    value: function _cleanupNotifications() {\n      var limit = 3;\n      if (this._notices.length <= limit) return;\n      for (var i = 0; i < this._notices.length - limit; ++i) {\n        this._notices[i].close(); // trigger close event\n      }\n    }\n\n    // create notifications from the queue on a timer\n\n  }, {\n    key: '_watchQueue',\n    value: function _watchQueue() {\n      var _this2 = this;\n\n      this._cleanupNotifications();\n      setTimeout(this._watchQueue.bind(this), 500);\n      if (!this.canNotify() || !this._queue.length) return;\n\n      // create new notification\n\n      var _queue$shift = this._queue.shift(),\n          id = _queue$shift.id,\n          time = _queue$shift.time,\n          title = _queue$shift.title,\n          body = _queue$shift.body,\n          icon = _queue$shift.icon,\n          link = _queue$shift.link;\n\n      var a = new Notification(title, { body: body, icon: icon, tag: id });\n      setTimeout(function () {\n        return a.close();\n      }, 5000);\n\n      // keep track of visible notifications\n      a.addEventListener('show', function (e) {\n        if (!e || !e.target || !e.target.tag) return;\n        _this2.playSound();\n      });\n      // remove notification from local array when it closes\n      a.addEventListener('close', function (e) {\n        if (!e || !e.target || !e.target.tag) return;\n        _this2._notices = _this2._notices.filter(function (a) {\n          return a.tag !== e.target.tag;\n        });\n      });\n      // convert url string to clickable link\n      if (link && typeof link === 'string') {\n        a.addEventListener('click', function (e) {\n          e.preventDefault();window.open(link, '_blank');\n        });\n      }\n      // custom click handler\n      if (link && typeof link === 'function') {\n        a.addEventListener('click', link);\n      }\n      // add to tracker\n      this._notices.push(a);\n    }\n  }]);\n\n  return Notify;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Notify);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__viewport__ = __webpack_require__(7);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Tooltips Class.\n * Adds custom tooltips to elements on the page.\n */\n\n\nvar Tooltip = function () {\n\n  // class constructor\n  function Tooltip(options) {\n    _classCallCheck(this, Tooltip);\n\n    this._options = Object.assign({\n      // class to apply to tooltip element\n      tipClass: 'tooltip-wrap',\n      // class to apply when tooltip is placed on the left\n      leftClass: 'tooltip-left',\n      // class to apply when tooltip is placed on the right\n      rightClass: 'tooltip-right',\n      // class to apply when tooltip is placed on the top\n      topClass: 'tooltip-top',\n      // class to apply when tooltip is placed on the bottom\n      bottomClass: 'tooltip-bottom',\n      // delay to show the tooltip\n      showDelay: 100,\n      // auto hide delay\n      hideDelay: 2000\n      // ...\n    }, options);\n\n    this._tooltip = null;\n    this._hovItem = null;\n    this._timeout = null;\n    this._autohide = null;\n    this._visible = false;\n    this._elements = [];\n    this._onScroll = this._onScroll.bind(this);\n    this._init();\n  }\n\n  // set target elements\n\n\n  _createClass(Tooltip, [{\n    key: 'select',\n    value: function select(selector) {\n      if (typeof selector === 'string') {\n        this._elements = document.querySelectorAll(selector) || [];\n      } else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector instanceof Element) {\n        this._elements.push(selector);\n      }\n      for (var i = 0; i < this._elements.length; ++i) {\n        this._setupItem(this._elements[i]);\n      }\n      this._hideTooltip();\n    }\n\n    // remove element from the list\n\n  }, {\n    key: 'unselect',\n    value: function unselect(element) {\n      if ((typeof element === 'undefined' ? 'undefined' : _typeof(element)) === 'object' && element instanceof Element) {\n        for (var i = 0, t = this._elements.length; i < t; ++i) {\n          if (this._elements[i] === element) {\n            this._resetItem(this._elements[i]);\n            this._elements.splice(i, 1);\n            break;\n          }\n        }\n        this._hideTooltip();\n      }\n    }\n\n    // cleanup this instance\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      for (var i = 0; i < this._elements.length; ++i) {\n        this._resetItem(this._elements[i]);\n      }\n      if (document.body.contains(this._tooltip)) {\n        document.body.removeChild(this._tooltip);\n      }\n      window.removeEventListener('scroll', this._onScroll);\n      this._elements = [];\n      this._tooltip = null;\n    }\n\n    // initlaize elements\n\n  }, {\n    key: '_init',\n    value: function _init() {\n      this._tooltip = document.createElement('div');\n      this._tooltip.className = this._options.tipClass;\n      this._tooltip.style['display'] = 'block';\n      this._tooltip.style['position'] = 'absolute';\n      this._tooltip.style['pointer-events'] = 'none';\n      this._hideTooltip();\n      document.body.appendChild(this._tooltip);\n      window.addEventListener('scroll', this._onScroll);\n    }\n\n    // set an element to have tooltip, if not alredy setup\n\n  }, {\n    key: '_setupItem',\n    value: function _setupItem(item) {\n      var _this = this;\n\n      if (item && item instanceof Element) {\n        if (item.hasAttribute('title')) {\n          item.setAttribute('data-tip', item.getAttribute('title') || '');\n          item.removeAttribute('title');\n          item.addEventListener('mouseenter', function (e) {\n            _this._onEnter(e);\n          });\n          item.addEventListener('touchstart', function (e) {\n            _this._onEnter(e);\n          });\n          item.addEventListener('mouseleave', function (e) {\n            _this._onLeave(e);\n          });\n          item.addEventListener('touchend', function (e) {\n            _this._onLeave(e);\n          });\n        }\n      }\n    }\n\n    // remove tooltip events from element, if needed\n\n  }, {\n    key: '_resetItem',\n    value: function _resetItem(item) {\n      var _this2 = this;\n\n      if (item && item instanceof Element) {\n        if (item.hasAttribute('data-tip')) {\n          item.setAttribute('title', item.getAttribute('data-tip') || '');\n          item.removeAttribute('data-tip');\n          item.removeEventListener('mouseenter', function (e) {\n            _this2._onEnter(e);\n          });\n          item.removeEventListener('touchstart', function (e) {\n            _this2._onEnter(e);\n          });\n          item.removeEventListener('mouseleave', function (e) {\n            _this2._onLeave(e);\n          });\n          item.removeEventListener('touchend', function (e) {\n            _this2._onLeave(e);\n          });\n        }\n      }\n    }\n\n    // decides where to place the tooltip in relation to item and screen bounds\n\n  }, {\n    key: '_showTooltip',\n    value: function _showTooltip() {\n      if (this._tooltip && this._hovItem) {\n\n        var box = this._hovItem.getBoundingClientRect(),\n            centerX = box.left + (this._hovItem.offsetWidth - this._tooltip.offsetWidth) / 2,\n            centerY = box.top + (this._hovItem.offsetHeight - this._tooltip.offsetHeight) / 2,\n            leftPos = box.left - this._tooltip.offsetWidth,\n            rightPos = box.left + this._hovItem.offsetWidth,\n            topPos = box.top - this._tooltip.offsetHeight,\n            bottomPos = box.top + this._hovItem.offsetHeight,\n            tipHalf = this._tooltip.offsetWidth / 2,\n            clss = this._options.topClass,\n            left = centerX,\n            top = topPos;\n\n        // move to the right\n        if (box.left < tipHalf) {\n          clss = this._options.rightClass;\n          left = rightPos;\n          top = centerY;\n        }\n        // move to the left\n        else if (__WEBPACK_IMPORTED_MODULE_0__viewport__[\"a\" /* default */].clientWidth() - rightPos < tipHalf) {\n            clss = this._options.leftClass;\n            left = leftPos;\n            top = centerY;\n          }\n          // move to the bottom\n          else if (topPos < 0) {\n              clss = this._options.bottomClass;\n              left = centerX;\n              top = bottomPos;\n            }\n        if (left > 1 && top > 1 && this._tooltip.innerHTML) {\n          this._tooltip.className = this._options.tipClass + ' ' + clss;\n          this._tooltip.style['left'] = __WEBPACK_IMPORTED_MODULE_0__viewport__[\"a\" /* default */].scrollLeft() + left + 'px';\n          this._tooltip.style['top'] = __WEBPACK_IMPORTED_MODULE_0__viewport__[\"a\" /* default */].scrollTop() + top + 'px';\n          this._visible = true;\n        }\n      }\n    }\n\n    // move tooltip object off screen, reset content and class\n\n  }, {\n    key: '_hideTooltip',\n    value: function _hideTooltip() {\n      if (this._tooltip) {\n        this._tooltip.innerHTML = '';\n        this._tooltip.className = this._options.tipClass;\n        this._tooltip.style['left'] = '-1000px';\n        this._tooltip.style['top'] = '-1000px';\n        this._visible = false;\n      }\n    }\n\n    // when mouse enters target element\n\n  }, {\n    key: '_onEnter',\n    value: function _onEnter(e) {\n      var item = e.target;\n      var title = item.getAttribute('data-tip');\n\n      if (title) {\n        this._hovItem = item;\n        this._tooltip.innerHTML = title;\n\n        if (this._timeout) clearTimeout(this._timeout);\n        this._timeout = setTimeout(this._showTooltip.bind(this), this._options.showDelay);\n\n        if (this._autohide) clearTimeout(this._autohide);\n        this._autohide = setTimeout(this._hideTooltip.bind(this), this._options.hideDelay);\n      }\n    }\n\n    // when mouse leaves target element\n\n  }, {\n    key: '_onLeave',\n    value: function _onLeave(e) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n        this._timeout = null;\n      }\n      this._hovItem = null;\n      this._hideTooltip();\n    }\n\n    // hide tooltip over fixed elements when scrolled\n\n  }, {\n    key: '_onScroll',\n    value: function _onScroll(e) {\n      if (this._visible) {\n        this._hideTooltip();\n      }\n    }\n  }]);\n\n  return Tooltip;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Tooltip);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__utils__);\n/**\r\n * Handles saving data to a history list\r\n */\n\n\n\n/* harmony default export */ __webpack_exports__["a"] = ({\n\n  // local data\n  _key: \'history_data\', // store key\n  _maxage: 3600, // max age for entries (seconds)\n  _data: [], // history data\n  _callback: null, // data change handler\n\n  // load data from store\n  loadData: function loadData() {\n    var data = __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].getData(this._key);\n    if (!Array.isArray(data)) return;\n    this._data = data;\n  },\n\n\n  // get history data\n  getData: function getData() {\n    return this._data.slice();\n  },\n\n\n  // set handler for history data change\n  onChange: function onChange(callback) {\n    this._callback = callback;\n  },\n\n\n  // check and call custom history data handler\n  callHandler: function callHandler() {\n    if (typeof this._callback === \'function\') {\n      var data = this.getData();\n      this._callback(data);\n    }\n  },\n\n\n  // add data to history\n  add: function add(title, info, icon) {\n    var _this = this;\n\n    if (!title || !info) return;\n    var id = __WEBPACK_IMPORTED_MODULE_1__utils___default.a.randString(20);\n    var time = Date.now();\n    this._data = this._data.filter(function (e) {\n      return (time - e.time) / 1000 < _this._maxage;\n    });\n    this._data.unshift({ id: id, time: time, title: title, info: info, icon: icon }); // new entries show first\n    this.callHandler();\n    return __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].setData(this._key, this._data);\n  },\n\n\n  // delete data from history\n  delete: function _delete(id) {\n    if (!id) return;\n    this._data = this._data.filter(function (e) {\n      return e.id !== id;\n    });\n    this.callHandler();\n    return __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].setData(this._key, this._data);\n  },\n\n\n  // flush all data from history\n  flush: function flush() {\n    this._data = [];\n    this.callHandler();\n    return __WEBPACK_IMPORTED_MODULE_0__store__["a" /* default */].setData(this._key, this._data);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9oaXN0b3J5LmpzPzE4NTAiXSwibmFtZXMiOlsiX2tleSIsIl9tYXhhZ2UiLCJfZGF0YSIsIl9jYWxsYmFjayIsImxvYWREYXRhIiwiZGF0YSIsInN0b3JlIiwiZ2V0RGF0YSIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImNhbGxIYW5kbGVyIiwiYWRkIiwidGl0bGUiLCJpbmZvIiwiaWNvbiIsImlkIiwidXRpbHMiLCJyYW5kU3RyaW5nIiwidGltZSIsIkRhdGUiLCJub3ciLCJmaWx0ZXIiLCJlIiwidW5zaGlmdCIsInNldERhdGEiLCJkZWxldGUiLCJmbHVzaCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFBQTs7O0FBR0E7QUFDQTs7QUFFQSx5REFBZTs7QUFFYjtBQUNBQSxRQUFNLGNBSE8sRUFHUztBQUN0QkMsV0FBUyxJQUpJLEVBSUU7QUFDZkMsU0FBTyxFQUxNLEVBS0Y7QUFDWEMsYUFBVyxJQU5FLEVBTUk7O0FBRWpCO0FBQ0FDLFVBVGEsc0JBU0Y7QUFDVCxRQUFJQyxPQUFPLHVEQUFBQyxDQUFNQyxPQUFOLENBQWUsS0FBS1AsSUFBcEIsQ0FBWDtBQUNBLFFBQUssQ0FBQ1EsTUFBTUMsT0FBTixDQUFlSixJQUFmLENBQU4sRUFBOEI7QUFDOUIsU0FBS0gsS0FBTCxHQUFhRyxJQUFiO0FBQ0QsR0FiWTs7O0FBZWI7QUFDQUUsU0FoQmEscUJBZ0JIO0FBQ1IsV0FBTyxLQUFLTCxLQUFMLENBQVdRLEtBQVgsRUFBUDtBQUNELEdBbEJZOzs7QUFvQmI7QUFDQUMsVUFyQmEsb0JBcUJIQyxRQXJCRyxFQXFCUTtBQUNuQixTQUFLVCxTQUFMLEdBQWlCUyxRQUFqQjtBQUNELEdBdkJZOzs7QUF5QmI7QUFDQUMsYUExQmEseUJBMEJDO0FBQ1osUUFBSyxPQUFPLEtBQUtWLFNBQVosS0FBMEIsVUFBL0IsRUFBNEM7QUFDMUMsVUFBSUUsT0FBTyxLQUFLRSxPQUFMLEVBQVg7QUFDQSxXQUFLSixTQUFMLENBQWdCRSxJQUFoQjtBQUNEO0FBQ0YsR0EvQlk7OztBQWlDYjtBQUNBUyxLQWxDYSxlQWtDUkMsS0FsQ1EsRUFrQ0RDLElBbENDLEVBa0NLQyxJQWxDTCxFQWtDWTtBQUFBOztBQUN2QixRQUFLLENBQUNGLEtBQUQsSUFBVSxDQUFDQyxJQUFoQixFQUF1QjtBQUN2QixRQUFJRSxLQUFTLDhDQUFBQyxDQUFNQyxVQUFOLENBQWtCLEVBQWxCLENBQWI7QUFDQSxRQUFJQyxPQUFTQyxLQUFLQyxHQUFMLEVBQWI7QUFDQSxTQUFLckIsS0FBTCxHQUFhLEtBQUtBLEtBQUwsQ0FBV3NCLE1BQVgsQ0FBbUI7QUFBQSxhQUFPLENBQUVILE9BQU9JLEVBQUVKLElBQVgsSUFBb0IsSUFBdEIsR0FBK0IsTUFBS3BCLE9BQXpDO0FBQUEsS0FBbkIsQ0FBYjtBQUNBLFNBQUtDLEtBQUwsQ0FBV3dCLE9BQVgsQ0FBb0IsRUFBRVIsTUFBRixFQUFNRyxVQUFOLEVBQVlOLFlBQVosRUFBbUJDLFVBQW5CLEVBQXlCQyxVQUF6QixFQUFwQixFQUx1QixDQUtnQztBQUN2RCxTQUFLSixXQUFMO0FBQ0EsV0FBTyx1REFBQVAsQ0FBTXFCLE9BQU4sQ0FBZSxLQUFLM0IsSUFBcEIsRUFBMEIsS0FBS0UsS0FBL0IsQ0FBUDtBQUNELEdBMUNZOzs7QUE0Q2I7QUFDQTBCLFFBN0NhLG1CQTZDTFYsRUE3Q0ssRUE2Q0E7QUFDWCxRQUFLLENBQUNBLEVBQU4sRUFBVztBQUNYLFNBQUtoQixLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXc0IsTUFBWCxDQUFtQjtBQUFBLGFBQUtDLEVBQUVQLEVBQUYsS0FBU0EsRUFBZDtBQUFBLEtBQW5CLENBQWI7QUFDQSxTQUFLTCxXQUFMO0FBQ0EsV0FBTyx1REFBQVAsQ0FBTXFCLE9BQU4sQ0FBZSxLQUFLM0IsSUFBcEIsRUFBMEIsS0FBS0UsS0FBL0IsQ0FBUDtBQUNELEdBbERZOzs7QUFvRGI7QUFDQTJCLE9BckRhLG1CQXFETDtBQUNOLFNBQUszQixLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtXLFdBQUw7QUFDQSxXQUFPLHVEQUFBUCxDQUFNcUIsT0FBTixDQUFlLEtBQUszQixJQUFwQixFQUEwQixLQUFLRSxLQUEvQixDQUFQO0FBQ0Q7QUF6RFksQ0FBZiIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBIYW5kbGVzIHNhdmluZyBkYXRhIHRvIGEgaGlzdG9yeSBsaXN0XHJcbiAqL1xyXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZSc7XHJcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbiAgLy8gbG9jYWwgZGF0YVxyXG4gIF9rZXk6ICdoaXN0b3J5X2RhdGEnLCAvLyBzdG9yZSBrZXlcclxuICBfbWF4YWdlOiAzNjAwLCAvLyBtYXggYWdlIGZvciBlbnRyaWVzIChzZWNvbmRzKVxyXG4gIF9kYXRhOiBbXSwgLy8gaGlzdG9yeSBkYXRhXHJcbiAgX2NhbGxiYWNrOiBudWxsLCAvLyBkYXRhIGNoYW5nZSBoYW5kbGVyXHJcblxyXG4gIC8vIGxvYWQgZGF0YSBmcm9tIHN0b3JlXHJcbiAgbG9hZERhdGEoKSB7XHJcbiAgICBsZXQgZGF0YSA9IHN0b3JlLmdldERhdGEoIHRoaXMuX2tleSApO1xyXG4gICAgaWYgKCAhQXJyYXkuaXNBcnJheSggZGF0YSApICkgcmV0dXJuO1xyXG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XHJcbiAgfSxcclxuXHJcbiAgLy8gZ2V0IGhpc3RvcnkgZGF0YVxyXG4gIGdldERhdGEoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5zbGljZSgpO1xyXG4gIH0sXHJcblxyXG4gIC8vIHNldCBoYW5kbGVyIGZvciBoaXN0b3J5IGRhdGEgY2hhbmdlXHJcbiAgb25DaGFuZ2UoIGNhbGxiYWNrICkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICB9LFxyXG5cclxuICAvLyBjaGVjayBhbmQgY2FsbCBjdXN0b20gaGlzdG9yeSBkYXRhIGhhbmRsZXJcclxuICBjYWxsSGFuZGxlcigpIHtcclxuICAgIGlmICggdHlwZW9mIHRoaXMuX2NhbGxiYWNrID09PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICBsZXQgZGF0YSA9IHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgICB0aGlzLl9jYWxsYmFjayggZGF0YSApO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIGFkZCBkYXRhIHRvIGhpc3RvcnlcclxuICBhZGQoIHRpdGxlLCBpbmZvLCBpY29uICkge1xyXG4gICAgaWYgKCAhdGl0bGUgfHwgIWluZm8gKSByZXR1cm47XHJcbiAgICBsZXQgaWQgICAgID0gdXRpbHMucmFuZFN0cmluZyggMjAgKTtcclxuICAgIGxldCB0aW1lICAgPSBEYXRlLm5vdygpO1xyXG4gICAgdGhpcy5fZGF0YSA9IHRoaXMuX2RhdGEuZmlsdGVyKCBlID0+ICggKCB0aW1lIC0gZS50aW1lICkgLyAxMDAwICkgPCB0aGlzLl9tYXhhZ2UgKTtcclxuICAgIHRoaXMuX2RhdGEudW5zaGlmdCggeyBpZCwgdGltZSwgdGl0bGUsIGluZm8sIGljb24gfSApOyAvLyBuZXcgZW50cmllcyBzaG93IGZpcnN0XHJcbiAgICB0aGlzLmNhbGxIYW5kbGVyKCk7XHJcbiAgICByZXR1cm4gc3RvcmUuc2V0RGF0YSggdGhpcy5fa2V5LCB0aGlzLl9kYXRhICk7XHJcbiAgfSxcclxuXHJcbiAgLy8gZGVsZXRlIGRhdGEgZnJvbSBoaXN0b3J5XHJcbiAgZGVsZXRlKCBpZCApIHtcclxuICAgIGlmICggIWlkICkgcmV0dXJuO1xyXG4gICAgdGhpcy5fZGF0YSA9IHRoaXMuX2RhdGEuZmlsdGVyKCBlID0+IGUuaWQgIT09IGlkICk7XHJcbiAgICB0aGlzLmNhbGxIYW5kbGVyKCk7XHJcbiAgICByZXR1cm4gc3RvcmUuc2V0RGF0YSggdGhpcy5fa2V5LCB0aGlzLl9kYXRhICk7XHJcbiAgfSxcclxuXHJcbiAgLy8gZmx1c2ggYWxsIGRhdGEgZnJvbSBoaXN0b3J5XHJcbiAgZmx1c2goKSB7XHJcbiAgICB0aGlzLl9kYXRhID0gW107XHJcbiAgICB0aGlzLmNhbGxIYW5kbGVyKCk7XHJcbiAgICByZXR1cm4gc3RvcmUuc2V0RGF0YSggdGhpcy5fa2V5LCB0aGlzLl9kYXRhICk7XHJcbiAgfSxcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9oaXN0b3J5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n')},function(module,exports){eval('var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\n/**\n * Basic sentiment analysis module\n */\nmodule.exports = {\n\n  // score list data\n  _afinn: {},\n\n  // words that negate the score of a following word\n  _negators: ["cant", "can\'t", "dont", "don\'t", "doesnt", "doesn\'t", "not", "non", "wont", "won\'t", "isnt", "isn\'t", "wouldnt", "wouldn\'t", "couldnt", "couldn\'t", "didnt", "didn\'t", "wasnt", "wasn\'t", "havent", "haven\'t", "ain\'t", "aint", "werent", "weren\'t"],\n\n  // words that add to the score of a following word\n  _amplifiers: ["very", "way", "shockinly", "fucking", "fuckin", "insanely", "ridiculously", "massively", "amazingly", "crazy", "really"],\n\n  // common acronyms translations\n  _translate: {\n    "ta": "technical analysis",\n    "dae": "does anybody else",\n    "ama": "ask me anything",\n    "dm": "direct message",\n    "eli5": "explain like i\'m five",\n    "fml": "fuck my life",\n    "ftfy": "fixed that for you",\n    "hifw": "how i felt when",\n    "mrw": "my reaction when",\n    "mfw": "my face when",\n    "mirl": "me in real life",\n    "icymi": "in case you missed it",\n    "idgaf": "i don\'t give a fuck",\n    "imo": "in my opinion",\n    "imho": "in my humble opinion",\n    "irl": "in real life",\n    "jsyk": "just so you know",\n    "nsfw": "not safe for work",\n    "nsfl": "not safe for life",\n    "tbt": "throwback thursday",\n    "tldr": "too long didn\'t read",\n    "ymmv": "your mileage may vary",\n    "yolo": "you only live once",\n    "til": "today i learned",\n    "wysiwyg": "what you see is what you get",\n    "lol": "laughing out loud",\n    "lmao": "laughing my ass off",\n    "rofl": "rolling on floor laughing",\n    "dafuq": "what the fuck",\n    "rekt": "wrecked",\n    "hodl": "hold on for dear life",\n    "2fa": "two factor authentication",\n    "sob": "son of a bitch",\n    "gr8": "great"\n  },\n\n  // build afinn wordlist\n  merge: function merge(list) {\n    this._afinn = Object.assign(this._afinn, list);\n  },\n\n\n  // analyse sentiment for text\n  analyze: function analyze(text) {\n    var score = 0;\n    var negative = 0;\n    var positive = 0;\n    var comparative = 0;\n    var list = this._splitWords(text);\n    var total = list.length;\n    var i = total;\n    var c = [];\n\n    // loop filtered input words\n    while (i--) {\n      if (!this._afinn.hasOwnProperty(list[i])) continue; // not found\n      if (c.indexOf(list[i]) >= 0) continue; // already checked this word\n\n      var w = list[i]; // current word\n      var p = i > 0 ? list[i - 1] : \'\'; // previous word\n      var s = parseFloat(this._afinn[w]) | 0; // word score\n\n      if (!p || !s) continue; // no score\n      c.push(w); // cache word\n\n      if (this._negators.indexOf(p) >= 0) s *= -1; // flip\n      if (this._amplifiers.indexOf(p) >= 0) s += s; // double\n      if (s > 0) positive += s;\n      if (s < 0) negative += s;\n      score += s;\n    }\n\n    // sentiment string params\n    var params = [\'\', \'Neutral\', \'icon-help iconLeft text-info\'];\n    // positive\n    if (score === 1) params = [\'+\', \'Ok\', \'icon-help iconLeft text-success\'];\n    if (score > 1) params = [\'+\', \'Positive\', \'icon-like iconLeft text-success\'];\n    if (score > 10) params = [\'+\', \'Positive\', \'icon-like iconLeft text-gain\'];\n    // negative\n    if (score === -1) params = [\'-\', \'Ok\', \'icon-help iconLeft text-danger\'];\n    if (score < -1) params = [\'-\', \'Negative\', \'icon-dislike iconLeft text-danger\'];\n    if (score < -10) params = [\'-\', \'Negative\', \'icon-dislike iconLeft text-loss\'];\n\n    // build sentiment info\n\n    var _params = params,\n        _params2 = _slicedToArray(_params, 3),\n        sign = _params2[0],\n        word = _params2[1],\n        styles = _params2[2];\n\n    var sentiment = [word, sign + Math.abs(score)].join(\' \');\n\n    // build final data\n    comparative = total ? score / total : 0;\n    return { score: score, positive: positive, negative: negative, comparative: comparative, sign: sign, word: word, styles: styles, sentiment: sentiment };\n  },\n\n\n  // filter input text into word list\n  _splitWords: function _splitWords(input) {\n    var _this = this;\n\n    var div = document.createElement(\'div\');\n    div.innerHTML = String(input || \'\');\n\n    // strip html\n    var output = String(div.textContent || div.innerText || \'\').toLowerCase().trim();\n\n    // translate acronyms\n    Object.keys(this._translate).forEach(function (acro) {\n      var regx = new RegExp(\'\\\\b(\' + acro + \')\\\\b\', \'g\');\n      output = output.replace(regx, _this._translate[acro]);\n    });\n\n    // clean string\n    output = output.replace(/([\\`\\\'\\’]+)/g, "\'") // normalize apostrophes\n    .replace(/([\\“\\”\\“\\”\\"]+)/g, \'"\') // normalize quotes\n    .replace(/([\\-]+)/g, \'-\') // normalize dashes\n    .replace(/([^a-z\\\'\\-]+)/g, \' \') // only allow these\n    .replace(/[\\t\\r\\n\\s\\uFEFF\\xA0]+/g, \' \') // remove whitespace\n    .trim();\n\n    // split\n    return output.split(/\\s+/g);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * Basic event bus\r\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  _data: {},\n\n  // register\n  on: function on(event, callback) {\n    if (!event || typeof event !== 'string') return;\n    if (typeof callback !== 'function') return;\n    if (!this._data.hasOwnProperty(event)) this._data[event] = [];\n    this._data[event].push(callback);\n  },\n\n\n  // emit callbacks\n  emit: function emit() {\n    var args = Array.from(arguments);\n    var event = args.length ? args.shift() : '';\n    if (!this._data.hasOwnProperty(event)) return;\n    this._data[event].forEach(function (cb) {\n      return cb.apply(cb, args);\n    });\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9idXMuanM/NGJhYSJdLCJuYW1lcyI6WyJfZGF0YSIsIm9uIiwiZXZlbnQiLCJjYWxsYmFjayIsImhhc093blByb3BlcnR5IiwicHVzaCIsImVtaXQiLCJhcmdzIiwiQXJyYXkiLCJmcm9tIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic2hpZnQiLCJmb3JFYWNoIiwiY2IiLCJhcHBseSJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBLHlEQUFlO0FBQ2JBLFNBQU8sRUFETTs7QUFHYjtBQUNBQyxJQUphLGNBSVRDLEtBSlMsRUFJRkMsUUFKRSxFQUlTO0FBQ3BCLFFBQUssQ0FBQ0QsS0FBRCxJQUFVLE9BQU9BLEtBQVAsS0FBaUIsUUFBaEMsRUFBMkM7QUFDM0MsUUFBSyxPQUFPQyxRQUFQLEtBQW9CLFVBQXpCLEVBQXNDO0FBQ3RDLFFBQUssQ0FBQyxLQUFLSCxLQUFMLENBQVdJLGNBQVgsQ0FBMkJGLEtBQTNCLENBQU4sRUFBMkMsS0FBS0YsS0FBTCxDQUFZRSxLQUFaLElBQXNCLEVBQXRCO0FBQzNDLFNBQUtGLEtBQUwsQ0FBWUUsS0FBWixFQUFvQkcsSUFBcEIsQ0FBMEJGLFFBQTFCO0FBQ0QsR0FUWTs7O0FBV2I7QUFDQUcsTUFaYSxrQkFZTjtBQUNMLFFBQUlDLE9BQVFDLE1BQU1DLElBQU4sQ0FBWUMsU0FBWixDQUFaO0FBQ0EsUUFBSVIsUUFBUUssS0FBS0ksTUFBTCxHQUFjSixLQUFLSyxLQUFMLEVBQWQsR0FBNkIsRUFBekM7QUFDQSxRQUFLLENBQUMsS0FBS1osS0FBTCxDQUFXSSxjQUFYLENBQTJCRixLQUEzQixDQUFOLEVBQTJDO0FBQzNDLFNBQUtGLEtBQUwsQ0FBWUUsS0FBWixFQUFvQlcsT0FBcEIsQ0FBNkI7QUFBQSxhQUFNQyxHQUFHQyxLQUFILENBQVVELEVBQVYsRUFBY1AsSUFBZCxDQUFOO0FBQUEsS0FBN0I7QUFDRDtBQWpCWSxDQUFmIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEJhc2ljIGV2ZW50IGJ1c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIF9kYXRhOiB7fSxcclxuXHJcbiAgLy8gcmVnaXN0ZXJcclxuICBvbiggZXZlbnQsIGNhbGxiYWNrICkge1xyXG4gICAgaWYgKCAhZXZlbnQgfHwgdHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJyApIHJldHVybjtcclxuICAgIGlmICggdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nICkgcmV0dXJuO1xyXG4gICAgaWYgKCAhdGhpcy5fZGF0YS5oYXNPd25Qcm9wZXJ0eSggZXZlbnQgKSApIHRoaXMuX2RhdGFbIGV2ZW50IF0gPSBbXTtcclxuICAgIHRoaXMuX2RhdGFbIGV2ZW50IF0ucHVzaCggY2FsbGJhY2sgKTtcclxuICB9LFxyXG5cclxuICAvLyBlbWl0IGNhbGxiYWNrc1xyXG4gIGVtaXQoKSB7XHJcbiAgICBsZXQgYXJncyAgPSBBcnJheS5mcm9tKCBhcmd1bWVudHMgKTtcclxuICAgIGxldCBldmVudCA9IGFyZ3MubGVuZ3RoID8gYXJncy5zaGlmdCgpIDogJyc7XHJcbiAgICBpZiAoICF0aGlzLl9kYXRhLmhhc093blByb3BlcnR5KCBldmVudCApICkgcmV0dXJuO1xyXG4gICAgdGhpcy5fZGF0YVsgZXZlbnQgXS5mb3JFYWNoKCBjYiA9PiBjYi5hcHBseSggY2IsIGFyZ3MgKSApO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9idXMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__ = __webpack_require__(8);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_50627222_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__ = __webpack_require__(98);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(43)\n  __webpack_require__(44)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_50627222_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlP2Q2YzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi01MDYyNzIyMlxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXBvc3Rjc3MtbG9hZGVyIXNhc3MtbG9hZGVyP2RhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIilcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTA2MjcyMjJcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTEhLi9BcHAudnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXBwLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQXBwLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNTA2MjcyMjJcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BcHAudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlPzdiMWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01MDYyNzIyMlwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlPzg3MDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01MDYyNzIyMlwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MSEuL3NyYy9jb21wb25lbnRzL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * Application options object\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // cors proxy for outgoing http requests\n  proxy: 'https://cors-anywhere.herokuapp.com/',\n  proxylist: ['https://cors-anywhere.herokuapp.com/', 'https://localhost:4343/', 'http://localhost:8080/'],\n\n  // notification audio\n  audio: {\n    enabled: true,\n    volume: 0.5,\n    file: 'public/audio/audio_2.mp3'\n  },\n\n  // search options\n  search: {\n    strict: true // force case-sensitive search\n  },\n\n  // news related options\n  news: {\n    refetch: true, // aut re-fetch news on a timer\n    notify: false, // show push notifications for news\n    send: false, // include news in outgoing notifications (email/telegram)\n    interval: 5, // how often to try fetching from each source (secs)\n    delay: 300, // how long to wait before fetching again from each source (secs)\n    tweets: 1, // how many tweets to fetch at once from each source\n    total: 200, // how many total tweets to store\n    max: 50, // max number of news entries to show\n    days: 1, // only show entries posted within this number of days\n    sources: [// twitter accounts for latest crypto news\n    'coinbase', 'binance', 'HuobiGlobal', 'YobitExchange', 'BittrexExchange', 'Coinsquare', 'hitbtc', 'Cryptopia_NZ', 'Bitstamp', 'bitfinex', 'krakenfx', 'coindesk', 'cmcal_bot', 'iCryptoMoon', 'CryptoCurrent', 'Cointelegraph', 'CryptoCoinsNews', 'cryptonewsday', 'RedditBTC']\n  },\n\n  // mailgun api config\n  mailgun: {\n    enabled: false, // status\n    domain: '', // account domain\n    apikey: '', // api key\n    email: '' // recipient email\n  },\n\n  // telegram bot api config\n  telegram: {\n    enabled: false, // status\n    botkey: '', // telegram bot id\n    userid: '' // recipient chat id\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlncy9vcHRpb25zLmpzP2E2YzIiXSwibmFtZXMiOlsicHJveHkiLCJwcm94eWxpc3QiLCJhdWRpbyIsImVuYWJsZWQiLCJ2b2x1bWUiLCJmaWxlIiwic2VhcmNoIiwic3RyaWN0IiwibmV3cyIsInJlZmV0Y2giLCJub3RpZnkiLCJzZW5kIiwiaW50ZXJ2YWwiLCJkZWxheSIsInR3ZWV0cyIsInRvdGFsIiwibWF4IiwiZGF5cyIsInNvdXJjZXMiLCJtYWlsZ3VuIiwiZG9tYWluIiwiYXBpa2V5IiwiZW1haWwiLCJ0ZWxlZ3JhbSIsImJvdGtleSIsInVzZXJpZCJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBLHlEQUFlOztBQUViO0FBQ0FBLFNBQU8sc0NBSE07QUFJYkMsYUFBVyxDQUNULHNDQURTLEVBRVQseUJBRlMsRUFHVCx3QkFIUyxDQUpFOztBQVViO0FBQ0FDLFNBQU87QUFDTEMsYUFBUyxJQURKO0FBRUxDLFlBQVEsR0FGSDtBQUdMQyxVQUFNO0FBSEQsR0FYTTs7QUFpQmI7QUFDQUMsVUFBUTtBQUNOQyxZQUFRLElBREYsQ0FDUztBQURULEdBbEJLOztBQXNCYjtBQUNBQyxRQUFNO0FBQ0pDLGFBQVMsSUFETCxFQUNZO0FBQ2hCQyxZQUFRLEtBRkosRUFFWTtBQUNoQkMsVUFBTSxLQUhGLEVBR1k7QUFDaEJDLGNBQVUsQ0FKTixFQUlZO0FBQ2hCQyxXQUFPLEdBTEgsRUFLWTtBQUNoQkMsWUFBUSxDQU5KLEVBTVk7QUFDaEJDLFdBQU8sR0FQSCxFQU9ZO0FBQ2hCQyxTQUFLLEVBUkQsRUFRWTtBQUNoQkMsVUFBTSxDQVRGLEVBU1k7QUFDaEJDLGFBQVMsQ0FBTztBQUNkLGNBRE8sRUFFUCxTQUZPLEVBR1AsYUFITyxFQUlQLGVBSk8sRUFLUCxpQkFMTyxFQU1QLFlBTk8sRUFPUCxRQVBPLEVBUVAsY0FSTyxFQVNQLFVBVE8sRUFVUCxVQVZPLEVBV1AsVUFYTyxFQVlQLFVBWk8sRUFhUCxXQWJPLEVBY1AsYUFkTyxFQWVQLGVBZk8sRUFnQlAsZUFoQk8sRUFpQlAsaUJBakJPLEVBa0JQLGVBbEJPLEVBbUJQLFdBbkJPO0FBVkwsR0F2Qk87O0FBd0RiO0FBQ0FDLFdBQVM7QUFDUGhCLGFBQVMsS0FERixFQUNTO0FBQ2hCaUIsWUFBUSxFQUZELEVBRVM7QUFDaEJDLFlBQVEsRUFIRCxFQUdTO0FBQ2hCQyxXQUFPLEVBSkEsQ0FJUztBQUpULEdBekRJOztBQWdFYjtBQUNBQyxZQUFVO0FBQ1JwQixhQUFTLEtBREQsRUFDUTtBQUNoQnFCLFlBQVEsRUFGQSxFQUVRO0FBQ2hCQyxZQUFRLEVBSEEsQ0FHUTtBQUhSO0FBakVHLENBQWYiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFwcGxpY2F0aW9uIG9wdGlvbnMgb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb3JzIHByb3h5IGZvciBvdXRnb2luZyBodHRwIHJlcXVlc3RzXG4gIHByb3h5OiAnaHR0cHM6Ly9jb3JzLWFueXdoZXJlLmhlcm9rdWFwcC5jb20vJyxcbiAgcHJveHlsaXN0OiBbXG4gICAgJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLycsXG4gICAgJ2h0dHBzOi8vbG9jYWxob3N0OjQzNDMvJyxcbiAgICAnaHR0cDovL2xvY2FsaG9zdDo4MDgwLycsXG4gIF0sXG5cbiAgLy8gbm90aWZpY2F0aW9uIGF1ZGlvXG4gIGF1ZGlvOiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICB2b2x1bWU6IDAuNSxcbiAgICBmaWxlOiAncHVibGljL2F1ZGlvL2F1ZGlvXzIubXAzJyxcbiAgfSxcblxuICAvLyBzZWFyY2ggb3B0aW9uc1xuICBzZWFyY2g6IHtcbiAgICBzdHJpY3Q6IHRydWUsICAvLyBmb3JjZSBjYXNlLXNlbnNpdGl2ZSBzZWFyY2hcbiAgfSxcblxuICAvLyBuZXdzIHJlbGF0ZWQgb3B0aW9uc1xuICBuZXdzOiB7XG4gICAgcmVmZXRjaDogdHJ1ZSwgIC8vIGF1dCByZS1mZXRjaCBuZXdzIG9uIGEgdGltZXJcbiAgICBub3RpZnk6IGZhbHNlLCAgLy8gc2hvdyBwdXNoIG5vdGlmaWNhdGlvbnMgZm9yIG5ld3NcbiAgICBzZW5kOiBmYWxzZSwgICAgLy8gaW5jbHVkZSBuZXdzIGluIG91dGdvaW5nIG5vdGlmaWNhdGlvbnMgKGVtYWlsL3RlbGVncmFtKVxuICAgIGludGVydmFsOiA1LCAgICAvLyBob3cgb2Z0ZW4gdG8gdHJ5IGZldGNoaW5nIGZyb20gZWFjaCBzb3VyY2UgKHNlY3MpXG4gICAgZGVsYXk6IDMwMCwgICAgIC8vIGhvdyBsb25nIHRvIHdhaXQgYmVmb3JlIGZldGNoaW5nIGFnYWluIGZyb20gZWFjaCBzb3VyY2UgKHNlY3MpXG4gICAgdHdlZXRzOiAxLCAgICAgIC8vIGhvdyBtYW55IHR3ZWV0cyB0byBmZXRjaCBhdCBvbmNlIGZyb20gZWFjaCBzb3VyY2VcbiAgICB0b3RhbDogMjAwLCAgICAgLy8gaG93IG1hbnkgdG90YWwgdHdlZXRzIHRvIHN0b3JlXG4gICAgbWF4OiA1MCwgICAgICAgIC8vIG1heCBudW1iZXIgb2YgbmV3cyBlbnRyaWVzIHRvIHNob3dcbiAgICBkYXlzOiAxLCAgICAgICAgLy8gb25seSBzaG93IGVudHJpZXMgcG9zdGVkIHdpdGhpbiB0aGlzIG51bWJlciBvZiBkYXlzXG4gICAgc291cmNlczogWyAgICAgIC8vIHR3aXR0ZXIgYWNjb3VudHMgZm9yIGxhdGVzdCBjcnlwdG8gbmV3c1xuICAgICAgJ2NvaW5iYXNlJyxcbiAgICAgICdiaW5hbmNlJyxcbiAgICAgICdIdW9iaUdsb2JhbCcsXG4gICAgICAnWW9iaXRFeGNoYW5nZScsXG4gICAgICAnQml0dHJleEV4Y2hhbmdlJyxcbiAgICAgICdDb2luc3F1YXJlJyxcbiAgICAgICdoaXRidGMnLFxuICAgICAgJ0NyeXB0b3BpYV9OWicsXG4gICAgICAnQml0c3RhbXAnLFxuICAgICAgJ2JpdGZpbmV4JyxcbiAgICAgICdrcmFrZW5meCcsXG4gICAgICAnY29pbmRlc2snLFxuICAgICAgJ2NtY2FsX2JvdCcsXG4gICAgICAnaUNyeXB0b01vb24nLFxuICAgICAgJ0NyeXB0b0N1cnJlbnQnLFxuICAgICAgJ0NvaW50ZWxlZ3JhcGgnLFxuICAgICAgJ0NyeXB0b0NvaW5zTmV3cycsXG4gICAgICAnY3J5cHRvbmV3c2RheScsXG4gICAgICAnUmVkZGl0QlRDJ1xuICAgIF0sXG4gIH0sXG5cbiAgLy8gbWFpbGd1biBhcGkgY29uZmlnXG4gIG1haWxndW46IHtcbiAgICBlbmFibGVkOiBmYWxzZSwgLy8gc3RhdHVzXG4gICAgZG9tYWluOiAnJywgICAgIC8vIGFjY291bnQgZG9tYWluXG4gICAgYXBpa2V5OiAnJywgICAgIC8vIGFwaSBrZXlcbiAgICBlbWFpbDogJycsICAgICAgLy8gcmVjaXBpZW50IGVtYWlsXG4gIH0sXG5cbiAgLy8gdGVsZWdyYW0gYm90IGFwaSBjb25maWdcbiAgdGVsZWdyYW06IHtcbiAgICBlbmFibGVkOiBmYWxzZSwgLy8gc3RhdHVzXG4gICAgYm90a2V5OiAnJywgICAgIC8vIHRlbGVncmFtIGJvdCBpZFxuICAgIHVzZXJpZDogJycsICAgICAvLyByZWNpcGllbnQgY2hhdCBpZFxuICB9LFxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbmZpZ3Mvb3B0aW9ucy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n")},function(module,exports){eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Binance socket api wrapper class\n */\nmodule.exports = function () {\n\n  /**\n   * Constructor\n   */\n  function Binance() {\n    _classCallCheck(this, Binance);\n\n    this._baseurl = 'wss://stream.binance.com:9443';\n    this._socks = {};\n    this._callbacks = {};\n    this._names = {};\n    this._symbols = {};\n    this._assets = [];\n    this._list = [];\n  }\n\n  /**\n   * Register a custom event handler\n   * @param {string}    name      Event name\n   * @param {function}  callback  Custom handler function\n   */\n\n\n  _createClass(Binance, [{\n    key: 'on',\n    value: function on(name, callback) {\n      if (name && typeof callback === 'function') {\n        this._callbacks[name] = callback;\n      }\n    }\n\n    /**\n     * Trigger a custom event handler\n     * @param {string}  name  Event name\n     */\n\n  }, {\n    key: 'trigger',\n    value: function trigger() {\n      var args = Array.from(arguments);\n      var name = args.length ? args.shift() : '';\n\n      if (this._callbacks.hasOwnProperty(name)) {\n        var cb = this._callbacks[name];\n        cb.apply(cb, args);\n      }\n    }\n\n    /**\n     * Come up with some fake history prices to fill in the initial line chart\n     * @param {Number}  close  Current price\n     */\n\n  }, {\n    key: 'fakeHistory',\n    value: function fakeHistory(close) {\n      var num = close * 0.0001; // faction of current price\n      var min = -Math.abs(num);\n      var max = Math.abs(num);\n      var out = [];\n\n      for (var i = 0; i < 10; ++i) {\n        var rand = Math.random() * (max - min) + min;\n        out.push(close + rand);\n      }\n      return out;\n    }\n\n    /**\n     * Calculate volatility for recent price\n     * @param {Array}  history  List of recent close prices\n     */\n\n  }, {\n    key: 'calcVolatility',\n    value: function calcVolatility(history) {\n      var min = history.reduce(function (min, val) {\n        return val < min ? val : min;\n      }, history[0]);\n      var max = history.reduce(function (max, val) {\n        return val > max ? val : max;\n      }, history[0]);\n      var change = max - min;\n      var percent = max ? change / max * 100.0 : 0.0;\n      return percent;\n    }\n\n    /**\n     * Set object map of token -> name\n     * @param {Object}  namesMap  Tokens names map\n     */\n\n  }, {\n    key: 'setNames',\n    value: function setNames(namesMap) {\n      this._names = Object.assign(this._names, namesMap);\n    }\n\n    /**\n     * Get loaded symbols data\n     */\n\n  }, {\n    key: 'getSymbols',\n    value: function getSymbols() {\n      return this._symbols;\n    }\n\n    /**\n     * Get loaded base assets list\n     */\n\n  }, {\n    key: 'getAssets',\n    value: function getAssets() {\n      return this._assets;\n    }\n\n    /**\n     * Connect to live ticker prices socket endpoint\n     * @param {Function}  callback  Handler for price list\n     */\n\n  }, {\n    key: 'getPrices',\n    value: function getPrices(callback) {\n      var _this = this;\n\n      if (typeof callback !== 'function') return;\n\n      var ws = this.connect('ticker', this._baseurl + '/ws/!ticker@arr');\n      ws.addEventListener('error', function (e) {\n        _this.trigger('error', ws, e);\n      });\n      ws.addEventListener('open', function (e) {\n        _this.trigger('open', ws, e);\n      });\n      ws.addEventListener('close', function (e) {\n        _this.trigger('close', ws, e);\n      });\n      ws.addEventListener('message', function (e) {\n\n        // parse ticker list data\n        var ticker = JSON.parse(e.data || '[]') || [];\n\n        var _loop = function _loop(item) {\n\n          // parse ticker data for each symbol\n          var symbol = String(item.s);\n          var open = parseFloat(item.o);\n          var high = parseFloat(item.h);\n          var low = parseFloat(item.l);\n          var close = parseFloat(item.c);\n          var change = parseFloat(item.p);\n          var percent = parseFloat(item.P);\n          var trades = parseInt(item.n);\n          var tokenVolume = Math.round(item.v);\n          var assetVolume = Math.round(item.q);\n          var sign = percent >= 0 ? '+' : '';\n          var arrow = percent >= 0 ? '▲' : '▼';\n\n          // look for existing token data, or build new object\n          var data = _this._symbols.hasOwnProperty(symbol) ? _this._symbols[symbol] : _this._symbolData(symbol);\n\n          // update and trim history data\n          data.history = data.history || _this.fakeHistory(close);\n          data.history.splice(0, data.history.length - 120);\n          data.history.push(close);\n          data.volatility = _this.calcVolatility(data.history);\n\n          // resolve token icon image\n          if (!data.image) {\n            data.image = data.defaultIcon;\n            var img = new Image();\n            img.addEventListener('load', function (e) {\n              data.image = img.src;\n            });\n            img.src = data.tokenIcon;\n          }\n\n          // resolve token name\n          if (_this._names.hasOwnProperty(data.token)) {\n            data.name = _this._names[data.token];\n          }\n\n          // save asset\n          if (_this._assets.indexOf(data.asset) < 0) {\n            _this._assets.push(data.asset);\n          }\n\n          // update token data\n          _this._symbols[symbol] = Object.assign(data, {\n            open: open, high: high, low: low, close: close, change: change, percent: percent, trades: trades, tokenVolume: tokenVolume, assetVolume: assetVolume, sign: sign, arrow: arrow\n          });\n        };\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = ticker[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n\n            _loop(item);\n          }\n\n          // build and emit final ticker list\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        var prices = Object.keys(_this._symbols).map(function (s) {\n          return _this._symbols[s];\n        });\n        callback(prices);\n      });\n    }\n\n    /**\n     * Create a WebSocket connection\n     * @param {String}  name      Ref name\n     * @param {String}  endpoint  Socket endpoint url\n     */\n\n  }, {\n    key: 'connect',\n    value: function connect(name, endpoint) {\n      try {\n        var ws = new WebSocket(endpoint);\n        this._socks[name] = ws;\n        this.trigger('init', ws, 'Socket connection created.');\n        return ws;\n      } catch (err) {\n        this.trigger('error', null, err);\n        return false;\n      }\n    }\n\n    /**\n     * Close all active socket connections\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this2 = this;\n\n      Object.keys(this._socks).map(function (name) {\n        _this2._socks[name].close();\n        delete _this2._socks[name];\n      });\n    }\n\n    /**\n     * Create static token data from a symbol\n     * @param {String}  symbol  Token symbol from ticker list\n     */\n\n  }, {\n    key: '_symbolData',\n    value: function _symbolData(symbol) {\n      var regx = /^([A-Z]+)(BTC|ETH|BNB|USDT|TUSD|DAI)$/;\n      var token = symbol.replace(regx, '$1');\n      var asset = symbol.replace(regx, '$2');\n      var name = token;\n      var pair = token + '/' + asset;\n      var route = '/symbol/' + symbol;\n      var defaultIcon = 'public/images/icons/default_.png';\n      var tokenIcon = 'public/images/icons/' + String(token).toLowerCase() + '_.png';\n      var assetIcon = 'public/images/icons/' + String(asset).toLowerCase() + '_.png';\n      var infoUrl = 'https://coinlib.io/coin/' + token + '/';\n      var image = '';\n      return { symbol: symbol, token: token, asset: asset, name: name, pair: pair, route: route, defaultIcon: defaultIcon, tokenIcon: tokenIcon, assetIcon: assetIcon, infoUrl: infoUrl, image: image };\n    }\n  }]);\n\n  return Binance;\n}();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Scroller Class.\n * For calling custom function based on scroll position, or to auto-scroll.\n */\nvar Scroller = function () {\n\n  // constructor\n  function Scroller(target, options) {\n    _classCallCheck(this, Scroller);\n\n    var _t = document.scrollingElement || document.documentElement || window;\n\n    this._options = Object.assign({\n      // setInterval time in milliseconds to control the throttled scroll handler.\n      intervalTime: 200,\n      // interpolation factor number for the scrolling animation (bigger = slower).\n      easeFactor: 10\n      // ...\n    }, options);\n\n    this._target = target instanceof Element ? target : _t;\n    this._pos = 0;\n    this._to = 0;\n    this._min = 0;\n    this._max = 0;\n    this._scrolling = true;\n    this._scrollcb = null;\n    this._callbacks = [];\n    this._jumpcb = null;\n    this._onTick = this._onTick.bind(this);\n    this._onScroll = this._onScroll.bind(this);\n    this._onResize = this._onResize.bind(this);\n    this._loop = this._loop.bind(this);\n    this._sint = setInterval(this._onTick, this._options.intervalTime);\n\n    window.addEventListener('scroll', this._onScroll, false);\n    window.addEventListener('resize', this._onResize, false);\n  }\n\n  // function to call on actual scroll event\n\n\n  _createClass(Scroller, [{\n    key: 'onScroll',\n    value: function onScroll(callback) {\n      this._scrollcb = callback;\n    }\n\n    // when scroll position changes\n\n  }, {\n    key: 'onChange',\n    value: function onChange(callback) {\n      this._addCallback(false, 0, callback);\n    }\n\n    // when scroll direction is going up\n\n  }, {\n    key: 'onUp',\n    value: function onUp(callback) {\n      this._addCallback('up', 0, callback);\n    }\n\n    // when scroll direction is going down\n\n  }, {\n    key: 'onDown',\n    value: function onDown(callback) {\n      this._addCallback('down', 0, callback);\n    }\n\n    // when scroll position is more than given pos\n\n  }, {\n    key: 'moreThan',\n    value: function moreThan(pos, callback) {\n      this._addCallback('more', pos, callback);\n    }\n\n    // when scroll position is less than given pos\n\n  }, {\n    key: 'lessThan',\n    value: function lessThan(pos, callback) {\n      this._addCallback('less', pos, callback);\n    }\n\n    // when elements enter and leave the viewport area\n\n  }, {\n    key: 'onVisible',\n    value: function onVisible(target, callback) {\n      var elms = this._getElmList(target);\n      var emap = new Array(elms.length).fill(false);\n      this._addCallback('reveal', 0, callback, { elms: elms, emap: emap });\n    }\n\n    // auto scroll page to a target destination\n\n  }, {\n    key: 'jumpTo',\n    value: function jumpTo(dest, callback) {\n      var _h = Math.max(0, Math.floor(this._target.scrollHeight || 0, this._target.clientHeight || 0));\n\n      this._pos = this._target.scrollTop | 0;\n      this._to = this._pos;\n      this._max = Math.floor(_h - this._target.clientHeight || 0);\n\n      if (typeof dest === \"number\") {\n        this._to = dest;\n      } else if ((typeof dest === 'undefined' ? 'undefined' : _typeof(dest)) === \"object\" && dest instanceof Element) {\n        this._to = this._pos + dest.getBoundingClientRect().top || this._pos;\n      } else if (typeof dest === \"string\") {\n        dest = dest.trim();\n        if (/^(up|top)$/i.test(dest)) {\n          this._to = this._min;\n        } else if (/^(middle|center)$/i.test(dest)) {\n          this._to = this._max / 2;\n        } else if (/^(down|bottom)$/i.test(dest)) {\n          this._to = this._max;\n        } else if (/^([0-9]+)$/.test(dest)) {\n          this._to = parseInt(dest);\n        } else {\n          var node = document.querySelector(dest);\n          this._to = node ? this._pos + node.getBoundingClientRect().top : this._pos;\n        }\n      }\n      this._to = Math.max(this._min, Math.min(this._to, this._max));\n      this._jumpcb = callback;\n      this._loop();\n    }\n\n    // reset callbacks that only fire once, so they can fire agan\n\n  }, {\n    key: 'resetCallbacks',\n    value: function resetCallbacks() {\n      for (var i = 0; i < this._callbacks.length; ++i) {\n        this._callbacks[i].called = false;\n      }\n    }\n\n    // called from setInterval ticks\n\n  }, {\n    key: '_onTick',\n    value: function _onTick() {\n      if (!this._scrolling) return;\n\n      var sp = this._target.scrollTop | 0;\n      var height = this._target.clientHeight | 0;\n\n      for (var i = 0; i < this._callbacks.length; ++i) {\n        var cb = this._callbacks[i];\n\n        if (!cb.trigger) {\n          cb.called = false;\n          cb.callback(sp);\n          continue;\n        }\n\n        if (cb.trigger === 'up') {\n          var check = sp < this._pos;\n          if (!cb.called && check) cb.callback(sp);\n          cb.called = check;\n          continue;\n        }\n\n        if (cb.trigger === 'down') {\n          var _check = sp > this._pos;\n          if (!cb.called && _check) cb.callback(sp);\n          cb.called = _check;\n          continue;\n        }\n\n        if (cb.trigger === 'more') {\n          var _check2 = sp > cb.position;\n          if (!cb.called && _check2) cb.callback(sp);\n          cb.called = _check2;\n          continue;\n        }\n\n        if (cb.trigger === 'less') {\n          var _check3 = sp < cb.position;\n          if (!cb.called && _check3) cb.callback(sp);\n          cb.called = _check3;\n          continue;\n        }\n\n        if (cb.trigger === 'reveal') {\n          for (var x = 0; x < cb.elms.length; ++x) {\n            var elm = cb.elms[x];\n            var called = cb.emap[x];\n            var box = elm.getBoundingClientRect();\n            var yPos = box.top + box.height / 2;\n            var visible = yPos >= 0 && yPos <= height;\n\n            if (!called && visible || called && !visible) {\n              cb.callback(elm, visible, sp);\n            }\n            cb.emap[x] = visible;\n          }\n          continue;\n        }\n      }\n      this._pos = sp;\n      this._scrolling = false;\n    }\n\n    // on target scroll\n\n  }, {\n    key: '_onScroll',\n    value: function _onScroll(e) {\n      this._scrolling = true;\n      if (typeof this._scrollcb === 'function') this._scrollcb(e);\n    }\n\n    // on page resize\n\n  }, {\n    key: '_onResize',\n    value: function _onResize(e) {\n      this._scrolling = true;\n    }\n\n    // add custom callback to the list\n\n  }, {\n    key: '_addCallback',\n    value: function _addCallback(trigger, position, callback, other) {\n      if (typeof callback !== 'function') return;\n      this._callbacks.push(Object.assign({\n        called: false, // if already called\n        trigger: trigger, // how to call it (more/less than, or none)\n        position: position | 0, // when to call it, or none\n        callback: callback // custom callback\n      }, other));\n    }\n\n    // resolve list of elements from an arg\n\n  }, {\n    key: '_getElmList',\n    value: function _getElmList(elms) {\n      if (typeof elms === 'string') {\n        return document.querySelectorAll(elms);\n      }\n      if (Array.isArray(elms) || elms instanceof NodeList) {\n        return elms;\n      }\n      if (elms instanceof Element) {\n        return [elms];\n      }\n      return [];\n    }\n\n    // auto-scroll animation loop\n\n  }, {\n    key: '_loop',\n    value: function _loop() {\n      if (Math.abs(this._to - this._pos) < 1) {\n        this._target.scrollTop = this._to;\n        this._scrolling = false;\n\n        if (typeof this._jumpcb === 'function') {\n          this._jumpcb.call(this, this._to); // call once and reset\n          this._jumpcb = null;\n        }\n        return;\n      }\n      this._pos += (this._to - this._pos) / this._options.easeFactor;\n      this._target.scrollTop = this._pos;\n      requestAnimationFrame(this._loop);\n    }\n  }]);\n\n  return Scroller;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Scroller);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47\n")},function(module,exports){eval("/**\r\n * Handles adding things to a queue for debounced execution\r\n */\nmodule.exports = {\n\n  // for sending out mail and notifications off a queue on a timer\n  _queue: [],\n  _callback: null,\n  _sto: null,\n\n  // push message data to queue\n  add: function add(data) {\n    this._queue.push(data);\n  },\n\n\n  // remove and return next item in queue to be executed\n  next: function next() {\n    return this._queue.length ? this._queue.shift() : null;\n  },\n\n\n  // flush queue data\n  flush: function flush() {\n    this._queue = [];\n  },\n\n\n  // stop interval tick\n  stop: function stop() {\n    if (this._sto) clearTimeout(this._sto);\n  },\n\n\n  // debounce handler for all queue data as a batch\n  onBatch: function onBatch(delay, callback) {\n    this.stop();\n    this._delay = parseInt(delay) || 10;\n    this._callback = callback;\n    this._dispatchBatch();\n  },\n\n\n  // debounce handler for next item in the queue\n  onNext: function onNext(delay, callback) {\n    this.stop();\n    this._delay = parseInt(delay) || 10;\n    this._callback = callback;\n    this._dispatchNext();\n  },\n\n\n  // dispatcher for message queue\n  _dispatchBatch: function _dispatchBatch() {\n    this._sto = setTimeout(this._dispatchBatch.bind(this), 1000 * this._delay);\n    if (!this._queue.length || typeof this._callback !== 'function') return;\n    this._callback(this._queue);\n    this._queue = [];\n  },\n\n\n  // dispatcher for message queue\n  _dispatchNext: function _dispatchNext() {\n    this._sto = setTimeout(this._dispatchNext.bind(this), 1000 * this._delay);\n    if (!this._queue.length || typeof this._callback !== 'function') return;\n    this._callback(this._queue.shift());\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9xdWV1ZS5qcz84MzIwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJfcXVldWUiLCJfY2FsbGJhY2siLCJfc3RvIiwiYWRkIiwiZGF0YSIsInB1c2giLCJuZXh0IiwibGVuZ3RoIiwic2hpZnQiLCJmbHVzaCIsInN0b3AiLCJjbGVhclRpbWVvdXQiLCJvbkJhdGNoIiwiZGVsYXkiLCJjYWxsYmFjayIsIl9kZWxheSIsInBhcnNlSW50IiwiX2Rpc3BhdGNoQmF0Y2giLCJvbk5leHQiLCJfZGlzcGF0Y2hOZXh0Iiwic2V0VGltZW91dCIsImJpbmQiXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFHQUEsT0FBT0MsT0FBUCxHQUFpQjs7QUFFZjtBQUNBQyxVQUFRLEVBSE87QUFJZkMsYUFBVyxJQUpJO0FBS2ZDLFFBQU0sSUFMUzs7QUFPZjtBQUNBQyxLQVJlLGVBUVZDLElBUlUsRUFRSDtBQUNWLFNBQUtKLE1BQUwsQ0FBWUssSUFBWixDQUFrQkQsSUFBbEI7QUFDRCxHQVZjOzs7QUFZZjtBQUNBRSxNQWJlLGtCQWFSO0FBQ0wsV0FBUyxLQUFLTixNQUFMLENBQVlPLE1BQWQsR0FBeUIsS0FBS1AsTUFBTCxDQUFZUSxLQUFaLEVBQXpCLEdBQStDLElBQXREO0FBQ0QsR0FmYzs7O0FBaUJmO0FBQ0FDLE9BbEJlLG1CQWtCUDtBQUNOLFNBQUtULE1BQUwsR0FBYyxFQUFkO0FBQ0QsR0FwQmM7OztBQXNCZjtBQUNBVSxNQXZCZSxrQkF1QlI7QUFDTCxRQUFLLEtBQUtSLElBQVYsRUFBaUJTLGFBQWMsS0FBS1QsSUFBbkI7QUFDbEIsR0F6QmM7OztBQTJCZjtBQUNBVSxTQTVCZSxtQkE0Qk5DLEtBNUJNLEVBNEJDQyxRQTVCRCxFQTRCWTtBQUN6QixTQUFLSixJQUFMO0FBQ0EsU0FBS0ssTUFBTCxHQUFjQyxTQUFVSCxLQUFWLEtBQXFCLEVBQW5DO0FBQ0EsU0FBS1osU0FBTCxHQUFpQmEsUUFBakI7QUFDQSxTQUFLRyxjQUFMO0FBQ0QsR0FqQ2M7OztBQW1DZjtBQUNBQyxRQXBDZSxrQkFvQ1BMLEtBcENPLEVBb0NBQyxRQXBDQSxFQW9DVztBQUN4QixTQUFLSixJQUFMO0FBQ0EsU0FBS0ssTUFBTCxHQUFjQyxTQUFVSCxLQUFWLEtBQXFCLEVBQW5DO0FBQ0EsU0FBS1osU0FBTCxHQUFpQmEsUUFBakI7QUFDQSxTQUFLSyxhQUFMO0FBQ0QsR0F6Q2M7OztBQTJDZjtBQUNBRixnQkE1Q2UsNEJBNENFO0FBQ2YsU0FBS2YsSUFBTCxHQUFZa0IsV0FBWSxLQUFLSCxjQUFMLENBQW9CSSxJQUFwQixDQUEwQixJQUExQixDQUFaLEVBQThDLE9BQU8sS0FBS04sTUFBMUQsQ0FBWjtBQUNBLFFBQUssQ0FBQyxLQUFLZixNQUFMLENBQVlPLE1BQWIsSUFBdUIsT0FBTyxLQUFLTixTQUFaLEtBQTBCLFVBQXRELEVBQW1FO0FBQ25FLFNBQUtBLFNBQUwsQ0FBZ0IsS0FBS0QsTUFBckI7QUFDQSxTQUFLQSxNQUFMLEdBQWMsRUFBZDtBQUNELEdBakRjOzs7QUFtRGY7QUFDQW1CLGVBcERlLDJCQW9EQztBQUNkLFNBQUtqQixJQUFMLEdBQVlrQixXQUFZLEtBQUtELGFBQUwsQ0FBbUJFLElBQW5CLENBQXlCLElBQXpCLENBQVosRUFBNkMsT0FBTyxLQUFLTixNQUF6RCxDQUFaO0FBQ0EsUUFBSyxDQUFDLEtBQUtmLE1BQUwsQ0FBWU8sTUFBYixJQUF1QixPQUFPLEtBQUtOLFNBQVosS0FBMEIsVUFBdEQsRUFBbUU7QUFDbkUsU0FBS0EsU0FBTCxDQUFnQixLQUFLRCxNQUFMLENBQVlRLEtBQVosRUFBaEI7QUFDRDtBQXhEYyxDQUFqQiIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBIYW5kbGVzIGFkZGluZyB0aGluZ3MgdG8gYSBxdWV1ZSBmb3IgZGVib3VuY2VkIGV4ZWN1dGlvblxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gIC8vIGZvciBzZW5kaW5nIG91dCBtYWlsIGFuZCBub3RpZmljYXRpb25zIG9mZiBhIHF1ZXVlIG9uIGEgdGltZXJcclxuICBfcXVldWU6IFtdLFxyXG4gIF9jYWxsYmFjazogbnVsbCxcclxuICBfc3RvOiBudWxsLFxyXG5cclxuICAvLyBwdXNoIG1lc3NhZ2UgZGF0YSB0byBxdWV1ZVxyXG4gIGFkZCggZGF0YSApIHtcclxuICAgIHRoaXMuX3F1ZXVlLnB1c2goIGRhdGEgKTtcclxuICB9LFxyXG5cclxuICAvLyByZW1vdmUgYW5kIHJldHVybiBuZXh0IGl0ZW0gaW4gcXVldWUgdG8gYmUgZXhlY3V0ZWRcclxuICBuZXh0KCkge1xyXG4gICAgcmV0dXJuICggdGhpcy5fcXVldWUubGVuZ3RoICkgPyB0aGlzLl9xdWV1ZS5zaGlmdCgpIDogbnVsbDtcclxuICB9LFxyXG5cclxuICAvLyBmbHVzaCBxdWV1ZSBkYXRhXHJcbiAgZmx1c2goKSB7XHJcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xyXG4gIH0sXHJcblxyXG4gIC8vIHN0b3AgaW50ZXJ2YWwgdGlja1xyXG4gIHN0b3AoKSB7XHJcbiAgICBpZiAoIHRoaXMuX3N0byApIGNsZWFyVGltZW91dCggdGhpcy5fc3RvICk7XHJcbiAgfSxcclxuXHJcbiAgLy8gZGVib3VuY2UgaGFuZGxlciBmb3IgYWxsIHF1ZXVlIGRhdGEgYXMgYSBiYXRjaFxyXG4gIG9uQmF0Y2goIGRlbGF5LCBjYWxsYmFjayApIHtcclxuICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgdGhpcy5fZGVsYXkgPSBwYXJzZUludCggZGVsYXkgKSB8fCAxMDtcclxuICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICB0aGlzLl9kaXNwYXRjaEJhdGNoKCk7XHJcbiAgfSxcclxuXHJcbiAgLy8gZGVib3VuY2UgaGFuZGxlciBmb3IgbmV4dCBpdGVtIGluIHRoZSBxdWV1ZVxyXG4gIG9uTmV4dCggZGVsYXksIGNhbGxiYWNrICkge1xyXG4gICAgdGhpcy5zdG9wKCk7XHJcbiAgICB0aGlzLl9kZWxheSA9IHBhcnNlSW50KCBkZWxheSApIHx8IDEwO1xyXG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIHRoaXMuX2Rpc3BhdGNoTmV4dCgpO1xyXG4gIH0sXHJcblxyXG4gIC8vIGRpc3BhdGNoZXIgZm9yIG1lc3NhZ2UgcXVldWVcclxuICBfZGlzcGF0Y2hCYXRjaCgpIHtcclxuICAgIHRoaXMuX3N0byA9IHNldFRpbWVvdXQoIHRoaXMuX2Rpc3BhdGNoQmF0Y2guYmluZCggdGhpcyApLCAxMDAwICogdGhpcy5fZGVsYXkgKTtcclxuICAgIGlmICggIXRoaXMuX3F1ZXVlLmxlbmd0aCB8fCB0eXBlb2YgdGhpcy5fY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgKSByZXR1cm47XHJcbiAgICB0aGlzLl9jYWxsYmFjayggdGhpcy5fcXVldWUgKTtcclxuICAgIHRoaXMuX3F1ZXVlID0gW107XHJcbiAgfSxcclxuXHJcbiAgLy8gZGlzcGF0Y2hlciBmb3IgbWVzc2FnZSBxdWV1ZVxyXG4gIF9kaXNwYXRjaE5leHQoKSB7XHJcbiAgICB0aGlzLl9zdG8gPSBzZXRUaW1lb3V0KCB0aGlzLl9kaXNwYXRjaE5leHQuYmluZCggdGhpcyApLCAxMDAwICogdGhpcy5fZGVsYXkgKTtcclxuICAgIGlmICggIXRoaXMuX3F1ZXVlLmxlbmd0aCB8fCB0eXBlb2YgdGhpcy5fY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgKSByZXR1cm47XHJcbiAgICB0aGlzLl9jYWxsYmFjayggdGhpcy5fcXVldWUuc2hpZnQoKSApO1xyXG4gIH0sXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvcXVldWUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * Sends out notification email using the Mailgun API\r\n *\r\n * @param {object}  ajax     Ajax module object\r\n * @param {object}  options  Mailgun app options\r\n * @param {array}   queue    List of message objects to send\r\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (ajax, options, queue) {\n  return new Promise(function (resolve, reject) {\n\n    var username = 'api';\n    var password = String(options.apikey || '').trim();\n    var recipient = String(options.email || '').trim();\n    var domain = String(options.domain || '').trim();\n    var endpoint = 'https://api.mailgun.net/v3/' + domain + '/messages';\n    var subject = 'Binance Watch Alerts (' + queue.length + ')';\n    var message = '';\n    var template = '';\n\n    if (!ajax || !options || !options.enabled) return resolve();\n    if (!Array.isArray(queue) || !queue.length) return resolve();\n    if (!domain || !recipient || !password) return resolve();\n\n    queue.forEach(function (m) {\n      var info = String(m.info || '').replace(/\\n+/g, ' <br />');\n      message += '\\n      <div style=\"border-top: 1px dashed rgba( 0,0,0,0.1 ); margin-top: 1em; padding-top: 1em;\">\\n        <table width=\"100%\" border=\"0\">\\n          <tr>\\n            <td><img src=\"' + m.icon + '\" alt=\"icon\" style=\"width: 42px; height: auto; margin: 0 5px 0 0;\" /></td>\\n            <td width=\"100%\"><b>' + m.title + '</b> <br /> ' + info + '</td>\\n          </tr>\\n        </table>\\n      </div>';\n    });\n\n    template = '\\n    <!DOCTYPE html>\\n    <html lang=\"en-US\">\\n      <body style=\"margin: 0; padding: 0;\">\\n        <div style=\"font-family: \\'Monaco\\', \\'Consolas\\', \\'Courier New\\', \\'monospace\\'; font-size: 10px; padding: 1em;\">\\n          <h3>' + subject + '</h3>\\n          ' + message + '\\n        </div>\\n      </body>\\n    </html>';\n\n    var formdata = new FormData();\n    formdata.append('from', 'Binance Watch Alerts <noreply@' + domain + '>');\n    formdata.append('to', 'Alert Recipient <' + recipient + '>');\n    formdata.append('subject', subject);\n    formdata.append('html', template);\n\n    ajax.post(endpoint, {\n      type: 'json',\n      data: formdata,\n      auth: { username: username, password: password },\n      done: function done(xhr, status, response) {\n        if (!response || !response.id) return reject('E-mail notifications could not be sent.');\n        return resolve('E-mail notifications sent to (' + recipient + ').');\n      }\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9tYWlsZ3VuLmpzPzhiYWYiXSwibmFtZXMiOlsiYWpheCIsIm9wdGlvbnMiLCJxdWV1ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIlN0cmluZyIsImFwaWtleSIsInRyaW0iLCJyZWNpcGllbnQiLCJlbWFpbCIsImRvbWFpbiIsImVuZHBvaW50Iiwic3ViamVjdCIsImxlbmd0aCIsIm1lc3NhZ2UiLCJ0ZW1wbGF0ZSIsImVuYWJsZWQiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiaW5mbyIsIm0iLCJyZXBsYWNlIiwiaWNvbiIsInRpdGxlIiwiZm9ybWRhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsInBvc3QiLCJ0eXBlIiwiZGF0YSIsImF1dGgiLCJkb25lIiwieGhyIiwic3RhdHVzIiwicmVzcG9uc2UiLCJpZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFPQSx5REFBZSxVQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QkMsS0FBekIsRUFBaUM7QUFDOUMsU0FBTyxJQUFJQyxPQUFKLENBQWEsVUFBRUMsT0FBRixFQUFXQyxNQUFYLEVBQXVCOztBQUV6QyxRQUFJQyxXQUFZLEtBQWhCO0FBQ0EsUUFBSUMsV0FBWUMsT0FBUVAsUUFBUVEsTUFBUixJQUFrQixFQUExQixFQUErQkMsSUFBL0IsRUFBaEI7QUFDQSxRQUFJQyxZQUFZSCxPQUFRUCxRQUFRVyxLQUFSLElBQWlCLEVBQXpCLEVBQThCRixJQUE5QixFQUFoQjtBQUNBLFFBQUlHLFNBQVlMLE9BQVFQLFFBQVFZLE1BQVIsSUFBa0IsRUFBMUIsRUFBK0JILElBQS9CLEVBQWhCO0FBQ0EsUUFBSUksV0FBWSxnQ0FBK0JELE1BQS9CLEdBQXVDLFdBQXZEO0FBQ0EsUUFBSUUsVUFBWSwyQkFBMEJiLE1BQU1jLE1BQWhDLEdBQXdDLEdBQXhEO0FBQ0EsUUFBSUMsVUFBWSxFQUFoQjtBQUNBLFFBQUlDLFdBQVksRUFBaEI7O0FBRUEsUUFBSyxDQUFDbEIsSUFBRCxJQUFTLENBQUNDLE9BQVYsSUFBcUIsQ0FBQ0EsUUFBUWtCLE9BQW5DLEVBQTZDLE9BQU9mLFNBQVA7QUFDN0MsUUFBSyxDQUFDZ0IsTUFBTUMsT0FBTixDQUFlbkIsS0FBZixDQUFELElBQTJCLENBQUNBLE1BQU1jLE1BQXZDLEVBQWdELE9BQU9aLFNBQVA7QUFDaEQsUUFBSyxDQUFDUyxNQUFELElBQVcsQ0FBQ0YsU0FBWixJQUF5QixDQUFDSixRQUEvQixFQUEwQyxPQUFPSCxTQUFQOztBQUUxQ0YsVUFBTW9CLE9BQU4sQ0FBZSxhQUFLO0FBQ2xCLFVBQUlDLE9BQU9mLE9BQVFnQixFQUFFRCxJQUFGLElBQVUsRUFBbEIsRUFBdUJFLE9BQXZCLENBQWdDLE1BQWhDLEVBQXdDLFNBQXhDLENBQVg7QUFDQVIsNk1BSXVCTyxFQUFFRSxJQUp6QixvSEFLNkJGLEVBQUVHLEtBTC9CLG9CQUtxREosSUFMckQ7QUFTRCxLQVhEOztBQWFBTCw0UEFLYUgsT0FMYix5QkFNU0UsT0FOVDs7QUFXQSxRQUFNVyxXQUFXLElBQUlDLFFBQUosRUFBakI7QUFDQUQsYUFBU0UsTUFBVCxDQUFpQixNQUFqQixFQUF5QixtQ0FBa0NqQixNQUFsQyxHQUEwQyxHQUFuRTtBQUNBZSxhQUFTRSxNQUFULENBQWlCLElBQWpCLEVBQXVCLHNCQUFxQm5CLFNBQXJCLEdBQWdDLEdBQXZEO0FBQ0FpQixhQUFTRSxNQUFULENBQWlCLFNBQWpCLEVBQTRCZixPQUE1QjtBQUNBYSxhQUFTRSxNQUFULENBQWlCLE1BQWpCLEVBQXlCWixRQUF6Qjs7QUFFQWxCLFNBQUsrQixJQUFMLENBQVdqQixRQUFYLEVBQXFCO0FBQ25Ca0IsWUFBTSxNQURhO0FBRW5CQyxZQUFNTCxRQUZhO0FBR25CTSxZQUFNLEVBQUU1QixrQkFBRixFQUFZQyxrQkFBWixFQUhhO0FBSW5CNEIsWUFBTSxjQUFFQyxHQUFGLEVBQU9DLE1BQVAsRUFBZUMsUUFBZixFQUE2QjtBQUNqQyxZQUFLLENBQUNBLFFBQUQsSUFBYSxDQUFDQSxTQUFTQyxFQUE1QixFQUFpQyxPQUFPbEMsT0FBUSx5Q0FBUixDQUFQO0FBQ2pDLGVBQU9ELFFBQVMsbUNBQWtDTyxTQUFsQyxHQUE2QyxJQUF0RCxDQUFQO0FBQ0Q7QUFQa0IsS0FBckI7QUFTRCxHQXRETSxDQUFQO0FBdURELEMiLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU2VuZHMgb3V0IG5vdGlmaWNhdGlvbiBlbWFpbCB1c2luZyB0aGUgTWFpbGd1biBBUElcclxuICpcclxuICogQHBhcmFtIHtvYmplY3R9ICBhamF4ICAgICBBamF4IG1vZHVsZSBvYmplY3RcclxuICogQHBhcmFtIHtvYmplY3R9ICBvcHRpb25zICBNYWlsZ3VuIGFwcCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7YXJyYXl9ICAgcXVldWUgICAgTGlzdCBvZiBtZXNzYWdlIG9iamVjdHMgdG8gc2VuZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oIGFqYXgsIG9wdGlvbnMsIHF1ZXVlICkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XHJcblxyXG4gICAgbGV0IHVzZXJuYW1lICA9ICdhcGknO1xyXG4gICAgbGV0IHBhc3N3b3JkICA9IFN0cmluZyggb3B0aW9ucy5hcGlrZXkgfHwgJycgKS50cmltKCk7XHJcbiAgICBsZXQgcmVjaXBpZW50ID0gU3RyaW5nKCBvcHRpb25zLmVtYWlsIHx8ICcnICkudHJpbSgpO1xyXG4gICAgbGV0IGRvbWFpbiAgICA9IFN0cmluZyggb3B0aW9ucy5kb21haW4gfHwgJycgKS50cmltKCk7XHJcbiAgICBsZXQgZW5kcG9pbnQgID0gJ2h0dHBzOi8vYXBpLm1haWxndW4ubmV0L3YzLycrIGRvbWFpbiArJy9tZXNzYWdlcyc7XHJcbiAgICBsZXQgc3ViamVjdCAgID0gJ0JpbmFuY2UgV2F0Y2ggQWxlcnRzICgnKyBxdWV1ZS5sZW5ndGggKycpJztcclxuICAgIGxldCBtZXNzYWdlICAgPSAnJztcclxuICAgIGxldCB0ZW1wbGF0ZSAgPSAnJztcclxuXHJcbiAgICBpZiAoICFhamF4IHx8ICFvcHRpb25zIHx8ICFvcHRpb25zLmVuYWJsZWQgKSByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgaWYgKCAhQXJyYXkuaXNBcnJheSggcXVldWUgKSB8fCAhcXVldWUubGVuZ3RoICkgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgIGlmICggIWRvbWFpbiB8fCAhcmVjaXBpZW50IHx8ICFwYXNzd29yZCApIHJldHVybiByZXNvbHZlKCk7XHJcblxyXG4gICAgcXVldWUuZm9yRWFjaCggbSA9PiB7XHJcbiAgICAgIGxldCBpbmZvID0gU3RyaW5nKCBtLmluZm8gfHwgJycgKS5yZXBsYWNlKCAvXFxuKy9nLCAnIDxiciAvPicgKTtcclxuICAgICAgbWVzc2FnZSArPSBgXHJcbiAgICAgIDxkaXYgc3R5bGU9XCJib3JkZXItdG9wOiAxcHggZGFzaGVkIHJnYmEoIDAsMCwwLDAuMSApOyBtYXJnaW4tdG9wOiAxZW07IHBhZGRpbmctdG9wOiAxZW07XCI+XHJcbiAgICAgICAgPHRhYmxlIHdpZHRoPVwiMTAwJVwiIGJvcmRlcj1cIjBcIj5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgPHRkPjxpbWcgc3JjPVwiJHsgbS5pY29uIH1cIiBhbHQ9XCJpY29uXCIgc3R5bGU9XCJ3aWR0aDogNDJweDsgaGVpZ2h0OiBhdXRvOyBtYXJnaW46IDAgNXB4IDAgMDtcIiAvPjwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZCB3aWR0aD1cIjEwMCVcIj48Yj4keyBtLnRpdGxlIH08L2I+IDxiciAvPiAkeyBpbmZvIH08L3RkPlxyXG4gICAgICAgICAgPC90cj5cclxuICAgICAgICA8L3RhYmxlPlxyXG4gICAgICA8L2Rpdj5gO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGVtcGxhdGUgPSBgXHJcbiAgICA8IURPQ1RZUEUgaHRtbD5cclxuICAgIDxodG1sIGxhbmc9XCJlbi1VU1wiPlxyXG4gICAgICA8Ym9keSBzdHlsZT1cIm1hcmdpbjogMDsgcGFkZGluZzogMDtcIj5cclxuICAgICAgICA8ZGl2IHN0eWxlPVwiZm9udC1mYW1pbHk6ICdNb25hY28nLCAnQ29uc29sYXMnLCAnQ291cmllciBOZXcnLCAnbW9ub3NwYWNlJzsgZm9udC1zaXplOiAxMHB4OyBwYWRkaW5nOiAxZW07XCI+XHJcbiAgICAgICAgICA8aDM+JHsgc3ViamVjdCB9PC9oMz5cclxuICAgICAgICAgICR7IG1lc3NhZ2UgfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2JvZHk+XHJcbiAgICA8L2h0bWw+YDtcclxuXHJcbiAgICBjb25zdCBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybWRhdGEuYXBwZW5kKCAnZnJvbScsICdCaW5hbmNlIFdhdGNoIEFsZXJ0cyA8bm9yZXBseUAnKyBkb21haW4gKyc+JyApO1xyXG4gICAgZm9ybWRhdGEuYXBwZW5kKCAndG8nLCAnQWxlcnQgUmVjaXBpZW50IDwnKyByZWNpcGllbnQgKyc+JyApO1xyXG4gICAgZm9ybWRhdGEuYXBwZW5kKCAnc3ViamVjdCcsIHN1YmplY3QgKTtcclxuICAgIGZvcm1kYXRhLmFwcGVuZCggJ2h0bWwnLCB0ZW1wbGF0ZSApO1xyXG5cclxuICAgIGFqYXgucG9zdCggZW5kcG9pbnQsIHtcclxuICAgICAgdHlwZTogJ2pzb24nLFxyXG4gICAgICBkYXRhOiBmb3JtZGF0YSxcclxuICAgICAgYXV0aDogeyB1c2VybmFtZSwgcGFzc3dvcmQgfSxcclxuICAgICAgZG9uZTogKCB4aHIsIHN0YXR1cywgcmVzcG9uc2UgKSA9PiB7XHJcbiAgICAgICAgaWYgKCAhcmVzcG9uc2UgfHwgIXJlc3BvbnNlLmlkICkgcmV0dXJuIHJlamVjdCggJ0UtbWFpbCBub3RpZmljYXRpb25zIGNvdWxkIG5vdCBiZSBzZW50LicgKTtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZSggJ0UtbWFpbCBub3RpZmljYXRpb25zIHNlbnQgdG8gKCcrIHJlY2lwaWVudCArJykuJyApO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbWFpbGd1bi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * Sends out notification using the Telegram Bot API\r\n *\r\n * @param {object}  ajax     Ajax module object\r\n * @param {object}  options  Telegram app options\r\n * @param {array}   queue    List of message objects to send\r\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (ajax, options, queue) {\n  return new Promise(function (resolve, reject) {\n\n    var botkey = String(options.botkey || '').trim();\n    var userid = String(options.userid || '').trim();\n    var endpoint = 'https://api.telegram.org/bot' + botkey + '/sendMessage';\n    var message = '';\n\n    if (!ajax || !options || !options.enabled) return resolve();\n    if (!Array.isArray(queue) || !queue.length) return resolve();\n    if (!botkey || !userid) return resolve();\n\n    queue.forEach(function (m) {\n      message += '<b>' + m.title + '</b> \\n';\n      message += m.info + ' \\n';\n      message += '\\n';\n    });\n\n    var formdata = new FormData();\n    formdata.append('chat_id', userid);\n    formdata.append('text', message);\n    formdata.append('parse_mode', 'html');\n\n    ajax.post(endpoint, {\n      type: 'json',\n      data: formdata,\n      done: function done(xhr, status, response) {\n        if (!response || !response.ok) return reject('Telegram notifications could not be sent.');\n        return resolve('Telegram notifications sent to user (' + userid + ').');\n      }\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90ZWxlZ3JhbS5qcz84ZDM5Il0sIm5hbWVzIjpbImFqYXgiLCJvcHRpb25zIiwicXVldWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImJvdGtleSIsIlN0cmluZyIsInRyaW0iLCJ1c2VyaWQiLCJlbmRwb2ludCIsIm1lc3NhZ2UiLCJlbmFibGVkIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZm9yRWFjaCIsIm0iLCJ0aXRsZSIsImluZm8iLCJmb3JtZGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwicG9zdCIsInR5cGUiLCJkYXRhIiwiZG9uZSIsInhociIsInN0YXR1cyIsInJlc3BvbnNlIiwib2siXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBT0EseURBQWUsVUFBVUEsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUJDLEtBQXpCLEVBQWlDO0FBQzlDLFNBQU8sSUFBSUMsT0FBSixDQUFhLFVBQUVDLE9BQUYsRUFBV0MsTUFBWCxFQUF1Qjs7QUFFekMsUUFBSUMsU0FBV0MsT0FBUU4sUUFBUUssTUFBUixJQUFrQixFQUExQixFQUErQkUsSUFBL0IsRUFBZjtBQUNBLFFBQUlDLFNBQVdGLE9BQVFOLFFBQVFRLE1BQVIsSUFBa0IsRUFBMUIsRUFBK0JELElBQS9CLEVBQWY7QUFDQSxRQUFJRSxXQUFXLGlDQUFnQ0osTUFBaEMsR0FBd0MsY0FBdkQ7QUFDQSxRQUFJSyxVQUFXLEVBQWY7O0FBRUEsUUFBSyxDQUFDWCxJQUFELElBQVMsQ0FBQ0MsT0FBVixJQUFxQixDQUFDQSxRQUFRVyxPQUFuQyxFQUE2QyxPQUFPUixTQUFQO0FBQzdDLFFBQUssQ0FBQ1MsTUFBTUMsT0FBTixDQUFlWixLQUFmLENBQUQsSUFBMkIsQ0FBQ0EsTUFBTWEsTUFBdkMsRUFBZ0QsT0FBT1gsU0FBUDtBQUNoRCxRQUFLLENBQUNFLE1BQUQsSUFBVyxDQUFDRyxNQUFqQixFQUEwQixPQUFPTCxTQUFQOztBQUUxQkYsVUFBTWMsT0FBTixDQUFlLGFBQUs7QUFDbEJMLHlCQUFrQk0sRUFBRUMsS0FBcEI7QUFDQVAsaUJBQWVNLEVBQUVFLElBQWpCO0FBQ0FSO0FBQ0QsS0FKRDs7QUFNQSxRQUFNUyxXQUFXLElBQUlDLFFBQUosRUFBakI7QUFDQUQsYUFBU0UsTUFBVCxDQUFpQixTQUFqQixFQUE0QmIsTUFBNUI7QUFDQVcsYUFBU0UsTUFBVCxDQUFpQixNQUFqQixFQUF5QlgsT0FBekI7QUFDQVMsYUFBU0UsTUFBVCxDQUFpQixZQUFqQixFQUErQixNQUEvQjs7QUFFQXRCLFNBQUt1QixJQUFMLENBQVdiLFFBQVgsRUFBcUI7QUFDbkJjLFlBQU0sTUFEYTtBQUVuQkMsWUFBTUwsUUFGYTtBQUduQk0sWUFBTSxjQUFFQyxHQUFGLEVBQU9DLE1BQVAsRUFBZUMsUUFBZixFQUE2QjtBQUNqQyxZQUFLLENBQUNBLFFBQUQsSUFBYSxDQUFDQSxTQUFTQyxFQUE1QixFQUFpQyxPQUFPekIsT0FBUSwyQ0FBUixDQUFQO0FBQ2pDLGVBQU9ELFFBQVMsMENBQXlDSyxNQUF6QyxHQUFpRCxJQUExRCxDQUFQO0FBQ0Q7QUFOa0IsS0FBckI7QUFRRCxHQTlCTSxDQUFQO0FBK0JELEMiLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogU2VuZHMgb3V0IG5vdGlmaWNhdGlvbiB1c2luZyB0aGUgVGVsZWdyYW0gQm90IEFQSVxyXG4gKlxyXG4gKiBAcGFyYW0ge29iamVjdH0gIGFqYXggICAgIEFqYXggbW9kdWxlIG9iamVjdFxyXG4gKiBAcGFyYW0ge29iamVjdH0gIG9wdGlvbnMgIFRlbGVncmFtIGFwcCBvcHRpb25zXHJcbiAqIEBwYXJhbSB7YXJyYXl9ICAgcXVldWUgICAgTGlzdCBvZiBtZXNzYWdlIG9iamVjdHMgdG8gc2VuZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oIGFqYXgsIG9wdGlvbnMsIHF1ZXVlICkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XHJcblxyXG4gICAgbGV0IGJvdGtleSAgID0gU3RyaW5nKCBvcHRpb25zLmJvdGtleSB8fCAnJyApLnRyaW0oKTtcclxuICAgIGxldCB1c2VyaWQgICA9IFN0cmluZyggb3B0aW9ucy51c2VyaWQgfHwgJycgKS50cmltKCk7XHJcbiAgICBsZXQgZW5kcG9pbnQgPSAnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdCcrIGJvdGtleSArJy9zZW5kTWVzc2FnZSc7XHJcbiAgICBsZXQgbWVzc2FnZSAgPSAnJztcclxuXHJcbiAgICBpZiAoICFhamF4IHx8ICFvcHRpb25zIHx8ICFvcHRpb25zLmVuYWJsZWQgKSByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgaWYgKCAhQXJyYXkuaXNBcnJheSggcXVldWUgKSB8fCAhcXVldWUubGVuZ3RoICkgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgIGlmICggIWJvdGtleSB8fCAhdXNlcmlkICkgcmV0dXJuIHJlc29sdmUoKTtcclxuXHJcbiAgICBxdWV1ZS5mb3JFYWNoKCBtID0+IHtcclxuICAgICAgbWVzc2FnZSArPSBgPGI+JHsgbS50aXRsZSB9PC9iPiBcXG5gO1xyXG4gICAgICBtZXNzYWdlICs9IGAkeyBtLmluZm8gfSBcXG5gO1xyXG4gICAgICBtZXNzYWdlICs9IGBcXG5gO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZm9ybWRhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgIGZvcm1kYXRhLmFwcGVuZCggJ2NoYXRfaWQnLCB1c2VyaWQgKTtcclxuICAgIGZvcm1kYXRhLmFwcGVuZCggJ3RleHQnLCBtZXNzYWdlICk7XHJcbiAgICBmb3JtZGF0YS5hcHBlbmQoICdwYXJzZV9tb2RlJywgJ2h0bWwnICk7XHJcblxyXG4gICAgYWpheC5wb3N0KCBlbmRwb2ludCwge1xyXG4gICAgICB0eXBlOiAnanNvbicsXHJcbiAgICAgIGRhdGE6IGZvcm1kYXRhLFxyXG4gICAgICBkb25lOiAoIHhociwgc3RhdHVzLCByZXNwb25zZSApID0+IHtcclxuICAgICAgICBpZiAoICFyZXNwb25zZSB8fCAhcmVzcG9uc2Uub2sgKSByZXR1cm4gcmVqZWN0KCAnVGVsZWdyYW0gbm90aWZpY2F0aW9ucyBjb3VsZCBub3QgYmUgc2VudC4nICk7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoICdUZWxlZ3JhbSBub3RpZmljYXRpb25zIHNlbnQgdG8gdXNlciAoJysgdXNlcmlkICsnKS4nICk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy90ZWxlZ3JhbS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///50\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Topbar_vue__ = __webpack_require__(9);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5d8a454c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Topbar_vue__ = __webpack_require__(55);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(52)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Topbar_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5d8a454c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Topbar_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub3BiYXIudnVlPzVmYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVkOGE0NTRjXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9wYmFyLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RvcGJhci52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RvcGJhci52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTVkOGE0NTRjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9wYmFyLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ub3BiYXIudnVlXG4vLyBtb2R1bGUgaWQgPSA1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub3BiYXIudnVlP2FjY2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01ZDhhNDU0Y1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RvcGJhci52dWVcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWU/ODVlMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcIm9taXRcIjoxLFwicmVtb3ZlXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LWMwZDFmODk2XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz9kYXRhPUBpbXBvcnQgXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1wiOyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvRHJvcGRvd24udnVlXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{ref:"menu",staticClass:"dropdown-menu",on:{"mouseleave":_vm.listHide}},[_c(\'div\',{ref:"trigger",staticClass:"dropdown-trigger clickable",on:{"click":_vm.listShow}},[_vm._t("trigger")],2),_vm._v(" "),_c(\'div\',{staticClass:"dropdown-list",class:{ \'visible\': _vm.visible, \'top\': _vm.top, \'right\': _vm.right, \'bottom\': _vm.bottom, \'left\': _vm.left },on:{"click":function($event){$event.stopPropagation();}}},[_vm._t("list")],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWU/ZmNiMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQiwyQ0FBMkMsMkJBQTJCLFlBQVksMkRBQTJELHNCQUFzQiw4Q0FBOEMsbUNBQW1DLHFHQUFxRyxLQUFLLHlCQUF5Qiw0QkFBNEI7QUFDN2Y7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7cmVmOlwibWVudVwiLHN0YXRpY0NsYXNzOlwiZHJvcGRvd24tbWVudVwiLG9uOntcIm1vdXNlbGVhdmVcIjpfdm0ubGlzdEhpZGV9fSxbX2MoJ2Rpdicse3JlZjpcInRyaWdnZXJcIixzdGF0aWNDbGFzczpcImRyb3Bkb3duLXRyaWdnZXIgY2xpY2thYmxlXCIsb246e1wiY2xpY2tcIjpfdm0ubGlzdFNob3d9fSxbX3ZtLl90KFwidHJpZ2dlclwiKV0sMiksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJkcm9wZG93bi1saXN0XCIsY2xhc3M6eyAndmlzaWJsZSc6IF92bS52aXNpYmxlLCAndG9wJzogX3ZtLnRvcCwgJ3JpZ2h0JzogX3ZtLnJpZ2h0LCAnYm90dG9tJzogX3ZtLmJvdHRvbSwgJ2xlZnQnOiBfdm0ubGVmdCB9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fX19LFtfdm0uX3QoXCJsaXN0XCIpXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1jMGQxZjg5NlwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0Ryb3Bkb3duLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'header\',{staticClass:"topbar-wrap",class:{ \'collapsed\': _vm.scrollDir === \'down\' }},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"topbar-main flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"topbar-logo text-clip"},[_c(\'h1\',{staticClass:"text-clip text-primary-hover clickable",on:{"click":function($event){_vm.setRoute( \'/\' )}}},[_c(\'i\',{staticClass:"icon-chart-line"}),_vm._v(" "),_c(\'span\',{staticClass:"text-uppercase text-clip if-medium"},[_vm._v("Binance Watch")])])]),_vm._v(" "),_c(\'div\',{staticClass:"topbar-prices flex-row flex-middle flex-1"},_vm._l((_vm.assetPrices),function(a){return _c(\'div\',{key:a.token,staticClass:"text-clip clickable",on:{"click":function($event){_vm.setRoute( a.route )}}},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(a.token))]),_vm._v(" "),_c(\'span\',{class:{ \'text-gain\': ( a.percent > 0 ), \'text-loss\': ( a.percent < 0 ) }},[_vm._v(_vm._s(a.sign)+_vm._s(_vm._f("toFixed")(a.percent, 3 ))+"%")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-default"},[_vm._v(_vm._s(_vm._f("toFixed")(a.close, a.asset ))+" "+_vm._s(a.arrow))]),_vm._v(" "),_c(\'br\')])})),_vm._v(" "),_c(\'div\',{staticClass:"topbar-menu text-nowrap"},[_c(\'button\',{staticClass:"topbar-btn icon-alarm",class:{ \'text-gain pulse\': _vm.watching, \'text-grey\': !_vm.watching },on:{"click":function($event){_vm.$bus.emit( \'toggleWatchform\', \'toggle\' )}}}),_vm._v(" "),_c(\'Dropdown\',{staticClass:"topbar-dropdown"},[_c(\'button\',{staticClass:"topbar-btn icon-signal",class:{ \'text-gain\': _vm.isConnected, \'text-danger\': !_vm.isConnected },attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'div\',{staticClass:"text-center",attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"form-label pad-h"},[_vm._v("Socket Connection")]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"pad-h push-bottom"},[_c(\'span\',{staticClass:"text-default"},[_vm._v("Status:")]),_vm._v("  \\n              "),(_vm.socketStatus == 0)?_c(\'span\',{staticClass:"text-loss"},[_vm._v("Diconnected "),_c(\'i\',{staticClass:"icon-cry"})]):(_vm.socketStatus == 1)?_c(\'span\',{staticClass:"text-primary"},[_vm._v("Waiting... "),_c(\'i\',{staticClass:"icon-clock"})]):(_vm.socketStatus == 2)?_c(\'span\',{staticClass:"text-gain"},[_vm._v("Connected "),_c(\'i\',{staticClass:"icon-check"})]):_vm._e(),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-default"},[_vm._v("Time:")]),_vm._v("  \\n              "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.socketTime))])]),_vm._v(" "),_c(\'div\',{staticClass:"pad-h"},[(_vm.isConnected)?_c(\'button\',{staticClass:"form-btn icon-close iconLeft bg-danger-hover",on:{"click":_vm.toggleConnection}},[_vm._v("Disconnect")]):_c(\'button\',{staticClass:"form-btn icon-connection iconLeft bg-success-hover",on:{"click":_vm.toggleConnection}},[_vm._v("Connect")])])])]),_vm._v(" "),_c(\'Dropdown\',{staticClass:"topbar-dropdown",class:{ \'alert-bubble\': _vm.alertCount }},[_c(\'button\',{staticClass:"topbar-btn icon-menu",attrs:{"slot":"trigger"},on:{"click":_vm.resetCount},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/\' )}}},[_c(\'i\',{staticClass:"icon-chart-line iconLeft"}),_vm._v(" Prices\\n            ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/news\' )}}},[_c(\'i\',{staticClass:"icon-feedback iconLeft"}),_vm._v(" News "),(_vm.newsData.count)?_c(\'span\',{staticClass:"text-grey"},[_vm._v("("+_vm._s(_vm.newsData.count)+")")]):_vm._e()]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/history\' )}}},[_c(\'i\',{staticClass:"icon-clock iconLeft"}),_vm._v(" History "),(_vm.historyData.length)?_c(\'span\',{staticClass:"text-grey"},[_vm._v("("+_vm._s(_vm.historyData.length)+")")]):_vm._e()]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/alarms\' )}}},[_c(\'i\',{staticClass:"icon-alarm iconLeft"}),_vm._v(" Alarms "),(_vm.alarmsCount)?_c(\'span\',{staticClass:"text-grey"},[_vm._v("("+_vm._s(_vm.alarmsCount)+")")]):_vm._e()]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/about\' )}}},[_c(\'i\',{staticClass:"icon-help iconLeft"}),_vm._v(" About\\n            ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/options\' )}}},[_c(\'i\',{staticClass:"icon-config iconLeft"}),_vm._v(" Options\\n            ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-primary-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/donate\' )}}},[_c(\'i\',{staticClass:"icon-like iconLeft"}),_vm._v(" Donate\\n            ")])])])],1)])])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Modal_vue__ = __webpack_require__(11);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5cc5faab_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Modal_vue__ = __webpack_require__(58);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(57)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Modal_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5cc5faab_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Modal_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/MGJiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQSx3QkFBb1Y7QUFDcFY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjU2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWNjNWZhYWJcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Nb2RhbC52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Nb2RhbC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL01vZGFsLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNWNjNWZhYWJcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Nb2RhbC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/Y2NlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcIm9taXRcIjoxLFwicmVtb3ZlXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTVjYzVmYWFiXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz9kYXRhPUBpbXBvcnQgXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1wiOyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlXG4vLyBtb2R1bGUgaWQgPSA1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///57\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"modal-overlay",class:{ \'visible\': _vm.visible, \'under\': _vm.under },on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}},[_c(\'section\',{ref:"container",staticClass:"modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c(\'header\',{staticClass:"modal-header"},[_c(\'div\',{staticClass:"modal-title text-clip"},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c(\'button\',{staticClass:"modal-close icon-close",on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}})]),_vm._v(" "),_c(\'main\',{staticClass:"modal-body"},[_vm._t("default")],2)])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/ZGU0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQixtQ0FBbUMsNkNBQTZDLEtBQUsseUJBQXlCLHlCQUF5QiwyQkFBMkIsZ0JBQWdCLGtEQUFrRCx5QkFBeUIsNEJBQTRCLGVBQWUsMkJBQTJCLFlBQVksb0NBQW9DLHVEQUF1RCx5Q0FBeUMseUJBQXlCLHlCQUF5QiwyQkFBMkIsMkJBQTJCLHlCQUF5QjtBQUM5ckI7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtb2RhbC1vdmVybGF5XCIsY2xhc3M6eyAndmlzaWJsZSc6IF92bS52aXNpYmxlLCAndW5kZXInOiBfdm0udW5kZXIgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0uY2xvc2UoJGV2ZW50KX19fSxbX2MoJ3NlY3Rpb24nLHtyZWY6XCJjb250YWluZXJcIixzdGF0aWNDbGFzczpcIm1vZGFsLWNvbnRhaW5lclwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fX19LFtfYygnaGVhZGVyJyx7c3RhdGljQ2xhc3M6XCJtb2RhbC1oZWFkZXJcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcIm1vZGFsLXRpdGxlIHRleHQtY2xpcFwifSxbX3ZtLl92KF92bS5fcyhfdm0udGl0bGUpKV0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwibW9kYWwtY2xvc2UgaWNvbi1jbG9zZVwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7cmV0dXJuIF92bS5jbG9zZSgkZXZlbnQpfX19KV0pLF92bS5fdihcIiBcIiksX2MoJ21haW4nLHtzdGF0aWNDbGFzczpcIm1vZGFsLWJvZHlcIn0sW192bS5fdChcImRlZmF1bHRcIildLDIpXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxudmFyIGVzRXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cbmV4cG9ydCBkZWZhdWx0IGVzRXhwb3J0c1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNWNjNWZhYWJcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWVcbi8vIG1vZHVsZSBpZCA9IDU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///58\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Notify_vue__ = __webpack_require__(12);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6e2caa7a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Notify_vue__ = __webpack_require__(61);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(60)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Notify_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6e2caa7a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Notify_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlPzhhMGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTZlMmNhYTdhXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vTm90aWZ5LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05vdGlmeS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05vdGlmeS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTZlMmNhYTdhXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTm90aWZ5LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlXG4vLyBtb2R1bGUgaWQgPSA1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///59\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlPzVkNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi02ZTJjYWE3YVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL05vdGlmeS52dWVcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"notify-wrap"},_vm._l((_vm.alerts),function(alert){return _c(\'div\',{key:alert.id,staticClass:"notify-alert",class:[ \'notify-\' + alert.type, { \'notify-closed\': alert.closed } ]},[_c(\'span\',{staticClass:"notify-message"},[_vm._v(_vm._s(alert.message))]),_vm._v(" "),_c(\'button\',{staticClass:"notify-close icon-close",on:{"click":function($event){$event.stopPropagation();_vm.close( alert.id )}}})])}))}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlPzA0NGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsMEJBQTBCLHFDQUFxQyxpQkFBaUIseUVBQXlFLGdDQUFnQyxHQUFHLGFBQWEsNkJBQTZCLDJEQUEyRCwwQ0FBMEMseUJBQXlCLHlCQUF5Qix3QkFBd0IsSUFBSTtBQUNuZ0I7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJub3RpZnktd3JhcFwifSxfdm0uX2woKF92bS5hbGVydHMpLGZ1bmN0aW9uKGFsZXJ0KXtyZXR1cm4gX2MoJ2Rpdicse2tleTphbGVydC5pZCxzdGF0aWNDbGFzczpcIm5vdGlmeS1hbGVydFwiLGNsYXNzOlsgJ25vdGlmeS0nICsgYWxlcnQudHlwZSwgeyAnbm90aWZ5LWNsb3NlZCc6IGFsZXJ0LmNsb3NlZCB9IF19LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibm90aWZ5LW1lc3NhZ2VcIn0sW192bS5fdihfdm0uX3MoYWxlcnQubWVzc2FnZSkpXSksX3ZtLl92KFwiIFwiKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJub3RpZnktY2xvc2UgaWNvbi1jbG9zZVwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7X3ZtLmNsb3NlKCBhbGVydC5pZCApfX19KV0pfSkpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi02ZTJjYWE3YVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL05vdGlmeS52dWVcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///61\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_WatchForm_vue__ = __webpack_require__(13);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1b453e8b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_WatchForm_vue__ = __webpack_require__(65);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(63)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_WatchForm_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1b453e8b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_WatchForm_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9XYXRjaEZvcm0udnVlP2IwNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTFiNDUzZThiXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vV2F0Y2hGb3JtLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1dhdGNoRm9ybS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1dhdGNoRm9ybS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTFiNDUzZThiXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vV2F0Y2hGb3JtLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9XYXRjaEZvcm0udnVlXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9XYXRjaEZvcm0udnVlPzcyYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0xYjQ1M2U4YlwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1dhdGNoRm9ybS52dWVcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///63\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * Application watchform presets\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ([\n// big spikes in price and volume within a short time period\n{\n  name: 'Big Pumps',\n  options: {\n    asset: 'BTC',\n    priceType: 'gain',\n    priceChange: '5',\n    priceCheck: 'below',\n    price: '',\n    volumeType: 'gain',\n    volumeChange: '10',\n    volumeCheck: 'above',\n    volume: '',\n    timeCheck: 'less',\n    timeLimit: '10'\n  }\n},\n// big dips in price with volume within a short time period\n{\n  name: 'Big Dumps',\n  options: {\n    asset: 'BTC',\n    priceType: 'loss',\n    priceChange: '5',\n    priceCheck: 'below',\n    price: '',\n    volumeType: 'gain',\n    volumeChange: '10',\n    volumeCheck: 'above',\n    volume: '',\n    timeCheck: 'less',\n    timeLimit: '10'\n  }\n},\n// small changes in price and volume during slow markets\n{\n  name: 'Slow Market',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '1',\n    priceCheck: 'below',\n    price: '',\n    volumeType: 'gain',\n    volumeChange: '1',\n    volumeCheck: 'above',\n    volume: '',\n    timeCheck: 'less',\n    timeLimit: '30'\n  }\n},\n// small change withing 15 minutes on coins with some volume\n{\n  name: 'Quick Swings',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '2',\n    priceCheck: 'above',\n    price: '0.00000100',\n    volumeType: 'gain',\n    volumeChange: '1',\n    volumeCheck: 'above',\n    volume: '',\n    timeCheck: 'less',\n    timeLimit: '10'\n  }\n},\n// small change for cheap coins\n{\n  name: 'Cheap Coins',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '2',\n    priceCheck: 'below',\n    price: '0.00001',\n    volumeType: 'gain',\n    volumeChange: '5',\n    volumeCheck: 'above',\n    volume: '',\n    timeCheck: 'less',\n    timeLimit: '60'\n  }\n},\n// coins with recent high volume\n{\n  name: 'Top Coins',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '2',\n    priceCheck: 'below',\n    price: '',\n    volumeType: 'gain',\n    volumeChange: '5',\n    volumeCheck: 'above',\n    volume: '1000',\n    timeCheck: 'less',\n    timeLimit: '30'\n  }\n}]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlncy9wcmVzZXRzLmpzPzYyNjkiXSwibmFtZXMiOlsibmFtZSIsIm9wdGlvbnMiLCJhc3NldCIsInByaWNlVHlwZSIsInByaWNlQ2hhbmdlIiwicHJpY2VDaGVjayIsInByaWNlIiwidm9sdW1lVHlwZSIsInZvbHVtZUNoYW5nZSIsInZvbHVtZUNoZWNrIiwidm9sdW1lIiwidGltZUNoZWNrIiwidGltZUxpbWl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0EseURBQWU7QUFDYjtBQUNBO0FBQ0VBLFFBQU0sV0FEUjtBQUVFQyxXQUFTO0FBQ1BDLFdBQU8sS0FEQTtBQUVQQyxlQUFXLE1BRko7QUFHUEMsaUJBQWEsR0FITjtBQUlQQyxnQkFBWSxPQUpMO0FBS1BDLFdBQU8sRUFMQTtBQU1QQyxnQkFBWSxNQU5MO0FBT1BDLGtCQUFjLElBUFA7QUFRUEMsaUJBQWEsT0FSTjtBQVNQQyxZQUFRLEVBVEQ7QUFVUEMsZUFBVyxNQVZKO0FBV1BDLGVBQVc7QUFYSjtBQUZYLENBRmE7QUFrQmI7QUFDQTtBQUNFWixRQUFNLFdBRFI7QUFFRUMsV0FBUztBQUNQQyxXQUFPLEtBREE7QUFFUEMsZUFBVyxNQUZKO0FBR1BDLGlCQUFhLEdBSE47QUFJUEMsZ0JBQVksT0FKTDtBQUtQQyxXQUFPLEVBTEE7QUFNUEMsZ0JBQVksTUFOTDtBQU9QQyxrQkFBYyxJQVBQO0FBUVBDLGlCQUFhLE9BUk47QUFTUEMsWUFBUSxFQVREO0FBVVBDLGVBQVcsTUFWSjtBQVdQQyxlQUFXO0FBWEo7QUFGWCxDQW5CYTtBQW1DYjtBQUNBO0FBQ0VaLFFBQU0sYUFEUjtBQUVFQyxXQUFTO0FBQ1BDLFdBQU8sS0FEQTtBQUVQQyxlQUFXLFFBRko7QUFHUEMsaUJBQWEsR0FITjtBQUlQQyxnQkFBWSxPQUpMO0FBS1BDLFdBQU8sRUFMQTtBQU1QQyxnQkFBWSxNQU5MO0FBT1BDLGtCQUFjLEdBUFA7QUFRUEMsaUJBQWEsT0FSTjtBQVNQQyxZQUFRLEVBVEQ7QUFVUEMsZUFBVyxNQVZKO0FBV1BDLGVBQVc7QUFYSjtBQUZYLENBcENhO0FBb0RiO0FBQ0E7QUFDRVosUUFBTSxjQURSO0FBRUVDLFdBQVM7QUFDUEMsV0FBTyxLQURBO0FBRVBDLGVBQVcsUUFGSjtBQUdQQyxpQkFBYSxHQUhOO0FBSVBDLGdCQUFZLE9BSkw7QUFLUEMsV0FBTyxZQUxBO0FBTVBDLGdCQUFZLE1BTkw7QUFPUEMsa0JBQWMsR0FQUDtBQVFQQyxpQkFBYSxPQVJOO0FBU1BDLFlBQVEsRUFURDtBQVVQQyxlQUFXLE1BVko7QUFXUEMsZUFBVztBQVhKO0FBRlgsQ0FyRGE7QUFxRWI7QUFDQTtBQUNFWixRQUFNLGFBRFI7QUFFRUMsV0FBUztBQUNQQyxXQUFPLEtBREE7QUFFUEMsZUFBVyxRQUZKO0FBR1BDLGlCQUFhLEdBSE47QUFJUEMsZ0JBQVksT0FKTDtBQUtQQyxXQUFPLFNBTEE7QUFNUEMsZ0JBQVksTUFOTDtBQU9QQyxrQkFBYyxHQVBQO0FBUVBDLGlCQUFhLE9BUk47QUFTUEMsWUFBUSxFQVREO0FBVVBDLGVBQVcsTUFWSjtBQVdQQyxlQUFXO0FBWEo7QUFGWCxDQXRFYTtBQXNGYjtBQUNBO0FBQ0VaLFFBQU0sV0FEUjtBQUVFQyxXQUFTO0FBQ1BDLFdBQU8sS0FEQTtBQUVQQyxlQUFXLFFBRko7QUFHUEMsaUJBQWEsR0FITjtBQUlQQyxnQkFBWSxPQUpMO0FBS1BDLFdBQU8sRUFMQTtBQU1QQyxnQkFBWSxNQU5MO0FBT1BDLGtCQUFjLEdBUFA7QUFRUEMsaUJBQWEsT0FSTjtBQVNQQyxZQUFRLE1BVEQ7QUFVUEMsZUFBVyxNQVZKO0FBV1BDLGVBQVc7QUFYSjtBQUZYLENBdkZhLENBQWYiLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFwcGxpY2F0aW9uIHdhdGNoZm9ybSBwcmVzZXRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IFtcbiAgLy8gYmlnIHNwaWtlcyBpbiBwcmljZSBhbmQgdm9sdW1lIHdpdGhpbiBhIHNob3J0IHRpbWUgcGVyaW9kXG4gIHtcbiAgICBuYW1lOiAnQmlnIFB1bXBzJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBhc3NldDogJ0JUQycsXG4gICAgICBwcmljZVR5cGU6ICdnYWluJyxcbiAgICAgIHByaWNlQ2hhbmdlOiAnNScsXG4gICAgICBwcmljZUNoZWNrOiAnYmVsb3cnLFxuICAgICAgcHJpY2U6ICcnLFxuICAgICAgdm9sdW1lVHlwZTogJ2dhaW4nLFxuICAgICAgdm9sdW1lQ2hhbmdlOiAnMTAnLFxuICAgICAgdm9sdW1lQ2hlY2s6ICdhYm92ZScsXG4gICAgICB2b2x1bWU6ICcnLFxuICAgICAgdGltZUNoZWNrOiAnbGVzcycsXG4gICAgICB0aW1lTGltaXQ6ICcxMCcsXG4gICAgfVxuICB9LFxuICAvLyBiaWcgZGlwcyBpbiBwcmljZSB3aXRoIHZvbHVtZSB3aXRoaW4gYSBzaG9ydCB0aW1lIHBlcmlvZFxuICB7XG4gICAgbmFtZTogJ0JpZyBEdW1wcycsXG4gICAgb3B0aW9uczoge1xuICAgICAgYXNzZXQ6ICdCVEMnLFxuICAgICAgcHJpY2VUeXBlOiAnbG9zcycsXG4gICAgICBwcmljZUNoYW5nZTogJzUnLFxuICAgICAgcHJpY2VDaGVjazogJ2JlbG93JyxcbiAgICAgIHByaWNlOiAnJyxcbiAgICAgIHZvbHVtZVR5cGU6ICdnYWluJyxcbiAgICAgIHZvbHVtZUNoYW5nZTogJzEwJyxcbiAgICAgIHZvbHVtZUNoZWNrOiAnYWJvdmUnLFxuICAgICAgdm9sdW1lOiAnJyxcbiAgICAgIHRpbWVDaGVjazogJ2xlc3MnLFxuICAgICAgdGltZUxpbWl0OiAnMTAnLFxuICAgIH1cbiAgfSxcbiAgLy8gc21hbGwgY2hhbmdlcyBpbiBwcmljZSBhbmQgdm9sdW1lIGR1cmluZyBzbG93IG1hcmtldHNcbiAge1xuICAgIG5hbWU6ICdTbG93IE1hcmtldCcsXG4gICAgb3B0aW9uczoge1xuICAgICAgYXNzZXQ6ICdCVEMnLFxuICAgICAgcHJpY2VUeXBlOiAnY2hhbmdlJyxcbiAgICAgIHByaWNlQ2hhbmdlOiAnMScsXG4gICAgICBwcmljZUNoZWNrOiAnYmVsb3cnLFxuICAgICAgcHJpY2U6ICcnLFxuICAgICAgdm9sdW1lVHlwZTogJ2dhaW4nLFxuICAgICAgdm9sdW1lQ2hhbmdlOiAnMScsXG4gICAgICB2b2x1bWVDaGVjazogJ2Fib3ZlJyxcbiAgICAgIHZvbHVtZTogJycsXG4gICAgICB0aW1lQ2hlY2s6ICdsZXNzJyxcbiAgICAgIHRpbWVMaW1pdDogJzMwJyxcbiAgICB9XG4gIH0sXG4gIC8vIHNtYWxsIGNoYW5nZSB3aXRoaW5nIDE1IG1pbnV0ZXMgb24gY29pbnMgd2l0aCBzb21lIHZvbHVtZVxuICB7XG4gICAgbmFtZTogJ1F1aWNrIFN3aW5ncycsXG4gICAgb3B0aW9uczoge1xuICAgICAgYXNzZXQ6ICdCVEMnLFxuICAgICAgcHJpY2VUeXBlOiAnY2hhbmdlJyxcbiAgICAgIHByaWNlQ2hhbmdlOiAnMicsXG4gICAgICBwcmljZUNoZWNrOiAnYWJvdmUnLFxuICAgICAgcHJpY2U6ICcwLjAwMDAwMTAwJyxcbiAgICAgIHZvbHVtZVR5cGU6ICdnYWluJyxcbiAgICAgIHZvbHVtZUNoYW5nZTogJzEnLFxuICAgICAgdm9sdW1lQ2hlY2s6ICdhYm92ZScsXG4gICAgICB2b2x1bWU6ICcnLFxuICAgICAgdGltZUNoZWNrOiAnbGVzcycsXG4gICAgICB0aW1lTGltaXQ6ICcxMCcsXG4gICAgfVxuICB9LFxuICAvLyBzbWFsbCBjaGFuZ2UgZm9yIGNoZWFwIGNvaW5zXG4gIHtcbiAgICBuYW1lOiAnQ2hlYXAgQ29pbnMnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGFzc2V0OiAnQlRDJyxcbiAgICAgIHByaWNlVHlwZTogJ2NoYW5nZScsXG4gICAgICBwcmljZUNoYW5nZTogJzInLFxuICAgICAgcHJpY2VDaGVjazogJ2JlbG93JyxcbiAgICAgIHByaWNlOiAnMC4wMDAwMScsXG4gICAgICB2b2x1bWVUeXBlOiAnZ2FpbicsXG4gICAgICB2b2x1bWVDaGFuZ2U6ICc1JyxcbiAgICAgIHZvbHVtZUNoZWNrOiAnYWJvdmUnLFxuICAgICAgdm9sdW1lOiAnJyxcbiAgICAgIHRpbWVDaGVjazogJ2xlc3MnLFxuICAgICAgdGltZUxpbWl0OiAnNjAnLFxuICAgIH1cbiAgfSxcbiAgLy8gY29pbnMgd2l0aCByZWNlbnQgaGlnaCB2b2x1bWVcbiAge1xuICAgIG5hbWU6ICdUb3AgQ29pbnMnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGFzc2V0OiAnQlRDJyxcbiAgICAgIHByaWNlVHlwZTogJ2NoYW5nZScsXG4gICAgICBwcmljZUNoYW5nZTogJzInLFxuICAgICAgcHJpY2VDaGVjazogJ2JlbG93JyxcbiAgICAgIHByaWNlOiAnJyxcbiAgICAgIHZvbHVtZVR5cGU6ICdnYWluJyxcbiAgICAgIHZvbHVtZUNoYW5nZTogJzUnLFxuICAgICAgdm9sdW1lQ2hlY2s6ICdhYm92ZScsXG4gICAgICB2b2x1bWU6ICcxMDAwJyxcbiAgICAgIHRpbWVDaGVjazogJ2xlc3MnLFxuICAgICAgdGltZUxpbWl0OiAnMzAnLFxuICAgIH1cbiAgfSxcbl1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb25maWdzL3ByZXNldHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///64\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"watchform-overlay",class:{ \'visible\': _vm.visible, \'under\': _vm.under },on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}},[_c(\'section\',{staticClass:"watchform-wrap",class:{ \'collapsed\': _vm.scrollDir === \'down\' },on:{"click":function($event){$event.stopPropagation();}}},[_c(\'button\',{staticClass:"watchform-close text-primary-hover",on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}},[_c(\'span\',{staticClass:"icon-close iconLeft"},[_vm._v("Close")])]),_vm._v(" "),_c(\'div\',{ref:"watchform",staticClass:"watchform-container"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'span\',{staticClass:"icon-config iconLeft"},[_vm._v("Presets:")]),_vm._v(" "),_vm._l((_vm.watchPresets),function(p){return _c(\'button\',{key:p.name,staticClass:"push-left text-info-hover",attrs:{"type":"button"},on:{"click":function($event){$event.preventDefault();_vm.applyPreset( p.name )}}},[_vm._v(_vm._s(p.name))])})],2),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap"},[_c(\'span\',{staticClass:"icon-gauge iconLeft text-primary"},[_vm._v(_vm._s(_vm.pairsCount()))])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'form\',{staticClass:"watchform-controls flex-row flex-middle flex-stretch flex-wrap",on:{"submit":function($event){$event.preventDefault();},"change":_vm.formChange}},[_c(\'button\',{staticClass:"form-btn iconLeft",class:{ \'bg-danger-hover icon-stop\': _vm.active, \'bg-success-hover icon-play\': !_vm.active },attrs:{"type":"button"},on:{"click":function($event){$event.preventDefault();return _vm.toggleWatch($event)}}},[_vm._v("\\n              "+_vm._s(_vm.active ? \'Watching \'+ _vm.elapsed +\' ...\' : \'Start watching ...\')+"\\n          ")]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom"},[_c(\'div\',{staticClass:"icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.asset),expression:"watchOptions.asset"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "asset", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.assetsList),function(asset){return _c(\'option\',{key:asset,domProps:{"value":asset}},[_vm._v(_vm._s(asset)+" Pairs")])}))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom"},[_c(\'div\',{staticClass:"push-right icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceType),expression:"watchOptions.priceType"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "priceType", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"value":"change"}},[_vm._v("Price Change")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"gain"}},[_vm._v("Price Gain")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"loss"}},[_vm._v("Price Loss")])])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceChange),expression:"watchOptions.priceChange"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.priceChange)},on:{"__r":function($event){_vm.$set(_vm.watchOptions, "priceChange", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{class:{ \'text-grey\': _vm.watchOptions.priceChange === \'0\' }},[_vm._v(_vm._s(_vm.watchOptions.priceChange)+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom"},[_c(\'div\',{staticClass:"push-right icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volumeType),expression:"watchOptions.volumeType"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "volumeType", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"value":"change"}},[_vm._v("Vol Change")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"gain"}},[_vm._v("Vol Gain")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"loss"}},[_vm._v("Vol Loss")])])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volumeChange),expression:"watchOptions.volumeChange"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.volumeChange)},on:{"__r":function($event){_vm.$set(_vm.watchOptions, "volumeChange", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{class:{ \'text-grey\': _vm.watchOptions.volumeChange === \'0\' }},[_vm._v(_vm._s(_vm.watchOptions.volumeChange)+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom"},[_c(\'div\',{staticClass:"push-right icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.timeCheck),expression:"watchOptions.timeCheck"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "timeCheck", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"value":"less"}},[_vm._v("Within last")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"more"}},[_vm._v("Wait past")])])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.timeLimit),expression:"watchOptions.timeLimit"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0","max":"60","step":"1"},domProps:{"value":(_vm.watchOptions.timeLimit)},on:{"__r":function($event){_vm.$set(_vm.watchOptions, "timeLimit", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{class:{ \'text-grey\': _vm.watchOptions.timeLimit === \'0\' }},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.watchOptions.timeLimit, \'min\', \'mins\' )))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom"},[_c(\'div\',{staticClass:"push-right icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceCheck),expression:"watchOptions.priceCheck"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "priceCheck", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Price Above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Price Below")])])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.price),expression:"watchOptions.price"}],staticClass:"push-right",attrs:{"type":"text","placeholder":"0.00000000"},domProps:{"value":(_vm.watchOptions.price)},on:{"keyup":_vm.numInput,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "price", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm.watchOptions.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom"},[_c(\'div\',{staticClass:"push-right icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volumeCheck),expression:"watchOptions.volumeCheck"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "volumeCheck", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Vol Above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Vol Below")])])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volume),expression:"watchOptions.volume"}],staticClass:"push-right",attrs:{"type":"text","placeholder":"0"},domProps:{"value":(_vm.watchOptions.volume)},on:{"keyup":_vm.numInput,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "volume", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm.watchOptions.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap push-bottom flex-1"},[_c(\'div\',{staticClass:"push-right icon-down-open iconFaded iconLeft"},[_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.filterType),expression:"watchOptions.filterType"}],on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.watchOptions, "filterType", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_c(\'option\',{attrs:{"value":"allow"}},[_vm._v("Allow Tokens")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"deny"}},[_vm._v("Deny Tokens")])])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.filterText),expression:"watchOptions.filterText"}],staticClass:"push-right",attrs:{"type":"text","placeholder":"TOKEN1, TOKEN2, ..."},domProps:{"value":(_vm.watchOptions.filterText)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "filterText", $event.target.value)}}})])])])])])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenList_vue__ = __webpack_require__(14);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1e3c171e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenList_vue__ = __webpack_require__(74);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(67)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenList_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1e3c171e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenList_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkxpc3QudnVlP2FmNTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTFlM2MxNzFlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9rZW5MaXN0LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuTGlzdC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuTGlzdC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTFlM2MxNzFlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9rZW5MaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ub2tlbkxpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkxpc3QudnVlPzJiY2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0xZTNjMTcxZVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1Rva2VuTGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZT82NDgyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1wib21pdFwiOjEsXCJyZW1vdmVcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMzMyY2U0N2VcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzP2RhdGE9QGltcG9ydCBcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXCI7IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"spinner-overlay",class:{ \'visible\': _vm.visible, \'failed\': _vm.failed },on:{"click":function($event){$event.stopPropagation();return _vm.click($event)}}},[_c(\'div\',{staticClass:"spinner-content"},[_c(\'div\',{staticClass:"spinner-wheel"}),_vm._v(" "),(_vm.message)?_c(\'div\',{staticClass:"spinner-messge",domProps:{"textContent":_vm._s(_vm.message)}}):_vm._e()])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZT9lNzczIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLHFDQUFxQywrQ0FBK0MsS0FBSyx5QkFBeUIseUJBQXlCLDJCQUEyQixZQUFZLDhCQUE4QixZQUFZLDRCQUE0QixzQ0FBc0MsdUNBQXVDLG1DQUFtQztBQUNsZDtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInNwaW5uZXItb3ZlcmxheVwiLGNsYXNzOnsgJ3Zpc2libGUnOiBfdm0udmlzaWJsZSwgJ2ZhaWxlZCc6IF92bS5mYWlsZWQgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0uY2xpY2soJGV2ZW50KX19fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic3Bpbm5lci1jb250ZW50XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzcGlubmVyLXdoZWVsXCJ9KSxfdm0uX3YoXCIgXCIpLChfdm0ubWVzc2FnZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic3Bpbm5lci1tZXNzZ2VcIixkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSk6X3ZtLl9lKCldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0zMzJjZTQ3ZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1NwaW5uZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkljb24udnVlP2M3ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi04MDBjMTE1ZVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1Rva2VuSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"tokenicon-wrap"},[_c(\'img\',{staticClass:"tokenicon-image",attrs:{"src":_vm.image,"alt":_vm.alt},on:{"error":_vm.imageError}})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkljb24udnVlP2I1NzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsNkJBQTZCLFlBQVkscUNBQXFDLDhCQUE4QixLQUFLLHdCQUF3QjtBQUNuUDtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRva2VuaWNvbi13cmFwXCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6XCJ0b2tlbmljb24taW1hZ2VcIixhdHRyczp7XCJzcmNcIjpfdm0uaW1hZ2UsXCJhbHRcIjpfdm0uYWx0fSxvbjp7XCJlcnJvclwiOl92bS5pbWFnZUVycm9yfX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTgwMGMxMTVlXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvVG9rZW5JY29uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlPzJiM2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01NmNiNjk3MVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0xpbmVDaGFydC52dWVcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///72\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{staticClass:"linechart-wrap"},[_c(\'svg\',{attrs:{"viewBox":_vm.svgBox,"xmlns":"http://www.w3.org/2000/svg"}},[_c(\'polyline\',{staticClass:"polyline",attrs:{"fill":"none","stroke":"#f0f0f0","stroke-width":"2","stroke-linecap":"round","points":_vm.chartPoints}}),_vm._v(" "),_c(\'circle\',{staticClass:"circle",attrs:{"cx":_vm.cx,"cy":_vm.cy,"r":"3","fill":"#f0f0f0","stroke":"none"}})])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlPzE5M2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixxQkFBcUIsNkJBQTZCLFlBQVksT0FBTywyREFBMkQsaUJBQWlCLDhCQUE4Qix1R0FBdUcsMkJBQTJCLDRCQUE0QixrRUFBa0U7QUFDeGU7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOlwibGluZWNoYXJ0LXdyYXBcIn0sW19jKCdzdmcnLHthdHRyczp7XCJ2aWV3Qm94XCI6X3ZtLnN2Z0JveCxcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifX0sW19jKCdwb2x5bGluZScse3N0YXRpY0NsYXNzOlwicG9seWxpbmVcIixhdHRyczp7XCJmaWxsXCI6XCJub25lXCIsXCJzdHJva2VcIjpcIiNmMGYwZjBcIixcInN0cm9rZS13aWR0aFwiOlwiMlwiLFwic3Ryb2tlLWxpbmVjYXBcIjpcInJvdW5kXCIsXCJwb2ludHNcIjpfdm0uY2hhcnRQb2ludHN9fSksX3ZtLl92KFwiIFwiKSxfYygnY2lyY2xlJyx7c3RhdGljQ2xhc3M6XCJjaXJjbGVcIixhdHRyczp7XCJjeFwiOl92bS5jeCxcImN5XCI6X3ZtLmN5LFwiclwiOlwiM1wiLFwiZmlsbFwiOlwiI2YwZjBmMFwiLFwic3Ryb2tlXCI6XCJub25lXCJ9fSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi01NmNiNjk3MVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0xpbmVDaGFydC52dWVcbi8vIG1vZHVsZSBpZCA9IDczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'main\',{staticClass:"tokenlist-wrap",class:{ \'collapsed\': _vm.scrollDir === \'down\', \'opaque\': _vm.scrollPos > 10 }},[_c(\'Spinner\',{ref:"spinner",staticClass:"tokenlist-spinner abs"}),_vm._v(" "),_c(\'section\',{staticClass:"tokenlist-controls"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"tokenlist-controls-row flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"tokenlist-controls-input push-right"},[_c(\'div\',{staticClass:"form-input"},[_c(\'div\',{staticClass:"icon-search iconLeft"}),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.searchToken),expression:"searchToken"}],staticClass:"push-right",attrs:{"type":"text","placeholder":"Search ..."},domProps:{"value":(_vm.searchToken)},on:{"input":function($event){if($event.target.composing){ return; }_vm.searchToken=$event.target.value}}}),_vm._v(" "),(_vm.searchToken)?_c(\'button\',{staticClass:"icon-close text-primary-hover",on:{"click":function($event){_vm.searchToken = \'\'}}}):_vm._e()])]),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-controls-title push-right text-clip text-center flex-1 if-medium"},[_c(\'big\',[_vm._v("24h Change")])],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-controls-filters text-nowrap"},[_c(\'Dropdown\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"form-btn bg-grey-hover icon-down-open",attrs:{"slot":"trigger","title":"List Limit"},slot:"trigger"},[_vm._v("\\n              "+_vm._s(_vm.limitCountLabel)+"\\n            ")]),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 10 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 10 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 20 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 20 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 50 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 50 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 100 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 100 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 0 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" All tokens\\n              ")])])]),_vm._v(" \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"form-btn bg-grey-hover iconLeft",class:{ \'icon-down\': _vm.sortOrder === \'desc\', \'icon-up\': _vm.sortOrder === \'asc\' },attrs:{"slot":"trigger","title":"Sort Options"},domProps:{"textContent":_vm._s(_vm.sortByLabel)},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'token\', \'asc\' )}}},[_c(\'i\',{staticClass:"icon-bitcoin iconLeft"}),_vm._v(" Token\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'percent\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-percent iconLeft"}),_vm._v(" Percent\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'close\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-chart-line iconLeft"}),_vm._v(" Price\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'volatility\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-chart-line iconLeft"}),_vm._v(" Volatility\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'change\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-clock iconLeft"}),_vm._v(" Change\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'assetVolume\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-chart-area iconLeft"}),_vm._v(" Volume\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.toggleSort( \'trades\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-reload iconLeft"}),_vm._v(" Trades\\n              ")])])]),_vm._v(" \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"form-btn bg-primary-hover icon-star iconLeft",attrs:{"slot":"trigger","title":"Filter Asset"},domProps:{"textContent":_vm._s(_vm.filterAsset)},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},_vm._l((_vm.assetsList),function(asset){return _c(\'li\',{key:asset,staticClass:"clickable",on:{"click":function($event){_vm.toggleAsset( asset )}}},[_c(\'i\',{staticClass:"icon-star iconLeft"}),_vm._v(" "+_vm._s(asset)+"\\n              ")])}))])],1)])])]),_vm._v(" "),(!_vm.listCount)?_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"icon-help iconLarge push-right"}),_vm._v(" "),_c(\'div\',{staticClass:"text-clip flex-1"},[(_vm.searchToken)?_c(\'div\',[_c(\'span\',{staticClass:"text-bright"},[_vm._v("No match for search: "),_c(\'span\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm.searchToken))])]),_vm._v("  \\n            "),_c(\'button\',{staticClass:"icon-close iconLeft text-pill bg-grey-hover",on:{"click":function($event){$event.preventDefault();_vm.searchToken = \'\'}}},[_vm._v("Reset")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("Can\'t find anything matching your search input.")])]):_c(\'div\',[_c(\'span\',{staticClass:"text-bright"},[_vm._v("No price data available")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("Price data from remote API has not loaded yet.")])])])])])]):_vm._e(),_vm._v(" "),_c(\'section\',{staticClass:"tokenlist-list"},[_c(\'div\',{staticClass:"container"},[(_vm.tickerList.length)?_c(\'div\',{staticClass:"tokenlist-item flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"tokenlist-item-icon push-right if-small"}),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-symbol text-clip flex-1"},[_c(\'span\',{staticClass:"text-default-hover icon-bitcoin iconLeft clickable",on:{"click":function($event){_vm.toggleSort( \'token\', \'asc\' )}}},[_vm._v("Token")])]),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-price text-right text-clip flex-2"},[_c(\'span\',{staticClass:"text-default-hover icon-chart-line iconLeft clickable",on:{"click":function($event){_vm.toggleSort( \'close\', \'desc\' )}}},[_vm._v("Price")])]),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-chart push-left flex-2 if-medium disabled"}),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-price text-clip push-left flex-1"},[_c(\'span\',{staticClass:"text-default-hover icon-percent iconLeft clickable",on:{"click":function($event){_vm.toggleSort( \'percent\', \'desc\' )}}},[_vm._v("Percent")])]),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-volume text-right text-clip flex-2"},[_c(\'span\',{staticClass:"text-default-hover icon-chart-area iconLeft clickable",on:{"click":function($event){_vm.toggleSort( \'assetVolume\', \'desc\' )}}},[_vm._v("Volume")])]),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-trades text-right text-clip flex-2 if-large"},[_c(\'span\',{staticClass:"text-default-hover icon-list-add iconLeft clickable",on:{"click":function($event){_vm.toggleSort( \'trades\', \'desc\' )}}},[_vm._v("Book")])])]):_vm._e(),_vm._v(" "),_vm._l((_vm.tickerList),function(p){return _c(\'div\',{key:p.symbol,staticClass:"tokenlist-item flex-row flex-middle flex-stretch clickable",class:{ \'gain\': ( p.percent > 0 ), \'loss\': ( p.percent < 0 ) },on:{"click":function($event){$event.stopPropagation();_vm.setRoute( p.route )}}},[_c(\'div\',{staticClass:"tokenlist-item-icon push-right if-small",class:{ \'alarm-bubble\': p.alarms }},[_c(\'TokenIcon\',{attrs:{"image":p.image,"alt":p.token}})],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-symbol text-clip flex-1"},[_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(p.token))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-default"},[_vm._v(_vm._s(p.name))])],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-price text-right text-clip flex-2"},[_c(\'big\',{staticClass:"text-nowrap text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(p.close, p.asset ))+" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v(_vm._s(p.asset))])]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-nowrap color"},[_vm._v(_vm._s(p.sign)+_vm._s(_vm._f("toFixed")(p.change, p.asset ))+" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("24H")])])],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-chart push-left flex-2 if-medium"},[_c(\'LineChart\',{attrs:{"width":300,"height":35,"values":p.history}})],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-price text-clip push-left flex-1"},[_c(\'big\',{staticClass:"text-nowrap color"},[_vm._v(_vm._s(p.sign)+_vm._s(_vm._f("toMoney")(p.percent, 3 ))+"%")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-grey icon-chart-line iconLeft",attrs:{"title":"Volatility score"}},[_vm._v(_vm._s(_vm._f("toFixed")(p.volatility, 3 )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-volume text-right text-clip flex-2"},[_c(\'big\',{staticClass:"text-nowrap text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(p.assetVolume))+" "),_c(\'span\',{staticClass:"text-nowrap text-grey"},[_vm._v(_vm._s(p.asset))])]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-nowrap text-default"},[_vm._v(_vm._s(_vm._f("toMoney")(p.tokenVolume))+" "),_c(\'span\',{staticClass:"text-nowrap text-grey"},[_vm._v(_vm._s(p.token))])])],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-trades text-right text-clip flex-2 if-large"},[_c(\'big\',{staticClass:"text-nowrap text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(p.trades)))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-primary-hover",attrs:{"title":\'Trade \'+ p.token},on:{"click":function($event){$event.stopPropagation();_vm.tradeLink( p.token, p.asset )}}},[_vm._v("Trades")])],1)])}),_vm._v(" "),(_vm.listLeft)?_c(\'div\',{staticClass:"tokenlist-item flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"tokenlist-item-icon push-right if-small"},[_c(\'TokenIcon\',{attrs:{"image":\'public/images/icons/default_.png\'}})],1),_vm._v(" "),_c(\'div\',{staticClass:"tokenlist-item-price text-clip text-grey flex-1"},[_c(\'span\',{staticClass:"text-default"},[_vm._v(_vm._s(_vm.listLeftText)+" more ...")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'button\',{staticClass:"text-secondary-hover icon-list-add iconLeft",on:{"click":function($event){_vm.limitList( 0 )}}},[_vm._v("Show all")])])]):_vm._e()],2)])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsPage_vue__ = __webpack_require__(20);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_e1e6d816_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsPage_vue__ = __webpack_require__(80);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(76)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_e1e6d816_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzUGFnZS52dWU/OTA1NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQSx3QkFBb1Y7QUFDcFY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ijc1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTFlNmQ4MTZcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9OZXdzUGFnZS52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9OZXdzUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05ld3NQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZTFlNmQ4MTZcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9OZXdzUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvTmV3c1BhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///75\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzUGFnZS52dWU/YmRjYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcIm9taXRcIjoxLFwicmVtb3ZlXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LWUxZTZkODE2XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz9kYXRhPUBpbXBvcnQgXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1wiOyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvTmV3c1BhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///76\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlPzU2ZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi03MTViYzNkM1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RvZ2dsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///77\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'label\',{staticClass:"toggle-wrap",on:{"click":_vm.onClick}},[_c(\'input\',{staticClass:"toggle-input",attrs:{"type":"checkbox"},domProps:{"checked":_vm.value},on:{"change":_vm.onChange}}),_vm._v(" "),_c(\'div\',{staticClass:"toggle-switch"}),_vm._v(" "),_c(\'div\',{staticClass:"toggle-text"},[_vm._v(_vm._s(_vm.text))])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlPzU0YTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixtQkFBbUIsOEJBQThCLHFCQUFxQixjQUFjLGtDQUFrQyxrQkFBa0IsV0FBVyxvQkFBb0IsS0FBSyx1QkFBdUIsd0JBQXdCLDRCQUE0Qix3QkFBd0IsMEJBQTBCO0FBQ2xZO0FBQ0EsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6Ijc4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJ0b2dnbGUtd3JhcFwiLG9uOntcImNsaWNrXCI6X3ZtLm9uQ2xpY2t9fSxbX2MoJ2lucHV0Jyx7c3RhdGljQ2xhc3M6XCJ0b2dnbGUtaW5wdXRcIixhdHRyczp7XCJ0eXBlXCI6XCJjaGVja2JveFwifSxkb21Qcm9wczp7XCJjaGVja2VkXCI6X3ZtLnZhbHVlfSxvbjp7XCJjaGFuZ2VcIjpfdm0ub25DaGFuZ2V9fSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0b2dnbGUtc3dpdGNoXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRvZ2dsZS10ZXh0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50ZXh0KSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi03MTViYzNkM1wiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RvZ2dsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///78\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Twitter scraper and tweets manager class.\n */\nvar Twitter = function () {\n\n  // constructor\n  function Twitter(handle, options) {\n    _classCallCheck(this, Twitter);\n\n    if (!handle || typeof handle !== 'string') {\n      throw 'Must provide a valid twitter handle string.';\n    }\n    this.uid = '';\n    this.handle = '';\n    this.name = '';\n    this.avatar = '';\n    this.url = '';\n    this.last = 0;\n    this.error = '';\n    this.options = {\n      // ignore pinned tweets\n      skipPinned: true,\n      // ignore re-tweets\n      skipRetweet: true,\n      // strip html and whitespace from tweets\n      cleanTweets: true,\n      // prevent re-fetching for (secs)\n      fetchDelay: 300,\n      // limit number of tweets in local list\n      limitCount: 20\n    };\n    this.setOptions(options);\n    this.setData({ handle: handle, name: handle });\n  }\n\n  // merge new options\n\n\n  _createClass(Twitter, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      this.options = Object.assign(this.options, options);\n    }\n\n    // set new acocunt data\n\n  }, {\n    key: 'setData',\n    value: function setData(data) {\n      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return;\n      if (data.uid) this.uid = String(this.uid).replace(/[^\\w\\-]+/g, '');\n      if (data.handle) this.handle = String(data.handle).replace(/[^\\w\\-]+/g, '');\n      if (data.name) this.name = String(data.name).replace(/[\\r\\n\\s\\t]+/g, ' ').trim();\n      if (data.avatar) this.avatar = String(data.avatar).trim();\n      this.url = 'https://twitter.com/' + this.handle;\n    }\n\n    // get account info\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      var uid = this.uid,\n          handle = this.handle,\n          name = this.name,\n          avatar = this.avatar,\n          url = this.url,\n          last = this.last,\n          error = this.error;\n\n      return { uid: uid, handle: handle, name: name, avatar: avatar, url: url, last: last, error: error };\n    }\n\n    // fetch remote tweets using teh ajax module passed in\n\n  }, {\n    key: 'fetchTweets',\n    value: function fetchTweets(ajax, callback) {\n      var _this = this;\n\n      var now = Date.now();\n      var elapsed = (now - this.last) / 1000;\n      var delay = this.options.fetchDelay | 0;\n\n      if (!callback || typeof callback !== 'function') return;\n      if (!ajax || (typeof ajax === 'undefined' ? 'undefined' : _typeof(ajax)) !== 'object') return callback('Must provide an ajax module reference.', this.handle);\n      if (delay && elapsed < delay) return callback(null, this.handle);\n\n      this.last = now;\n      this.error = '';\n\n      ajax.get(this.url, {\n        type: 'text',\n        timeout: 30,\n        done: function done(xhr, status, response) {\n\n          // check response status and content\n          if (!status || status !== 200 || !response) {\n            _this.error = 'httpError (' + status + '): Could not fetch content from ' + _this.url;\n            return callback(_this.error, _this.handle);\n          }\n          // try to parse repsonse as HTML\n          var parser = new DOMParser();\n          var html = _this._cleanHtml(response);\n          var doc = parser.parseFromString(html, 'text/html');\n\n          // check parsed document\n          if (!doc || !('querySelector' in doc)) {\n            _this.error = 'parserError: Could not parse response from ' + _this.url;\n            return callback(_this.error, _this.handle);\n          }\n          // parse tweets and pass to callback\n          var tweets = _this.parseTweets(doc);\n          callback(null, _this.handle, tweets);\n        }\n      });\n    }\n\n    // parse account and tweets data from a fetched HTML response\n\n  }, {\n    key: 'parseTweets',\n    value: function parseTweets(doc) {\n      var limit = this.options.limitCount | 0;\n      var count = 0;\n      var output = [];\n\n      // look for profile avatar\n      var avatar = doc.querySelector('img.ProfileAvatar-image');\n      avatar = avatar ? avatar.src : '';\n\n      // look for items\n      var items = doc.querySelectorAll('.stream-item') || [];\n\n      // loop tweet list items\n      for (var i = 0; i < items.length; ++i) {\n        if (limit && count >= limit) break;\n\n        // look for tweet containers\n        var item = items[i];\n        var tweet = item ? item.querySelector('.js-stream-tweet') : null; // metadata tag\n        var posted = item ? item.querySelector('.js-short-timestamp') : null; // date tag\n        var content = item ? item.querySelector('.js-tweet-text') : null; // tweet wrapper\n\n        // check a few things, skip if needed\n        if (!item || !tweet || !posted || !content) continue;\n        if (this.options.skipPinned && item.classList.contains('js-pinned')) continue;\n        if (this.options.skipRetweet && tweet.hasAttribute('data-retweet-id')) continue;\n\n        // look for rest of tweet data\n        var id = tweet.getAttribute('data-tweet-id') || '';\n        var uid = tweet.getAttribute('data-user-id') || '';\n        var name = tweet.getAttribute('data-name') || '';\n        var handle = tweet.getAttribute('data-screen-name') || '';\n        var link = 'https://twitter.com' + tweet.getAttribute('data-permalink-path') || '';\n        var time = Number(posted.getAttribute('data-time-ms')) || 0;\n        var text = this.options.cleanTweets ? this._cleanTweet(content.textContent) : String(content.innerHTML || '').trim();\n\n        // check tweet data and timestamp\n        if (!id || !uid || !handle || !text) continue;\n        if (!time || time < 0) continue;\n\n        // format time\n        var d = new Date(time);\n        var date = d.toDateString();\n\n        // add tweet to list and update account info\n        this.setData({ uid: uid, handle: handle, name: name, avatar: avatar });\n        output.push({ id: id, uid: uid, time: time, date: date, name: name, handle: handle, avatar: avatar, text: text, link: link });\n        count++;\n      }\n      return output;\n    }\n\n    // clean tweet text\n\n  }, {\n    key: '_cleanTweet',\n    value: function _cleanTweet(text) {\n      return String(text || '').replace(/([^\\s]+)(https?\\:|pic\\.)/g, '$1 $2') // add space around links\n      .replace('pic.twitter', 'https://pic.twitter') // fix some links without proto\n      .replace(/([\\`\\'\\’]+)/g, \"'\") // normalize apostrophes\n      .replace(/([\\“\\”\\“\\”\\\"]+)/g, '\"') // normalize quotes\n      .replace(/[\\…\\#\\$]+/g, ' ') // remove some junk chars\n      .replace(/(https?\\:\\/\\/[\\w\\-\\.\\?\\=\\&\\%\\/\\#]+)/gi, '<a href=\"$1\" target=\"_blank\">$1</a>') // format links\n      .replace(/[\\t\\r\\n\\s\\uFEFF\\xA0]+/g, ' ').trim(); // collapse whitespace\n    }\n\n    // clean html content\n\n  }, {\n    key: '_cleanHtml',\n    value: function _cleanHtml(html) {\n      return String(html || '').replace(/<(style|script)[^>]*>(?:(?!<\\/(style|script)>)[^])*<\\/(style|script)>/gim, '').replace(/[\\r\\n\\s\\t]+/g, ' ').trim();\n    }\n  }]);\n\n  return Twitter;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Twitter);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'main\',{staticClass:"newspage-wrap",class:{ \'collapsed\': _vm.scrollDir === \'down\', \'opaque\': _vm.scrollPos > 10 }},[_c(\'section\',{staticClass:"newspage-controls"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"newspage-controls-row flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"newspage-controls-search push-right"},[_c(\'div\',{staticClass:"form-input"},[_c(\'div\',{staticClass:"icon-search iconLeft"}),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.filterSearch),expression:"filterSearch"}],staticClass:"push-right",attrs:{"type":"text","placeholder":"Search ..."},domProps:{"value":(_vm.filterSearch)},on:{"input":function($event){if($event.target.composing){ return; }_vm.filterSearch=$event.target.value}}}),_vm._v(" "),(_vm.filterSearch)?_c(\'button\',{staticClass:"icon-close text-primary-hover",on:{"click":function($event){_vm.filterSearch = \'\'}}}):_vm._e()])]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-controls-title push-right text-clip text-center flex-1"},[_c(\'big\',[_vm._v("Twitter News ("+_vm._s(_vm.newCount)+"/"+_vm._s(_vm.twitterEntries.length)+")")])],1),_vm._v(" "),_c(\'div\',{staticClass:"newspage-controls-filters text-nowrap"},[_c(\'Dropdown\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"form-btn bg-primary-hover icon-down-open iconLeft",attrs:{"slot":"trigger","title":"Filter Source"},slot:"trigger"},[_vm._v(_vm._s(_vm.filterLabel))]),_vm._v(" "),_c(\'div\',{attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"flex-row flex-top flex-space pad-h push-bottom"},[_c(\'div\',{staticClass:"flex-1 push-right form-label"},[_vm._v("Twitter News Sources ("+_vm._s(_vm.accountsList.length)+")")]),_vm._v(" "),(_vm.filterHandle)?_c(\'button\',{staticClass:"text-bright-hover icon-list iconLeft",on:{"click":function($event){_vm.filterHandle = \'\'}}},[_vm._v("Show all")]):_vm._e()]),_vm._v(" "),_c(\'div\',{staticClass:"twitter-accounts-list push-bottom border-top border-bottom"},_vm._l((_vm.accountsList),function(a){return _c(\'div\',{key:a.handle,staticClass:"twitter-accounts-item flex-row flex-middle flex-stretch"},[_c(\'div\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"flex-1 text-clip clickable push-right",attrs:{"title":"Show tweets"},on:{"click":function($event){_vm.applyFilters( \'\', a.handle )}}},[_c(\'span\',{staticClass:"icon-twtr iconLeft text-clip",class:{ \'text-gain\': a.active, \'text-danger text-striked\': a.error !== \'\' }},[_vm._v(_vm._s(a.name))])]),_vm._v(" "),_c(\'div\',{staticClass:"push-right"},[_c(\'span\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"clickable",attrs:{"title":"Fetch"},on:{"click":function($event){_vm.fetchByHandle( a.handle )}}},[(a.checking)?_c(\'span\',{staticClass:"text-badge text-primary"},[_vm._v("...")]):_c(\'span\',{staticClass:"text-badge"},[_vm._v(_vm._s(a.count))])])]),_vm._v(" "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close text-danger-hover",attrs:{"title":"Remove account"},on:{"click":function($event){_vm.removeTwitterHandler( a.handle )}}})])})),_vm._v(" "),_c(\'form\',{staticClass:"twitter-accounts-form pad-h push-bottom",attrs:{"action":"#","autocomplete":"off"},on:{"submit":function($event){$event.preventDefault();return _vm.accountFormHandler($event)}}},[_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'div\',{staticClass:"icon-twtr iconLeft"}),_vm._v(" "),_c(\'input\',{staticClass:"flex-1",attrs:{"type":"text","name":"handle","placeholder":"Add twitter @handle..."}}),_vm._v(" "),_c(\'button\',{staticClass:"icon-add text-primary-hover",attrs:{"type":"submit"}})])]),_vm._v(" "),_c(\'div\',{staticClass:"form-label pad-h push-bottom"},[_vm._v("Load or Save Accounts")]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap pad-h"},[_c(\'button\',{staticClass:"icon-add iconLeft text-bright-hover",on:{"click":function($event){_vm.importAccounts()}}},[_vm._v("Import List")]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("  ")]),_vm._v(" "),_c(\'button\',{staticClass:"icon-save iconLeft text-bright-hover",on:{"click":function($event){_vm.exportAccounts()}}},[_vm._v("Export List")])])])]),_vm._v("  \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"form-btn bg-grey-hover icon-config",attrs:{"slot":"trigger","title":"Options"},slot:"trigger"}),_vm._v(" "),_c(\'div\',{staticClass:"pad-h",attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("News & Notifications Options")]),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Auto re-fetch latest news\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.news.refetch),callback:function ($$v) {_vm.$set(_vm.options.news, "refetch", $$v)},expression:"options.news.refetch"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Notify when news is available\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.news.notify),callback:function ($$v) {_vm.$set(_vm.options.news, "notify", $$v)},expression:"options.news.notify"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'E-mail news notifications\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.news.send),callback:function ($$v) {_vm.$set(_vm.options.news, "send", $$v)},expression:"options.news.send"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Force case-sensitive search\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.search.strict),callback:function ($$v) {_vm.$set(_vm.options.search, "strict", $$v)},expression:"options.search.strict"}})],1),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("How often to send fetch requests")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.interval),expression:"options.news.interval"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"60","step":"1"},domProps:{"value":(_vm.options.news.interval)},on:{"change":_vm.applyOptions,"__r":function($event){_vm.$set(_vm.options.news, "interval", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.interval, \'sec\', \'secs\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Delay re-fetching from same source")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.delay),expression:"options.news.delay"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"60","max":"600","step":"1"},domProps:{"value":(_vm.options.news.delay)},on:{"change":_vm.applyOptions,"__r":function($event){_vm.$set(_vm.options.news, "delay", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.delay, \'sec\', \'secs\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Tweets to fetch from each source")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.tweets),expression:"options.news.tweets"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"10","step":"1"},domProps:{"value":(_vm.options.news.tweets)},on:{"change":_vm.applyOptions,"__r":function($event){_vm.$set(_vm.options.news, "tweets", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.tweets, \'tweet\', \'tweets\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Limit tweets by days posted")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.days),expression:"options.news.days"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"30","step":"1"},domProps:{"value":(_vm.options.news.days)},on:{"change":_vm.applyOptions,"__r":function($event){_vm.$set(_vm.options.news, "days", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.days, \'day\', \'days\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Total number of tweets to store")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.total),expression:"options.news.total"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"10","max":"1000","step":"1"},domProps:{"value":(_vm.options.news.total)},on:{"change":_vm.applyOptions,"__r":function($event){_vm.$set(_vm.options.news, "total", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.options.news.total))])])]),_vm._v(" "),_c(\'div\',[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Limit visible tweets on page")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.max),expression:"options.news.max"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"10","max":"100","step":"1"},domProps:{"value":(_vm.options.news.max)},on:{"change":_vm.applyOptions,"__r":function($event){_vm.$set(_vm.options.news, "max", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.options.news.max))])])])])])],1)])])]),_vm._v(" "),_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card newspage-chart"},[_c(\'div\',{staticClass:"newspage-chart-header"},[_c(\'div\',{staticClass:"newspage-chart-row flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"newspage-chart-md text-clip"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.sortChart( \'name\' )}}},[_vm._v("\\n                Name "),(_vm.chartSort === \'name\')?_c(\'i\',{staticClass:"text-primary",class:{ \'icon-up\': _vm.chartOrder === \'asc\', \'icon-down\': _vm.chartOrder === \'desc\' }}):_vm._e()])]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-sm text-clip if-small"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.sortChart( \'token\' )}}},[_vm._v("\\n                Token "),(_vm.chartSort === \'token\')?_c(\'i\',{staticClass:"text-primary",class:{ \'icon-up\': _vm.chartOrder === \'asc\', \'icon-down\': _vm.chartOrder === \'desc\' }}):_vm._e()])]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-sm text-nowrap text-right if-small"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.sortChart( \'count\' )}}},[_vm._v("\\n                Tweets "),(_vm.chartSort === \'count\')?_c(\'i\',{staticClass:"text-primary",class:{ \'icon-up\': _vm.chartOrder === \'asc\', \'icon-down\': _vm.chartOrder === \'desc\' }}):_vm._e()])]),_vm._v(" "),_vm._m(0),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-md text-nowrap"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.sortChart( \'sentiment\' )}}},[_vm._v("\\n                Sentiment "),(_vm.chartSort === \'sentiment\')?_c(\'i\',{staticClass:"text-primary",class:{ \'icon-up\': _vm.chartOrder === \'asc\', \'icon-down\': _vm.chartOrder === \'desc\' }}):_vm._e()])]),_vm._v(" "),_vm._m(1)])]),_vm._v(" "),(!_vm.chartData.length)?_c(\'div\',{staticClass:"newspage-chart-content pad-top pad-bottom text-center text-info fx-on fx-fade-in"},[_c(\'i\',{staticClass:"icon-chart-line text-huge "}),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',[_vm._v("Sentiment analysis data for each Binance token based on loaded tweets.")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{domProps:{"innerHTML":_vm._s(_vm.sentimentInfoText)}})]):_vm._e(),_vm._v(" "),(_vm.chartData.length)?_c(\'div\',{staticClass:"newspage-chart-content fx-on fx-fade-in"},_vm._l((_vm.chartList),function(d){return _c(\'div\',{key:d.token,staticClass:"newspage-chart-row flex-row flex-middle flex-stretch clickable",on:{"click":function($event){_vm.applyFilters( d.search, \'\' )}}},[_c(\'div\',{staticClass:"newspage-chart-md text-clip text-bright"},[_c(\'i\',{staticClass:"icon-search text-grey"}),_vm._v(" "+_vm._s(d.name))]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-sm text-clip text-default if-small"},[_vm._v(_vm._s(d.token))]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-sm text-nowrap text-right if-small"},[_vm._v(_vm._s(d.count))]),_vm._v(" "),_c(\'div\',{staticClass:"flex-5 text-nowrap if-medium"},[(d.barPercent)?_c(\'span\',{staticClass:"newspage-chart-bar",class:d.barColor,style:({ \'width\': d.barPercent +\'%\' })}):_vm._e()]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-md text-nowrap text-monospace",class:d.styles,domProps:{"innerHTML":_vm._s(d.sentiment)}}),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 text-nowrap text-right"},[(d.route)?_c(\'button\',{staticClass:"text-default-hover icon-chart-line",on:{"click":function($event){$event.stopPropagation();_vm.$bus.emit( \'setRoute\', d.route )}}}):_vm._e()])])})):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"newspage-chart-footer"},[_c(\'div\',{staticClass:"newspage-chart-row flex-row flex-middle flex-stretch text-grey"},[_c(\'div\',{staticClass:"flex-1 text-clip"},[_vm._v("Sentiment analysis for "+_vm._s(_vm._f("toNoun")(_vm.chartData.length, \'token\', \'tokens\' ))+" found in all available tweets.")]),_vm._v(" "),_c(\'div\',{staticClass:"text-right"},[_c(\'button\',{staticClass:"icon-reload iconLeft text-grey-hover",on:{"click":function($event){_vm.updateChart( true )}}},[_vm._v("Reload")]),_vm._v("  \\n              "),_c(\'button\',{staticClass:"icon-close iconLeft text-danger-hover",on:{"click":function($event){_vm.flushTweets()}}},[_vm._v("Flush Data")])])])])])])]),_vm._v(" "),(!_vm.tweetsList.length)?_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"icon-help iconLarge text-grey push-right"}),_vm._v(" "),_c(\'div\',{staticClass:"flex-1"},[(_vm.filterSearch)?_c(\'div\',[_c(\'h3\',{staticClass:"text-bright"},[_vm._v("No Match For "),_c(\'span\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm.filterSearch))])]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("Can\'t find anything matching your search input.")])]):(_vm.filterHandle)?_c(\'div\',[_c(\'h3\',{staticClass:"text-bright"},[_vm._v("No News Data For "),_c(\'a\',{staticClass:"text-primary-hover",attrs:{"href":\'https://twitter.com/\'+ _vm.filterHandle,"target":"_blank"}},[_vm._v(_vm._s(_vm.filterLabel))])]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("There are no entries available for the selected news source.")])]):_c(\'div\',[_c(\'h3\',{staticClass:"text-primary"},[_vm._v("No News Data Yet")]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("News data from remote sources has not loaded yet.")])])])])])]):_vm._e(),_vm._v(" "),_c(\'section\',{staticClass:"newspage-list",attrs:{"id":"newspage-list"}},[_c(\'div\',{staticClass:"container"},_vm._l((_vm.tweetsList),function(t){return _c(\'div\',{key:t.id,staticClass:"newspage-list-item flex-row flex-top flex-stretch"},[_c(\'div\',{staticClass:"push-right",class:{ \'alert-bubble\': t.isNew }},[_c(\'img\',{staticClass:"newspage-list-image",attrs:{"src":t.avatar,"alt":t.handle}})]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1"},[_c(\'div\',{staticClass:"newspage-list-header flex-row flex-space"},[_c(\'h3\',{staticClass:"text-clip clickable",on:{"click":function($event){_vm.openLink( \'https://twitter.com/\'+ t.handle )}}},[_c(\'span\',{staticClass:"text-primary-hover"},[_vm._v(_vm._s(t.name))]),_vm._v("  \\n              "),_c(\'small\',{staticClass:"text-smaller text-grey-hover"},[_vm._v("@"+_vm._s(t.handle))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-clip if-small"},[_c(\'a\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-default-hover text-small icon-link iconLeft",attrs:{"href":t.link,"target":"_blank","title":"View tweet"}},[_vm._v(_vm._s(_vm._f("toElapsed")(t.time))+" ago")]),_vm._v("  \\n              "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close text-danger-hover",attrs:{"type":"button","title":"Delete"},on:{"click":function($event){_vm.deleteTweet( t.id )}}})])]),_vm._v(" "),_c(\'div\',{staticClass:"newspage-list-text text-bright text-wrap",domProps:{"innerHTML":_vm._s(t.text)}})])])}))])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"flex-5 text-nowrap text-grey if-medium"},[_c(\'span\',[_vm._v("Mention %")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"flex-1 text-nowrap text-grey text-right"},[_c(\'span\',[_vm._v("Details")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AboutPage_vue__ = __webpack_require__(23);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_0b619c1e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AboutPage_vue__ = __webpack_require__(82);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AboutPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_0b619c1e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AboutPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BYm91dFBhZ2UudnVlP2E1YzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWJvdXRQYWdlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWJvdXRQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMGI2MTljMWVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BYm91dFBhZ2UudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvQWJvdXRQYWdlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[_c(\'div\',{staticClass:"push-bottom"},[_vm._m(0),_vm._v(" "),_c(\'p\',[_vm._v("\\n      This application connects to the "),_c(\'a\',{staticClass:"text-primary-hover",attrs:{"href":"#"},on:{"click":_vm.goBinance}},[_vm._v("Binance.com")]),_vm._v("\\n      public "),_c(\'a\',{attrs:{"href":"https://github.com/binance-exchange/binance-official-api-docs","target":"_blank"}},[_vm._v("API")]),_vm._v("\\n      to get live 24h price change data for all crypto trading pairs on their platform and allows you to set\\n      custom alerts or watch for price change in real time and get desktop notifications when something triggers\\n      your alerts or price watch settings.\\n    ")])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_vm._m(1),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_vm._m(2),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_vm._m(3)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Binance Price Watch Web App "),_c(\'i\',{staticClass:"icon-down-open"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Application Technology "),_c(\'i\',{staticClass:"icon-down-open"})]),_vm._v(" "),_c(\'p\',[_vm._v("\\n      This app runs entirely on the browser and only makes external requests to fetch data from various\\n      API endpoints related to cryptocurrency. Any persisting data is stored in the browser\'s\\n      "),_c(\'a\',{attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Storage","target":"_blank"}},[_vm._v("localStorage")]),_vm._v(" engine.\\n      In order to get desktop notifications, you must\\n      "),_c(\'a\',{attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API","target":"_blank"}},[_vm._v("Grant Notification Permission")]),_vm._v("\\n      in your browser.\\n    ")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      API Endpoints & Assets "),_c(\'i\',{staticClass:"icon-down-open"})]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"https://github.com/binance-exchange/binance-official-api-docs","target":"_blank"}},[_vm._v("Binance API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Socket connection for live 24h price change data.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://github.com/CoinCapDev/CoinCap.io","target":"_blank"}},[_vm._v("Coincap API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Aggregated global data for specific tokens.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://www.mailgun.com/","target":"_blank"}},[_vm._v("Mailgun API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Mailgun API for outgoing notifications via e-mail.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://core.telegram.org/bots#creating-a-new-bot","target":"_blank"}},[_vm._v("Telegram Bot API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Telegram Bot API for outgoing notifications via the app.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://github.com/cjdowner/cryptocurrency-icons","target":"_blank"}},[_vm._v("Crypto Icons")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Nice looking crypto icons.")])])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Author & Feedback "),_c(\'i\',{staticClass:"icon-down-open"})]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'span\',[_vm._v("Author / Developer:")]),_vm._v("  \\n        "),_c(\'a\',{staticClass:"icon-ghub iconLeft",attrs:{"href":"https://github.com/rainner","target":"_blank"}},[_vm._v("Rainner Lins")]),_vm._v("  \\n        "),_c(\'a\',{staticClass:"icon-twtr iconLeft",attrs:{"href":"https://twitter.com/raintek_","target":"_blank"}},[_vm._v("raintek_")]),_vm._v("  \\n      ")]),_vm._v(" "),_c(\'li\',[_c(\'span\',[_vm._v("Repo / Issues / Feedback:")]),_vm._v("  \\n        "),_c(\'a\',{staticClass:"icon-ghub iconLeft",attrs:{"href":"https://github.com/rainner/binance-watch","target":"_blank"}},[_vm._v("Binance Watch Repository")]),_vm._v("  \\n      ")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BYm91dFBhZ2UudnVlPzlkOGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QiwrQkFBK0IsMEJBQTBCLDRGQUE0Rix3Q0FBd0MsV0FBVyxLQUFLLHVCQUF1Qiw0REFBNEQsT0FBTywwRkFBMEY7QUFDMWQsb0NBQW9DLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIscUNBQXFDLHlEQUF5RCw2QkFBNkIsSUFBSSxjQUFjLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsMEJBQTBCLFlBQVkscUNBQXFDLG9EQUFvRCw2QkFBNkIsMlBBQTJQLE9BQU8scUZBQXFGLHFIQUFxSCxPQUFPLDJIQUEySCx5RkFBeUYsY0FBYyxhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLDBCQUEwQixZQUFZLHFDQUFxQyxvREFBb0QsNkJBQTZCLDBDQUEwQyxPQUFPLDBGQUEwRix5SkFBeUosT0FBTyxxRUFBcUUsbUpBQW1KLE9BQU8scURBQXFELDBKQUEwSixPQUFPLDhFQUE4RSxxS0FBcUssT0FBTyw2RUFBNkUsMEdBQTBHLGNBQWMsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQiwwQkFBMEIsWUFBWSxxQ0FBcUMsK0NBQStDLDZCQUE2Qiw0R0FBNEcsd0NBQXdDLHVEQUF1RCwwREFBMEQsd0NBQXdDLHlEQUF5RCxtSkFBbUosd0NBQXdDLHFFQUFxRSxrRUFBa0U7QUFDNTdHLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzZWN0aW9uJyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHVzaC1ib3R0b21cIn0sW192bS5fbSgwKSxfdm0uX3YoXCIgXCIpLF9jKCdwJyxbX3ZtLl92KFwiXFxuICAgICAgVGhpcyBhcHBsaWNhdGlvbiBjb25uZWN0cyB0byB0aGUgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LXByaW1hcnktaG92ZXJcIixhdHRyczp7XCJocmVmXCI6XCIjXCJ9LG9uOntcImNsaWNrXCI6X3ZtLmdvQmluYW5jZX19LFtfdm0uX3YoXCJCaW5hbmNlLmNvbVwiKV0pLF92bS5fdihcIlxcbiAgICAgIHB1YmxpYyBcIiksX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwczovL2dpdGh1Yi5jb20vYmluYW5jZS1leGNoYW5nZS9iaW5hbmNlLW9mZmljaWFsLWFwaS1kb2NzXCIsXCJ0YXJnZXRcIjpcIl9ibGFua1wifX0sW192bS5fdihcIkFQSVwiKV0pLF92bS5fdihcIlxcbiAgICAgIHRvIGdldCBsaXZlIDI0aCBwcmljZSBjaGFuZ2UgZGF0YSBmb3IgYWxsIGNyeXB0byB0cmFkaW5nIHBhaXJzIG9uIHRoZWlyIHBsYXRmb3JtIGFuZCBhbGxvd3MgeW91IHRvIHNldFxcbiAgICAgIGN1c3RvbSBhbGVydHMgb3Igd2F0Y2ggZm9yIHByaWNlIGNoYW5nZSBpbiByZWFsIHRpbWUgYW5kIGdldCBkZXNrdG9wIG5vdGlmaWNhdGlvbnMgd2hlbiBzb21ldGhpbmcgdHJpZ2dlcnNcXG4gICAgICB5b3VyIGFsZXJ0cyBvciBwcmljZSB3YXRjaCBzZXR0aW5ncy5cXG4gICAgXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdocicpLF92bS5fdihcIiBcIiksX3ZtLl9tKDEpLF92bS5fdihcIiBcIiksX2MoJ2hyJyksX3ZtLl92KFwiIFwiKSxfdm0uX20oMiksX3ZtLl92KFwiIFwiKSxfYygnaHInKSxfdm0uX3YoXCIgXCIpLF92bS5fbSgzKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZvcm0tbGFiZWwgcHVzaC1ib3R0b21cIn0sW192bS5fdihcIlxcbiAgICAgIEJpbmFuY2UgUHJpY2UgV2F0Y2ggV2ViIEFwcCBcIiksX2MoJ2knLHtzdGF0aWNDbGFzczpcImljb24tZG93bi1vcGVuXCJ9KV0pfSxmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB1c2gtYm90dG9tXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmb3JtLWxhYmVsIHB1c2gtYm90dG9tXCJ9LFtfdm0uX3YoXCJcXG4gICAgICBBcHBsaWNhdGlvbiBUZWNobm9sb2d5IFwiKSxfYygnaScse3N0YXRpY0NsYXNzOlwiaWNvbi1kb3duLW9wZW5cIn0pXSksX3ZtLl92KFwiIFwiKSxfYygncCcsW192bS5fdihcIlxcbiAgICAgIFRoaXMgYXBwIHJ1bnMgZW50aXJlbHkgb24gdGhlIGJyb3dzZXIgYW5kIG9ubHkgbWFrZXMgZXh0ZXJuYWwgcmVxdWVzdHMgdG8gZmV0Y2ggZGF0YSBmcm9tIHZhcmlvdXNcXG4gICAgICBBUEkgZW5kcG9pbnRzIHJlbGF0ZWQgdG8gY3J5cHRvY3VycmVuY3kuIEFueSBwZXJzaXN0aW5nIGRhdGEgaXMgc3RvcmVkIGluIHRoZSBicm93c2VyJ3NcXG4gICAgICBcIiksX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU3RvcmFnZVwiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJsb2NhbFN0b3JhZ2VcIildKSxfdm0uX3YoXCIgZW5naW5lLlxcbiAgICAgIEluIG9yZGVyIHRvIGdldCBkZXNrdG9wIG5vdGlmaWNhdGlvbnMsIHlvdSBtdXN0XFxuICAgICAgXCIpLF9jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vdGlmaWNhdGlvbnNfQVBJL1VzaW5nX3RoZV9Ob3RpZmljYXRpb25zX0FQSVwiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJHcmFudCBOb3RpZmljYXRpb24gUGVybWlzc2lvblwiKV0pLF92bS5fdihcIlxcbiAgICAgIGluIHlvdXIgYnJvd3Nlci5cXG4gICAgXCIpXSldKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwdXNoLWJvdHRvbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZm9ybS1sYWJlbCBwdXNoLWJvdHRvbVwifSxbX3ZtLl92KFwiXFxuICAgICAgQVBJIEVuZHBvaW50cyAmIEFzc2V0cyBcIiksX2MoJ2knLHtzdGF0aWNDbGFzczpcImljb24tZG93bi1vcGVuXCJ9KV0pLF92bS5fdihcIiBcIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwczovL2dpdGh1Yi5jb20vYmluYW5jZS1leGNoYW5nZS9iaW5hbmNlLW9mZmljaWFsLWFwaS1kb2NzXCIsXCJ0YXJnZXRcIjpcIl9ibGFua1wifX0sW192bS5fdihcIkJpbmFuY2UgQVBJXCIpXSksX3ZtLl92KFwiIMKgXFxuICAgICAgICBcIiksX2MoJ3NwYW4nLFtfdm0uX3YoXCJTb2NrZXQgY29ubmVjdGlvbiBmb3IgbGl2ZSAyNGggcHJpY2UgY2hhbmdlIGRhdGEuXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9naXRodWIuY29tL0NvaW5DYXBEZXYvQ29pbkNhcC5pb1wiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJDb2luY2FwIEFQSVwiKV0pLF92bS5fdihcIiDCoFxcbiAgICAgICAgXCIpLF9jKCdzcGFuJyxbX3ZtLl92KFwiQWdncmVnYXRlZCBnbG9iYWwgZGF0YSBmb3Igc3BlY2lmaWMgdG9rZW5zLlwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnbGknLFtfYygnYScse2F0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vd3d3Lm1haWxndW4uY29tL1wiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJNYWlsZ3VuIEFQSVwiKV0pLF92bS5fdihcIiDCoFxcbiAgICAgICAgXCIpLF9jKCdzcGFuJyxbX3ZtLl92KFwiTWFpbGd1biBBUEkgZm9yIG91dGdvaW5nIG5vdGlmaWNhdGlvbnMgdmlhIGUtbWFpbC5cIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7XCJocmVmXCI6XCJodHRwczovL2NvcmUudGVsZWdyYW0ub3JnL2JvdHMjY3JlYXRpbmctYS1uZXctYm90XCIsXCJ0YXJnZXRcIjpcIl9ibGFua1wifX0sW192bS5fdihcIlRlbGVncmFtIEJvdCBBUElcIildKSxfdm0uX3YoXCIgwqBcXG4gICAgICAgIFwiKSxfYygnc3BhbicsW192bS5fdihcIlRlbGVncmFtIEJvdCBBUEkgZm9yIG91dGdvaW5nIG5vdGlmaWNhdGlvbnMgdmlhIHRoZSBhcHAuXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2NqZG93bmVyL2NyeXB0b2N1cnJlbmN5LWljb25zXCIsXCJ0YXJnZXRcIjpcIl9ibGFua1wifX0sW192bS5fdihcIkNyeXB0byBJY29uc1wiKV0pLF92bS5fdihcIiDCoFxcbiAgICAgICAgXCIpLF9jKCdzcGFuJyxbX3ZtLl92KFwiTmljZSBsb29raW5nIGNyeXB0byBpY29ucy5cIildKV0pXSldKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwdXNoLWJvdHRvbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZm9ybS1sYWJlbCBwdXNoLWJvdHRvbVwifSxbX3ZtLl92KFwiXFxuICAgICAgQXV0aG9yICYgRmVlZGJhY2sgXCIpLF9jKCdpJyx7c3RhdGljQ2xhc3M6XCJpY29uLWRvd24tb3BlblwifSldKSxfdm0uX3YoXCIgXCIpLF9jKCd1bCcsW19jKCdsaScsW19jKCdzcGFuJyxbX3ZtLl92KFwiQXV0aG9yIC8gRGV2ZWxvcGVyOlwiKV0pLF92bS5fdihcIiDCoFxcbiAgICAgICAgXCIpLF9jKCdhJyx7c3RhdGljQ2xhc3M6XCJpY29uLWdodWIgaWNvbkxlZnRcIixhdHRyczp7XCJocmVmXCI6XCJodHRwczovL2dpdGh1Yi5jb20vcmFpbm5lclwiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJSYWlubmVyIExpbnNcIildKSxfdm0uX3YoXCIgwqBcXG4gICAgICAgIFwiKSxfYygnYScse3N0YXRpY0NsYXNzOlwiaWNvbi10d3RyIGljb25MZWZ0XCIsYXR0cnM6e1wiaHJlZlwiOlwiaHR0cHM6Ly90d2l0dGVyLmNvbS9yYWludGVrX1wiLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoXCJyYWludGVrX1wiKV0pLF92bS5fdihcIiDCoFxcbiAgICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoJ2xpJyxbX2MoJ3NwYW4nLFtfdm0uX3YoXCJSZXBvIC8gSXNzdWVzIC8gRmVlZGJhY2s6XCIpXSksX3ZtLl92KFwiIMKgXFxuICAgICAgICBcIiksX2MoJ2EnLHtzdGF0aWNDbGFzczpcImljb24tZ2h1YiBpY29uTGVmdFwiLGF0dHJzOntcImhyZWZcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9yYWlubmVyL2JpbmFuY2Utd2F0Y2hcIixcInRhcmdldFwiOlwiX2JsYW5rXCJ9fSxbX3ZtLl92KFwiQmluYW5jZSBXYXRjaCBSZXBvc2l0b3J5XCIpXSksX3ZtLl92KFwiIMKgXFxuICAgICAgXCIpXSldKV0pfV1cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTBiNjE5YzFlXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvQWJvdXRQYWdlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///82\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_OptionsPage_vue__ = __webpack_require__(24);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_764df3f7_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_OptionsPage_vue__ = __webpack_require__(86);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_OptionsPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_764df3f7_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_OptionsPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PcHRpb25zUGFnZS52dWU/Y2ViNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI4My5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9PcHRpb25zUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL09wdGlvbnNQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzY0ZGYzZjdcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9PcHRpb25zUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9PcHRpb25zUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZT8yNjU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1wib21pdFwiOjEsXCJyZW1vdmVcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtYzJmY2U4MjRcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzP2RhdGE9QGltcG9ydCBcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXCI7IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///84\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{ref:"container",staticClass:"tabs-wrap",on:{"click":function($event){$event.stopPropagation();return _vm.hideDropdown($event)}}},[(!_vm.inline)?_c(\'div\',{staticClass:"tabs-toggle",on:{"click":function($event){$event.stopPropagation();return _vm.toggleDropdown($event)}}},[_c(\'span\',{staticClass:"icon-menu text-clip"},[_vm._v("  "+_vm._s(_vm.tabName))])]):_vm._e(),_vm._v(" "),_c(\'nav\',{staticClass:"tabs-nav",class:{ \'tabs-inline\': _vm.inline, \'tabs-drop\': !_vm.inline, \'visible\': _vm.visible }},_vm._l((_vm.tabs),function(tab,index){return _c(\'button\',{key:tab.name,class:[ { \'active\': tab.active }, tab.styles ],on:{"click":function($event){_vm.activateTab( index )}}},[_vm._v("\\n      "+_vm._s(tab.name)+"\\n    ")])})),_vm._v(" "),_c(\'div\',{staticClass:"tabs-content"},[_vm._t("default")],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZT82ODM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLDRDQUE0Qyx5QkFBeUIseUJBQXlCLGtDQUFrQywwQkFBMEIsOEJBQThCLHlCQUF5Qix5QkFBeUIsb0NBQW9DLGFBQWEsa0NBQWtDLHNFQUFzRSw4QkFBOEIsK0VBQStFLHVDQUF1QyxvQkFBb0Isc0JBQXNCLHVCQUF1QixtQkFBbUIseUJBQXlCLDJCQUEyQixpREFBaUQseUJBQXlCLDJCQUEyQjtBQUM5MkI7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7cmVmOlwiY29udGFpbmVyXCIsc3RhdGljQ2xhc3M6XCJ0YWJzLXdyYXBcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0uaGlkZURyb3Bkb3duKCRldmVudCl9fX0sWyghX3ZtLmlubGluZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGFicy10b2dnbGVcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0udG9nZ2xlRHJvcGRvd24oJGV2ZW50KX19fSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb24tbWVudSB0ZXh0LWNsaXBcIn0sW192bS5fdihcIsKgwqBcIitfdm0uX3MoX3ZtLnRhYk5hbWUpKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnbmF2Jyx7c3RhdGljQ2xhc3M6XCJ0YWJzLW5hdlwiLGNsYXNzOnsgJ3RhYnMtaW5saW5lJzogX3ZtLmlubGluZSwgJ3RhYnMtZHJvcCc6ICFfdm0uaW5saW5lLCAndmlzaWJsZSc6IF92bS52aXNpYmxlIH19LF92bS5fbCgoX3ZtLnRhYnMpLGZ1bmN0aW9uKHRhYixpbmRleCl7cmV0dXJuIF9jKCdidXR0b24nLHtrZXk6dGFiLm5hbWUsY2xhc3M6WyB7ICdhY3RpdmUnOiB0YWIuYWN0aXZlIH0sIHRhYi5zdHlsZXMgXSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmFjdGl2YXRlVGFiKCBpbmRleCApfX19LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3ModGFiLm5hbWUpK1wiXFxuICAgIFwiKV0pfSkpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGFicy1jb250ZW50XCJ9LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1jMmZjZTgyNFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RhYnMudnVlXG4vLyBtb2R1bGUgaWQgPSA4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[_c(\'div\',{staticClass:"push-bottom"},[_vm._m(0),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'Toggle\',{attrs:{"text":\'Grant permission to receive browser notifications\'},on:{"click":_vm.askNotifyPermission},model:{value:(_vm.canNotify),callback:function ($$v) {_vm.canNotify=$$v},expression:"canNotify"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Play a notification sound effect\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.audio.enabled),callback:function ($$v) {_vm.$set(_vm.options.audio, "enabled", $$v)},expression:"options.audio.enabled"}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"form-input push-right"},[_vm._m(1),_vm._v(" "),_c(\'select\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.audio.file),expression:"options.audio.file"}],staticClass:"flex-1 push-right",on:{"change":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.$set(_vm.options.audio, "file", $event.target.multiple ? $$selectedVal : $$selectedVal[0])},function($event){_vm.applyOptions( true )}]}},_vm._l((_vm.audioList),function(a){return _c(\'option\',{key:a.name,domProps:{"value":a.file}},[_vm._v(_vm._s(a.name))])})),_vm._v(" "),_c(\'button\',{staticClass:"text-bright icon-play",on:{"click":function($event){_vm.playSound()}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input"},[_c(\'span\',{staticClass:"text-grey push-right"},[_vm._v("Volume:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.audio.volume),expression:"options.audio.volume"}],attrs:{"type":"range","min":"0.1","max":"1.0","step":"0.1"},domProps:{"value":(_vm.options.audio.volume)},on:{"change":function($event){_vm.applyOptions( true )},"__r":function($event){_vm.$set(_vm.options.audio, "volume", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"push-left"},[_vm._v(_vm._s(_vm.options.audio.volume))])])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_vm._m(2),_vm._v(" "),_c(\'Tabs\',{staticClass:"push-bottom"},[_c(\'section\',{attrs:{"btn-class":"icon-network","btn-name":"CORS Proxy","active":""}},[_c(\'form\',{staticClass:"cors-form flex-row flex-middle flex-stretch push-bottom",attrs:{"action":"#","disabled":_vm.testing},on:{"submit":_vm.corsFormSubmit}},[_c(\'div\',{staticClass:"form-input flex-1 push-right"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Proxy:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.corsProxy),expression:"corsProxy"}],attrs:{"type":"text","name":"proxyurl","placeholder":"https://..."},domProps:{"value":(_vm.corsProxy)},on:{"blur":_vm.applyOptions,"input":function($event){if($event.target.composing){ return; }_vm.corsProxy=$event.target.value}}}),_vm._v(" "),_c(\'span\',{staticClass:"push-left",class:{ \'icon-check text-gain\': _vm.urlSuccess, \'icon-close text-loss\': !_vm.urlSuccess, \'icon-clock text-warning\': _vm.testing }})]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-info-hover push-right push-small",attrs:{"type":"submit"}},[_c(\'i\',{staticClass:"icon-reload",class:{ \'iconSpin\': _vm.testing }}),_vm._v(" Test\\n          ")]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-success-hover",attrs:{"type":"button"},on:{"click":function($event){_vm.addProxy( _vm.corsProxy )}}},[_c(\'i\',{staticClass:"icon-check"}),_vm._v(" Save\\n          ")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-list push-bottom"},_vm._l((_vm.proxyList),function(p){return _c(\'div\',{key:p.url,staticClass:"flex-item flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-1 icon-network iconLeft clickable text-clip push-right",class:{ \'text-success\': p.selected },on:{"click":function($event){_vm.setProxy( p.url )}}},[_vm._v(_vm._s(p.url))]),_vm._v(" "),_c(\'button\',{staticClass:"icon-close text-danger-hover",attrs:{"type":"button"},on:{"click":function($event){_vm.removeProxy( p.url )}}})])})),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            External proxy server used to route outgoing HTTP requests from this app to get around the browser\'s built-in\\n            "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS","target":"_blank"}},[_vm._v("Cross-Origin Resource Sharing")]),_vm._v("\\n            (CORS) protection. You can run your own proxy server by installing\\n            "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://github.com/Rob--W/cors-anywhere","target":"_blank"}},[_vm._v("CORS-Anywhere")]),_vm._v(".\\n          ")])])]),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-at","btn-name":"Mailgun API"}},[_c(\'Toggle\',{staticClass:"push-bottom",attrs:{"text":\'Enable notifications using Mailgun API\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.mailgun.enabled),callback:function ($$v) {_vm.$set(_vm.options.mailgun, "enabled", $$v)},expression:"options.mailgun.enabled"}}),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Mailgun Domain:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.mailgun.domain),expression:"options.mailgun.domain"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"mysite.com"},domProps:{"value":(_vm.options.mailgun.domain)},on:{"blur":_vm.applyOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.mailgun, "domain", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Mailgun API Key:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.mailgun.apikey),expression:"options.mailgun.apikey"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"key-..."},domProps:{"value":(_vm.options.mailgun.apikey)},on:{"blur":_vm.applyOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.mailgun, "apikey", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Recipient E-mail:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.mailgun.email),expression:"options.mailgun.email"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"me@site.com"},domProps:{"value":(_vm.options.mailgun.email)},on:{"blur":_vm.applyOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.mailgun, "email", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            This app can connect to the "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://www.mailgun.com/","target":"_blank"}},[_vm._v("Mailgun API")]),_vm._v("\\n            for sending outgoing e-mail notifications using a Mailgun account. You will need to add your Mailgun account details above.\\n          ")])])],1),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-submit","btn-name":"Telegram API"}},[_c(\'Toggle\',{staticClass:"push-bottom",attrs:{"text":\'Enable notifications using Telegram Bot API\'},on:{"change":_vm.applyOptions},model:{value:(_vm.options.telegram.enabled),callback:function ($$v) {_vm.$set(_vm.options.telegram, "enabled", $$v)},expression:"options.telegram.enabled"}}),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Telegram Bot Key:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.telegram.botkey),expression:"options.telegram.botkey"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"00000:xxxxx..."},domProps:{"value":(_vm.options.telegram.botkey)},on:{"blur":_vm.applyOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.telegram, "botkey", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Telegram User ID:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.telegram.userid),expression:"options.telegram.userid"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"0000000..."},domProps:{"value":(_vm.options.telegram.userid)},on:{"blur":_vm.applyOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.telegram, "userid", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            This app can connect to the "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://core.telegram.org/bots#creating-a-new-bot","target":"_blank"}},[_vm._v("Telegram Bot API")]),_vm._v("\\n            for sending outgoing notifications using the Telegram app on desktop or mobile.\\n            You will need to provide a Bot API Token and the User chat ID above.\\n            You can use a bot such as "),_c(\'a\',{attrs:{"href":"https://t.me/@JsonDumpBot","target":"_blank"}},[_vm._v("@JsonDumpBot")]),_vm._v(" to find out what your user chat_id is.\\n          ")])])],1)])],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Browser Notifications "),_c(\'i\',{staticClass:"icon-down-open"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"text-grey text-nowrap"},[_vm._v("Sound: "),_c(\'i\',{staticClass:"icon-down-open"},[_vm._v(" ")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Outgoing Requests & Notifications (Advanced) "),_c(\'i\',{staticClass:"icon-down-open"})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HistoryPage_vue__ = __webpack_require__(26);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d8d31f8_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HistoryPage_vue__ = __webpack_require__(88);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HistoryPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2d8d31f8_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HistoryPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IaXN0b3J5UGFnZS52dWU/Yzg4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI4Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9IaXN0b3J5UGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0hpc3RvcnlQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMmQ4ZDMxZjhcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9IaXN0b3J5UGFnZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9IaXN0b3J5UGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{staticClass:"history-page"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch push-bottom"},[_c(\'div\',{staticClass:"text-grey push-right"},[_vm._v("\\n      Your custom alarms and price watch alerts will be added to this list in case you missed any.\\n      Use the Flush button to delete all entries.\\n    ")]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-danger-hover icon-reset iconLeft",attrs:{"disabled":!_vm.historyData.length},on:{"click":function($event){$event.preventDefault();_vm.flushHistory()}}},[_vm._v("\\n      Flush\\n    ")])]),_vm._v(" "),(!_vm.historyData.length)?_c(\'div\',{staticClass:"icon-info iconLeft text-grey"},[_vm._v("\\n    There\'s nothing here right now.\\n  ")]):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"flex-list flex-middle flex-stretch"},_vm._l((_vm.historyData),function(e){return _c(\'div\',{key:e.id,staticClass:"flex-item"},[_c(\'div\',{staticClass:"push-right"},[_c(\'TokenIcon\',{attrs:{"image":e.icon}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(e.title))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'small\',[_vm._v(_vm._s(_vm.formatInfo( e.info )))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-clip text-right"},[_c(\'button\',{staticClass:"icon-close",on:{"click":function($event){_vm.deleteHistory( e.id )}}}),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'small\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm._f("toElapsed")(e.time))+" ago")])])])}))])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IaXN0b3J5UGFnZS52dWU/NjBhOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLHFCQUFxQiwyQkFBMkIsWUFBWSw0REFBNEQsWUFBWSxtQ0FBbUMscU1BQXFNLGtFQUFrRSxtQ0FBbUMsS0FBSyx5QkFBeUIsd0JBQXdCLHFCQUFxQixvRkFBb0YsMkNBQTJDLHVGQUF1RixpREFBaUQsc0NBQXNDLGlCQUFpQixpQ0FBaUMsWUFBWSx5QkFBeUIsa0JBQWtCLE9BQU8sZ0JBQWdCLDRCQUE0QixnQ0FBZ0MsYUFBYSwwQkFBMEIsNElBQTRJLG1DQUFtQyxlQUFlLDZCQUE2Qix5QkFBeUIsNEJBQTRCLCtDQUErQyx3QkFBd0IsMkRBQTJEO0FBQ3ZoRDtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzZWN0aW9uJyx7c3RhdGljQ2xhc3M6XCJoaXN0b3J5LXBhZ2VcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtcm93IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaCBwdXNoLWJvdHRvbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5IHB1c2gtcmlnaHRcIn0sW192bS5fdihcIlxcbiAgICAgIFlvdXIgY3VzdG9tIGFsYXJtcyBhbmQgcHJpY2Ugd2F0Y2ggYWxlcnRzIHdpbGwgYmUgYWRkZWQgdG8gdGhpcyBsaXN0IGluIGNhc2UgeW91IG1pc3NlZCBhbnkuXFxuICAgICAgVXNlIHRoZSBGbHVzaCBidXR0b24gdG8gZGVsZXRlIGFsbCBlbnRyaWVzLlxcbiAgICBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImZvcm0tYnRuIGJnLWRhbmdlci1ob3ZlciBpY29uLXJlc2V0IGljb25MZWZ0XCIsYXR0cnM6e1wiZGlzYWJsZWRcIjohX3ZtLmhpc3RvcnlEYXRhLmxlbmd0aH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO192bS5mbHVzaEhpc3RvcnkoKX19fSxbX3ZtLl92KFwiXFxuICAgICAgRmx1c2hcXG4gICAgXCIpXSldKSxfdm0uX3YoXCIgXCIpLCghX3ZtLmhpc3RvcnlEYXRhLmxlbmd0aCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaWNvbi1pbmZvIGljb25MZWZ0IHRleHQtZ3JleVwifSxbX3ZtLl92KFwiXFxuICAgIFRoZXJlJ3Mgbm90aGluZyBoZXJlIHJpZ2h0IG5vdy5cXG4gIFwiKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC1saXN0IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaFwifSxfdm0uX2woKF92bS5oaXN0b3J5RGF0YSksZnVuY3Rpb24oZSl7cmV0dXJuIF9jKCdkaXYnLHtrZXk6ZS5pZCxzdGF0aWNDbGFzczpcImZsZXgtaXRlbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHVzaC1yaWdodFwifSxbX2MoJ1Rva2VuSWNvbicse2F0dHJzOntcImltYWdlXCI6ZS5pY29ufX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMSBwdXNoLXJpZ2h0XCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1icmlnaHRcIn0sW192bS5fdihfdm0uX3MoZS50aXRsZSkpXSksX3ZtLl92KFwiIFwiKSxfYygnYnInKSxfdm0uX3YoXCIgXCIpLF9jKCdzbWFsbCcsW192bS5fdihfdm0uX3MoX3ZtLmZvcm1hdEluZm8oIGUuaW5mbyApKSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGV4dC1jbGlwIHRleHQtcmlnaHRcIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImljb24tY2xvc2VcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmRlbGV0ZUhpc3RvcnkoIGUuaWQgKX19fSksX3ZtLl92KFwiIFwiKSxfYygnYnInKSxfdm0uX3YoXCIgXCIpLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5fZihcInRvRWxhcHNlZFwiKShlLnRpbWUpKStcIiBhZ29cIildKV0pXSl9KSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxudmFyIGVzRXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cbmV4cG9ydCBkZWZhdWx0IGVzRXhwb3J0c1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMmQ4ZDMxZjhcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9IaXN0b3J5UGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///88\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[(!_vm.pairData.symbol)?_c(\'div\',{staticClass:"text-grey push-bottom"},[_vm._v("\\n    List of active alarms for all symbols ("+_vm._s(_vm.alarmsList.length)+")\\n  ")]):_vm._e(),_vm._v(" "),(_vm.pairData.symbol)?_c(\'form\',{staticClass:"flex-row flex-middle flex-stretch push-bottom",attrs:{"action":"#"},on:{"submit":function($event){$event.preventDefault();return _vm.saveAlarm($event)}}},[_c(\'div\',{staticClass:"form-input flex-1 push-right"},[_c(\'div\',{staticClass:"icon-chart-line push-right"}),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.curPrice),expression:"curPrice"}],staticClass:"push-right",attrs:{"placeholder":"0.00000000","name":"alarmPrice"},domProps:{"value":(_vm.curPrice)},on:{"input":function($event){if($event.target.composing){ return; }_vm.curPrice=$event.target.value}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm.pairData.asset))])]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-grey-hover icon-alarm iconLeft",attrs:{"type":"submit"}},[_vm._v("Set")])]):_vm._e(),_vm._v(" "),(!_vm.alarmsList.length)?_c(\'div\',{staticClass:"icon-info iconLeft text-grey"},[(_vm.pairData.symbol)?_c(\'span\',[_vm._v("There are no alarms for "+_vm._s(_vm.pairData.symbol)+".")]):_c(\'span\',[_vm._v("There are no alarms.")])]):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"flex-list"},_vm._l((_vm.alarmsList),function(a){return _c(\'div\',{key:a.id,staticClass:"flex-item"},[_c(\'div\',{staticClass:"flex-1 text-clip push-right"},[_c(\'span\',{staticClass:"text-default icon-alarm iconLeft"}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(a.pair))]),_vm._v(" "),_c(\'span\',{staticClass:"text-big",class:[ \'text-\'+ a.check ]},[_vm._v(" "+_vm._s(a.sign)+" ")]),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(a.alarmPrice, a.asset )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-default"},[_vm._v(_vm._s(a.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-clip push-right"},[_c(\'span\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm._f("toElapsed")(a.time))+" ago")])]),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'button\',{staticClass:"icon-close",on:{"click":function($event){_vm.deleteAlarm( a.symbol, a.id )}}})])])}))])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BbGFybXNMaXN0LnZ1ZT9mNjM3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0Isc0RBQXNELG9DQUFvQyx3SkFBd0osbUVBQW1FLGFBQWEsS0FBSywwQkFBMEIsd0JBQXdCLCtCQUErQixZQUFZLDJDQUEyQyxZQUFZLHlDQUF5QywwQkFBMEIsYUFBYSwwRUFBMEUsa0NBQWtDLCtDQUErQyxXQUFXLHVCQUF1QixLQUFLLHlCQUF5Qiw0QkFBNEIsUUFBUSxFQUFFLG1DQUFtQyx3QkFBd0Isd0JBQXdCLGtFQUFrRSxnRUFBZ0UsaUJBQWlCLDRFQUE0RSwyQ0FBMkMscUxBQXFMLHdCQUF3QixxQ0FBcUMsaUJBQWlCLGlDQUFpQyxZQUFZLDBDQUEwQyxhQUFhLCtDQUErQyx5QkFBeUIsMEJBQTBCLGtEQUFrRCxrREFBa0QsMERBQTBELDBCQUEwQixxRkFBcUYsMkJBQTJCLG9EQUFvRCxtQ0FBbUMsYUFBYSx3QkFBd0IsK0VBQStFLHdCQUF3QixlQUFlLDZCQUE2Qix5QkFBeUIsb0NBQW9DLE1BQU07QUFDcnlFO0FBQ0EsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6Ijg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NlY3Rpb24nLFsoIV92bS5wYWlyRGF0YS5zeW1ib2wpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtZ3JleSBwdXNoLWJvdHRvbVwifSxbX3ZtLl92KFwiXFxuICAgIExpc3Qgb2YgYWN0aXZlIGFsYXJtcyBmb3IgYWxsIHN5bWJvbHMgKFwiK192bS5fcyhfdm0uYWxhcm1zTGlzdC5sZW5ndGgpK1wiKVxcbiAgXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoX3ZtLnBhaXJEYXRhLnN5bWJvbCk/X2MoJ2Zvcm0nLHtzdGF0aWNDbGFzczpcImZsZXgtcm93IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaCBwdXNoLWJvdHRvbVwiLGF0dHJzOntcImFjdGlvblwiOlwiI1wifSxvbjp7XCJzdWJtaXRcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5wcmV2ZW50RGVmYXVsdCgpO3JldHVybiBfdm0uc2F2ZUFsYXJtKCRldmVudCl9fX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZvcm0taW5wdXQgZmxleC0xIHB1c2gtcmlnaHRcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImljb24tY2hhcnQtbGluZSBwdXNoLXJpZ2h0XCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOihfdm0uY3VyUHJpY2UpLGV4cHJlc3Npb246XCJjdXJQcmljZVwifV0sc3RhdGljQ2xhc3M6XCJwdXNoLXJpZ2h0XCIsYXR0cnM6e1wicGxhY2Vob2xkZXJcIjpcIjAuMDAwMDAwMDBcIixcIm5hbWVcIjpcImFsYXJtUHJpY2VcIn0sZG9tUHJvcHM6e1widmFsdWVcIjooX3ZtLmN1clByaWNlKX0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLmN1clByaWNlPSRldmVudC50YXJnZXQudmFsdWV9fX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5wYWlyRGF0YS5hc3NldCkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImZvcm0tYnRuIGJnLWdyZXktaG92ZXIgaWNvbi1hbGFybSBpY29uTGVmdFwiLGF0dHJzOntcInR5cGVcIjpcInN1Ym1pdFwifX0sW192bS5fdihcIlNldFwiKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5hbGFybXNMaXN0Lmxlbmd0aCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaWNvbi1pbmZvIGljb25MZWZ0IHRleHQtZ3JleVwifSxbKF92bS5wYWlyRGF0YS5zeW1ib2wpP19jKCdzcGFuJyxbX3ZtLl92KFwiVGhlcmUgYXJlIG5vIGFsYXJtcyBmb3IgXCIrX3ZtLl9zKF92bS5wYWlyRGF0YS5zeW1ib2wpK1wiLlwiKV0pOl9jKCdzcGFuJyxbX3ZtLl92KFwiVGhlcmUgYXJlIG5vIGFsYXJtcy5cIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC1saXN0XCJ9LF92bS5fbCgoX3ZtLmFsYXJtc0xpc3QpLGZ1bmN0aW9uKGEpe3JldHVybiBfYygnZGl2Jyx7a2V5OmEuaWQsc3RhdGljQ2xhc3M6XCJmbGV4LWl0ZW1cIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMSB0ZXh0LWNsaXAgcHVzaC1yaWdodFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRleHQtZGVmYXVsdCBpY29uLWFsYXJtIGljb25MZWZ0XCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWJyaWdodFwifSxbX3ZtLl92KF92bS5fcyhhLnBhaXIpKV0pLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRleHQtYmlnXCIsY2xhc3M6WyAndGV4dC0nKyBhLmNoZWNrIF19LFtfdm0uX3YoXCLCoFwiK192bS5fcyhhLnNpZ24pK1wiwqBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWJyaWdodFwifSxbX3ZtLl92KF92bS5fcyhfdm0uX2YoXCJ0b0ZpeGVkXCIpKGEuYWxhcm1QcmljZSwgYS5hc3NldCApKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWRlZmF1bHRcIn0sW192bS5fdihfdm0uX3MoYS5hc3NldCkpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtY2xpcCBwdXNoLXJpZ2h0XCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5fZihcInRvRWxhcHNlZFwiKShhLnRpbWUpKStcIiBhZ29cIildKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGV4dC1jbGlwXCJ9LFtfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJpY29uLWNsb3NlXCIsb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5kZWxldGVBbGFybSggYS5zeW1ib2wsIGEuaWQgKX19fSldKV0pfSkpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTFmOWYyZjQwXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvQWxhcm1zTGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///89\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_DonatePage_vue__ = __webpack_require__(29);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4fddbc8d_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_DonatePage_vue__ = __webpack_require__(92);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(91)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_DonatePage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4fddbc8d_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_DonatePage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Eb25hdGVQYWdlLnZ1ZT9kYzUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi00ZmRkYmM4ZFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXBvc3Rjc3MtbG9hZGVyIXNhc3MtbG9hZGVyP2RhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0RvbmF0ZVBhZ2UudnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRG9uYXRlUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0RvbmF0ZVBhZ2UudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQgX192dWVfdGVtcGxhdGVfXyBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi00ZmRkYmM4ZFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0RvbmF0ZVBhZ2UudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0RvbmF0ZVBhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Eb25hdGVQYWdlLnZ1ZT80MDFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjkxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1wib21pdFwiOjEsXCJyZW1vdmVcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtNGZkZGJjOGRcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzP2RhdGE9QGltcG9ydCBcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXCI7IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9Eb25hdGVQYWdlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///91\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[_vm._m(0),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'Tabs\',{ref:"tabs"},_vm._l((_vm.addrlist),function(d){return _c(\'section\',{key:d.symbol,attrs:{"btn-name":[ d.name + \' (\'+ d.symbol +\')\' ],"active":d.active}},[_c(\'div\',{staticClass:"qr-wrap text-center"},[_c(\'img\',{staticClass:"qr-image push-bottom",attrs:{"src":[ \'https://chart.googleapis.com/chart?chs=250x250&cht=qr&choe=UTF-8&chl=\' + d.address ],"width":"250","height":"250","alt":d.name}}),_vm._v(" "),_c(\'div\',{staticClass:"text-center push-bottom"},[_vm._v("Send only "),_c(\'span\',{staticClass:"text-primary"},[_vm._v(_vm._s(d.symbol))]),_vm._v(" to this address")]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-center push-bottom"},[_c(\'span\',{staticClass:"text-grey push-right"},[_vm._v(_vm._s(d.symbol))]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(d.address),expression:"d.address"}],staticClass:" push-right text-center text-clip",domProps:{"value":(d.address)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(d, "address", $event.target.value)}}}),_vm._v(" "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-copy text-primary-hover",attrs:{"title":"Copy"},on:{"click":function($event){_vm.copyText( d.address )}}})])])])}))],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Help The Developer "),_c(\'i\',{staticClass:"icon-down-open"})]),_vm._v(" "),_c(\'p\',[_vm._v("\\n      If you find this app useful and would like to show your\\n      appreciation by making a small donation to help the developer,\\n      here are the crypto addresses you can use to send your donations to...\\n    ")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Eb25hdGVQYWdlLnZ1ZT82NzFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsMkVBQTJFLFdBQVcsbUNBQW1DLHFCQUFxQixvQkFBb0IsK0RBQStELFlBQVksa0NBQWtDLFlBQVksMENBQTBDLHlJQUF5SSx3QkFBd0Isc0NBQXNDLGtDQUFrQywyQkFBMkIsZ0ZBQWdGLGlEQUFpRCxhQUFhLG1DQUFtQyxxREFBcUQsYUFBYSx3RUFBd0UsNERBQTRELG9CQUFvQixLQUFLLHlCQUF5Qiw0QkFBNEIsUUFBUSxFQUFFLDhDQUE4QywyQkFBMkIsYUFBYSxtQ0FBbUMsb0RBQW9ELGVBQWUsS0FBSyx5QkFBeUIsNEJBQTRCLFFBQVE7QUFDLzJDLG9DQUFvQyxhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLDBCQUEwQixZQUFZLHFDQUFxQyxnREFBZ0QsNkJBQTZCLGdRQUFnUTtBQUM1Z0IsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6IjkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NlY3Rpb24nLFtfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfYygnaHInKSxfdm0uX3YoXCIgXCIpLF9jKCdUYWJzJyx7cmVmOlwidGFic1wifSxfdm0uX2woKF92bS5hZGRybGlzdCksZnVuY3Rpb24oZCl7cmV0dXJuIF9jKCdzZWN0aW9uJyx7a2V5OmQuc3ltYm9sLGF0dHJzOntcImJ0bi1uYW1lXCI6WyBkLm5hbWUgKyAnICgnKyBkLnN5bWJvbCArJyknIF0sXCJhY3RpdmVcIjpkLmFjdGl2ZX19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJxci13cmFwIHRleHQtY2VudGVyXCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6XCJxci1pbWFnZSBwdXNoLWJvdHRvbVwiLGF0dHJzOntcInNyY1wiOlsgJ2h0dHBzOi8vY2hhcnQuZ29vZ2xlYXBpcy5jb20vY2hhcnQ/Y2hzPTI1MHgyNTAmY2h0PXFyJmNob2U9VVRGLTgmY2hsPScgKyBkLmFkZHJlc3MgXSxcIndpZHRoXCI6XCIyNTBcIixcImhlaWdodFwiOlwiMjUwXCIsXCJhbHRcIjpkLm5hbWV9fSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWNlbnRlciBwdXNoLWJvdHRvbVwifSxbX3ZtLl92KFwiU2VuZCBvbmx5IFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1wcmltYXJ5XCJ9LFtfdm0uX3YoX3ZtLl9zKGQuc3ltYm9sKSldKSxfdm0uX3YoXCIgdG8gdGhpcyBhZGRyZXNzXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmb3JtLWlucHV0IHRleHQtY2VudGVyIHB1c2gtYm90dG9tXCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1ncmV5IHB1c2gtcmlnaHRcIn0sW192bS5fdihfdm0uX3MoZC5zeW1ib2wpKV0pLF92bS5fdihcIiBcIiksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsXCIsdmFsdWU6KGQuYWRkcmVzcyksZXhwcmVzc2lvbjpcImQuYWRkcmVzc1wifV0sc3RhdGljQ2xhc3M6XCIgcHVzaC1yaWdodCB0ZXh0LWNlbnRlciB0ZXh0LWNsaXBcIixkb21Qcm9wczp7XCJ2YWx1ZVwiOihkLmFkZHJlc3MpfSxvbjp7XCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChkLCBcImFkZHJlc3NcIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse2RpcmVjdGl2ZXM6W3tuYW1lOlwidG9vbHRpcFwiLHJhd05hbWU6XCJ2LXRvb2x0aXBcIn1dLHN0YXRpY0NsYXNzOlwiaWNvbi1jb3B5IHRleHQtcHJpbWFyeS1ob3ZlclwiLGF0dHJzOntcInRpdGxlXCI6XCJDb3B5XCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY29weVRleHQoIGQuYWRkcmVzcyApfX19KV0pXSldKX0pKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHVzaC1ib3R0b21cIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZvcm0tbGFiZWwgcHVzaC1ib3R0b21cIn0sW192bS5fdihcIlxcbiAgICAgIEhlbHAgVGhlIERldmVsb3BlciBcIiksX2MoJ2knLHtzdGF0aWNDbGFzczpcImljb24tZG93bi1vcGVuXCJ9KV0pLF92bS5fdihcIiBcIiksX2MoJ3AnLFtfdm0uX3YoXCJcXG4gICAgICBJZiB5b3UgZmluZCB0aGlzIGFwcCB1c2VmdWwgYW5kIHdvdWxkIGxpa2UgdG8gc2hvdyB5b3VyXFxuICAgICAgYXBwcmVjaWF0aW9uIGJ5IG1ha2luZyBhIHNtYWxsIGRvbmF0aW9uIHRvIGhlbHAgdGhlIGRldmVsb3BlcixcXG4gICAgICBoZXJlIGFyZSB0aGUgY3J5cHRvIGFkZHJlc3NlcyB5b3UgY2FuIHVzZSB0byBzZW5kIHlvdXIgZG9uYXRpb25zIHRvLi4uXFxuICAgIFwiKV0pXSl9XVxudmFyIGVzRXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cbmV4cG9ydCBkZWZhdWx0IGVzRXhwb3J0c1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNGZkZGJjOGRcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9Eb25hdGVQYWdlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///92\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenPage_vue__ = __webpack_require__(30);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_0ee4ad6c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenPage_vue__ = __webpack_require__(97);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(94)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_0ee4ad6c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlblBhZ2UudnVlPzg1NmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI5My5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTBlZTRhZDZjXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9rZW5QYWdlLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTBlZTRhZDZjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9rZW5QYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ub2tlblBhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///93\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlblBhZ2UudnVlPzdhOWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0wZWU0YWQ2Y1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1Rva2VuUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///94\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsList_vue__ = __webpack_require__(31);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_ed9caa2a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsList_vue__ = __webpack_require__(96);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsList_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_ed9caa2a_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsList_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzTGlzdC52dWU/YmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI5NS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9OZXdzTGlzdC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05ld3NMaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZWQ5Y2FhMmFcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9OZXdzTGlzdC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9OZXdzTGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///95\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[(_vm.sentimentData)?_c(\'div\',{staticClass:"push-bottom"},[_c(\'span\',{staticClass:"text-bright text-clip"},[_vm._v("Sentiment for "+_vm._s(_vm.pairData.name)+" is  ")]),_vm._v(" "),_c(\'span\',{staticClass:"text-nowrap text-monospace",class:_vm.sentimentData.styles,domProps:{"innerHTML":_vm._s(_vm.sentimentData.sentiment)}})]):_vm._e(),_vm._v(" "),(!_vm.newsList.length)?_c(\'div\',{staticClass:"icon-info iconLeft text-grey push-bottom"},[(_vm.pairData.token)?_c(\'span\',[_vm._v("There are no news/events data for "+_vm._s(_vm.pairData.name)+".")]):_c(\'span\',[_vm._v("There are no news/events loaded.")])]):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"flex-list"},_vm._l((_vm.newsList),function(t){return _c(\'div\',{key:t.id,staticClass:"flex-item"},[_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'a\',{staticClass:"icon-twtr iconLeft text-primary",attrs:{"href":t.link,"target":"_blank"}},[_vm._v(_vm._s(t.name))]),_vm._v("  \\n        "),_c(\'small\',{staticClass:"text-grey"},[_vm._v("@"+_vm._s(t.handle))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'small\',{staticClass:"text-bright",domProps:{"innerHTML":_vm._s(t.text)}})])])}))])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzTGlzdC52dWU/Nzk4MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLG1EQUFtRCwwQkFBMEIsYUFBYSxvQ0FBb0Msc0ZBQXNGLGtGQUFrRixpREFBaUQsMERBQTBELHVEQUF1RCx3TUFBd00sd0JBQXdCLG1DQUFtQyxpQkFBaUIsaUNBQWlDLFlBQVksZ0NBQWdDLFVBQVUscURBQXFELGlDQUFpQyw4REFBOEQsd0JBQXdCLDhFQUE4RSxvQ0FBb0MsNEJBQTRCLE1BQU07QUFDNXNDO0FBQ0EsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6Ijk2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NlY3Rpb24nLFsoX3ZtLnNlbnRpbWVudERhdGEpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB1c2gtYm90dG9tXCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1icmlnaHQgdGV4dC1jbGlwXCJ9LFtfdm0uX3YoXCJTZW50aW1lbnQgZm9yIFwiK192bS5fcyhfdm0ucGFpckRhdGEubmFtZSkrXCIgaXMgwqBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LW5vd3JhcCB0ZXh0LW1vbm9zcGFjZVwiLGNsYXNzOl92bS5zZW50aW1lbnREYXRhLnN0eWxlcyxkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoX3ZtLnNlbnRpbWVudERhdGEuc2VudGltZW50KX19KV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKCFfdm0ubmV3c0xpc3QubGVuZ3RoKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJpY29uLWluZm8gaWNvbkxlZnQgdGV4dC1ncmV5IHB1c2gtYm90dG9tXCJ9LFsoX3ZtLnBhaXJEYXRhLnRva2VuKT9fYygnc3BhbicsW192bS5fdihcIlRoZXJlIGFyZSBubyBuZXdzL2V2ZW50cyBkYXRhIGZvciBcIitfdm0uX3MoX3ZtLnBhaXJEYXRhLm5hbWUpK1wiLlwiKV0pOl9jKCdzcGFuJyxbX3ZtLl92KFwiVGhlcmUgYXJlIG5vIG5ld3MvZXZlbnRzIGxvYWRlZC5cIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC1saXN0XCJ9LF92bS5fbCgoX3ZtLm5ld3NMaXN0KSxmdW5jdGlvbih0KXtyZXR1cm4gX2MoJ2Rpdicse2tleTp0LmlkLHN0YXRpY0NsYXNzOlwiZmxleC1pdGVtXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgcHVzaC1yaWdodFwifSxbX2MoJ2EnLHtzdGF0aWNDbGFzczpcImljb24tdHd0ciBpY29uTGVmdCB0ZXh0LXByaW1hcnlcIixhdHRyczp7XCJocmVmXCI6dC5saW5rLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoX3ZtLl9zKHQubmFtZSkpXSksX3ZtLl92KFwiIMKgXFxuICAgICAgICBcIiksX2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWdyZXlcIn0sW192bS5fdihcIkBcIitfdm0uX3ModC5oYW5kbGUpKV0pLF92bS5fdihcIiBcIiksX2MoJ2JyJyksX3ZtLl92KFwiIFwiKSxfYygnc21hbGwnLHtzdGF0aWNDbGFzczpcInRleHQtYnJpZ2h0XCIsZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKHQudGV4dCl9fSldKV0pfSkpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWVkOWNhYTJhXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{staticClass:"tokenpage-wrap",class:{ \'gain\': ( _vm.modalData.percent > 0 ), \'loss\': ( _vm.modalData.percent < 0 ) }},[_c(\'div\',{staticClass:"tokenpage-header flex-grid"},[_c(\'div\',{staticClass:"flex-grid-item flex-1"},[_c(\'div\',{staticClass:"flex-row flex-middle"},[_c(\'TokenIcon\',{staticClass:"push-right",attrs:{"image":_vm.modalData.image,"alt":_vm.modalData.token}}),_vm._v(" "),_c(\'h1\',{staticClass:"tokenpage-name text-bright"},[_vm._v(_vm._s(_vm.modalData.name))]),_vm._v(" "),(_vm.coinRank)?_c(\'div\',{staticClass:"pad-left"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Rank")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-secondary"},[_vm._v("#"+_vm._s(_vm._f("toMoney")(_vm.coinRank)))])],1):_vm._e()],1)]),_vm._v(" "),_c(\'div\',{staticClass:"flex-grid-item"},[_c(\'div\',{staticClass:"flex-row flex-middle"},[_c(\'div\',{staticClass:"text-clip push-right"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Price")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.close, _vm.modalData.asset )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Open 24h")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-default"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.open, _vm.modalData.asset )))])],1)])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"tokenpage-change flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"text-clip push-right"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Change 24h")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"color"},[_vm._v(_vm._s(_vm.modalData.sign)+_vm._s(_vm._f("toFixed")(_vm.modalData.change, _vm.modalData.asset )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Percent 24h")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-clip color"},[_vm._v(_vm._s(_vm.modalData.sign)+_vm._s(_vm._f("toFixed")(_vm.modalData.percent, 3 ))+"%")]),_vm._v(" "),_c(\'big\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm.modalData.arrow))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v(_vm._s(_vm.modalData.asset)+" Vol. 24h")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.modalData.assetVolume)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v(_vm._s(_vm.modalData.token)+" Vol. 24h")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.modalData.tokenVolume)))])],1)]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"tokenpage-global"},[_c(\'Spinner\',{ref:"globalSpinner"}),_vm._v(" "),(_vm.coinRank)?_c(\'div\',{staticClass:"tokenpage-change flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Market Cap")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.marketCap)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Supply")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.totalSupply)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("Total Volume")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.totalVolume)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-label text-clip"},[_vm._v("USD Value")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v("$"+_vm._s(_vm._f("toMoney")(_vm.usdPrice, 3 )))])],1)]):_vm._e()],1),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"tokenpage-chart"},[_c(\'div\',{staticClass:"text-label text-clip"},[_vm._v("Price Graph (7d)")]),_vm._v(" "),_c(\'Spinner\',{ref:"chartSpinner"}),_vm._v(" "),(_vm.chartData.length)?_c(\'LineChart\',{attrs:{"width":_vm.chartWidth,"height":_vm.chartHeight,"values":_vm.chartData}}):_vm._e()],1),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'Tabs\',{staticClass:"tokenpage-tabs pad-top push-bottom",attrs:{"data":{ alarmsCount: _vm.alarmsCount, newsCount: _vm.newsCount }}},[_c(\'section\',{attrs:{"btn-class":"icon-alarm iconLeft","btn-name":[ \'Alarms (\'+ _vm.alarmsCount +\')\' ],"active":""}},[_c(\'AlarmsList\',{attrs:{"alarmsData":_vm.alarmsData,"pairData":_vm.modalData},on:{"listCount":_vm.onAlarmsCount}})],1),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-calendar iconLeft","btn-name":[ \'News (\'+ _vm.newsCount +\')\' ]}},[_c(\'NewsList\',{attrs:{"newsData":_vm.newsData,"pairData":_vm.modalData},on:{"listCount":_vm.onNewsCount}})],1)])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"app-wrap"},[_c(\'Topbar\',{attrs:{"options":_vm.options,"watching":_vm.watching,"socketStatus":_vm.socketStatus,"socketTime":_vm.socketTime,"scrollDir":_vm.scrollDir,"scrollPos":_vm.scrollPos,"priceData":_vm.priceData,"historyData":_vm.historyData,"alarmsData":_vm.alarmsData,"newsData":_vm.newsData}}),_vm._v(" "),_c(\'WatchForm\',{ref:"watchform",attrs:{"options":_vm.options,"socketStatus":_vm.socketStatus,"scrollDir":_vm.scrollDir,"scrollPos":_vm.scrollPos,"assetsList":_vm.assetsList,"priceData":_vm.priceData},on:{"onStartWatch":function($event){_vm.watching = true},"onStopWatch":function($event){_vm.watching = false}}}),_vm._v(" "),_c(\'main\',{staticClass:"app-main"},[_c(\'TokenList\',{staticClass:"app-page",class:{ \'visible\': _vm.mainComp === \'TokenList\' },attrs:{"active":( _vm.mainComp === \'TokenList\' ),"options":_vm.options,"socketStatus":_vm.socketStatus,"scrollDir":_vm.scrollDir,"scrollPos":_vm.scrollPos,"assetsList":_vm.assetsList,"priceData":_vm.priceData}}),_vm._v(" "),_c(\'NewsPage\',{staticClass:"app-page",class:{ \'visible\': _vm.mainComp === \'NewsPage\' },attrs:{"active":( _vm.mainComp === \'NewsPage\' ),"options":_vm.options,"scrollDir":_vm.scrollDir,"scrollPos":_vm.scrollPos,"priceData":_vm.priceData,"coinsData":_vm.coinsData}})],1),_vm._v(" "),_c(\'Modal\',{ref:"modal",on:{"onDone":_vm.modalDone}},[_c(_vm.modalComp,{tag:"component",attrs:{"options":_vm.options,"modalData":_vm.modalData,"historyData":_vm.historyData,"alarmsData":_vm.alarmsData,"newsData":_vm.newsData}})],1),_vm._v(" "),_c(\'Notify\',{ref:"notify"}),_vm._v(" "),_c(\'button\',{staticClass:"icon-up",class:{ \'visible\': _vm.scrollDir === \'down\' },attrs:{"id":"btt"},on:{"click":function($event){_vm.handleClick( \'scroll\', 0 )}}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlP2U4MGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsdUJBQXVCLGVBQWUsT0FBTywyUUFBMlEsOEJBQThCLHVCQUF1QixnS0FBZ0ssS0FBSyxnQ0FBZ0Msb0JBQW9CLGdDQUFnQyx1QkFBdUIseUJBQXlCLHVCQUF1QixrQkFBa0IsOEJBQThCLDBDQUEwQyxRQUFRLDJNQUEyTSw2QkFBNkIsOEJBQThCLHlDQUF5QyxRQUFRLHdLQUF3Syw4QkFBOEIsZ0JBQWdCLHdCQUF3QixvQkFBb0IsdUJBQXVCLG1JQUFtSSwrQkFBK0IsYUFBYSwyQkFBMkIsNkJBQTZCLHNDQUFzQyxRQUFRLFdBQVcsS0FBSyx5QkFBeUIsaUNBQWlDO0FBQ3h5RDtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFwcC13cmFwXCJ9LFtfYygnVG9wYmFyJyx7YXR0cnM6e1wib3B0aW9uc1wiOl92bS5vcHRpb25zLFwid2F0Y2hpbmdcIjpfdm0ud2F0Y2hpbmcsXCJzb2NrZXRTdGF0dXNcIjpfdm0uc29ja2V0U3RhdHVzLFwic29ja2V0VGltZVwiOl92bS5zb2NrZXRUaW1lLFwic2Nyb2xsRGlyXCI6X3ZtLnNjcm9sbERpcixcInNjcm9sbFBvc1wiOl92bS5zY3JvbGxQb3MsXCJwcmljZURhdGFcIjpfdm0ucHJpY2VEYXRhLFwiaGlzdG9yeURhdGFcIjpfdm0uaGlzdG9yeURhdGEsXCJhbGFybXNEYXRhXCI6X3ZtLmFsYXJtc0RhdGEsXCJuZXdzRGF0YVwiOl92bS5uZXdzRGF0YX19KSxfdm0uX3YoXCIgXCIpLF9jKCdXYXRjaEZvcm0nLHtyZWY6XCJ3YXRjaGZvcm1cIixhdHRyczp7XCJvcHRpb25zXCI6X3ZtLm9wdGlvbnMsXCJzb2NrZXRTdGF0dXNcIjpfdm0uc29ja2V0U3RhdHVzLFwic2Nyb2xsRGlyXCI6X3ZtLnNjcm9sbERpcixcInNjcm9sbFBvc1wiOl92bS5zY3JvbGxQb3MsXCJhc3NldHNMaXN0XCI6X3ZtLmFzc2V0c0xpc3QsXCJwcmljZURhdGFcIjpfdm0ucHJpY2VEYXRhfSxvbjp7XCJvblN0YXJ0V2F0Y2hcIjpmdW5jdGlvbigkZXZlbnQpe192bS53YXRjaGluZyA9IHRydWV9LFwib25TdG9wV2F0Y2hcIjpmdW5jdGlvbigkZXZlbnQpe192bS53YXRjaGluZyA9IGZhbHNlfX19KSxfdm0uX3YoXCIgXCIpLF9jKCdtYWluJyx7c3RhdGljQ2xhc3M6XCJhcHAtbWFpblwifSxbX2MoJ1Rva2VuTGlzdCcse3N0YXRpY0NsYXNzOlwiYXBwLXBhZ2VcIixjbGFzczp7ICd2aXNpYmxlJzogX3ZtLm1haW5Db21wID09PSAnVG9rZW5MaXN0JyB9LGF0dHJzOntcImFjdGl2ZVwiOiggX3ZtLm1haW5Db21wID09PSAnVG9rZW5MaXN0JyApLFwib3B0aW9uc1wiOl92bS5vcHRpb25zLFwic29ja2V0U3RhdHVzXCI6X3ZtLnNvY2tldFN0YXR1cyxcInNjcm9sbERpclwiOl92bS5zY3JvbGxEaXIsXCJzY3JvbGxQb3NcIjpfdm0uc2Nyb2xsUG9zLFwiYXNzZXRzTGlzdFwiOl92bS5hc3NldHNMaXN0LFwicHJpY2VEYXRhXCI6X3ZtLnByaWNlRGF0YX19KSxfdm0uX3YoXCIgXCIpLF9jKCdOZXdzUGFnZScse3N0YXRpY0NsYXNzOlwiYXBwLXBhZ2VcIixjbGFzczp7ICd2aXNpYmxlJzogX3ZtLm1haW5Db21wID09PSAnTmV3c1BhZ2UnIH0sYXR0cnM6e1wiYWN0aXZlXCI6KCBfdm0ubWFpbkNvbXAgPT09ICdOZXdzUGFnZScgKSxcIm9wdGlvbnNcIjpfdm0ub3B0aW9ucyxcInNjcm9sbERpclwiOl92bS5zY3JvbGxEaXIsXCJzY3JvbGxQb3NcIjpfdm0uc2Nyb2xsUG9zLFwicHJpY2VEYXRhXCI6X3ZtLnByaWNlRGF0YSxcImNvaW5zRGF0YVwiOl92bS5jb2luc0RhdGF9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ01vZGFsJyx7cmVmOlwibW9kYWxcIixvbjp7XCJvbkRvbmVcIjpfdm0ubW9kYWxEb25lfX0sW19jKF92bS5tb2RhbENvbXAse3RhZzpcImNvbXBvbmVudFwiLGF0dHJzOntcIm9wdGlvbnNcIjpfdm0ub3B0aW9ucyxcIm1vZGFsRGF0YVwiOl92bS5tb2RhbERhdGEsXCJoaXN0b3J5RGF0YVwiOl92bS5oaXN0b3J5RGF0YSxcImFsYXJtc0RhdGFcIjpfdm0uYWxhcm1zRGF0YSxcIm5ld3NEYXRhXCI6X3ZtLm5ld3NEYXRhfX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCdOb3RpZnknLHtyZWY6XCJub3RpZnlcIn0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiaWNvbi11cFwiLGNsYXNzOnsgJ3Zpc2libGUnOiBfdm0uc2Nyb2xsRGlyID09PSAnZG93bicgfSxhdHRyczp7XCJpZFwiOlwiYnR0XCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFuZGxlQ2xpY2soICdzY3JvbGwnLCAwICl9fX0pXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxudmFyIGVzRXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cbmV4cG9ydCBkZWZhdWx0IGVzRXhwb3J0c1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNTA2MjcyMjJcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA5OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///98\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.5.17\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---\x3e ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (false\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (false\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    \"production\" !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (false) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"production\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (false) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (false) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    false\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (false) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (false) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (false) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (false) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (false) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (false) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (false) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (false) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (false\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (false) {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (false) {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.17';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (false) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (false) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (false) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (false\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (false\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = {\n    value: value.trim()\n  };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (false) {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        false\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (false\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n}\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n}\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('--\x3e');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)--\x3e/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"production\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (false) {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (false) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (false) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (false) {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n}\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n]\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n}\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  'delete': ['Backspace', 'Delete']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (false) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n}\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"production\" !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (false\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (false) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (false) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (false) {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"production\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(6), __webpack_require__(100).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(101);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///100\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6), __webpack_require__(102)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcz85YjJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQyxzQkFBc0IsRUFBRTtBQUNsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxMDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzPzViNjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiIxMDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///102\n")}]);