!function(n){function I(c){if(t[c])return t[c].exports;var g=t[c]={i:c,l:!1,exports:{}};return n[c].call(g.exports,g,g.exports,I),g.l=!0,g.exports}var t={};I.m=n,I.c=t,I.d=function(n,t,c){I.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:c})},I.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return I.d(t,"a",t),t},I.o=function(n,I){return Object.prototype.hasOwnProperty.call(n,I)},I.p="",I(I.s=37)}([function(module,exports){eval("/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file.\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nmodule.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = injectStyles\n  }\n\n  if (hook) {\n    var functional = options.functional\n    var existing = functional\n      ? options.render\n      : options.beforeCreate\n\n    if (!functional) {\n      // inject component registration as beforeCreate hook\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    } else {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return existing(h, context)\n      }\n    }\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanM/NTU0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICByYXdTY3JpcHRFeHBvcnRzLFxuICBjb21waWxlZFRlbXBsYXRlLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciAvKiBzZXJ2ZXIgb25seSAqL1xuKSB7XG4gIHZhciBlc01vZHVsZVxuICB2YXIgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBlc01vZHVsZSA9IHJhd1NjcmlwdEV4cG9ydHNcbiAgICBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKGNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZFRlbXBsYXRlLnN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgdmFyIGZ1bmN0aW9uYWwgPSBvcHRpb25zLmZ1bmN0aW9uYWxcbiAgICB2YXIgZXhpc3RpbmcgPSBmdW5jdGlvbmFsXG4gICAgICA/IG9wdGlvbnMucmVuZGVyXG4gICAgICA6IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG5cbiAgICBpZiAoIWZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gZXhpc3RpbmcoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVzTW9kdWxlOiBlc01vZHVsZSxcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Basic event bus class\r\n */\nvar Bus = function () {\n\n  /**\r\n   * Constructor\r\n   */\n  function Bus() {\n    _classCallCheck(this, Bus);\n\n    this._events = {};\n  }\n\n  /**\r\n   * Register an event handler\r\n   * @param {string}    name      Event name\r\n   * @param {function}  callback  Event callback function\r\n   */\n\n\n  _createClass(Bus, [{\n    key: 'on',\n    value: function on(name, callback) {\n      if (!name || typeof name !== 'string') return;\n      if (typeof callback !== 'function') return;\n      if (!this._events.hasOwnProperty(name)) this._events[name] = [];\n      this._events[name].push(callback);\n    }\n\n    /**\r\n     * Emit an event by name (first arg) with rest of args passed to it\r\n     */\n\n  }, {\n    key: 'emit',\n    value: function emit() {\n      var args = Array.from(arguments);\n      var name = args.length ? args.shift() : '';\n\n      if (this._events.hasOwnProperty(name)) {\n        for (var i = 0; i < this._events[name].length; ++i) {\n          var cb = this._events[name][i];\n          cb.apply(cb, args);\n        }\n      }\n      args = undefined; // gc\n    }\n  }]);\n\n  return Bus;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Bus);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9idXMuanM/NGJhYSJdLCJuYW1lcyI6WyJCdXMiLCJfZXZlbnRzIiwibmFtZSIsImNhbGxiYWNrIiwiaGFzT3duUHJvcGVydHkiLCJwdXNoIiwiYXJncyIsIkFycmF5IiwiZnJvbSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNoaWZ0IiwiaSIsImNiIiwiYXBwbHkiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0lBR3FCQSxHOztBQUVuQjs7O0FBR0EsaUJBQWM7QUFBQTs7QUFDWixTQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNEOztBQUVEOzs7Ozs7Ozs7dUJBS0lDLEksRUFBTUMsUSxFQUFXO0FBQ25CLFVBQUssQ0FBQ0QsSUFBRCxJQUFTLE9BQU9BLElBQVAsS0FBZ0IsUUFBOUIsRUFBeUM7QUFDekMsVUFBSyxPQUFPQyxRQUFQLEtBQW9CLFVBQXpCLEVBQXNDO0FBQ3RDLFVBQUssQ0FBQyxLQUFLRixPQUFMLENBQWFHLGNBQWIsQ0FBNkJGLElBQTdCLENBQU4sRUFBNEMsS0FBS0QsT0FBTCxDQUFjQyxJQUFkLElBQXVCLEVBQXZCO0FBQzVDLFdBQUtELE9BQUwsQ0FBY0MsSUFBZCxFQUFxQkcsSUFBckIsQ0FBMkJGLFFBQTNCO0FBQ0Q7O0FBRUQ7Ozs7OzsyQkFHTztBQUNMLFVBQUlHLE9BQU9DLE1BQU1DLElBQU4sQ0FBWUMsU0FBWixDQUFYO0FBQ0EsVUFBSVAsT0FBT0ksS0FBS0ksTUFBTCxHQUFjSixLQUFLSyxLQUFMLEVBQWQsR0FBNkIsRUFBeEM7O0FBRUEsVUFBSyxLQUFLVixPQUFMLENBQWFHLGNBQWIsQ0FBNkJGLElBQTdCLENBQUwsRUFBMkM7QUFDekMsYUFBTSxJQUFJVSxJQUFJLENBQWQsRUFBaUJBLElBQUksS0FBS1gsT0FBTCxDQUFjQyxJQUFkLEVBQXFCUSxNQUExQyxFQUFrRCxFQUFFRSxDQUFwRCxFQUF3RDtBQUN0RCxjQUFJQyxLQUFLLEtBQUtaLE9BQUwsQ0FBY0MsSUFBZCxFQUFzQlUsQ0FBdEIsQ0FBVDtBQUNBQyxhQUFHQyxLQUFILENBQVVELEVBQVYsRUFBY1AsSUFBZDtBQUNEO0FBQ0Y7QUFDREEsYUFBT1MsU0FBUCxDQVZLLENBVWE7QUFDbkI7Ozs7Ozt5REFuQ2tCZixHIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQmFzaWMgZXZlbnQgYnVzIGNsYXNzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXMge1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZXZlbnRzID0ge307XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICAgIG5hbWUgICAgICBFdmVudCBuYW1lXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gIGNhbGxiYWNrICBFdmVudCBjYWxsYmFjayBmdW5jdGlvblxyXG4gICAqL1xyXG4gIG9uKCBuYW1lLCBjYWxsYmFjayApIHtcclxuICAgIGlmICggIW5hbWUgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnICkgcmV0dXJuO1xyXG4gICAgaWYgKCB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgKSByZXR1cm47XHJcbiAgICBpZiAoICF0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkoIG5hbWUgKSApIHRoaXMuX2V2ZW50c1sgbmFtZSBdID0gW107XHJcbiAgICB0aGlzLl9ldmVudHNbIG5hbWUgXS5wdXNoKCBjYWxsYmFjayApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW1pdCBhbiBldmVudCBieSBuYW1lIChmaXJzdCBhcmcpIHdpdGggcmVzdCBvZiBhcmdzIHBhc3NlZCB0byBpdFxyXG4gICAqL1xyXG4gIGVtaXQoKSB7XHJcbiAgICBsZXQgYXJncyA9IEFycmF5LmZyb20oIGFyZ3VtZW50cyApO1xyXG4gICAgbGV0IG5hbWUgPSBhcmdzLmxlbmd0aCA/IGFyZ3Muc2hpZnQoKSA6ICcnO1xyXG5cclxuICAgIGlmICggdGhpcy5fZXZlbnRzLmhhc093blByb3BlcnR5KCBuYW1lICkgKSB7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuX2V2ZW50c1sgbmFtZSBdLmxlbmd0aDsgKytpICkge1xyXG4gICAgICAgIGxldCBjYiA9IHRoaXMuX2V2ZW50c1sgbmFtZSBdWyBpIF07XHJcbiAgICAgICAgY2IuYXBwbHkoIGNiLCBhcmdzICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGFyZ3MgPSB1bmRlZmluZWQ7IC8vIGdjXHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL2J1cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * Web cache handler\r\n */\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // local props\n  _api: 'localStorage',\n  _prefix: 'webcache_',\n  _ttl: 0,\n\n  // save data to cache\n  setData: function setData(key, data, time) {\n    return this._save(key, data, time);\n  },\n\n\n  // get saved data for a key as is\n  getData: function getData(key) {\n    this._clean();\n    return this._fetch(key);\n  },\n\n\n  // delete saved data for key\n  deleteData: function deleteData(key) {\n    return this._delete(key);\n  },\n\n\n  // santizer for keys\n  _key: function _key(key) {\n    return this._prefix + String(key || '').replace(/[^\\w]+/g, '_');\n  },\n\n\n  // error handler\n  _error: function _error(e) {\n    var _code = e.code | 0;\n    var _name = e.name || 'UnknownError';\n    var _info = e.message || 'Problem with ' + this._api + ' browser API.';\n    console.error('StorageError (' + _code + '):', _info, '(' + _name + ').');\n    return false;\n  },\n\n\n  // try saving the data and handle any errors\n  _save: function _save(key, data, ttl) {\n    try {\n      var _store = window[this._api];\n      var _key = this._key(key);\n      var _time = Date.now();\n      var _ttl = parseInt(ttl) || this._ttl;\n      var _string = JSON.stringify({ _time: _time, _ttl: _ttl, data: data });\n      _store.setItem(_key, _string);\n      return true;\n    } catch (e) {\n      return this._error(e);\n    }\n  },\n\n\n  // try fetching data for key\n  _fetch: function _fetch(key) {\n    try {\n      var _store = window[this._api];\n      var _key = this._key(key);\n      var _parsed = JSON.parse(_store.getItem(_key) || '{}');\n      return _parsed && _parsed.data ? _parsed.data : null;\n    } catch (e) {\n      return this._error(e);\n    }\n  },\n\n\n  // try deleting data by key\n  _delete: function _delete(key) {\n    try {\n      var _store = window[this._api];\n      var _key = this._key(key);\n      _store.removeItem(_key);\n      return true;\n    } catch (e) {\n      return this._error(e);\n    }\n  },\n\n\n  // clean all expired items from storage\n  _clean: function _clean() {\n    try {\n      var _store = window[this._api];\n      var _time = Date.now();\n\n      // loop keys\n      for (var i = 0; i < _store.length; i++) {\n\n        // make sure it's a key managed by this object\n        var _key = _store.key(i);\n        if (_key.indexOf(this._prefix) < 0) continue;\n\n        // get data for key\n        var _data = JSON.parse(_store.getItem(_key) || '{}');\n        if (!_data._time || !_data._ttl) continue; // need these\n\n        // check if enough time has passed and delete key\n        var _secs = (_time - _data._time) / 1000;\n        if (_secs < _data._ttl) continue; // still fresh\n        _store.removeItem(_key);\n      }\n      return true;\n    } catch (e) {\n      return this._error(e);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Common utils\n */\nmodule.exports = {\n\n  // convert url string into an anchor element (parser)\n  parseUrl: function parseUrl(url, prop) {\n    var link = document.createElement('a');\n    link.href = url;\n    var data = link[prop] || '';\n    link = null;\n    return data;\n  },\n\n\n  // convert URLs into clickable links\n  linkUrl: function linkUrl(text) {\n    return String(text || '').replace(/(https?\\:\\/\\/[\\w\\-\\.\\?\\=\\&\\%\\/\\#]+)/gi, '<a href=\"$1\" target=\"_blank\">$1</a>');\n  },\n\n\n  // convert html tags to text content\n  stripHtml: function stripHtml(text, removeUrls) {\n    var div = document.createElement('div');\n    div.innerHTML = String(text || '');\n    var output = String(div.textContent || div.innerText || '');\n    if (removeUrls) output = output.replace(/(https?\\:\\/\\/[\\w\\-\\.\\?\\=\\&\\%\\/\\#]+)/gi, '');\n    return output;\n  },\n\n\n  // convert relative path to full url\n  fullUrl: function fullUrl(relpath) {\n    if (/^([\\w\\-]+\\:)?\\/\\/.*$/.test(relpath)) return relpath;\n    var loc = window.location;\n    var path = String(loc.pathname || '').replace(/\\/+$/g, '');\n    var rel = String(relpath || '').replace(/^\\/+/g, '');\n    return loc.protocol + '//' + loc.host + path + '/' + rel;\n  },\n\n\n  // play audio file\n  playAudio: function playAudio(file, vol) {\n    if (!file || typeof file !== 'string') return;\n    // normalize volume\n    vol = parseFloat(vol) || 1;\n    vol = vol > 1 ? vol / 100 : vol;\n    vol = vol > 1 || vol < 0 ? 1 : vol;\n    // load and play audio\n    var audio = new Audio();\n    audio.src = this.fullUrl(file);\n    audio.volume = vol;\n    audio.crossOrigin = 'anonymous';\n    audio.addEventListener('canplaythrough', function (e) {\n      try {\n        audio.play();\n      } catch (err) {}\n    });\n    audio.load();\n  },\n\n\n  // copy text to clipboard\n  copyText: function copyText(text) {\n    var elm = document.createElement('input');\n    document.body.appendChild(elm);\n    elm.value = String(text || '').trim();\n    elm.select();\n    setTimeout(function () {\n      return elm.remove();\n    }, 1000);\n    return document.execCommand('Copy');\n  },\n\n\n  // clamp a number between min and max\n  clamp: function clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  },\n\n\n  // cut part of a string\n  limit: function limit(str, length, append) {\n    str = String(str);\n    length = parseInt(length) || 50;\n    append = String(append || '');\n    return str.length > length ? str.substring(0, length) + append : str;\n  },\n\n\n  // alway keep a string at a certain length\n  fill: function fill(str, length, char, append) {\n    str = String(str);\n    length = parseInt(length) || 20;\n    char = String(char || ' ');\n    append = String(append || '');\n    if (str.length > length) return str.substring(0, length - 3) + '...';\n    return str + char.repeat(length - str.length) + append;\n  },\n\n\n  // get noun word for a number\n  noun: function noun(num, singular, plutal, append) {\n    append = String(append || '');\n    return String(num + ' ' + (parseFloat(num) === 1 ? singular : plutal) + ' ' + append).trim();\n  },\n\n\n  // format number to money\n  money: function money(num, fixed) {\n    num = parseFloat(num) || 0;\n    fixed = parseInt(fixed) || 0;\n    var o = { style: 'decimal', minimumFractionDigits: fixed, maximumFractionDigits: fixed };\n    return new Intl.NumberFormat('en-US', o).format(num);\n  },\n\n\n  // fixed numbers\n  fixed: function fixed(num, decimals) {\n    if (typeof decimals === 'number') return Number(num).toFixed(decimals);\n    if (/^(T?USDT?|PAX|DAI)$/.test(decimals)) return this.money(num, 3);\n    return Number(num).toFixed(8);\n  },\n\n\n  // get info about how long something has been\n  elapsed: function elapsed(secs, suffix, short) {\n    secs = parseInt(secs) || 0;\n    if (short && secs < 60) return 'Just now';\n    var list = [];\n    var data = {\n      'M': Math.floor(secs / 2419200),\n      'w': Math.floor(secs / 604800 % 4),\n      'd': Math.floor(secs / 86400 % 7),\n      'h': Math.floor(secs / 3600 % 24),\n      'm': Math.floor(secs / 60 % 60)\n    };\n    if (!short) data.s = Math.floor(secs % 60);\n    Object.keys(data).forEach(function (k) {\n      if (data[k]) list.push(data[k] + k);\n    });\n    if (suffix) list.push(suffix);\n    return list.join(' ');\n  },\n\n\n  // get data about current date and time\n  dateData: function dateData(time) {\n    var now = Date.now();\n\n    if (time) {\n      // timestamp or datestring, keep as is\n      if (typeof time === 'number' || /^[\\w\\-\\+\\:]+$/.test(time)) {\n        now = time;\n      }\n      // other string, assume timezone\n      else if (typeof time === 'string') {\n          now = new Date().toLocaleString('en-US', { time: time });\n        }\n    }\n    var _p = function _p(n) {\n      return n < 10 ? '0' + n : '' + n;\n    };\n    var date = new Date(now);\n    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][date.getMonth()];\n    var year = date.getFullYear();\n    var day = _p(date.getDate());\n    var minute = _p(date.getMinutes());\n    var second = _p(date.getSeconds());\n    var fullh = date.getHours();\n    var ampm = fullh > 12 ? 'PM' : 'AM';\n    var hour = fullh > 12 ? fullh - 12 : fullh;\n    hour = _p(hour === 0 ? 12 : hour);\n    return { month: month, day: day, year: year, hour: hour, minute: minute, second: second, ampm: ampm };\n  },\n\n\n  // get readable date\n  date: function date(time, full) {\n    var _dateData = this.dateData(time),\n        month = _dateData.month,\n        day = _dateData.day,\n        year = _dateData.year,\n        hour = _dateData.hour,\n        minute = _dateData.minute,\n        second = _dateData.second,\n        ampm = _dateData.ampm;\n\n    var out = [month + '/' + day + '/' + year];\n    if (full) out.push(hour + ':' + minute + ':' + second, ampm);\n    return out.join(' ');\n  },\n\n\n  // get current time\n  time: function time(_time) {\n    var _dateData2 = this.dateData(_time),\n        hour = _dateData2.hour,\n        minute = _dateData2.minute,\n        second = _dateData2.second,\n        ampm = _dateData2.ampm;\n\n    return hour + ':' + minute + ':' + second + ' ' + ampm;\n  },\n\n\n  // calculate percent change\n  percent: function percent(current, last, toNum) {\n    var isnum = Boolean(last > 0);\n    var isup = Boolean(current >= last);\n    var change = isup ? current - last : last - current;\n    var percent = isnum ? change / last * 100.0 : 0.0;\n    var sign = isup ? '+' : '-';\n    var arrow = isup ? '▲' : '▼';\n    var color = isup ? 'green' : 'red';\n    if (toNum === true) return +Number(sign + percent).toFixed(3);\n    return { change: change, percent: percent, sign: sign, arrow: arrow, color: color };\n  },\n\n\n  // calc chart points for given dimensions and values\n  points: function points(width, height, values) {\n    width = parseFloat(width) || 0;\n    height = parseFloat(height) || 0;\n    values = Array.isArray(values) ? values : [];\n    values = values.map(function (n) {\n      return parseFloat(n) || 0;\n    });\n\n    var min = values.reduce(function (min, val) {\n      return val < min ? val : min;\n    }, values[0]);\n    var max = values.reduce(function (max, val) {\n      return val > max ? val : max;\n    }, values[0]);\n    var len = values.length;\n    var half = height / 2;\n    var range = max > min ? max - min : height;\n    var gap = len > 1 ? width / (len - 1) : 1;\n    var out = [];\n\n    for (var i = 0; i < len; ++i) {\n      var d = values[i];\n      var val = 2 * ((d - min) / range - 0.5);\n      var x = i * gap;\n      var y = -val * half * 0.8 + half;\n      out.push({ x: x, y: y });\n    }\n    return out;\n  },\n\n\n  // compute placement for an absolute box on the screen\n  boxPosition: function boxPosition(triggerElm) {\n    var top = true,\n        right = false,\n        bottom = false,\n        left = true;\n\n\n    if (triggerElm instanceof HTMLElement) {\n      var box = triggerElm.getBoundingClientRect();\n      var posx = box.left + triggerElm.offsetWidth / 2;\n      var posy = box.top + triggerElm.offsetHeight / 2;\n      var centerx = window.innerWidth / 2;\n      var centery = window.innerHeight / 2;\n\n      top = posy < centery ? true : false;\n      right = posx > centerx ? true : false;\n      bottom = posy > centery ? true : false;\n      left = posx < centerx ? true : false;\n      return { top: top, right: right, bottom: bottom, left: left };\n    }\n  },\n\n\n  // check a key-press event for some common keys being pressed\n  keyboard: function keyboard(e) {\n    var code = e.keyCode || e.key || 0;\n    var up = code === 38;\n    var down = code === 40;\n    var left = code === 37;\n    var right = code === 39;\n    var back = code === 8;\n    var escape = code === 27;\n    var space = code === 32;\n    var enter = code === 13;\n    return { up: up, down: down, left: left, right: right, back: back, escape: escape, space: space, enter: enter };\n  },\n\n\n  // shuffle an array\n  shuffle: function shuffle(o) {\n    for (var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x) {}\n    return o;\n  },\n\n\n  // deep merge obj arguments\n  deepMerge: function deepMerge() {\n    for (var i = 1; i < arguments.length; i++) {\n      for (var key in arguments[i]) {\n        if (arguments[i].hasOwnProperty(key)) {\n          if (_typeof(arguments[0][key]) === 'object' && _typeof(arguments[i][key]) === 'object') {\n            this.deepMerge(arguments[0][key], arguments[i][key]);\n          } else {\n            arguments[0][key] = arguments[i][key];\n          }\n        }\n      }\n    }\n    return arguments[0];\n  },\n\n\n  // search objects in a list by key and search text\n  search: function search(list, key, text, fullword, fullcase) {\n    text = String(text || '').replace(/[^\\w\\s\\|]+/g, '');\n\n    if (text.length > 1) {\n      var search = fullword ? '\\\\b' + text.replace(/[\\|]+/g, '\\\\b|\\\\b') + '\\\\b' : text;\n      var options = fullcase ? 'g' : 'gi';\n      var regex = new RegExp(search, options);\n      var count = list.length;\n      var output = [];\n\n      while (count--) {\n        if (String(list[count][key] || '').search(regex) < 0) continue;\n        output.push(list[count]);\n      }\n      return output;\n    }\n    return list;\n  },\n\n\n  // sort objects in an array by a key\n  sort: function sort(list, key, order, ignore) {\n    return list.sort(function (a, b) {\n      if (a.hasOwnProperty(key)) {\n\n        var _a = a[key];\n        var _b = b[key];\n\n        if (ignore) {\n          // sort strings using same case\n          _a = typeof _a === 'string' ? _a.toUpperCase() : _a;\n          _b = typeof _b === 'string' ? _b.toUpperCase() : _b;\n        }\n        if (order === 'asc') {\n          if (_a < _b) return -1;\n          if (_a > _b) return 1;\n        }\n        if (order === 'desc') {\n          if (_a > _b) return -1;\n          if (_a < _b) return 1;\n        }\n      }\n      return 0;\n    });\n  },\n\n\n  // remove items from the start of a list\n  trimLeft: function trimLeft(list, max) {\n    return list.length > max ? list.slice(list.length - max) : list;\n  },\n\n\n  // remove items from the end of a list\n  trimRight: function trimRight(list, max) {\n    return list.length > max ? list.slice(0, max) : list;\n  },\n\n\n  // create unique hash from a string\n  unique: function unique(str) {\n    str = String(str || '').replace(/[\\r\\n\\t\\s]+/g, ' ').trim();\n    var hash = 5381,\n        i = str.length;\n    while (--i) {\n      hash = hash * 33 ^ str.charCodeAt(i);\n    }return 'unq_' + (hash >>> 0);\n  },\n\n\n  // random string for a given length\n  randString: function randString(length) {\n    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    var total = parseInt(length) || 10;\n    var output = '';\n\n    while (total) {\n      output += chars.charAt(Math.floor(Math.random() * chars.length));\n      total--;\n    }\n    return output;\n  },\n\n\n  // get a unique ID string that uses the current timestamp and a random value\n  idString: function idString() {\n    return (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)).toUpperCase();\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dropdown_vue__ = __webpack_require__(14);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3f43ab1d_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dropdown_vue__ = __webpack_require__(61);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(60)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dropdown_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3f43ab1d_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dropdown_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWU/MWFlZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQSx3QkFBb1Y7QUFDcFY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0zZjQzYWIxZFxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXBvc3Rjc3MtbG9hZGVyIXNhc3MtbG9hZGVyP2RhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0Ryb3Bkb3duLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0Ryb3Bkb3duLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vRHJvcGRvd24udnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQgX192dWVfdGVtcGxhdGVfXyBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zZjQzYWIxZFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0Ryb3Bkb3duLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWVcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenIcon_vue__ = __webpack_require__(23);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_800c115e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenIcon_vue__ = __webpack_require__(81);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(80)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenIcon_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_800c115e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenIcon_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkljb24udnVlPzc2MWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtODAwYzExNWVcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Ub2tlbkljb24udnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVG9rZW5JY29uLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVG9rZW5JY29uLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtODAwYzExNWVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ub2tlbkljb24udnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1Rva2VuSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Toggle_vue__ = __webpack_require__(24);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2966b644_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Toggle_vue__ = __webpack_require__(83);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(82)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Toggle_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2966b644_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Toggle_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlPzk4MzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjk2NmI2NDRcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Ub2dnbGUudnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVG9nZ2xlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVG9nZ2xlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjk2NmI2NDRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Ub2dnbGUudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1RvZ2dsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Tabs_vue__ = __webpack_require__(29);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4e198b16_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Tabs_vue__ = __webpack_require__(94);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(93)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Tabs_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4e198b16_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Tabs_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZT9mNmQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTRlMTk4YjE2XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVGFicy52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9UYWJzLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vVGFicy52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTRlMTk4YjE2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVGFicy52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvVGFicy52dWVcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SelectMenu_vue__ = __webpack_require__(19);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_0b74e9a6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SelectMenu_vue__ = __webpack_require__(73);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(72)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SelectMenu_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_0b74e9a6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SelectMenu_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RNZW51LnZ1ZT8wODhhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTBiNzRlOWE2XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vU2VsZWN0TWVudS52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9TZWxlY3RNZW51LnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VsZWN0TWVudS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTBiNzRlOWE2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2VsZWN0TWVudS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvU2VsZWN0TWVudS52dWVcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Spinner_vue__ = __webpack_require__(21);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c330a8ce_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Spinner_vue__ = __webpack_require__(78);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(77)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Spinner_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c330a8ce_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Spinner_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZT80MjMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBLHdCQUFvVjtBQUNwVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcXFwib21pdFxcXCI6MSxcXFwicmVtb3ZlXFxcIjp0cnVlfSF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1jMzMwYThjZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6ZmFsc2V9IXBvc3Rjc3MtbG9hZGVyIXNhc3MtbG9hZGVyP2RhdGE9QGltcG9ydCBcXFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcXFwiOyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NwaW5uZXIudnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU3Bpbm5lci52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1NwaW5uZXIudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQgX192dWVfdGVtcGxhdGVfXyBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1jMzMwYThjZVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL1NwaW5uZXIudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1NwaW5uZXIudnVlXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Search_vue__ = __webpack_require__(22);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_f66c22f8_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Search_vue__ = __webpack_require__(79);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Search_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_f66c22f8_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Search_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2gudnVlPzIyMzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VhcmNoLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VhcmNoLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtZjY2YzIyZjhcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9TZWFyY2gudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvU2VhcmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Topbar_vue__ = __webpack_require__(58);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Modal_vue__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Notify_vue__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__WatchForm_vue__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__TokenList_vue__ = __webpack_require__(75);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__NewsPage_vue__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__TradePage_vue__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__AboutPage_vue__ = __webpack_require__(96);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__OptionsPage_vue__ = __webpack_require__(98);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__HistoryPage_vue__ = __webpack_require__(100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__AlarmsList_vue__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__TokenPage_vue__ = __webpack_require__(103);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: {\n    Topbar: __WEBPACK_IMPORTED_MODULE_0__Topbar_vue__[\"a\" /* default */],\n    Modal: __WEBPACK_IMPORTED_MODULE_1__Modal_vue__[\"a\" /* default */],\n    Notify: __WEBPACK_IMPORTED_MODULE_2__Notify_vue__[\"a\" /* default */],\n    WatchForm: __WEBPACK_IMPORTED_MODULE_3__WatchForm_vue__[\"a\" /* default */],\n    AboutPage: __WEBPACK_IMPORTED_MODULE_7__AboutPage_vue__[\"a\" /* default */],\n    OptionsPage: __WEBPACK_IMPORTED_MODULE_8__OptionsPage_vue__[\"a\" /* default */],\n    HistoryPage: __WEBPACK_IMPORTED_MODULE_9__HistoryPage_vue__[\"a\" /* default */],\n    TokenList: __WEBPACK_IMPORTED_MODULE_4__TokenList_vue__[\"a\" /* default */],\n    AlarmsList: __WEBPACK_IMPORTED_MODULE_10__AlarmsList_vue__[\"a\" /* default */],\n    NewsPage: __WEBPACK_IMPORTED_MODULE_5__NewsPage_vue__[\"a\" /* default */],\n    TradePage: __WEBPACK_IMPORTED_MODULE_6__TradePage_vue__[\"a\" /* default */],\n    TokenPage: __WEBPACK_IMPORTED_MODULE_11__TokenPage_vue__[\"a\" /* default */]\n  },\n\n  // component data\n  data: function data() {\n    return {\n      refid: '12268078',\n      title: 'Binance Watch',\n      // app options and data\n      options: {},\n      sortData: {},\n      priceData: [],\n      assetsList: [],\n      newsHandlers: [],\n      newsEntries: [],\n      historyData: [],\n      alarmsData: [],\n      coinsData: {},\n      // page and modal related\n      mainComp: '',\n      modalComp: '',\n      modalData: {},\n      // ticker related data\n      tickerStatus: 0, // ( 0: off, 1: wait, 2: on )\n      tickerStart: 0,\n      tickerTime: '',\n      // fixed header props\n      header: {\n        collapsed: false,\n        opaque: false\n      }\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // update app options and pass it on to other handlers\n    updateOptions: function updateOptions(options) {\n      this.options = options;\n\n      this.$ajax.setOptions({\n        proxy: this.options.proxy\n      });\n      this.$notify.setOptions({\n        enabled: this.options.notify.enabled,\n        duration: this.options.notify.duration,\n        sound: this.options.audio.enabled,\n        volume: this.options.audio.volume,\n        audio: this.options.audio.file\n      });\n      this.$news.setOptions({\n        enabled: this.options.news.enabled,\n        interval: this.options.news.interval,\n        delay: this.options.news.delay,\n        days: this.options.news.days,\n        tweets: this.options.news.tweets,\n        total: this.options.news.total\n      });\n      this.$messenger.setOptions({\n        mailgin: this.options.mailgin,\n        telegram: this.options.telegram\n      });\n      this.$binance.setApiKey(this.options.binance.apikey);\n      this.$binance.setApiSecret(this.options.binance.apisecret);\n    },\n\n\n    // setup options class handlers and load saved options\n    setupOptionsHandlers: function setupOptionsHandlers() {\n      this.$opts.on('update', this.updateOptions);\n      this.$opts.loadOptions();\n    },\n\n\n    // setup sort order data handler\n    setupSorterHandlers: function setupSorterHandlers() {\n      var _this = this;\n\n      this.$sorter.setKey('ticker', 'assetVolume', 'desc');\n      this.$sorter.setKey('sentiment', 'count', 'desc');\n      this.$sorter.setKey('balances', 'asset', 'asc');\n      this.$sorter.setKey('orders', 'time', 'desc');\n      this.$sorter.setKey('trades', 'time', 'desc');\n      this.$sorter.setKey('sessions', 'time', 'desc');\n      this.$sorter.on('change', function (data) {\n        _this.sortData = data;\n      });\n      this.$sorter.on('load', function (data) {\n        _this.sortData = data;\n      });\n      this.$sorter.loadData();\n    },\n\n\n    // setup app routes\n    setupRoutes: function setupRoutes() {\n      var _this2 = this;\n\n      // page routes\n      this.$router.on('/', function () {\n        _this2.showPage('TokenList', 'Price List');\n      });\n      this.$router.on('/news', function () {\n        _this2.showPage('NewsPage', 'Twitter News');\n      });\n      this.$router.on('/trade', function () {\n        _this2.showPage('TradePage', 'Trade Bot');\n      });\n      // modal routes\n      this.$router.on('/history', function () {\n        _this2.showModal('HistoryPage', 'Recent Alert History');\n      });\n      this.$router.on('/alarms', function () {\n        _this2.showModal('AlarmsList', 'Saved Price Alarms');\n      });\n      this.$router.on('/about', function () {\n        _this2.showModal('AboutPage', 'About This App');\n      });\n      this.$router.on('/options', function () {\n        _this2.showModal('OptionsPage', 'Options & Settings');\n      });\n      // symbol modal route\n      this.$router.on('/symbol/([A-Z]+)', function (symbol) {\n        var d = _this2.priceData.filter(function (p) {\n          return p.symbol === symbol;\n        }).shift();\n        if (d) return _this2.showModal('TokenPage', d.pair + ' Info ', d);\n        _this2.$router.setRoute('/');\n      });\n    },\n\n\n    // set a url hash route\n    setRoute: function setRoute(route) {\n      this.$router.setRoute(route);\n    },\n\n\n    // setup global event bus handlers\n    setupGlobalHandlers: function setupGlobalHandlers() {\n      this.$bus.on('setTitle', this.setTitle);\n      this.$bus.on('setRoute', this.setRoute);\n      this.$bus.on('showModal', this.showModal);\n      this.$bus.on('closeModal', this.closeModal);\n      this.$bus.on('showNotice', this.showNotice);\n      this.$bus.on('handleClick', this.handleClick);\n    },\n\n\n    // setup alarms class handlers\n    setupAlarmsHandlers: function setupAlarmsHandlers() {\n      var _this3 = this;\n\n      this.$alarms.on('update', function (data) {\n        _this3.alarmsData = data;\n      });\n      this.$alarms.loadData();\n    },\n\n\n    // setup history class handlers\n    setupHistoryHandlers: function setupHistoryHandlers() {\n      var _this4 = this;\n\n      this.$history.on('update', function (data) {\n        _this4.historyData = data;\n      });\n      this.$history.loadData();\n    },\n\n\n    // setup twitter news handlers\n    setupNewsHandlers: function setupNewsHandlers() {\n      var _this5 = this;\n\n      this.$news.useAjax(this.$ajax);\n      this.$news.on('error', function (err) {\n        console.warn(err);\n      });\n      this.$news.on('handlers', function (data) {\n        _this5.newsHandlers = data;\n      });\n      this.$news.on('tweets', function (data) {\n        _this5.newsEntries = data;\n      });\n    },\n\n\n    // setup msg queue to go off on a timer\n    setupMessengerHandlers: function setupMessengerHandlers() {\n      var _this6 = this;\n\n      this.$messenger.useAjax(this.$ajax);\n      this.$messenger.on('sent', function (info) {\n        _this6.showNotice(info, 'info');\n      });\n      this.$messenger.start();\n    },\n\n\n    // setup scroller handlers\n    setupScrollHandlers: function setupScrollHandlers() {\n      var _this7 = this;\n\n      this.$scroller.on('scroll', function (pos) {\n        _this7.onScrollChange('scroll', pos);\n      });\n      this.$scroller.on('down', function (pos) {\n        _this7.onScrollChange('down', pos);\n      });\n      this.$scroller.on('up', function (pos) {\n        _this7.onScrollChange('up', pos);\n      });\n    },\n\n\n    // setup binance live ticker data handlers\n    setupTickerHandlers: function setupTickerHandlers() {\n      var _this8 = this;\n\n      this.$binance.useAjax(this.$ajax);\n      this.$binance.on('sock_fail', this.onSockFail);\n      this.$binance.on('ticker_init', this.onTickerInit);\n      this.$binance.on('ticker_fail', this.onTickerFail);\n      this.$binance.on('ticker_error', this.onTickerError);\n      this.$binance.on('ticker_close', this.onTickerClose);\n      this.$binance.on('ticker_open', this.onTickerOpen);\n      this.$binance.on('ticker_data', this.onTickerData);\n      this.$binance.on('ticker_prices', this.onTickerPrices);\n      this.$binance.on('assets', function (assets) {\n        _this8.assetsList = assets;\n      });\n      this.$binance.startTickerStream(true);\n    },\n\n\n    // when scroll position updates\n    onScrollChange: function onScrollChange(dir, pos) {\n      if (dir === 'scroll') {\n        this.header.opaque = pos > 10;\n      }\n      if (dir === 'down') {\n        this.header.collapsed = true;\n      }\n      if (dir === 'up') {\n        this.header.collapsed = false;\n      }\n    },\n\n\n    // show socket related notifications\n    tickerNotify: function tickerNotify(title, message) {\n      if (document.hasFocus()) return;\n      var d = new Date();\n      this.$notify.add(title, message + ' \\nNow: ' + d.toLocaleString());\n    },\n\n\n    // on socket init fail\n    onSockFail: function onSockFail(error) {\n      this.tickerStatus = 0;\n      this.showNotice(error, 'error');\n    },\n\n\n    // on socket conenction attempt\n    onTickerInit: function onTickerInit(time) {\n      this.tickerStatus = 0;\n      this.tickerStart = time;\n    },\n\n\n    // on socket failure to start\n    onTickerFail: function onTickerFail(error) {\n      this.tickerStatus = 0;\n      this.showNotice(error, 'error');\n    },\n\n\n    // when socket connection ends\n    onTickerError: function onTickerError(e) {\n      var info = String(e.message || 'Price ticker API connection failed, check the console for more details.');\n      this.tickerStatus = 0;\n      this.tickerNotify('Ticker Error', info);\n      this.showNotice(info, 'error');\n    },\n\n\n    // when socket connection ends\n    onTickerClose: function onTickerClose(e) {\n      this.tickerStatus = 0;\n      this.$bus.emit('toggleWatchform', 'stop');\n      this.$bus.emit('toggleTradeBot', 'stop');\n    },\n\n\n    // when socket connection opens\n    onTickerOpen: function onTickerOpen(e) {\n      this.tickerStatus = 1;\n      this.tickerStart = Date.now();\n    },\n\n\n    // when socket connection has data\n    onTickerData: function onTickerData(data) {\n      this.tickerStatus = 2;\n    },\n\n\n    // updates price data list from socket on an interval\n    onTickerPrices: function onTickerPrices(prices) {\n      for (var i = 0; i < prices.length; ++i) {\n        var p = prices[i];\n        p.alarms = this.$alarms.getCount(p.symbol);\n        this.updateModalPairData(p);\n        this.checkPairAlarms(p);\n      }\n      var secs = (Date.now() - this.tickerStart) / 1000;\n      this.tickerTime = this.$utils.elapsed(secs, '', true);\n      this.priceData = prices;\n    },\n\n\n    // check if alarms need to go off for a pair\n    checkPairAlarms: function checkPairAlarms(pair) {\n      var _this9 = this;\n\n      this.$alarms.check(pair.symbol, pair.close, function (title, info, a) {\n        var icon = _this9.$utils.fullUrl(a.image);\n        _this9.$notify.add(title, info, icon, function (e) {\n          _this9.setRoute('/history');\n        });\n        _this9.$messenger.add(title, info, icon);\n        _this9.$history.add(title, info, icon);\n      });\n    },\n\n\n    // build page title\n    setTitle: function setTitle(info) {\n      var title = String(info || '').trim();\n      var list = [this.title];\n      if (title) list.unshift(title);\n      document.title = list.join(' | ');\n    },\n\n\n    // handler for click events passed through the event bus\n    handleClick: function handleClick() {\n      var args = Array.from(arguments);\n      var action = args.length ? args.shift() : '';\n      var dest = args.length ? args.shift() : '';\n      var target = args.length ? args.shift() : '_blank';\n\n      if (action === 'scroll') return this.$scroller.jumpTo(dest);\n      if (action === 'link') return window.open(dest, target);\n      if (action === 'reload') return window.location.reload();\n      if (action === 'return') return window.history.back();\n\n      if (action === 'binance') {\n        var symb = /\\?/g.test(dest) ? '&' : '?';\n        var base = 'https://www.binance.com' + dest + symb + 'ref=' + this.refid;\n        return window.open(base, target);\n      }\n    },\n\n\n    // change visible page component\n    showPage: function showPage(component, title) {\n      this.closeModal();\n      this.$bus.emit('toggleWatchform', 'close');\n      this.setTitle(title || component);\n      this.mainComp = component;\n    },\n\n\n    // show modal window\n    showModal: function showModal(component, title, data) {\n      if (!this.$refs.modal) return;\n      title = title || component;\n      this.setTitle(title);\n      this.modalComp = component;\n      this.modalData = data;\n      this.$refs.modal.show(title);\n    },\n\n\n    // update pair data inside modals\n    updateModalPairData: function updateModalPairData(pair) {\n      if (!this.modalData || !this.modalData.symbol) return;\n      if (!pair || !pair.symbol || this.modalData.symbol !== pair.symbol) return;\n      this.modalData = pair;\n    },\n\n\n    // close modal window, if open\n    closeModal: function closeModal() {\n      if (!this.$refs.modal) return;\n      this.$refs.modal.close();\n    },\n\n\n    // on modal close event\n    modalDone: function modalDone() {\n      this.modalComp = '';\n      this.modalData = {};\n      window.history.back();\n    },\n\n\n    // show css alert\n    showNotice: function showNotice(message, type, timeout) {\n      if (!this.$refs.notify) return;\n      this.$refs.notify.show(message, type, timeout);\n    },\n\n\n    // fetch wordlist files for sentiment analysis\n    fetchSentimentWords: function fetchSentimentWords() {\n      var _this10 = this;\n\n      Array('words').forEach(function (file) {\n        _this10.$ajax.get('public/afinn/' + file + '.json', {\n          type: 'json',\n          proxy: false,\n          success: function success(xhr, status, words) {\n            return _this10.$sentiment.merge(words);\n          }\n        });\n      });\n    },\n\n\n    // fetch list of all tokens and their names from API\n    fetchCoinsData: function fetchCoinsData() {\n      var _this11 = this;\n\n      this.$ajax.get('https://coincap.io/map', {\n        type: 'json',\n        proxy: false,\n        done: function done(xhr, status, list) {\n          if (!list || !Array.isArray(list)) return;\n          var data = {};\n          for (var i = 0; i < list.length; ++i) {\n            var token = String(list[i].symbol || '').toUpperCase();\n            var name = String(list[i].name || '').replace(/[^\\w\\.\\-]+/g, ' ').replace(/[\\.]+/g, '.').replace(/[\\-]+/g, '-').replace(/[\\n\\r\\t\\s]+/g, ' ').trim();\n            if (token === 'BCH') token = 'BCC';\n            if (token === 'MIOTA') token = 'IOTA';\n            if (token === 'YOYO') token = 'YOYOW';\n            if (token && name) data[token] = name;\n          }\n          _this11.$binance.setNames(data);\n          _this11.coinsData = data;\n        }\n      });\n    },\n\n\n    // hide initial page spinner\n    hideInitSpinner: function hideInitSpinner() {\n      var spinner = document.querySelector('#_spnr');\n      if (spinner) spinner.style.display = 'none';\n    }\n  },\n\n  // on component created\n  created: function created() {\n    this.setupOptionsHandlers();\n    this.setupSorterHandlers();\n    this.setupGlobalHandlers();\n    this.setupTickerHandlers();\n    this.setupAlarmsHandlers();\n    this.setupHistoryHandlers();\n    this.setupNewsHandlers();\n    this.setupMessengerHandlers();\n    this.setupScrollHandlers();\n    this.setupRoutes();\n  },\n\n\n  // on component mounted\n  mounted: function mounted() {\n    this.$router.trigger(window.location.hash || '/');\n    this.fetchSentimentWords();\n    this.fetchCoinsData();\n    this.hideInitSpinner();\n  },\n\n\n  // on component destroyed\n  destroyed: function destroyed() {\n    this.$binance.stopTickerStream();\n    this.$news.stopTimer();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Dropdown_vue__ = __webpack_require__(5);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Dropdown: __WEBPACK_IMPORTED_MODULE_0__Dropdown_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    header: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    options: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    priceData: { type: Array, default: function _default() {\n        return [];\n      }\n    },\n    historyData: { type: Array, default: function _default() {\n        return [];\n      }\n    },\n    alarmsData: { type: Array, default: function _default() {\n        return [];\n      }\n    },\n    newsEntries: { type: Array, default: function _default() {\n        return [];\n      }\n    },\n    tickerStatus: { type: Number, default: 0 },\n    tickerTime: { type: String, default: '' }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      watching: false\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // compute number of active alarms for all tokens\n    alarmsCount: function alarmsCount() {\n      return this.alarmsData.filter(function (e) {\n        return e.active;\n      }).length | 0;\n    },\n\n\n    // compute number of \"new\" history entries\n    historyCount: function historyCount() {\n      return this.historyData.filter(function (e) {\n        return e.isNew;\n      }).length | 0;\n    },\n\n\n    // compute number of \"new\" news entries\n    newsCount: function newsCount() {\n      return this.newsEntries.filter(function (e) {\n        return e.isNew;\n      }).length | 0;\n    },\n\n\n    // check if alert button should be visible\n    hasBubble: function hasBubble() {\n      return this.historyCount || this.newsCount;\n    },\n\n\n    // get top 3 usdt coins based on volume\n    assetPrices: function assetPrices() {\n      var asset = 'USDT';\n      var list = this.priceData.filter(function (p) {\n        return p.asset === asset;\n      });\n      return this.$utils.sort(list, 'assetVolume', 'desc').slice(0, 3);\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // set app url route\n    setRoute: function setRoute(route) {\n      this.$router.setRoute(route);\n    },\n\n\n    // toggle socket connection\n    toggleConnection: function toggleConnection() {\n      if (this.tickerStatus) {\n        this.$binance.stopTickerStream();\n      } else {\n        this.$binance.startTickerStream(true);\n      }\n    }\n  },\n\n  // on component created\n  created: function created() {\n    var _this = this;\n\n    this.$bus.on('priceWatch', function (status) {\n      _this.watching = status;\n    });\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      visible: false,\n      top: true,\n      right: false,\n      bottom: false,\n      left: true\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show dropdown\n    listShow: function listShow(e) {\n      if (this.visible || !this.$refs.trigger) return;\n      var pos = this.$utils.boxPosition(this.$refs.trigger);\n      this.top = pos.top;\n      this.right = pos.right;\n      this.bottom = pos.bottom;\n      this.left = pos.left;\n      this.visible = true;\n    },\n\n\n    // hide dropdown\n    listHide: function listHide(e) {\n      this.visible = false;\n    },\n\n\n    // detect click outside container\n    _clickOut: function _clickOut(e) {\n      if (!this.$refs.menu.contains(e.target)) {\n        this.listHide(e);\n      }\n    }\n  },\n\n  // comonent mounted\n  mounted: function mounted() {\n    document.addEventListener('click', this._clickOut);\n  },\n\n\n  // comonent destroyed\n  destroyed: function destroyed() {\n    document.removeEventListener('click', this._clickOut);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvRHJvcGRvd24udnVlPzJhYjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTs7QUFFQTtBQUNBLE1BSEEsa0JBR0E7QUFDQTtBQUNBLG9CQURBO0FBRUEsZUFGQTtBQUdBLGtCQUhBO0FBSUEsbUJBSkE7QUFLQTtBQUxBO0FBT0EsR0FYQTs7O0FBYUE7QUFDQTs7QUFFQTtBQUNBLFlBSEEsb0JBR0EsQ0FIQSxFQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQVhBOzs7QUFhQTtBQUNBLFlBZEEsb0JBY0EsQ0FkQSxFQWNBO0FBQ0E7QUFDQSxLQWhCQTs7O0FBa0JBO0FBQ0EsYUFuQkEscUJBbUJBLENBbkJBLEVBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF2QkEsR0FkQTs7QUF5Q0E7QUFDQSxTQTFDQSxxQkEwQ0E7QUFDQTtBQUNBLEdBNUNBOzs7QUE4Q0E7QUFDQSxXQS9DQSx1QkErQ0E7QUFDQTtBQUNBO0FBakRBIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbWVudVwiIHJlZj1cIm1lbnVcIiBAbW91c2VsZWF2ZT1cImxpc3RIaWRlXCI+XG4gICAgPGRpdiBjbGFzcz1cImRyb3Bkb3duLXRyaWdnZXIgY2xpY2thYmxlXCIgcmVmPVwidHJpZ2dlclwiIEBjbGljaz1cImxpc3RTaG93XCI+XG4gICAgICA8c2xvdCBuYW1lPVwidHJpZ2dlclwiPjwvc2xvdD5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tY29udGFpbmVyXCIgOmNsYXNzPVwieyAndmlzaWJsZSc6IHZpc2libGUsICd0b3AnOiB0b3AsICdyaWdodCc6IHJpZ2h0LCAnYm90dG9tJzogYm90dG9tLCAnbGVmdCc6IGxlZnQgfVwiIEBjbGljay5zdG9wPlxuICAgICAgPHNsb3QgbmFtZT1cImxpc3RcIj48L3Nsb3Q+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbi8vIGNvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIGNvbXBvbmVudCBkYXRhXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgdG9wOiB0cnVlLFxuICAgICAgcmlnaHQ6IGZhbHNlLFxuICAgICAgYm90dG9tOiBmYWxzZSxcbiAgICAgIGxlZnQ6IHRydWUsXG4gICAgfVxuICB9LFxuXG4gIC8vIGN1c3RvbSBtZXRob2RzXG4gIG1ldGhvZHM6IHtcblxuICAgIC8vIHNob3cgZHJvcGRvd25cbiAgICBsaXN0U2hvdyggZSApIHtcbiAgICAgIGlmICggdGhpcy52aXNpYmxlIHx8ICF0aGlzLiRyZWZzLnRyaWdnZXIgKSByZXR1cm47XG4gICAgICBsZXQgcG9zICAgICAgPSB0aGlzLiR1dGlscy5ib3hQb3NpdGlvbiggdGhpcy4kcmVmcy50cmlnZ2VyICk7XG4gICAgICB0aGlzLnRvcCAgICAgPSBwb3MudG9wO1xuICAgICAgdGhpcy5yaWdodCAgID0gcG9zLnJpZ2h0O1xuICAgICAgdGhpcy5ib3R0b20gID0gcG9zLmJvdHRvbTtcbiAgICAgIHRoaXMubGVmdCAgICA9IHBvcy5sZWZ0O1xuICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLy8gaGlkZSBkcm9wZG93blxuICAgIGxpc3RIaWRlKCBlICkge1xuICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIGRldGVjdCBjbGljayBvdXRzaWRlIGNvbnRhaW5lclxuICAgIF9jbGlja091dCggZSApIHtcbiAgICAgIGlmICggIXRoaXMuJHJlZnMubWVudS5jb250YWlucyggZS50YXJnZXQgKSApIHtcbiAgICAgICAgdGhpcy5saXN0SGlkZSggZSApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgfSxcblxuICAvLyBjb21vbmVudCBtb3VudGVkXG4gIG1vdW50ZWQoKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgdGhpcy5fY2xpY2tPdXQgKTtcbiAgfSxcblxuICAvLyBjb21vbmVudCBkZXN0cm95ZWRcbiAgZGVzdHJveWVkKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjbGljaycsIHRoaXMuX2NsaWNrT3V0ICk7XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nc2Nzcyc+XG4uZHJvcGRvd24tbWVudSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcblxuICAuZHJvcGRvd24tdHJpZ2dlciB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuXG4gIC5kcm9wZG93bi1jb250YWluZXIge1xuICAgIEBpbmNsdWRlIGNvbW1vbkRyb3Bkb3duO1xuICAgIHBhZGRpbmc6ICRwYWRTcGFjZSAwO1xuICAgIG1pbi13aWR0aDogMjQwcHg7XG4gICAgbWF4LXdpZHRoOiA0MjBweDtcblxuICAgICYgPiB1bCB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBwYWRkaW5nOiAwO1xuXG4gICAgICAvLyBkcm9wZG93biBsaXN0IGl0ZW1cbiAgICAgICYgPiBsaSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cbiAgICAgICAgJi5oZWFkaW5nIHtcbiAgICAgICAgICBtYXJnaW46IDAgMCAkcGFkU3BhY2UgMDtcbiAgICAgICAgICBwYWRkaW5nOiAwICRwYWRTcGFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgICYuY2xpY2thYmxlIHtcbiAgICAgICAgICBwYWRkaW5nOiAoICRwYWRTcGFjZSAvIDIgKSAoICRwYWRTcGFjZSAqIDEuNiApO1xuICAgICAgICAgIGJvcmRlci10b3A6ICggJGxpbmVXaWR0aCAvIDIgKSAkbGluZVN0eWxlICRsaW5lQ29sb3I7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogKCAkbGluZVdpZHRoIC8gMiApICRsaW5lU3R5bGUgJGxpbmVDb2xvcjtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCBibGFjaywgMCApO1xuXG4gICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCBibGFjaywgMC4xICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQge1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3gtc2hhZG93OiBub25lO1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      title: '',\n      visible: false,\n      under: true,\n      sto: null\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show the modal window\n    show: function show(title) {\n      if (this.visible) return;\n      this.$emit('onShow');\n      this.title = title || 'Modal Window';\n      this.under = false;\n      this.visible = true;\n    },\n\n\n    // close the modal\n    close: function close(e) {\n      if (!this.visible) return;\n      if (this.sto) clearTimeout(this.sto);\n      this.sto = setTimeout(this.onDone, 400);\n      this.$emit('onClose', e);\n      this.visible = false;\n    },\n\n\n    // when the modal is done animating out\n    onDone: function onDone(e) {\n      if (this.under) return;\n      this.$emit('onDone', e);\n      this.under = true;\n    },\n\n\n    // check for escape key\n    onKey: function onKey(e) {\n      if (e.keyCode !== 27) return;\n      this.close(e);\n    }\n  },\n\n  // on destroyed\n  destroyed: function destroyed() {\n    document.removeEventListener('keydown', this.onKey);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlPzAwODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBZUE7QUFDQTs7QUFFQTtBQUNBLE1BSEEsa0JBR0E7QUFDQTtBQUNBLGVBREE7QUFFQSxvQkFGQTtBQUdBLGlCQUhBO0FBSUE7QUFKQTtBQU1BLEdBVkE7OztBQVlBO0FBQ0E7O0FBRUE7QUFDQSxRQUhBLGdCQUdBLEtBSEEsRUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQVRBOzs7QUFXQTtBQUNBLFNBWkEsaUJBWUEsQ0FaQSxFQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBbEJBOzs7QUFvQkE7QUFDQSxVQXJCQSxrQkFxQkEsQ0FyQkEsRUFxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQXpCQTs7O0FBMkJBO0FBQ0EsU0E1QkEsaUJBNEJBLENBNUJBLEVBNEJBO0FBQ0E7QUFDQTtBQUNBO0FBL0JBLEdBYkE7O0FBK0NBO0FBQ0EsV0FoREEsdUJBZ0RBO0FBQ0E7QUFDQTtBQWxEQSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLW92ZXJsYXlcIiA6Y2xhc3M9XCJ7ICd2aXNpYmxlJzogdmlzaWJsZSwgJ3VuZGVyJzogdW5kZXIgfVwiIEBjbGljay5zdG9wPVwiY2xvc2VcIj5cbiAgICA8c2VjdGlvbiBjbGFzcz1cIm1vZGFsLWNvbnRhaW5lclwiIHJlZj1cImNvbnRhaW5lclwiIEBjbGljay5zdG9wPlxuICAgICAgPGhlYWRlciBjbGFzcz1cImZsZXgtcm93IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaCBwYWQtYWxsIGJvcmRlci1ib3R0b21cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSB0ZXh0LWNsaXAgdGV4dC1icmlnaHRcIj57eyB0aXRsZSB9fTwvZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGV4dC1kYW5nZXItaG92ZXIgaWNvbi1jbG9zZVwiIEBjbGljay5zdG9wPVwiY2xvc2VcIj48L2J1dHRvbj5cbiAgICAgIDwvaGVhZGVyPlxuICAgICAgPG1haW4gY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgIDwvbWFpbj5cbiAgICA8L3NlY3Rpb24+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbi8vIGNvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIGNvbXBvbmVudCBkYXRhXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlOiAnJyxcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgdW5kZXI6IHRydWUsXG4gICAgICBzdG86IG51bGwsXG4gICAgfVxuICB9LFxuXG4gIC8vIGN1c3RvbSBtZXRob2RzXG4gIG1ldGhvZHM6IHtcblxuICAgIC8vIHNob3cgdGhlIG1vZGFsIHdpbmRvd1xuICAgIHNob3coIHRpdGxlICkge1xuICAgICAgaWYgKCB0aGlzLnZpc2libGUgKSByZXR1cm47XG4gICAgICB0aGlzLiRlbWl0KCAnb25TaG93JyApO1xuICAgICAgdGhpcy50aXRsZSA9IHRpdGxlIHx8ICdNb2RhbCBXaW5kb3cnO1xuICAgICAgdGhpcy51bmRlciA9IGZhbHNlO1xuICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLy8gY2xvc2UgdGhlIG1vZGFsXG4gICAgY2xvc2UoIGUgKSB7XG4gICAgICBpZiAoICF0aGlzLnZpc2libGUgKSByZXR1cm47XG4gICAgICBpZiAoIHRoaXMuc3RvICkgY2xlYXJUaW1lb3V0KCB0aGlzLnN0byApO1xuICAgICAgdGhpcy5zdG8gPSBzZXRUaW1lb3V0KCB0aGlzLm9uRG9uZSwgNDAwICk7XG4gICAgICB0aGlzLiRlbWl0KCAnb25DbG9zZScsIGUgKTtcbiAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyB3aGVuIHRoZSBtb2RhbCBpcyBkb25lIGFuaW1hdGluZyBvdXRcbiAgICBvbkRvbmUoIGUgKSB7XG4gICAgICBpZiAoIHRoaXMudW5kZXIgKSByZXR1cm47XG4gICAgICB0aGlzLiRlbWl0KCAnb25Eb25lJywgZSApO1xuICAgICAgdGhpcy51bmRlciA9IHRydWU7XG4gICAgfSxcblxuICAgIC8vIGNoZWNrIGZvciBlc2NhcGUga2V5XG4gICAgb25LZXkoIGUgKSB7XG4gICAgICBpZiAoIGUua2V5Q29kZSAhPT0gMjcgKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlKCBlICk7XG4gICAgfSxcbiAgfSxcblxuICAvLyBvbiBkZXN0cm95ZWRcbiAgZGVzdHJveWVkKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcy5vbktleSApO1xuICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPSdzY3NzJz5cbi8vIG1vZGFsIG92ZXJsYXlcbi5tb2RhbC1vdmVybGF5IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JPdmVybGF5O1xuICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgb3BhY2l0eTogMDtcbiAgei1pbmRleDogKCAkemluZGV4TW9kYWxzIC0gMSApO1xuXG4gIC5tb2RhbC1jb250YWluZXIge1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIHdpZHRoOiBjYWxjKCAxMDAlIC0gKCAjeyRwYWRTcGFjZX0gKiAyICkgKTtcbiAgICBtYXgtd2lkdGg6IGNhbGMoICN7JHNpemVNZWRpdW19ICsgKCAjeyRwYWRTcGFjZX0gKiAyICkgKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JEb2N1bWVudExpZ2h0O1xuICAgIGJvcmRlci1yYWRpdXM6ICRsaW5lSm9pbjtcbiAgICBib3gtc2hhZG93OiAkc2hhZG93Qm9sZDtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKCAwLjUgKTtcblxuICAgIC5tb2RhbC1ib2R5IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICBtYXJnaW46ICRwYWRTcGFjZSAwO1xuICAgICAgcGFkZGluZzogMCAkcGFkU3BhY2U7XG4gICAgICBtaW4taGVpZ2h0OiAxMDBweDtcbiAgICAgIG1heC1oZWlnaHQ6IGNhbGMoIDEwMHZoIC0gMTUwcHggKTtcbiAgICB9XG4gIH1cbn1cbi8vIHZpc2libGUgc3RhdGVcbi5tb2RhbC1vdmVybGF5LnZpc2libGUge1xuICBvcGFjaXR5OiAxO1xuICAubW9kYWwtY29udGFpbmVyIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKCAxICk7XG4gIH1cbn1cbi8vIGluYWN0aXZlIHN0YXRlXG4ubW9kYWwtb3ZlcmxheS51bmRlciB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB6LWluZGV4OiAkemluZGV4VW5kZXI7XG59XG48L3N0eWxlPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL01vZGFsLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component data\n  data: function data() {\n    return {\n      alerts: []\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show new alert, types: (success, error, warning, info)\n    show: function show(message, type, timeout) {\n      var _this = this;\n\n      message = String(message || 'No message available.');\n      type = String(type || 'info');\n      timeout = Number(!timeout && type !== 'error' ? 5000 : timeout) || 0;\n\n      var id = this.$utils.randString(20);\n      var sto = timeout ? setTimeout(function () {\n        return _this.close(id);\n      }, timeout) : 0;\n      var closed = false;\n\n      if (this.alerts.length >= 5) {\n        var a = this.alerts.pop();\n        if (a.sto) clearTimeout(a.sto);\n        this.remove(a.id);\n      }\n      this.alerts.push({ id: id, message: message, type: type, timeout: timeout, sto: sto, closed: closed });\n    },\n\n\n    // close alert by id\n    close: function close(id) {\n      var _this2 = this;\n\n      this.alerts.forEach(function (a, i) {\n        if (a.id !== id) return;\n        a.closed = true; // animate out, then...\n        setTimeout(function () {\n          return _this2.remove(id);\n        }, 500);\n      });\n    },\n\n\n    // remove lert from the list\n    remove: function remove(id) {\n      this.alerts = this.alerts.filter(function (a) {\n        return a.id !== id;\n      });\n    },\n\n\n    // alias\n    info: function info(message, timeout) {\n      this.show(message, 'info', timeout);\n    },\n\n\n    // alias\n    success: function success(message, timeout) {\n      this.show(message, 'success', timeout);\n    },\n\n\n    // alias\n    warning: function warning(message, timeout) {\n      this.show(message, 'warning', timeout);\n    },\n\n\n    // alias\n    error: function error(message, timeout) {\n      this.show(message, 'error', timeout);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTm90aWZ5LnZ1ZT83OWI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQTtBQUNBOztBQUVBO0FBQ0EsTUFIQSxrQkFHQTtBQUNBO0FBQ0E7QUFEQTtBQUdBLEdBUEE7OztBQVNBO0FBQ0E7O0FBRUE7QUFDQSxRQUhBLGdCQUdBLE9BSEEsRUFHQSxJQUhBLEVBR0EsT0FIQSxFQUdBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FsQkE7OztBQW9CQTtBQUNBLFNBckJBLGlCQXFCQSxFQXJCQSxFQXFCQTtBQUFBOztBQUNBO0FBQ0E7QUFDQSx3QkFGQSxDQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0EsT0FKQTtBQUtBLEtBM0JBOzs7QUE2QkE7QUFDQSxVQTlCQSxrQkE4QkEsRUE5QkEsRUE4QkE7QUFDQTtBQUFBO0FBQUE7QUFDQSxLQWhDQTs7O0FBa0NBO0FBQ0EsUUFuQ0EsZ0JBbUNBLE9BbkNBLEVBbUNBLE9BbkNBLEVBbUNBO0FBQ0E7QUFDQSxLQXJDQTs7O0FBdUNBO0FBQ0EsV0F4Q0EsbUJBd0NBLE9BeENBLEVBd0NBLE9BeENBLEVBd0NBO0FBQ0E7QUFDQSxLQTFDQTs7O0FBNENBO0FBQ0EsV0E3Q0EsbUJBNkNBLE9BN0NBLEVBNkNBLE9BN0NBLEVBNkNBO0FBQ0E7QUFDQSxLQS9DQTs7O0FBaURBO0FBQ0EsU0FsREEsaUJBa0RBLE9BbERBLEVBa0RBLE9BbERBLEVBa0RBO0FBQ0E7QUFDQTtBQXBEQTtBQVZBIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8c2VjdGlvbiBjbGFzcz1cIm5vdGlmeS13cmFwXCI+XG4gICAgPGRpdiB2LWZvcj1cImEgaW4gYWxlcnRzXCIgY2xhc3M9XCJub3RpZnktYWxlcnRcIiA6Y2xhc3M9XCJbICdub3RpZnktJyArIGEudHlwZSwgeyAnbm90aWZ5LWNsb3NlZCc6IGEuY2xvc2VkIH0gXVwiIDprZXk9XCJhLmlkXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cIm5vdGlmeS1tZXNzYWdlXCI+e3sgYS5tZXNzYWdlIH19PC9zcGFuPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cIm5vdGlmeS1jbG9zZSBpY29uLWNsb3NlXCIgQGNsaWNrLnN0b3A9XCJjbG9zZSggYS5pZCApXCI+PC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvc2VjdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4vLyBjb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb21wb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbGVydHM6IFtdLFxuICAgIH1cbiAgfSxcblxuICAvLyBjdXN0b20gbWV0aG9kc1xuICBtZXRob2RzOiB7XG5cbiAgICAvLyBzaG93IG5ldyBhbGVydCwgdHlwZXM6IChzdWNjZXNzLCBlcnJvciwgd2FybmluZywgaW5mbylcbiAgICBzaG93KCBtZXNzYWdlLCB0eXBlLCB0aW1lb3V0ICkge1xuICAgICAgbWVzc2FnZSAgICA9IFN0cmluZyggbWVzc2FnZSB8fCAnTm8gbWVzc2FnZSBhdmFpbGFibGUuJyApO1xuICAgICAgdHlwZSAgICAgICA9IFN0cmluZyggdHlwZSB8fCAnaW5mbycgKTtcbiAgICAgIHRpbWVvdXQgICAgPSBOdW1iZXIoICggIXRpbWVvdXQgJiYgdHlwZSAhPT0gJ2Vycm9yJyApID8gNTAwMCA6IHRpbWVvdXQgKSB8fCAwO1xuXG4gICAgICBsZXQgaWQgICAgID0gdGhpcy4kdXRpbHMucmFuZFN0cmluZyggMjAgKTtcbiAgICAgIGxldCBzdG8gICAgPSB0aW1lb3V0ID8gc2V0VGltZW91dCggKCkgPT4gdGhpcy5jbG9zZSggaWQgKSwgdGltZW91dCApIDogMDtcbiAgICAgIGxldCBjbG9zZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKCB0aGlzLmFsZXJ0cy5sZW5ndGggPj0gNSApIHtcbiAgICAgICAgbGV0IGEgPSB0aGlzLmFsZXJ0cy5wb3AoKTtcbiAgICAgICAgaWYgKCBhLnN0byApIGNsZWFyVGltZW91dCggYS5zdG8gKTtcbiAgICAgICAgdGhpcy5yZW1vdmUoIGEuaWQgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWxlcnRzLnB1c2goIHsgaWQsIG1lc3NhZ2UsIHR5cGUsIHRpbWVvdXQsIHN0bywgY2xvc2VkIH0gKTtcbiAgICB9LFxuXG4gICAgLy8gY2xvc2UgYWxlcnQgYnkgaWRcbiAgICBjbG9zZSggaWQgKSB7XG4gICAgICB0aGlzLmFsZXJ0cy5mb3JFYWNoKCAoIGEsIGkgKSA9PiB7XG4gICAgICAgIGlmICggYS5pZCAhPT0gaWQgKSByZXR1cm47XG4gICAgICAgIGEuY2xvc2VkID0gdHJ1ZTsgLy8gYW5pbWF0ZSBvdXQsIHRoZW4uLi5cbiAgICAgICAgc2V0VGltZW91dCggKCkgPT4gdGhpcy5yZW1vdmUoIGlkICksIDUwMCApO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIHJlbW92ZSBsZXJ0IGZyb20gdGhlIGxpc3RcbiAgICByZW1vdmUoIGlkICkge1xuICAgICAgdGhpcy5hbGVydHMgPSB0aGlzLmFsZXJ0cy5maWx0ZXIoIGEgPT4gKCBhLmlkICE9PSBpZCApICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgaW5mbyggbWVzc2FnZSwgdGltZW91dCApIHtcbiAgICAgIHRoaXMuc2hvdyggbWVzc2FnZSwgJ2luZm8nLCB0aW1lb3V0ICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgc3VjY2VzcyggbWVzc2FnZSwgdGltZW91dCApIHtcbiAgICAgIHRoaXMuc2hvdyggbWVzc2FnZSwgJ3N1Y2Nlc3MnLCB0aW1lb3V0ICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgd2FybmluZyggbWVzc2FnZSwgdGltZW91dCApIHtcbiAgICAgIHRoaXMuc2hvdyggbWVzc2FnZSwgJ3dhcm5pbmcnLCB0aW1lb3V0ICk7XG4gICAgfSxcblxuICAgIC8vIGFsaWFzXG4gICAgZXJyb3IoIG1lc3NhZ2UsIHRpbWVvdXQgKSB7XG4gICAgICB0aGlzLnNob3coIG1lc3NhZ2UsICdlcnJvcicsIHRpbWVvdXQgKTtcbiAgICB9LFxuXG4gIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9J3Njc3MnPlxuLm5vdGlmeS13cmFwIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6ICRzaXplTWVkaXVtO1xuICBwYWRkaW5nOiAwICRwYWRTcGFjZTtcbiAgbGVmdDogNTAlO1xuICBib3R0b206IDA7XG4gIHRyYW5zaXRpb246IG5vbmU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCggLTUwJSApO1xuICB6LWluZGV4OiAkemluZGV4QWxlcnRzO1xuXG4gIC5ub3RpZnktYWxlcnQge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgICBtYXJnaW46IDAgMCAkcGFkU3BhY2UgMDtcbiAgICBwYWRkaW5nOiAkcGFkU3BhY2UgKCAkcGFkU3BhY2UgKiAyICk7XG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JEZWZhdWx0O1xuICAgIGNvbG9yOiAkY29sb3JEZWZhdWx0VGV4dDtcbiAgICBib3JkZXItcmFkaXVzOiAkbGluZUpvaW47XG4gICAgYm94LXNoYWRvdzogJHNoYWRvd0JvbGQ7XG4gICAgYW5pbWF0aW9uOiB6b29tSW4gJGZ4U3BlZWQgJGZ4RWFzZSBmb3J3YXJkcztcblxuICAgICYubm90aWZ5LWNsb3NlZCB7XG4gICAgICBhbmltYXRpb246IHpvb21PdXQgJGZ4U3BlZWQgJGZ4RWFzZSBmb3J3YXJkcztcbiAgICB9XG4gICAgJi5ub3RpZnktc3VjY2VzcyB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3JTdWNjZXNzO1xuICAgICAgY29sb3I6ICRjb2xvclN1Y2Nlc3NUZXh0O1xuICAgIH1cbiAgICAmLm5vdGlmeS13YXJuaW5nIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcldhcm5pbmc7XG4gICAgICBjb2xvcjogJGNvbG9yV2FybmluZ1RleHQ7XG4gICAgfVxuICAgICYubm90aWZ5LWVycm9yIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvckRhbmdlcjtcbiAgICAgIGNvbG9yOiAkY29sb3JEYW5nZXJUZXh0O1xuICAgIH1cbiAgICAmLm5vdGlmeS1pbmZvIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvckluZm87XG4gICAgICBjb2xvcjogJGNvbG9ySW5mb1RleHQ7XG4gICAgfVxuICAgIC5ub3RpZnktbWVzc2FnZSB7XG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIH1cbiAgICAubm90aWZ5LWNsb3NlIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgIHRvcDogLTEwcHg7XG4gICAgICByaWdodDogLTEwcHg7XG4gICAgICB3aWR0aDogMmVtO1xuICAgICAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yQnJpZ2h0O1xuICAgICAgY29sb3I6ICRjb2xvckluZm87XG4gICAgICBib3JkZXItcmFkaXVzOiAxMDBweDtcbiAgICAgIGJveC1zaGFkb3c6ICRzaGFkb3dQYXBlcjtcblxuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbiggJGNvbG9yQnJpZ2h0LCAxMCUgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__configs_watchPresets__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_watcher__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SelectMenu_vue__ = __webpack_require__(9);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // sub components\n  components: { SelectMenu: __WEBPACK_IMPORTED_MODULE_2__SelectMenu_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    header: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    options: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    tickerStatus: { type: Number, default: 0, required: true },\n    priceData: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    assetsList: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      // display\n      visible: false,\n      overflow: false,\n      under: true,\n      sto: null,\n      // price watch\n      watcher: new __WEBPACK_IMPORTED_MODULE_1__modules_watcher__[\"a\" /* default */](),\n      countInfo: '...',\n      active: false,\n      start: 0,\n      elapsed: '0s',\n      // watchform options\n      watchPreset: '', // selected name\n      watchPresets: __WEBPACK_IMPORTED_MODULE_0__configs_watchPresets__[\"a\" /* default */],\n      watchOptions: {\n        asset: 'BTC', // asset pair\n        priceType: 'change', // change, gain, loss\n        priceChange: '2', // change percent\n        priceCheck: 'below', // above, below\n        price: '', // custom price limit\n        volumeType: 'gain', // change, gain, loss\n        volumeChange: '1', // change percent\n        volumeCheck: 'above', // above, below\n        volume: '', // custom volume limit\n        changeCheck: 'above', // above, below\n        change: '0', // custom 24h percent change\n        volatilityCheck: 'below', // above, below\n        volatility: '0', // custom volatility limit\n        dangerCheck: 'below', // above, below\n        danger: '0', // custom danger limit\n        timeCheck: 'less', // more, less\n        timeLimit: '10', // limit change by time (mins)\n        filterType: 'deny', // deny, allow\n        filterText: '' // csv tokens str\n      }\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // check prices when list updates, if enabled\n    priceData: function priceData() {\n      this.updateWatchCount();\n      this.checkPrices();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // build assets select options\n    assetOptions: function assetOptions() {\n      return this.assetsList.map(function (a) {\n        return { value: a, text: a + ' pairs' };\n      });\n    },\n\n\n    // get presets list\n    presetsList: function presetsList() {\n      var _this = this;\n\n      return this.watchPresets.map(function (p) {\n        p.active = _this.watchPreset === p.name ? true : false;\n        return p;\n      });\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // toggle open/close\n    toggle: function toggle(e) {\n      if (this.visible) {\n        this.close(e);\n      } else {\n        this.open(e);\n      }\n    },\n\n\n    // open from container\n    open: function open(e) {\n      var _this2 = this;\n\n      if (!this.$refs.watchform || this.visible) return;\n      // start open animation\n      this.visible = true;\n      this.overflow = false;\n      this.under = false;\n      var box = this.$refs.watchform.firstChild.getBoundingClientRect();\n      this.$refs.watchform.style.maxHeight = box.height + 'px';\n      // allow overflowing once it's open\n      if (this.sto) clearTimeout(this.sto);\n      this.sto = setTimeout(function () {\n        _this2.overflow = true;\n      }, 400);\n    },\n\n\n    // close from container\n    close: function close(e) {\n      var _this3 = this;\n\n      if (!this.$refs.watchform || !this.visible) return;\n      // start closing animation\n      this.visible = false;\n      this.overflow = false;\n      this.$refs.watchform.style.maxHeight = '0px';\n      // send to back once hidden\n      if (this.sto) clearTimeout(this.sto);\n      this.sto = setTimeout(function () {\n        _this3.under = true;\n      }, 400);\n    },\n\n\n    // only allow numbers for some form inputs\n    numInput: function numInput(e) {\n      this.watchOptions.price = String(this.watchOptions.price).replace(/[^\\d\\.\\-]+/g, '');\n      this.watchOptions.volume = String(this.watchOptions.volume).replace(/[^\\d\\.\\-]+/g, '');\n    },\n\n\n    // add a preset\n    addPreset: function addPreset(name, options) {\n      if (!name || this.watchPresets.filter(function (p) {\n        return p.name === name;\n      }).length) return;\n      options = Object.assign({}, this.watchOptions, options);\n      this.watchPresets.push({ name: name, options: options });\n    },\n\n\n    // remove preset\n    removePreset: function removePreset(name) {\n      if (!name) return;\n      this.watchPresets = this.watchPresets.filter(function (p) {\n        return p.name !== name;\n      });\n    },\n\n\n    // apply a preset\n    applyPreset: function applyPreset(name) {\n      var preset = name ? this.watchPresets.filter(function (p) {\n        return p.name === name;\n      }).shift() : null;\n      if (preset) {\n        this.watchPreset = preset.name;\n        this.watchOptions = Object.assign(this.watchOptions, preset.options);\n        this.buildSnapshot();\n        this.$notify.flush();\n      }\n    },\n\n\n    // reset some things when the form is changed while runnig\n    formChange: function formChange(e) {\n      this.watchPreset = '';\n      this.buildSnapshot();\n      this.$notify.flush();\n    },\n\n\n    // start price watch\n    startWatch: function startWatch() {\n      if (this.active || this.tickerStatus !== 2) return;\n      this.active = true;\n      this.elapsed = '0s';\n      this.buildSnapshot();\n      this.$bus.emit('priceWatch', this.active);\n      this.$bus.emit('showNotice', 'Price watch is now active.', 'success');\n    },\n\n\n    // stop price watch\n    stopWatch: function stopWatch() {\n      if (!this.active) return;\n      this.active = false;\n      this.$notify.flush();\n      this.$bus.emit('priceWatch', this.active);\n      this.$bus.emit('showNotice', 'Price watch has stopped.', 'warning');\n    },\n\n\n    // toggle price watch\n    toggleWatch: function toggleWatch(e) {\n      e && e.preventDefault();\n      if (this.active) {\n        this.stopWatch();\n      } else {\n        this.startWatch();\n      }\n    },\n\n\n    // control watchform component\n    toggleWatchform: function toggleWatchform(action) {\n      switch (action) {\n        case 'open':\n          return this.open();\n        case 'close':\n          return this.close();\n        case 'toggle':\n          return this.toggle();\n        case 'start':\n          return this.startWatch();\n        case 'stop':\n          return this.stopWatch();\n      }\n    },\n\n\n    // make a copy of current prices to start comparing against\n    buildSnapshot: function buildSnapshot() {\n      this.start = Date.now();\n      this.watcher.setOptions(this.watchOptions);\n      this.watcher.updateSnapshot(this.priceData);\n    },\n\n\n    // count total pairs for select option\n    updateWatchCount: function updateWatchCount() {\n      if (!this.visible) return;\n      var asset = String(this.watchOptions.asset || '');\n      var count = this.watcher.watchCount(this.priceData);\n      this.countInfo = this.$utils.noun(count, asset + ' pair', asset + ' pairs');\n      this.elapsed = this.$utils.elapsed((Date.now() - this.start) / 1000) || '0s';\n    },\n\n\n    // check current prices against snapshot based on options\n    checkPrices: function checkPrices() {\n      var _this4 = this;\n\n      if (!this.active) return;\n      this.watcher.check(this.priceData, function (p, pc, vc, t) {\n\n        var pricePerc = pc.sign + Number(pc.percent).toFixed(2) + '%';\n        var volPerc = vc.sign + Number(vc.percent).toFixed(2) + '%';\n        var curPrice = 'Price ' + pc.arrow + ' ' + pricePerc + ' (' + Number(p.close).toFixed(8) + ' ' + p.asset + ')';\n        var curVol = 'Volume ' + vc.arrow + ' ' + volPerc + ' (' + _this4.$utils.money(p.assetVolume, 0) + ' ' + p.asset + ')';\n        var curVolat = 'Volatility ● ' + Number(p.volatility).toFixed(1) + '% 24h';\n        var elapsed = 'Last ● ' + _this4.$utils.elapsed(t);\n        var title = [p.name, '(' + p.pair + ')', p.sign + Number(p.percent).toFixed(2) + '%'].join(' ');\n        var info = [curPrice, curVol, curVolat, elapsed].join('\\n');\n        var icon = _this4.$utils.fullUrl(p.image);\n\n        _this4.$notify.add(title, info, icon, function (e) {\n          _this4.$bus.emit('setRoute', p.route);\n        });\n        _this4.$messenger.add(title, info, icon);\n        _this4.$history.add(title, info, icon);\n      });\n    }\n  },\n\n  // on component created\n  created: function created() {\n    this.$bus.on('toggleWatchform', this.toggleWatchform);\n    window.addEventListener('resize', this.close);\n  },\n\n\n  // on component mounted\n  mounted: function mounted() {\n    this.buildSnapshot();\n  },\n\n\n  // on component destroyed\n  destroyed: function destroyed() {\n    window.removeEventListener('resize', this.close);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Class for watching price changes in ticker list\r\n */\nvar Watcher = function () {\n\n  /**\r\n   * Constructor\r\n   */\n  function Watcher() {\n    _classCallCheck(this, Watcher);\n\n    this._reg = null;\n    this._snapshot = {};\n    this._options = {\n      // pair\n      token: '', // token symbol\n      asset: 'BTC', // trading asset symbol\n      // price\n      priceType: 'change', // change, gain, loss\n      priceChange: '2', // change percent\n      priceCheck: 'below', // above, below\n      price: '', // custom price limit\n      // volume\n      volumeType: 'gain', // change, gain, loss\n      volumeChange: '1', // change percent\n      volumeCheck: 'above', // above, below\n      volume: '', // custom volume limit\n      // percent 24h\n      changeCheck: 'above', // above, below\n      change: '0', // custom 24h percent change\n      // volatility\n      volatilityCheck: 'below', // above, below\n      volatility: '0', // custom volatility limit\n      // danger\n      dangerCheck: 'below', // above, below\n      danger: '0', // custom danger limit\n      // time\n      timeCheck: 'less', // more, less\n      timeLimit: '10', // limit change by time (mins)\n      // filter\n      filterType: 'deny', // deny, allow\n      filterTokens: '' // csv tokens str\n    };\n  }\n\n  /**\r\n   * Set watch options\r\n   * @param {object}  options  New options\r\n   */\n\n\n  _createClass(Watcher, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this._options, options);\n      var search = String(this._options.filterTokens || '').trim().split(/[^a-zA-Z]+/g).join('|').toUpperCase();\n      this._reg = search ? new RegExp('^(' + search + ')$') : null;\n    }\n\n    /**\r\n     * Update snapshot price data\r\n     * @param {array}  tickerlist  Array list of Symbol objects\r\n     */\n\n  }, {\n    key: 'updateSnapshot',\n    value: function updateSnapshot(tickerlist) {\n      var checked = Date.now();\n      var tokenCheck = String(this._options.token || '');\n      var assetCheck = String(this._options.asset || '');\n      this._snapshot = {};\n\n      for (var i = 0; i < tickerlist.length; ++i) {\n        var _tickerlist$i = tickerlist[i],\n            symbol = _tickerlist$i.symbol,\n            token = _tickerlist$i.token,\n            asset = _tickerlist$i.asset,\n            close = _tickerlist$i.close,\n            assetVolume = _tickerlist$i.assetVolume;\n\n        if (tokenCheck && token !== tokenCheck) continue;\n        if (assetCheck && asset !== assetCheck) continue;\n        this._snapshot[symbol] = { symbol: symbol, token: token, asset: asset, close: close, assetVolume: assetVolume, checked: checked };\n      }\n    }\n\n    /**\r\n     * Update snapshot price/volume for a symbol\r\n     * @param {array}   tickerlist  Array list of Symbol objects\r\n     * @param {string}  symbol      Symbol string\r\n     */\n\n  }, {\n    key: 'updateSymbolSnapshot',\n    value: function updateSymbolSnapshot(tickerlist, symbol) {\n      if (!this._snapshot.hasOwnProperty(symbol)) return;\n\n      var pair = tickerlist.filter(function (p) {\n        return p.symbol === symbol;\n      }).shift();\n      if (!pair) return;\n\n      this._snapshot[symbol].close = pair.close;\n      this._snapshot[symbol].assetVolume = pair.assetVolume;\n      this._snapshot[symbol].checked = Date.now();\n    }\n\n    /**\r\n     * Check if a pair passes the filter options\r\n     * @param {object}  p  Symbol object pair data\r\n     */\n\n  }, {\n    key: 'pairCheck',\n    value: function pairCheck(p) {\n      var token = String(this._options.token || '');\n      var asset = String(this._options.asset || '');\n      var priceCheck = String(this._options.priceCheck || '');\n      var price = Number(this._options.price || 0);\n      var volumeCheck = String(this._options.volumeCheck || '');\n      var volume = Number(this._options.volume || 0);\n      var changeCheck = String(this._options.changeCheck || '');\n      var change = Number(this._options.change || 0);\n      var volatilityCheck = String(this._options.volatilityCheck || '');\n      var volatility = Number(this._options.volatility || 0);\n      var dangerCheck = String(this._options.dangerCheck || '');\n      var danger = Number(this._options.danger || 0);\n      var filterType = String(this._options.filterType || '');\n\n      if (token && p.token !== token) return false;\n      if (asset && p.asset !== asset) return false;\n\n      if (this._reg && filterType === 'allow' && !this._reg.test(p.token)) return false;\n      if (this._reg && filterType === 'deny' && this._reg.test(p.token)) return false;\n\n      if (price && priceCheck === 'above' && p.close < price) return false;\n      if (price && priceCheck === 'below' && p.close > price) return false;\n\n      if (volume && volumeCheck === 'above' && p.assetVolume < volume) return false;\n      if (volume && volumeCheck === 'below' && p.assetVolume > volume) return false;\n\n      if (change && changeCheck === 'above' && p.percent < change) return false;\n      if (change && changeCheck === 'below' && p.percent > change) return false;\n\n      if (volatility && volatilityCheck === 'above' && p.volatility < volatility) return false;\n      if (volatility && volatilityCheck === 'below' && p.volatility > volatility) return false;\n\n      if (danger && dangerCheck === 'above' && p.danger < danger) return false;\n      if (danger && dangerCheck === 'below' && p.danger > danger) return false;\n\n      return true;\n    }\n\n    /**\r\n     * Check how many tokens are affected by the watch options\r\n     * @param {array}  tickerlist  Array list of Symbol objects\r\n     */\n\n  }, {\n    key: 'watchCount',\n    value: function watchCount(tickerlist) {\n      var count = 0;\n      for (var i = 0; i < tickerlist.length; ++i) {\n        if (this.pairCheck(tickerlist[i])) count++;\n      }\n      return count;\n    }\n\n    /**\r\n     * Check list of prices against options\r\n     * @param {array}     tickerlist  Array list of Symbol objects\r\n     * @param {function}  callback    Callback handler\r\n     */\n\n  }, {\n    key: 'check',\n    value: function check(tickerlist, callback) {\n      var now = Date.now();\n      var priceType = String(this._options.priceType || '');\n      var priceChange = Number(this._options.priceChange || 0);\n      var volumeType = String(this._options.volumeType || '');\n      var volumeChange = Number(this._options.volumeChange || 0);\n      var timeCheck = String(this._options.timeCheck || 'less');\n      var timeLimit = Number(this._options.timeLimit || 0) * 60; // secs\n      var count = tickerlist.length;\n\n      // need something to check\n      if (!priceChange && !volumeChange) return;\n\n      // scan price list...\n      while (count--) {\n\n        // price and snapshot data\n        var p = tickerlist[count];\n        var s = this._snapshot[p.symbol] || null;\n\n        // initial filter checks\n        if (!s || !this.pairCheck(p)) continue;\n\n        // calculate price and volume change\n        var pc = this._calcPercent(p.close, s.close);\n        var vc = this._calcPercent(p.assetVolume, s.assetVolume);\n        var t = (now - s.checked) / 1000;\n\n        // check price change\n        if (priceChange) {\n          if (priceType === 'gain' && pc.sign === '-') continue;\n          if (priceType === 'loss' && pc.sign === '+') continue;\n          if (pc.percent < priceChange) continue;\n        }\n        // check volume change\n        if (volumeChange) {\n          if (volumeType === 'gain' && vc.sign === '-') continue;\n          if (volumeType === 'loss' && vc.sign === '+') continue;\n          if (vc.percent < volumeChange) continue;\n        }\n        // update snapshot data\n        this._snapshot[p.symbol].close = p.close;\n        this._snapshot[p.symbol].assetVolume = p.assetVolume;\n        this._snapshot[p.symbol].checked = now;\n\n        // check time options\n        if (timeCheck && timeLimit) {\n          if (timeCheck === 'less' && t > timeLimit) continue;\n          if (timeCheck === 'more' && t < timeLimit) continue;\n        }\n        // we have a hit\n        callback(p, pc, vc, t);\n      }\n    }\n\n    /**\r\n     * Calculate percent change\r\n     * @param {number}  current  Current value\r\n     * @param {number}  last     Last value\r\n     */\n\n  }, {\n    key: '_calcPercent',\n    value: function _calcPercent(current, last) {\n      var isnum = last > 0;\n      var isup = current >= last;\n      var change = isup ? current - last : last - current;\n      var percent = isnum ? change / last * 100.0 : 0.0;\n      var sign = isup ? '+' : '-';\n      var arrow = isup ? '▲' : '▼';\n      return { change: change, percent: percent, sign: sign, arrow: arrow };\n    }\n  }]);\n\n  return Watcher;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Watcher);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    options: { type: Array, default: function _default() {\n        return [];\n      }\n    },\n    css: { type: String, default: '' },\n    value: { default: null }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      visible: false,\n      top: false,\n      bottom: false,\n      index: -1,\n      optlist: [],\n      val: null,\n      text: ''\n    };\n  },\n\n\n  // watch methods\n  watch: {\n    options: function options() {\n      this.loadOptions();\n    },\n    value: function value() {\n      this.updateOption();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // build menu list\n    optionsList: function optionsList() {\n      var _this = this;\n\n      return this.optlist.map(function (option, index) {\n        option.active = index === _this.index ? true : false;\n        return option;\n      });\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // on trigger click\n    onClick: function onClick(e) {\n      this.$emit('click', e);\n      this.listShow();\n    },\n\n\n    // on trigger focus\n    onFocus: function onFocus(e) {\n      this.$emit('focus', e);\n      this.listShow();\n    },\n\n\n    // reset selected values\n    resetValues: function resetValues() {\n      this.index = -1;\n      this.val = null;\n      this.text = '';\n    },\n\n\n    // set selected values\n    setValues: function setValues(index) {\n      var deft = { value: null, text: '' };\n      var option = this.optlist[index] || deft;\n      this.val = option.value;\n      this.text = option.text;\n      this.index = index;\n    },\n\n\n    // change current select option\n    changeOption: function changeOption(index, hide) {\n      this.setValues(index);\n      this.$emit('input', this.val);\n      this.$emit('change', this.val);\n      if (hide) this.listHide();\n    },\n\n\n    // update selected option values\n    updateOption: function updateOption() {\n      this.resetValues();\n      for (var i = 0; i < this.optlist.length; ++i) {\n        if (this.optlist[i].value === this.value) {\n          return this.setValues(i);\n        }\n      }\n    },\n\n\n    // load options from nested slots elements, or props\n    loadOptions: function loadOptions() {\n      var slots = this.$slots && this.$slots.default ? this.$slots.default : [];\n      var list = slots.filter(function (e) {\n        return e.elm instanceof HTMLOptionElement;\n      });\n      var optlist = [];\n\n      for (var i = 0; i < list.length; ++i) {\n        var elm = list[i].elm;\n        var value = elm.value;\n        var text = String(elm.textContent || value || '').trim();\n        // unserialize values\n        if (/^\\-?[\\d\\.]+$/.test(value)) value = parseFloat(value) || 0;\n        if (value === 'true') value = true;\n        if (value === 'false') value = false;\n        optlist.push({ value: value, text: text });\n      }\n      this.optlist = optlist.length ? optlist : this.options.slice();\n      this.updateOption();\n    },\n\n\n    // show menu\n    listShow: function listShow(e) {\n      if (this.visible || !this.$refs.trigger) return;\n      var pos = this.$utils.boxPosition(this.$refs.trigger);\n      this.top = pos.top;\n      this.bottom = pos.bottom;\n      this.visible = true;\n    },\n\n\n    // hide menu\n    listHide: function listHide(e) {\n      this.visible = false;\n    },\n\n\n    // detect click outside container\n    clickOut: function clickOut(e) {\n      if (!this.$refs.menu.contains(e.target)) {\n        this.listHide(e);\n      }\n    },\n\n\n    // change option on arrow key press\n    keyDown: function keyDown(e) {\n      var key = this.$utils.keyboard(e);\n      var first = 0;\n      var total = this.optlist.length;\n      var last = total ? total - 1 : 0;\n\n      if (!this.visible || !total) return;\n\n      if (key.up && this.index > first) {\n        e.preventDefault();\n        return this.changeOption(this.index - 1);\n      }\n      if (key.down && this.index < last) {\n        e.preventDefault();\n        return this.changeOption(this.index + 1);\n      }\n      if (key.enter) {\n        e.preventDefault();\n        return this.changeOption(this.index, true);\n      }\n    }\n  },\n\n  // comonent mounted\n  mounted: function mounted() {\n    this.loadOptions();\n    document.addEventListener('click', this.clickOut);\n    document.addEventListener('keydown', this.keyDown);\n  },\n\n\n  // comonent destroyed\n  destroyed: function destroyed() {\n    document.removeEventListener('click', this.clickOut);\n    document.removeEventListener('keydown', this.keyDown);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Search_vue__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TokenIcon_vue__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Dropdown_vue__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Toggle_vue__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__LineChart_vue__ = __webpack_require__(25);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Spinner: __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__[\"a\" /* default */], Search: __WEBPACK_IMPORTED_MODULE_1__Search_vue__[\"a\" /* default */], TokenIcon: __WEBPACK_IMPORTED_MODULE_2__TokenIcon_vue__[\"a\" /* default */], Dropdown: __WEBPACK_IMPORTED_MODULE_3__Dropdown_vue__[\"a\" /* default */], Toggle: __WEBPACK_IMPORTED_MODULE_4__Toggle_vue__[\"a\" /* default */], LineChart: __WEBPACK_IMPORTED_MODULE_5__LineChart_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    header: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    options: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    sortData: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    priceData: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    assetsList: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    tickerStatus: { type: Number, default: 0 }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      searchStr: '',\n      listCount: 0,\n      listLeft: 0\n    };\n  },\n\n\n  // watch methods\n  watch: {\n    priceData: function priceData() {\n      this.updateSpinner();\n    },\n    tickerStatus: function tickerStatus() {\n      this.updateSpinner();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // get filtered and sorted ticker list for display\n    tickerList: function tickerList() {\n      var asset = this.options.prices.asset;\n      var _sortData$ticker = this.sortData.ticker,\n          column = _sortData$ticker.column,\n          order = _sortData$ticker.order;\n\n\n      var limit = parseInt(this.options.prices.limit) | 0;\n      var regex = this.searchStr.length > 1 ? new RegExp('^(' + this.searchStr + ')', 'i') : null;\n      var count = this.priceData.length;\n      var list = [];\n\n      // filter the list\n      while (count--) {\n        var p = this.priceData[count];\n        if (asset && p.asset !== asset) continue;\n        if (regex && !(regex.test(p.token) || regex.test(p.name))) continue;\n        list.push(p);\n      }\n      // sort the list\n      list = this.$utils.sort(list, column, order);\n\n      // update paging totals\n      var total = list.length;\n      this.listCount = total;\n      this.listLeft = 0;\n\n      // trim the list\n      if (total && limit && limit < total) {\n        list = list.slice(0, limit);\n        this.listLeft = total - list.length;\n      }\n      return list;\n    },\n\n\n    // sort-by label for buttons, etc\n    sortByLabel: function sortByLabel() {\n      var column = this.sortData.ticker.column;\n\n      switch (column) {\n        case 'token':\n          return 'Token';\n        case 'percent':\n          return 'Percent';\n        case 'close':\n          return 'Price';\n        case 'volatility':\n          return 'Volatility';\n        case 'danger':\n          return 'Danger';\n        case 'change':\n          return 'Change';\n        case 'assetVolume':\n          return 'Volume';\n        case 'tokenVolume':\n          return 'Volume';\n        case 'trades':\n          return 'Trades';\n        default:\n          return 'Default';\n      }\n    },\n\n\n    // text to show in limit filter controls\n    limitCountLabel: function limitCountLabel() {\n      var limit = parseInt(this.options.prices.limit) | 0;\n      if (limit && limit < this.listCount) return limit + '/' + this.listCount;\n      return 'All ' + this.listCount;\n    },\n\n\n    // text about hidden list pair\n    listLeftText: function listLeftText() {\n      var total = this.listCount;\n      var remain = this.listLeft;\n      var asset = this.options.prices.asset;\n      var limit = this.options.prices.limit;\n      var count = this.$utils.noun(total, asset + ' token pair', asset + ' token pairs');\n      if (remain) return 'Showing ' + limit + ' of ' + count;\n      return 'Showing all ' + count;\n    }\n  },\n\n  // custom mounted\n  methods: {\n\n    // apply options\n    saveOptions: function saveOptions() {\n      this.$opts.saveOptions(this.options);\n    },\n\n\n    // set app url route\n    setRoute: function setRoute(route) {\n      this.$router.setRoute(route);\n    },\n\n\n    // lick to binance site with ref id added\n    tradeLink: function tradeLink(token, asset) {\n      this.$bus.emit('handleClick', 'binance', '/en/trade/' + token + '_' + asset + '/', '_blank');\n    },\n\n\n    // set list limit value\n    limitList: function limitList(num) {\n      this.options.prices.limit = parseInt(num) | 0;\n      this.saveOptions();\n    },\n\n\n    // filter by asset\n    toggleAsset: function toggleAsset(asset) {\n      this.options.prices.asset = String(asset || 'BTC');\n      this.saveOptions();\n    },\n\n\n    // update page spinner\n    updateSpinner: function updateSpinner() {\n      if (!this.$refs.spinner) return;\n      if (this.tickerList.length) return this.$refs.spinner.hide();\n      if (this.tickerStatus === 0) return this.$refs.spinner.error('Socket API not connected');\n      if (this.tickerStatus === 1) return this.$refs.spinner.show('Waiting for price data');\n    }\n  },\n\n  // on component mounted\n  mounted: function mounted() {\n    this.updateSpinner();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    active: { type: Boolean, default: false },\n    text: { type: String, default: 'Loading' }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      visible: false,\n      failed: false,\n      message: ''\n    };\n  },\n\n\n  // custom methods\n  methods: {\n\n    // show the spinner\n    show: function show(message) {\n      this.$emit('onShow');\n      this.visible = true;\n      this.failed = false;\n      this.message = String(message || '').trim();\n    },\n\n\n    // show error state spinner\n    error: function error(message) {\n      this.$emit('onError');\n      this.visible = true;\n      this.failed = true;\n      this.message = String(message || '').trim();\n    },\n\n\n    // hise the spinner\n    hide: function hide() {\n      this.$emit('onHide');\n      this.visible = false;\n      this.failed = false;\n      this.message = '';\n    },\n\n\n    // on spinner click\n    click: function click(e) {\n      this.$emit('onClick', e);\n    }\n  },\n\n  // check initial state on mount\n  mounted: function mounted() {\n    if (this.active) {\n      this.show(this.text);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvU3Bpbm5lci52dWU/NjFjNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBREE7QUFFQTtBQUZBLEdBSEE7O0FBUUE7QUFDQSxNQVRBLGtCQVNBO0FBQ0E7QUFDQSxvQkFEQTtBQUVBLG1CQUZBO0FBR0E7QUFIQTtBQUtBLEdBZkE7OztBQWlCQTtBQUNBOztBQUVBO0FBQ0EsUUFIQSxnQkFHQSxPQUhBLEVBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBUkE7OztBQVVBO0FBQ0EsU0FYQSxpQkFXQSxPQVhBLEVBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBaEJBOzs7QUFrQkE7QUFDQSxRQW5CQSxrQkFtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBeEJBOzs7QUEwQkE7QUFDQSxTQTNCQSxpQkEyQkEsQ0EzQkEsRUEyQkE7QUFDQTtBQUNBO0FBN0JBLEdBbEJBOztBQW1EQTtBQUNBLFNBcERBLHFCQW9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBeERBIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1vdmVybGF5XCIgOmNsYXNzPVwieyAndmlzaWJsZSc6IHZpc2libGUsICdmYWlsZWQnOiBmYWlsZWQgfVwiIEBjbGljay5zdG9wPVwiY2xpY2tcIj5cbiAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1jb250ZW50XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci13aGVlbFwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItbWVzc2dlXCIgdi1pZj1cIm1lc3NhZ2VcIiB2LXRleHQ9XCJtZXNzYWdlXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbi8vIGNvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIGNvbXBvbmVudCBwcm9wc1xuICBwcm9wczoge1xuICAgIGFjdGl2ZTogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHRleHQ6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnTG9hZGluZycgfSxcbiAgfSxcblxuICAvLyBjb21wb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIGZhaWxlZDogZmFsc2UsXG4gICAgICBtZXNzYWdlOiAnJyxcbiAgICB9XG4gIH0sXG5cbiAgLy8gY3VzdG9tIG1ldGhvZHNcbiAgbWV0aG9kczoge1xuXG4gICAgLy8gc2hvdyB0aGUgc3Bpbm5lclxuICAgIHNob3coIG1lc3NhZ2UgKSB7XG4gICAgICB0aGlzLiRlbWl0KCAnb25TaG93JyApO1xuICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmFpbGVkICA9IGZhbHNlO1xuICAgICAgdGhpcy5tZXNzYWdlID0gU3RyaW5nKCBtZXNzYWdlIHx8ICcnICkudHJpbSgpO1xuICAgIH0sXG5cbiAgICAvLyBzaG93IGVycm9yIHN0YXRlIHNwaW5uZXJcbiAgICBlcnJvciggbWVzc2FnZSApIHtcbiAgICAgIHRoaXMuJGVtaXQoICdvbkVycm9yJyApO1xuICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuZmFpbGVkICA9IHRydWU7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBTdHJpbmcoIG1lc3NhZ2UgfHwgJycgKS50cmltKCk7XG4gICAgfSxcblxuICAgIC8vIGhpc2UgdGhlIHNwaW5uZXJcbiAgICBoaWRlKCkge1xuICAgICAgdGhpcy4kZW1pdCggJ29uSGlkZScgKTtcbiAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgdGhpcy5mYWlsZWQgID0gZmFsc2U7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSAnJztcbiAgICB9LFxuXG4gICAgLy8gb24gc3Bpbm5lciBjbGlja1xuICAgIGNsaWNrKCBlICkge1xuICAgICAgdGhpcy4kZW1pdCggJ29uQ2xpY2snLCBlICk7XG4gICAgfSxcblxuICB9LFxuXG4gIC8vIGNoZWNrIGluaXRpYWwgc3RhdGUgb24gbW91bnRcbiAgbW91bnRlZCgpIHtcbiAgICBpZiAoIHRoaXMuYWN0aXZlICkge1xuICAgICAgdGhpcy5zaG93KCB0aGlzLnRleHQgKTtcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz0nc2Nzcyc+XG5cbkBrZXlmcmFtZXMgc2hvd1NwaW5uZXIge1xuICAgIDAlIHsgb3BhY2l0eTogMDsgfVxuICAxMDAlIHsgb3BhY2l0eTogMTsgfVxufVxuQGtleWZyYW1lcyBzcGluUmlnaHQge1xuICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoIDBkZWcgKTsgfVxuICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoIDM1OWRlZyApOyB9XG59XG5Aa2V5ZnJhbWVzIHNwaW5MZWZ0IHtcbiAgICAwJSB7IHRyYW5zZm9ybTogcm90YXRlKCAzNTlkZWcgKTsgfVxuICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoIDBkZWcgKTsgfVxufVxuXG4vLyBpbm5lciBjb250ZW50IHNwaW5uZXJcbi5zcGlubmVyLW92ZXJsYXkge1xuICBkaXNwbGF5OiBub25lO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGxlZnQ6IDA7XG4gIHRvcDogMDtcblxuICAvLyB2aXNpYmxlIHN0YXRlXG4gICYudmlzaWJsZSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgfVxuXG4gIC8vIGZ1bGwtcGFnZSBmaXhlZCBzcGlubmVyIHdpdGggb3ZlcmxheVxuICAmLmZpeGVkIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yT3ZlcmxheTtcbiAgICB6LWluZGV4OiAoICR6aW5kZXhBbGVydHMgLSAxMCApO1xuICB9XG5cbiAgLy8gYWJzb2x1dGUgcG9zaXRpb25lZCBzcGlubmVyIHdpdGggb3ZlcmxheVxuICAmLmFicyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoIGJsYWNrLCAuMiApO1xuICAgIHotaW5kZXg6IGF1dG87XG4gIH1cblxuICAvLyByb3VuZGVkIGVkZ2VzXG4gICYucm91bmRlZCB7XG4gICAgYm9yZGVyLXJhZGl1czogJGxpbmVKb2luO1xuICB9XG5cbiAgLy8gbWFpbiBmbGV4IGNlbnRlcmVkIGNvbnRlbnRcbiAgLnNwaW5uZXItY29udGVudCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGFuaW1hdGlvbjogc2hvd1NwaW5uZXIgJGZ4U3BlZWQgJGZ4RWFzZSBmb3J3YXJkcztcblxuICAgIC5zcGlubmVyLXdoZWVsIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgd2lkdGg6IDQycHg7XG4gICAgICBoZWlnaHQ6IDQycHg7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgICAgICY6YmVmb3JlLCAmOmFmdGVyIHtcbiAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYm9yZGVyOiA0cHggc29saWQgJGNvbG9yUHJpbWFyeTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICAgICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6YmVmb3JlIHtcbiAgICAgICAgYm94LXNoYWRvdzogJHNoYWRvd0Rhcms7XG4gICAgICAgIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICBvcGFjaXR5OiAwLjk7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgICAgIGFuaW1hdGlvbjogc3BpblJpZ2h0IDFzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgIH1cbiAgICAgICY6YWZ0ZXIge1xuICAgICAgICBib3JkZXItdG9wLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIG9wYWNpdHk6IDAuMjtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgYW5pbWF0aW9uOiBzcGluTGVmdCAxLjVzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAuc3Bpbm5lci1tZXNzZ2Uge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgIG1hcmdpbjogLjRlbSAwIDAgMDtcbiAgICAgIGZvbnQtc2l6ZTogODAlO1xuICAgICAgbGluZS1oZWlnaHQ6IDFlbTtcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICB9XG4gIH1cblxuICAvLyBmYWlsZWQgc3RhdGVcbiAgJi5mYWlsZWQge1xuICAgIC5zcGlubmVyLWNvbnRlbnQgLnNwaW5uZXItd2hlZWw6YmVmb3JlLFxuICAgIC5zcGlubmVyLWNvbnRlbnQgLnNwaW5uZXItd2hlZWw6YWZ0ZXIge1xuICAgICAgYW5pbWF0aW9uOiBub25lO1xuICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3JEYW5nZXI7XG4gICAgfVxuICB9XG5cbn1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvU3Bpbm5lci52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///21\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    value: { type: String, default: '' }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      searchStr: ''\n    };\n  },\n\n\n  // watch methods\n  watch: {\n    value: function value() {\n      this.searchStr = this.value;\n    }\n  },\n\n  // custom mounted\n  methods: {\n    onClick: function onClick(e) {\n      this.$emit('click', e);\n    },\n    onChange: function onChange(e) {\n      this.$emit('change', e);\n    },\n    onInput: function onInput(e) {\n      this.$emit('input', this.searchStr);\n    },\n    onReset: function onReset(e) {\n      this.searchStr = '';\n      this.$emit('input', '');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvU2VhcmNoLnZ1ZT9kNzhiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBREEsR0FIQTs7QUFPQTtBQUNBLE1BUkEsa0JBUUE7QUFDQTtBQUNBO0FBREE7QUFHQSxHQVpBOzs7QUFjQTtBQUNBO0FBQ0EsU0FEQSxtQkFDQTtBQUNBO0FBQ0E7QUFIQSxHQWZBOztBQXFCQTtBQUNBO0FBRUEsV0FGQSxtQkFFQSxDQUZBLEVBRUE7QUFDQTtBQUNBLEtBSkE7QUFLQSxZQUxBLG9CQUtBLENBTEEsRUFLQTtBQUNBO0FBQ0EsS0FQQTtBQVFBLFdBUkEsbUJBUUEsQ0FSQSxFQVFBO0FBQ0E7QUFDQSxLQVZBO0FBV0EsV0FYQSxtQkFXQSxDQVhBLEVBV0E7QUFDQTtBQUNBO0FBQ0E7QUFkQTtBQXRCQSIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwic2VhcmNoLXdyYXAgZm9ybS1pbnB1dFwiPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJzZWFyY2gtaWNvbiBpY29uLXNlYXJjaCBpY29uTGVmdFwiPjwvc3Bhbj5cclxuICAgIDxpbnB1dCBjbGFzcz1cInNlYXJjaC1pbnB1dCBmbGV4LTEgcHVzaC1yaWdodFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJTZWFyY2guLi5cIiB2LW1vZGVsPVwic2VhcmNoU3RyXCIgQGNsaWNrPVwib25DbGlja1wiIEBjaGFuZ2U9XCJvbkNoYW5nZVwiIEBrZXl1cD1cIm9uSW5wdXRcIiAvPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cImljb24tY2xvc2UgdGV4dC1pbmZvLWhvdmVyXCIgQGNsaWNrPVwib25SZXNldFwiIHYtaWY9XCJzZWFyY2hTdHJcIj48L2J1dHRvbj5cclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbi8vIGNvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblxyXG4gIC8vIGNvbXBvbmVudCBwcm9wc1xyXG4gIHByb3BzOiB7XHJcbiAgICB2YWx1ZTogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICcnIH0sXHJcbiAgfSxcclxuXHJcbiAgLy8gY29tcG9uZW50IGRhdGFcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2VhcmNoU3RyOiAnJyxcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvLyB3YXRjaCBtZXRob2RzXHJcbiAgd2F0Y2g6IHtcclxuICAgIHZhbHVlKCkge1xyXG4gICAgICB0aGlzLnNlYXJjaFN0ciA9IHRoaXMudmFsdWU7XHJcbiAgICB9LFxyXG4gIH0sXHJcblxyXG4gIC8vIGN1c3RvbSBtb3VudGVkXHJcbiAgbWV0aG9kczoge1xyXG5cclxuICAgIG9uQ2xpY2soIGUgKSB7XHJcbiAgICAgIHRoaXMuJGVtaXQoICdjbGljaycsIGUgKTtcclxuICAgIH0sXHJcbiAgICBvbkNoYW5nZSggZSApIHtcclxuICAgICAgdGhpcy4kZW1pdCggJ2NoYW5nZScsIGUgKTtcclxuICAgIH0sXHJcbiAgICBvbklucHV0KCBlICkge1xyXG4gICAgICB0aGlzLiRlbWl0KCAnaW5wdXQnLCB0aGlzLnNlYXJjaFN0ciApO1xyXG4gICAgfSxcclxuICAgIG9uUmVzZXQoIGUgKSB7XHJcbiAgICAgIHRoaXMuc2VhcmNoU3RyID0gJyc7XHJcbiAgICAgIHRoaXMuJGVtaXQoICdpbnB1dCcsICcnICk7XHJcbiAgICB9XHJcbiAgfSxcclxufVxyXG48L3NjcmlwdD5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL1NlYXJjaC52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    image: { type: String, default: '', required: true },\n    alt: { type: String, default: 'ICON' }\n  },\n\n  // custom mounted\n  methods: {\n\n    // handler for token images that don't exist\n    imageError: function imageError(e) {\n      e.target.classList.add('default');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVG9rZW5JY29uLnZ1ZT9hNTZjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFEQTtBQUVBO0FBRkEsR0FIQTs7QUFRQTtBQUNBOztBQUVBO0FBQ0EsY0FIQSxzQkFHQSxDQUhBLEVBR0E7QUFDQTtBQUNBO0FBTEE7QUFUQSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInRva2VuaWNvbi13cmFwXCI+XG4gICAgPGltZyBjbGFzcz1cInRva2VuaWNvbi1pbWFnZVwiIEBlcnJvcj1cImltYWdlRXJyb3JcIiA6c3JjPVwiaW1hZ2VcIiA6YWx0PVwiYWx0XCIgLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgaW1hZ2U6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnJywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBhbHQ6IHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnSUNPTicgfSxcbiAgfSxcblxuICAvLyBjdXN0b20gbW91bnRlZFxuICBtZXRob2RzOiB7XG5cbiAgICAvLyBoYW5kbGVyIGZvciB0b2tlbiBpbWFnZXMgdGhhdCBkb24ndCBleGlzdFxuICAgIGltYWdlRXJyb3IoIGUgKSB7XG4gICAgICBlLnRhcmdldC5jbGFzc0xpc3QuYWRkKCAnZGVmYXVsdCcgKTtcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuLy8gY29tcCB3cmFwcGVyXG4udG9rZW5pY29uLXdyYXAge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB3aWR0aDogJGljb25TaXplO1xuICBtaW4taGVpZ2h0OiAkaWNvblNpemU7XG5cbiAgLnRva2VuaWNvbi1pbWFnZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAkaWNvblNpemU7XG4gICAgaGVpZ2h0OiBhdXRvO1xuXG4gICAgJi5kZWZhdWx0IHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgY29sb3I6ICRjb2xvckluZm9UZXh0O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9ySW5mbztcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgICBoZWlnaHQ6ICRpY29uU2l6ZTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAkaWNvblNpemU7XG4gICAgICBsZXR0ZXItc3BhY2luZzogLTFweDtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKCAtMjVkZWcgKTtcbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvVG9rZW5JY29uLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    value: { type: Boolean, default: false },\n    text: { type: String, default: '...' }\n  },\n\n  // custom mounted\n  methods: {\n    onClick: function onClick(e) {\n      this.$emit('click', e);\n    },\n    onChange: function onChange(e) {\n      this.$emit('input', !this.value);\n      this.$emit('change', e);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVG9nZ2xlLnZ1ZT8zMzU5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQURBO0FBRUE7QUFGQSxHQUhBOztBQVFBO0FBQ0E7QUFFQSxXQUZBLG1CQUVBLENBRkEsRUFFQTtBQUNBO0FBQ0EsS0FKQTtBQU1BLFlBTkEsb0JBTUEsQ0FOQSxFQU1BO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFUQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGxhYmVsIGNsYXNzPVwidG9nZ2xlLXdyYXBcIiBAY2xpY2s9XCJvbkNsaWNrXCI+XG4gICAgPGlucHV0IGNsYXNzPVwidG9nZ2xlLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgOmNoZWNrZWQ9XCJ2YWx1ZVwiIEBjaGFuZ2U9XCJvbkNoYW5nZVwiIC8+XG4gICAgPGRpdiBjbGFzcz1cInRvZ2dsZS1zd2l0Y2hcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwidG9nZ2xlLXRleHRcIj57eyB0ZXh0IH19PC9kaXY+XG4gIDwvbGFiZWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgdmFsdWU6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB0ZXh0OiB7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJy4uLicgfSxcbiAgfSxcblxuICAvLyBjdXN0b20gbW91bnRlZFxuICBtZXRob2RzOiB7XG5cbiAgICBvbkNsaWNrKCBlICkge1xuICAgICAgdGhpcy4kZW1pdCggJ2NsaWNrJywgZSApO1xuICAgIH0sXG5cbiAgICBvbkNoYW5nZSggZSApIHtcbiAgICAgIHRoaXMuJGVtaXQoICdpbnB1dCcsICF0aGlzLnZhbHVlICk7XG4gICAgICB0aGlzLiRlbWl0KCAnY2hhbmdlJywgZSApO1xuICAgIH1cbiAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbi50b2dnbGUtd3JhcCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzdHJldGNoO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogLjJlbSAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG5cbiAgLnRvZ2dsZS1pbnB1dCB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgbWF4LXdpZHRoOiAwO1xuICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgbGVmdDogLTEwMDAwcHg7XG4gIH1cbiAgLnRvZ2dsZS1zd2l0Y2gge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IDAgLjZlbSAwIDA7XG4gICAgd2lkdGg6IDIuOGVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtlbiggJGNvbG9yRG9jdW1lbnQsIDIlICk7XG4gICAgYm94LXNoYWRvdzogJHNoYWRvd0hvbGxvdztcblxuICAgICY6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgIHdpZHRoOiAxLjRlbTtcbiAgICAgIGhlaWdodDogMS40ZW07XG4gICAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yR3JleTtcbiAgICAgIGJveC1zaGFkb3c6ICRzaGFkb3dQYXBlcjtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCggLTUwJSApO1xuICAgIH1cbiAgfVxuICAudG9nZ2xlLXRleHQge1xuICAgIEBpbmNsdWRlIHRleHROb1NlbGVjdDtcbiAgICBAaW5jbHVkZSB0ZXh0Q2xpcDtcbiAgICBtYXJnaW46IDAgMCAuMTVlbSAwO1xuICB9XG4gIC50b2dnbGUtaW5wdXQ6Y2hlY2tlZCB+IC50b2dnbGUtc3dpdGNoOmJlZm9yZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yU3VjY2VzcztcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoIDUwJSApO1xuICB9XG59XG48L3N0eWxlPlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL1RvZ2dsZS52dWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LineChart_vue__ = __webpack_require__(26);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_192d9031_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LineChart_vue__ = __webpack_require__(84);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LineChart_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_192d9031_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LineChart_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlP2UwYjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTGluZUNoYXJ0LnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTGluZUNoYXJ0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMTkyZDkwMzFcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9MaW5lQ2hhcnQudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvTGluZUNoYXJ0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    width: { type: Number, default: 800, required: true },\n    height: { type: Number, default: 100, required: true },\n    values: { type: Array, default: [], required: true }\n  },\n\n  // data\n  data: function data() {\n    return {\n      cx: 0,\n      cy: 0\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // svg view box size\n    svgBox: function svgBox() {\n      return '0 0 ' + this.width + ' ' + this.height;\n    },\n\n\n    // build points for SVG polyline\n    chartPoints: function chartPoints() {\n      var data = this.$utils.points(this.width, this.height, this.values);\n      var last = data.length ? data[data.length - 1] : { x: 0, y: 0 };\n      var list = data.map(function (d) {\n        return d.x - 8 + ',' + d.y;\n      });\n      this.cx = last.x - 3;\n      this.cy = last.y;\n      return list.join(' ');\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTGluZUNoYXJ0LnZ1ZT83ZmRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFVQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFEQTtBQUVBLDBEQUZBO0FBR0E7QUFIQSxHQUhBOztBQVNBO0FBQ0EsTUFWQSxrQkFVQTtBQUNBO0FBQ0EsV0FEQTtBQUVBO0FBRkE7QUFJQSxHQWZBOzs7QUFpQkE7QUFDQTs7QUFFQTtBQUNBLFVBSEEsb0JBR0E7QUFDQTtBQUNBLEtBTEE7OztBQU9BO0FBQ0EsZUFSQSx5QkFRQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBbEJBIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8c2VjdGlvbiA6Y2xhc3M9XCJ7ICd0cmFuc3BhcmVudCc6ICF2YWx1ZXMubGVuZ3RoIH1cIj5cbiAgICA8c3ZnIDp2aWV3Qm94PVwic3ZnQm94XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgPHBvbHlsaW5lIGNsYXNzPVwicG9seWxpbmVcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIiNmMGYwZjBcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIDpwb2ludHM9XCJjaGFydFBvaW50c1wiIC8+XG4gICAgICA8Y2lyY2xlIGNsYXNzPVwiY2lyY2xlXCIgOmN4PVwiY3hcIiA6Y3k9XCJjeVwiIHI9XCIzXCIgZmlsbD1cIiNmMGYwZjBcIiBzdHJva2U9XCJub25lXCIgLz5cbiAgICA8L3N2Zz5cbiAgPC9zZWN0aW9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbi8vIGNvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQge1xuXG4gIC8vIGNvbXBvbmVudCBwcm9wc1xuICBwcm9wczoge1xuICAgIHdpZHRoOiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogODAwLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIGhlaWdodDogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDEwMCwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICB2YWx1ZXM6IHsgdHlwZTogQXJyYXksIGRlZmF1bHQ6IFtdLCByZXF1aXJlZDogdHJ1ZSB9LFxuICB9LFxuXG4gIC8vIGRhdGFcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3g6IDAsXG4gICAgICBjeTogMCxcbiAgICB9XG4gIH0sXG5cbiAgLy8gY29tcHV0ZWQgbWV0aG9kc1xuICBjb21wdXRlZDoge1xuXG4gICAgLy8gc3ZnIHZpZXcgYm94IHNpemVcbiAgICBzdmdCb3goKSB7XG4gICAgICByZXR1cm4gJzAgMCAnKyB0aGlzLndpZHRoICsnICcrIHRoaXMuaGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvLyBidWlsZCBwb2ludHMgZm9yIFNWRyBwb2x5bGluZVxuICAgIGNoYXJ0UG9pbnRzKCkge1xuICAgICAgbGV0IGRhdGEgPSB0aGlzLiR1dGlscy5wb2ludHMoIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnZhbHVlcyApO1xuICAgICAgbGV0IGxhc3QgPSBkYXRhLmxlbmd0aCA/IGRhdGFbIGRhdGEubGVuZ3RoIC0gMSBdIDogeyB4OiAwLCB5OiAwIH07XG4gICAgICBsZXQgbGlzdCA9IGRhdGEubWFwKCBkID0+ICggZC54IC0gOCApICsnLCcrIGQueSApO1xuICAgICAgdGhpcy5jeCAgPSBsYXN0LnggLSAzO1xuICAgICAgdGhpcy5jeSAgPSBsYXN0Lnk7XG4gICAgICByZXR1cm4gbGlzdC5qb2luKCAnICcgKTtcbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvTGluZUNoYXJ0LnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Search_vue__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Dropdown_vue__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Toggle_vue__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_files__ = __webpack_require__(87);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__configs_twitterAccounts__ = __webpack_require__(88);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Search: __WEBPACK_IMPORTED_MODULE_0__Search_vue__[\"a\" /* default */], Dropdown: __WEBPACK_IMPORTED_MODULE_1__Dropdown_vue__[\"a\" /* default */], Toggle: __WEBPACK_IMPORTED_MODULE_2__Toggle_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    header: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    options: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    sortData: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    priceData: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    newsHandlers: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    newsEntries: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      // filter options\n      searchStr: '',\n      searchHandle: '',\n      // coins data\n      totalTokens: 0,\n      chartData: [],\n      chartSort: 'count',\n      chartOrder: 'desc',\n      // count data\n      newCount: 0,\n      maxCount: 50\n    };\n  },\n\n\n  // watchers\n  watch: {\n\n    // update chart when options change\n    options: function options() {\n      this.updateChart();\n    },\n\n\n    // update chart data when new tokens load from socket api\n    priceData: function priceData() {\n      if (this.priceData.length > this.totalTokens) {\n        this.totalTokens = this.priceData.length;\n        this.updateChart();\n      }\n    },\n\n\n    // update chart data when tweets change\n    newsEntries: function newsEntries() {\n      this.updateChart();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // get sorted chart list\n    chartList: function chartList() {\n      var _sortData$sentiment = this.sortData.sentiment,\n          column = _sortData$sentiment.column,\n          order = _sortData$sentiment.order;\n\n      var list = this.chartData.slice(); // copy\n      list = this.$utils.sort(list, column, order); // sort\n      return list;\n    },\n\n\n    // get filtered list\n    tweetsList: function tweetsList() {\n      var _this = this;\n\n      var _options$search = this.options.search,\n          fullword = _options$search.fullword,\n          fullcase = _options$search.fullcase;\n\n      var list = this.newsEntries.slice(); // copy\n\n      if (this.searchHandle) {\n        list = list.filter(function (t) {\n          return t.handle === _this.searchHandle;\n        });\n      }\n      if (this.searchStr && this.searchStr.length > 1) {\n        list = this.$utils.search(list, 'text', this.searchStr, fullword, fullcase);\n      }\n      if (this.options.news.max) {\n        list = list.slice(0, this.options.news.max);\n      }\n      return list;\n    },\n\n\n    // build twitter accounts list from handler list with checking indicator\n    accountsList: function accountsList() {\n      var _this2 = this;\n\n      var list = this.newsHandlers.map(function (tw) {\n        var _tw$getData = tw.getData(),\n            uid = _tw$getData.uid,\n            handle = _tw$getData.handle,\n            name = _tw$getData.name,\n            avatar = _tw$getData.avatar,\n            url = _tw$getData.url,\n            last = _tw$getData.last,\n            fetching = _tw$getData.fetching,\n            error = _tw$getData.error;\n\n        var active = handle === _this2.searchHandle;\n        var count = _this2.newsEntries.filter(function (t) {\n          return t.handle === handle;\n        }).length;\n        return { uid: uid, handle: handle, name: name, avatar: avatar, url: url, last: last, error: error, active: active, fetching: fetching, count: count };\n      });\n      return this.$utils.sort(list, 'count', 'desc');\n    },\n\n\n    // sort-by label for buttons, etc\n    filterLabel: function filterLabel() {\n      var _this3 = this;\n\n      var l = this.newsHandlers.length;\n      var t = this.newsHandlers.filter(function (tw) {\n        return tw.handle === _this3.searchHandle;\n      }).shift();\n      if (t && t.handle) return '@' + t.handle;\n      return 'All Sources (' + l + ')';\n    },\n\n\n    // calculate default message for sentiment chart\n    sentimentInfoText: function sentimentInfoText() {\n      // no twitter handles to fetch from\n      if (!this.newsHandlers.length) {\n        return 'Not tracking any Twitter accounts, use the Sources menu above to track accounts...';\n      }\n      // option enabled, but no token data loaded yet\n      if (this.options.news.enabled && !this.priceData.length) {\n        return 'Currently waiting for tokens to load from the Binance socket API...';\n      }\n      // option enabled, but no tweets data loaded yet\n      if (this.options.news.enabled && !this.newsEntries.length) {\n        return 'Currently waiting for tweets data to load for tracked Twitter accounts...';\n      }\n      // option to fetch disabled and there are no tweets to scan\n      if (!this.options.news.enabled && !this.newsEntries.length) {\n        return 'No tweets loaded, use the <i class=\"icon-config\"></i> Gear icon to enable fetching.';\n      }\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // open external link\n    openLink: function openLink(link) {\n      window.open(link, '_blank');\n    },\n\n\n    // apply options\n    saveOptions: function saveOptions() {\n      this.$opts.saveOptions(this.options);\n    },\n\n\n    // apply filters\n    applyFilters: function applyFilters(search, handle) {\n      this.searchStr = String(search || '').trim();\n      this.searchHandle = String(handle || '').trim();\n    },\n\n\n    // reset filters\n    resetFilters: function resetFilters() {\n      this.searchStr = '';\n      this.searchHandle = '';\n    },\n\n\n    // scan tweets against list of tokens from api and build sentiment analysis data for chart\n    updateChart: function updateChart() {\n      var _this4 = this;\n\n      var _options$search2 = this.options.search,\n          fullword = _options$search2.fullword,\n          fullcase = _options$search2.fullcase;\n\n      var tokens = [];\n      var data = [];\n\n      // build unique list of tokens from binance api\n      this.priceData.forEach(function (p) {\n        if (tokens.filter(function (t) {\n          return t.token === p.token;\n        }).length) return;\n        var token = p.token,\n            name = p.name;\n\n        var asset = token === 'BTC' ? 'USDT' : 'BTC';\n        var route = '/symbol/' + token + asset;\n        tokens.push({ token: token, name: name, route: route });\n      });\n      // add other things to the list\n      if (this.priceData.length) {\n        tokens.push({ token: 'Crypto', name: 'Cryptocurrency', route: '/symbol/BTCUSDT' });\n        tokens.push({ token: 'XBT', name: 'BTC Contract', route: '/symbol/BTCUSDT' });\n      }\n      // build sentiment\n      tokens.forEach(function (p) {\n        var token = p.token;\n        var name = p.name;\n        var route = p.route;\n        var search = token + '|' + name;\n        var list = _this4.$utils.search(_this4.newsEntries, 'text', search, fullword, fullcase);\n        var count = list.length;\n        if (!count) return;\n        var text = list.reduce(function (a, t) {\n          return a += ' ' + t.text;\n        }, '').trim();\n        var sdata = _this4.$sentiment.analyze(text);\n        var score = sdata.score,\n            positive = sdata.positive,\n            negative = sdata.negative,\n            comparative = sdata.comparative,\n            sign = sdata.sign,\n            word = sdata.word,\n            styles = sdata.styles,\n            sentiment = sdata.sentiment;\n\n        data.push({ token: token, name: name, search: search, route: route, count: count, score: score, styles: styles, sentiment: sentiment });\n      });\n      // calculate percent\n      var max = data.reduce(function (m, d) {\n        return d.count > m ? d.count : m;\n      }, 0);\n      this.chartData = data.map(function (d) {\n        var ratio = max > 0 ? d.count / max : 0.1;\n        var barPercent = Math.round(ratio * 100);\n        var barColor = 'bg-grey';\n        if (barPercent > 20) {\n          barColor = 'bg-bright';\n        }\n        if (barPercent > 40) {\n          barColor = 'bg-secondary';\n        }\n        if (barPercent > 60) {\n          barColor = 'bg-primary';\n        }\n        return Object.assign(d, { barPercent: barPercent, barColor: barColor });\n      });\n    },\n\n\n    // convert links inside a tweet into html\n    tweetHtml: function tweetHtml(text) {\n      return this.$utils.linkUrl(text);\n    },\n\n\n    // when a new entry is added to news list\n    onNewsEntry: function onNewsEntry(tweet) {\n      var time = tweet.time,\n          handle = tweet.handle,\n          name = tweet.name,\n          text = tweet.text,\n          avatar = tweet.avatar,\n          link = tweet.link;\n\n      var secs = (Date.now() - time) / 1000;\n      var mins = Math.floor(secs / 60);\n      var elapsed = this.$utils.elapsed(secs);\n      var isaway = !document.hasFocus();\n      var isnew = Math.floor(secs / 60) <= 60; // within 1hr\n\n      // remove html and urls from tweet text\n      text = this.$utils.stripHtml(text, true);\n      if (!text) return;\n\n      // show tweet notification only if enabled and away\n      if (this.options.news.notify && isnew && isaway) {\n        text = 'Tweeted ' + elapsed + ' ago... \\n\\n' + text;\n        this.$notify.add('@' + handle, text, avatar, link);\n      }\n      // always send notification via api if enabled\n      if (this.options.news.send) {\n        var info = '<a href=\"' + link + '\">' + text + '</a>';\n        this.$messenger.add(name, info, avatar);\n      }\n    },\n\n\n    // export list of account handles as json file\n    exportAccounts: function exportAccounts() {\n      var list = this.newsHandlers.map(function (t) {\n        return t.handle;\n      });\n      __WEBPACK_IMPORTED_MODULE_3__modules_files__[\"a\" /* default */].exportData('binance_watch_news_sources', list);\n    },\n\n\n    // import list of account handles from json file\n    importAccounts: function importAccounts() {\n      var _this5 = this;\n\n      __WEBPACK_IMPORTED_MODULE_3__modules_files__[\"a\" /* default */].importData(function (accounts) {\n        var total = accounts.length | 0;\n        var saved = _this5.$news.importAccounts(accounts, true, true);\n        _this5.$bus.emit('showNotice', 'Imported ' + saved + '/' + total + ' twitter accounts.', 'success');\n      });\n    },\n\n\n    // fetch tweets for an account by handle\n    fetchByHandle: function fetchByHandle(handle) {\n      if (this.$news.fetchByHandle(handle)) {\n        this.$bus.emit('showNotice', 'Fetching latest tweets from @' + handle + '...', 'success');\n      }\n    },\n\n\n    // remove single tweet from list by id\n    deleteTweet: function deleteTweet(id) {\n      if (!this.$news.blockTweet(id)) return;\n      this.$bus.emit('showNotice', 'News entry has been removed.', 'success');\n    },\n\n\n    // flush list of saved tweets from store\n    flushTweets: function flushTweets() {\n      if (!confirm('Remove all news entries?')) return;\n      this.$news.flushTweets();\n      this.$bus.emit('showNotice', 'All news entries have been deleted.', 'success');\n    },\n\n\n    // handle adding accounts from a form\n    accountFormHandler: function accountFormHandler(e) {\n      if (!e || !e.target) return;\n\n      var handle = String(e.target.handle.value || '').replace(/[^\\w]+/g, '').trim();\n      if (!handle) return this.$bus.emit('showNotice', 'Please enter a valid twitter handle.', 'warning');\n\n      var added = this.$news.trackAccount(handle, true, true);\n      if (added) {\n        this.$bus.emit('showNotice', 'Started tracking tweets from @' + handle + '.', 'success');\n      } else {\n        this.$bus.emit('showNotice', 'Could not add account @' + handle + '.', 'warning');\n      }\n\n      this.resetFilters();\n      e.target.reset();\n    },\n\n\n    // remove instance of Twitter handler from list\n    removeTwitterHandler: function removeTwitterHandler(handle) {\n      if (!confirm('Stop tracking tweets from @' + handle + '?')) return;\n\n      var removed = this.$news.untrackAccount(handle);\n      if (removed) {\n        this.$bus.emit('showNotice', 'Stopped tracking tweets from @' + handle + '.', 'success');\n      } else {\n        this.$bus.emit('showNotice', 'Could not remove account @' + handle + '.', 'warning');\n      }\n\n      this.resetFilters();\n    },\n\n\n    // mark tweets as viewed\n    resetTweets: function resetTweets() {\n      if (document.visibilityState === 'visible') return;\n      this.$news.resetTweets(); // reset when hidden\n    }\n  },\n\n  // on component beforeMount\n  beforeMount: function beforeMount() {\n    this.$news.on('tweet', this.onNewsEntry);\n    this.$news.importAccounts(__WEBPACK_IMPORTED_MODULE_4__configs_twitterAccounts__[\"a\" /* default */]); // default accounts\n  },\n\n\n  // on component mounted\n  mounted: function mounted() {\n    this.$news.loadAccounts(); // load saved accounts\n    this.$news.loadTweets(); // load saved tweets\n    document.addEventListener('visibilitychange', this.resetTweets);\n  },\n\n\n  // on component destroyed\n  destroyed: function destroyed() {\n    document.removeEventListener('visibilitychange', this.resetTweets);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_prompt__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_watcher__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Search_vue__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Tabs_vue__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Dropdown_vue__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Toggle_vue__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SelectMenu_vue__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__TokenIcon_vue__ = __webpack_require__(6);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// components\n\n\n\n\n\n\n\n\n\n// trade status constants\nvar TRADE_WAIT = 0;\nvar TRADE_SELL = 1;\nvar TRADE_DONE = 2;\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // sub components\n  components: { Search: __WEBPACK_IMPORTED_MODULE_2__Search_vue__[\"a\" /* default */], Tabs: __WEBPACK_IMPORTED_MODULE_3__Tabs_vue__[\"a\" /* default */], Dropdown: __WEBPACK_IMPORTED_MODULE_4__Dropdown_vue__[\"a\" /* default */], Toggle: __WEBPACK_IMPORTED_MODULE_5__Toggle_vue__[\"a\" /* default */], SelectMenu: __WEBPACK_IMPORTED_MODULE_6__SelectMenu_vue__[\"a\" /* default */], TokenIcon: __WEBPACK_IMPORTED_MODULE_7__TokenIcon_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    header: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    options: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    sortData: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true },\n    priceData: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    assetsList: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    tickerStatus: { type: Number, default: 0 }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      // bot options\n      liveMode: false,\n      botActive: false,\n      botStart: 0,\n      botElapsed: '0s',\n      botProfit: 0,\n      // app data\n      balancesData: [],\n      ordersData: [],\n      tradesData: [],\n      sessionsData: [],\n      errorCount: 0,\n      countInfo: '...',\n      // lists and forms\n      searchStr: '',\n      maxItems: 20,\n      tradesVisible: 20,\n      formShow: true,\n      // socket data\n      socketTime: 0,\n      socketUpdated: 'Never',\n      socketStatus: 0,\n      socketError: '',\n      // store keys\n      keys: {\n        options: 'bot_options',\n        trades: 'bot_trades',\n        orders: 'bot_orders',\n        sessions: 'bot_sessions'\n      },\n      // price watch options\n      watcher: new __WEBPACK_IMPORTED_MODULE_1__modules_watcher__[\"a\" /* default */](),\n      watchOptions: {\n        // bot trading pair/currency\n        token: '',\n        asset: 'BTC',\n        // bot allocated balance and trades\n        assetPercent: 50,\n        assetBalance: 0,\n        assetSplit: 3,\n        // price change/profit trigger and filters\n        priceType: 'loss',\n        priceChange: '2',\n        priceProfit: '5',\n        priceStop: 0,\n        priceCheck: 'above',\n        price: '',\n        // volume change trigger and filters\n        volumeType: 'gain',\n        volumeChange: '1',\n        volumeCheck: 'above',\n        volume: '',\n        // 24h percent change filters\n        changeCheck: 'below',\n        change: '0',\n        // 24h price volitility filters\n        volatilityCheck: 'below',\n        volatility: '0',\n        // recent pump/dump danger filter\n        dangerCheck: 'below',\n        danger: '0',\n        // change timeframe filters\n        timeCheck: 'less',\n        timeLimit: '30',\n        // token back/white list filters\n        filterType: 'allow',\n        filterTokens: '',\n        // order execution options\n        orderType: 'LIMIT',\n        orderTime: 'GTC',\n        // trade limit ( multiple, active, single )\n        tradeLimit: 'multiple'\n      }\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // when price data changes\n    priceData: function priceData() {\n      this.updateWatchCount();\n      this.updateElapsedTimes();\n      this.checkTradeBuy();\n      this.checkTradeSell();\n      this.checkBotErrors();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // check if it's possible to make api requests\n    canConnect: function canConnect() {\n      var _options$binance = this.options.binance,\n          enabled = _options$binance.enabled,\n          apikey = _options$binance.apikey,\n          apisecret = _options$binance.apisecret;\n\n      return enabled && apikey && apisecret ? true : false;\n    },\n\n\n    // check if bot can be started\n    canStartBot: function canStartBot() {\n      var asset = String(this.watchOptions.asset || '');\n      var balance = Number(this.watchOptions.assetBalance || 0);\n      if (this.tickerStatus < 2 || !asset || !balance) return false;\n      return true;\n    },\n\n\n    // check if api connection is offline\n    isDisconnected: function isDisconnected() {\n      return this.socketStatus === 0;\n    },\n\n\n    // check if api connection in progress\n    isWaiting: function isWaiting() {\n      return this.socketStatus === 1;\n    },\n\n\n    // check if connected to socket api\n    isConnected: function isConnected() {\n      return this.socketStatus === 2;\n    },\n\n\n    // number of orders in the list\n    totalOrders: function totalOrders() {\n      return this.ordersData.length;\n    },\n\n\n    // number of sessions in the list\n    totalSessions: function totalSessions() {\n      return this.sessionsData.length;\n    },\n\n\n    // number of trades in the list\n    totalTrades: function totalTrades() {\n      return this.tradesData.length;\n    },\n\n\n    // number of trades in list that are not visible due to paging\n    hiddenTrades: function hiddenTrades() {\n      var list = this.tradesData;\n      var total = this.tradesVisible;\n      return list.length > total ? list.length - total : 0;\n    },\n\n\n    // number of active trades\n    pendingTrades: function pendingTrades() {\n      return this.tradesData.filter(function (o) {\n        return o.active;\n      }).length;\n    },\n\n\n    // get max number of trades bot can make\n    maxTrades: function maxTrades() {\n      return Number(this.watchOptions.assetSplit);\n    },\n\n\n    // pagination text about trades visible\n    tradesListText: function tradesListText() {\n      var total = this.totalTrades;\n      var hidden = this.hiddenTrades;\n      var noun = hidden === 1 ? 'trade' : 'trades';\n      return hidden ? hidden + ' more ' + noun + '...' : 'Showing all trades';\n    },\n\n\n    // total balance allocated for bot\n    balanceTotal: function balanceTotal() {\n      return Number(this.watchOptions.assetBalance);\n    },\n\n\n    // calculate balance amount for each trade\n    tradeBalance: function tradeBalance() {\n      return Number(this.balanceTotal / this.maxTrades);\n    },\n\n\n    // calculate balance used by the bot\n    balanceUsed: function balanceUsed() {\n      return +Number(this.tradeBalance * this.pendingTrades).toFixed(8);\n    },\n\n\n    // calculate remaining balance for bot trades\n    balanceRemain: function balanceRemain() {\n      return +Number(this.balanceTotal - this.balanceUsed).toFixed(8);\n    },\n\n\n    // build assets select options\n    assetOptions: function assetOptions() {\n      var assets = this.assetsList.map(function (a) {\n        return { value: a, text: a };\n      });\n      return this.$utils.sort(assets, 'value', 'asc');\n    },\n\n\n    // filter account balances\n    balancesList: function balancesList() {\n      var _sortData$balances = this.sortData.balances,\n          column = _sortData$balances.column,\n          order = _sortData$balances.order;\n\n      var list = this.balancesData;\n\n      if (this.searchStr && this.searchStr.length > 1) {\n        var reg = new RegExp('^(' + this.searchStr + ')', 'i');\n        list = list.filter(function (t) {\n          return reg.test(t.name) || reg.test(t.asset);\n        });\n      }\n      return this.$utils.sort(list, column, order);\n    },\n\n\n    // get list of orders\n    ordersList: function ordersList() {\n      var _sortData$orders = this.sortData.orders,\n          column = _sortData$orders.column,\n          order = _sortData$orders.order;\n\n      var list = this.ordersData.slice(); // copy\n      list = this.$utils.sort(list, column, order); // sort\n      return list;\n    },\n\n\n    // get list of trades\n    tradesList: function tradesList() {\n      var _sortData$trades = this.sortData.trades,\n          column = _sortData$trades.column,\n          order = _sortData$trades.order;\n\n      var list = this.tradesData.slice(); // copy\n      list = this.$utils.sort(list, column, order); // sort\n      list = this.$utils.trimRight(list, this.tradesVisible); // trim\n      return list;\n    },\n\n\n    // get list of sessions\n    sessionsList: function sessionsList() {\n      var _sortData$sessions = this.sortData.sessions,\n          column = _sortData$sessions.column,\n          order = _sortData$sessions.order;\n\n      var list = this.sessionsData.slice(); // copy\n      list = this.$utils.sort(list, column, order); // sort\n      return list;\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // apply options\n    saveOptions: function saveOptions() {\n      this.$opts.saveOptions(this.options);\n    },\n\n\n    // setup user account stream\n    setupUserHandlers: function setupUserHandlers() {\n      // order book events\n      this.$binance.on('book_create', this.onBookCreate);\n      this.$binance.on('book_cancel', this.onBookCancel);\n      this.$binance.on('book_fail', this.onBookFail);\n      // user stream events\n      this.$binance.on('user_init', this.onUserInit);\n      this.$binance.on('user_fail', this.onUserFail);\n      this.$binance.on('user_error', this.onUserError);\n      this.$binance.on('user_close', this.onUserClose);\n      this.$binance.on('user_open', this.onUserOpen);\n      this.$binance.on('user_data', this.onUserData);\n      this.$binance.on('user_balances', this.onUserBalances);\n      this.$binance.on('user_order', this.onUserOrder);\n    },\n\n\n    // load or save data for an object by ref for a key\n    saveData: function saveData(key, data) {\n      this.$store.setData(key, data);\n    },\n\n\n    // load saved component data\n    loadSavedData: function loadSavedData() {\n      var trades = this.$store.getData(this.keys.trades);\n      this.tradesData = trades || this.tradesData;\n\n      var sessions = this.$store.getData(this.keys.sessions);\n      this.sessionsData = sessions || this.sessionsData;\n\n      var options = this.$store.getData(this.keys.options);\n      this.watchOptions = Object.assign(this.watchOptions, options);\n    },\n\n\n    // trade status text\n    tradeStatus: function tradeStatus(status, c) {\n      switch (status) {\n        case TRADE_WAIT:\n          return c ? 'text-danger' : 'HODLING';\n        case TRADE_SELL:\n          return c ? 'text-warning' : 'SELLING';\n        case TRADE_DONE:\n          return c ? 'text-success' : 'SOLD';\n      }\n    },\n\n\n    // toggle bot form show/hide\n    toggleForm: function toggleForm() {\n      this.formShow = !this.formShow;\n    },\n\n\n    // add browser notification for a filled order\n    notifyOrder: function notifyOrder(order) {\n      var id = order.id,\n          time = order.time,\n          symbol = order.symbol,\n          token = order.token,\n          asset = order.asset,\n          name = order.name,\n          image = order.image,\n          type = order.type,\n          side = order.side,\n          status = order.status,\n          price = order.price,\n          quantity = order.quantity;\n\n      var date = this.$utils.date(time, true);\n      var priceStr = this.$utils.fixed(price, asset);\n      var qtyStr = this.$utils.money(quantity);\n      var title = token + ' ' + side + ' Order ' + status;\n      var info = side + ' ' + qtyStr + ' ' + token + ' @ ' + priceStr + ' ' + asset + '. \\n' + date + '.';\n      var icon = this.$utils.fullUrl(image);\n\n      this.$bus.emit('showNotice', info, 'success');\n      this.$notify.add(title, info, icon);\n      this.$messenger.add(title, info, icon);\n    },\n\n\n    // get current price for a symbol\n    getSymbolPrice: function getSymbolPrice(symbol) {\n      var close = 0;\n      var count = this.priceData.length;\n\n      while (count--) {\n        if (this.priceData[count].symbol === symbol) {\n          close = this.priceData[count].close;\n          break;\n        }\n      }\n      return close;\n    },\n\n\n    // check if there is enough balance for a token\n    hasTokenBalance: function hasTokenBalance(token, amount) {\n      var count = this.balancesData.length;\n\n      while (count--) {\n        var b = this.balancesData[count];\n        if (b.asset === token && b.free >= amount) return true;\n      }\n      return false;\n    },\n\n\n    // adds new order to the list\n    updateOrdersList: function updateOrdersList(order) {\n      var list = this.ordersData.filter(function (o) {\n        return o.id !== order.id;\n      }); // filter\n      if (order.status !== 'CANCELED' && order.quantity) list.push(order); // add\n      this.ordersData = this.$utils.trimLeft(list, this.maxItems); // trim\n    },\n\n\n    // remove order from the list\n    removeOrder: function removeOrder(id) {\n      this.ordersData = this.ordersData.filter(function (o) {\n        return o.id !== id;\n      });\n    },\n\n\n    // removed finished orders from the list\n    clearOrdersList: function clearOrdersList() {\n      this.ordersData = this.ordersData.filter(function (o) {\n        return o.status === 'OPEN';\n      });\n    },\n\n\n    // cancel open orders\n    cancelOpenOrders: function cancelOpenOrders() {\n      for (var i = 0; i < this.ordersData.length; ++i) {\n        var _ordersData$i = this.ordersData[i],\n            id = _ordersData$i.id,\n            symbol = _ordersData$i.symbol,\n            status = _ordersData$i.status,\n            quantity = _ordersData$i.quantity;\n\n        if (status === 'OPEN') this.cancelOrder(symbol, id, quantity);\n      }\n    },\n\n\n    // build bot session when bot stops\n    buildSessionData: function buildSessionData() {\n      var list = this.sessionsData;\n      var id = this.$utils.randString(20);\n      var time = Date.now();\n      var elapsed = this.botElapsed;\n      var live = this.liveMode;\n      var token = this.watchOptions.token;\n      var asset = this.watchOptions.asset;\n      var balance = this.watchOptions.assetBalance;\n      var pair = token ? token + '/' + asset : 'ALL/' + asset;\n      var total = 0;\n      var complete = 0;\n      var profit = 0;\n\n      // calculate total profit for completed trades\n      this.tradesData.forEach(function (o) {\n        if (!o.active) {\n          profit += o.profit;complete++;\n        }total++;\n      });\n      if (!total) return; // no point if empty\n\n      list.push({ id: id, time: time, live: live, token: token, asset: asset, pair: pair, balance: balance, total: total, complete: complete, elapsed: elapsed, profit: profit }); // add\n      this.sessionsData = this.$utils.trimLeft(list, this.maxItems); // trim\n      this.saveData(this.keys.sessions, this.sessionsData); // save\n    },\n\n\n    // delete entry from session list by id\n    deleteSessionEntry: function deleteSessionEntry(id) {\n      this.sessionsData = this.sessionsData.filter(function (s) {\n        return s.id !== id;\n      });\n      this.saveData(this.keys.sessions, this.sessionsData);\n    },\n\n\n    // flush session data\n    flushSessionData: function flushSessionData() {\n      this.sessionsData = [];\n      this.saveData(this.keys.sessions, this.sessionsData);\n    },\n\n\n    // count total pairs for select option\n    updateWatchCount: function updateWatchCount() {\n      var asset = String(this.watchOptions.asset || '');\n      var count = this.watcher.watchCount(this.priceData);\n      this.countInfo = this.$utils.noun(count, asset + ' pair', asset + ' pairs');\n    },\n\n\n    // update elapsed times\n    updateElapsedTimes: function updateElapsedTimes() {\n      if (this.socketTime) {\n        var secs = (Date.now() - this.socketTime) / 1000;\n        this.socketUpdated = this.$utils.elapsed(secs, 'ago', true);\n      }\n      if (this.botStart) {\n        var _secs = (Date.now() - this.botStart) / 1000;\n        this.botElapsed = this.$utils.elapsed(_secs);\n      }\n    },\n\n\n    // get active trade count for a token\n    activeTradeCount: function activeTradeCount(token) {\n      return this.tradesData.filter(function (o) {\n        return o.active && o.token === token;\n      }).length;\n    },\n\n\n    // get total trade count for a token\n    totalTradeCount: function totalTradeCount(token) {\n      return this.tradesData.filter(function (o) {\n        return o.token === token;\n      }).length;\n    },\n\n\n    // remove complete orders from the bot trades list\n    cleanTradesList: function cleanTradesList() {\n      this.tradesData = this.tradesData.filter(function (o) {\n        return o.active && o.amount;\n      });\n      this.saveData(this.keys.trades, this.tradesData);\n    },\n\n\n    // remove a trade from the list by id\n    removeTradeEntry: function removeTradeEntry(tradeId) {\n      this.tradesData = this.tradesData.filter(function (o) {\n        return o.id !== tradeId;\n      });\n      this.saveData(this.keys.trades, this.tradesData);\n    },\n\n\n    // delete all trade data entries\n    flushTradeEntries: function flushTradeEntries() {\n      var _this = this;\n\n      new __WEBPACK_IMPORTED_MODULE_0__modules_prompt__[\"a\" /* default */]({\n        title: 'Confirm Delete Trades',\n        confirm: 'This will delete any active trades, are you sure?',\n        onAccept: function onAccept() {\n\n          _this.tradesData = [];\n          _this.saveData(_this.keys.trades, _this.tradesData);\n        }\n      });\n    },\n\n\n    // sell active trade/s at current price\n    sellActiveTrade: function sellActiveTrade(id) {\n      var _this2 = this;\n\n      if (!this.isConnected) return;\n\n      this.tradesData.forEach(function (trade) {\n        var active = trade.active,\n            symbol = trade.symbol,\n            token = trade.token,\n            asset = trade.asset,\n            amount = trade.amount,\n            sellPrice = trade.sellPrice;\n\n        if (trade.id !== id || !amount || !sellPrice) return;\n\n        new __WEBPACK_IMPORTED_MODULE_0__modules_prompt__[\"a\" /* default */]({\n          title: 'Confirm Trade Sell',\n          confirm: 'Place an order to SELL ' + amount + ' ' + token + ' at current ' + asset + ' trading price?',\n          onAccept: function onAccept() {\n\n            trade.status = TRADE_SELL;\n            _this2.placeOrder('SELL', symbol, sellPrice, amount);\n          }\n        });\n      });\n    },\n\n\n    // check if a token from the balances list can be traded based on min total limit\n    checkCanTradeToken: function checkCanTradeToken(token, amount, price) {\n      price = Number(price || 0);\n      amount = Math.floor(Number(amount || 0));\n\n      var asset = this.watchOptions.asset;\n      var total = price * amount;\n\n      if (!token || !asset || amount <= 0) return false;\n      if (token === asset || token === 'USDT') return false;\n\n      if (price) {\n        if (total <= 0) return false;\n        if (asset === 'BTC' && total < 0.001) return false;\n        if (asset === 'ETH' && total < 0.01) return false;\n        if (asset === 'BNB' && total < 1) return false;\n        if (asset === 'USDT' && total < 10) return false;\n      }\n      return true;\n    },\n\n\n    // convert token balance into active bot trade for sell\n    initTokenTrade: function initTokenTrade(token, amount) {\n      var _this3 = this;\n\n      var asset = this.watchOptions.asset;\n      var symbol = token + asset;\n      var quantity = Math.floor(amount);\n      var qtyStr = this.$utils.money(quantity);\n      var price = this.getSymbolPrice(symbol);\n      var priceStr = this.$utils.fixed(price, asset);\n\n      // check if current market price was founf for this token\n      if (!price || !quantity) {\n        return this.$bus.emit('showNotice', 'No market for ' + symbol + ' at the moment.', 'warning');\n      }\n      // check if amount is already used by another trade\n      if (this.checkBotTradeExists(symbol, quantity)) {\n        return this.$bus.emit('showNotice', 'A trade for this ' + token + ' amount already exists.', 'warning');\n      }\n      // ask for intitial buy price for the token being traded\n      new __WEBPACK_IMPORTED_MODULE_0__modules_prompt__[\"a\" /* default */]({\n        title: 'Original ' + symbol + ' BUY Price',\n        inputText: '0.00000000',\n        forceValue: true,\n        value: priceStr,\n        onAccept: function onAccept(buyPrice) {\n\n          // check if there's enough to trade with\n          if (!_this3.checkCanTradeToken(token, quantity, buyPrice)) {\n            return _this3.$bus.emit('showNotice', 'Not enough ' + token + ' balance to trade with.', 'warning');\n          }\n          // confirm new trade entry\n          new __WEBPACK_IMPORTED_MODULE_0__modules_prompt__[\"a\" /* default */]({\n            title: 'Confirm New Trade',\n            confirm: 'Start new trade to sell ' + qtyStr + ' ' + token + ' starting at ' + buyPrice + ' ' + asset + '?',\n            onAccept: function onAccept() {\n\n              // insert new trade\n              _this3.handleBotOrder(_this3.$binance.fakeOrderData(symbol, 'LIMIT', 'BUY', buyPrice, quantity, 'FILLED'), true);\n              _this3.$bus.emit('showNotice', 'New trade added for ' + qtyStr + ' ' + token + ' @ ' + buyPrice + ' ' + asset + '.', 'success');\n            }\n          });\n        }\n      });\n    },\n\n\n    // handle incoming order for the bot\n    handleBotOrder: function handleBotOrder(order, force) {\n      var id = order.id,\n          unique = order.unique,\n          time = order.time,\n          symbol = order.symbol,\n          token = order.token,\n          asset = order.asset,\n          name = order.name,\n          pair = order.pair,\n          route = order.route,\n          image = order.image,\n          price = order.price,\n          quantity = order.quantity,\n          filled = order.filled,\n          amount = order.amount;\n\n      var unqdone = order.unique + '_' + this.$utils.randString(10);\n      var insert = this.botActive || force;\n\n      // buy order filled, create new trade entry\n      if (order.status === 'FILLED' && order.side === 'BUY' && insert) {\n        var active = true,\n            status = TRADE_WAIT,\n            buyPrice = price,\n            sellPrice = price,\n            profit = 0;\n\n        this.tradesData.push({ id: id, unique: unique, time: time, active: active, status: status, symbol: symbol, token: token, asset: asset, name: name, pair: pair, route: route, image: image, quantity: quantity, filled: filled, amount: amount, buyPrice: buyPrice, sellPrice: sellPrice, profit: profit });\n      }\n      // sell order filled, update existing trade entry\n      if (order.status === 'FILLED' && order.side === 'SELL') {\n        var _active = false,\n            _status = TRADE_DONE,\n            _sellPrice = price;\n\n        this.tradesData.forEach(function (o) {\n          if (o.unique === unique) Object.assign(o, { active: _active, status: _status, sellPrice: _sellPrice, unique: unqdone });\n        });\n      }\n      // sell order initiated, update existing trade entry\n      if (order.status === 'OPEN' && order.side === 'SELL') {\n        var _active2 = true,\n            _status2 = TRADE_SELL,\n            _sellPrice2 = price;\n\n        this.tradesData.forEach(function (o) {\n          if (o.unique === unique) Object.assign(o, { active: _active2, status: _status2, sellPrice: _sellPrice2 });\n        });\n      }\n      // order removed, update existing trade entry\n      if (/^(CANCELED|EXPIRED|REJECTED|REPLACED)$/.test(order.status)) {\n        var _active3 = true,\n            _status3 = TRADE_WAIT;\n\n        this.tradesData.forEach(function (o) {\n          if (o.unique === unique) Object.assign(o, { active: _active3, status: _status3 });\n        });\n      }\n      this.saveData(this.keys.trades, this.tradesData);\n    },\n\n\n    // mark a bot trade as active (reset)\n    markBotTradeActive: function markBotTradeActive(id) {\n      var active = true,\n          status = TRADE_WAIT;\n\n      this.tradesData.forEach(function (o) {\n        if (o.id === id) Object.assign(o, { active: active, status: status });\n      });\n      this.saveData(this.keys.trades, this.tradesData);\n    },\n\n\n    // mark a bot trade as sold (complete)\n    markBotTradeSold: function markBotTradeSold(id) {\n      var active = false,\n          status = TRADE_DONE;\n\n      this.tradesData.forEach(function (o) {\n        if (o.id === id) Object.assign(o, { active: active, status: status });\n      });\n      this.saveData(this.keys.trades, this.tradesData);\n    },\n\n\n    // stop the bot if there are request errors\n    checkBotErrors: function checkBotErrors() {\n      if (!this.botActive) return;\n      if (this.errorCount > 2) this.stopBot();\n    },\n\n\n    // check if a bot trade exists based on a unique trade id\n    checkBotTradeExists: function checkBotTradeExists(symbol, amount) {\n      var unique = this.$utils.unique(symbol + '|' + amount);\n      return this.tradesData.filter(function (o) {\n        return o.unique === unique;\n      }).length ? true : false;\n    },\n\n\n    // check price ticker for buy trigger\n    checkTradeBuy: function checkTradeBuy() {\n      var _this4 = this;\n\n      if (!this.botActive) return;\n      this.watcher.check(this.priceData, function (p, pc, vc, t) {\n\n        // calculate order amount and total\n        var limit = String(_this4.watchOptions.tradeLimit);\n        var quantity = Math.floor(_this4.tradeBalance / p.close);\n\n        // check bot trade balance and options\n        if (_this4.pendingTrades >= _this4.maxTrades) return;\n        if (_this4.balanceUsed >= _this4.balanceTotal) return;\n        if (!_this4.checkCanTradeToken(p.token, quantity, p.close)) return;\n        if (_this4.checkBotTradeExists(p.symbol, quantity)) return;\n\n        // check trade limit\n        if (limit === 'active' && _this4.activeTradeCount(p.token)) return;\n        if (limit === 'single' && _this4.totalTradeCount(p.token)) return;\n\n        // place buy order\n        _this4.placeOrder('BUY', p.symbol, p.close, quantity);\n      });\n    },\n\n\n    // check if a trade needs to be sold due to stop loss or profit\n    checkTradeSell: function checkTradeSell() {\n      var profit = Number(this.watchOptions.priceProfit);\n      var stop = Math.abs(this.watchOptions.priceStop) * -1;\n      var total = 0;\n\n      for (var i = 0; i < this.tradesData.length; ++i) {\n        var _tradesData$i = this.tradesData[i],\n            active = _tradesData$i.active,\n            status = _tradesData$i.status,\n            symbol = _tradesData$i.symbol,\n            token = _tradesData$i.token,\n            amount = _tradesData$i.amount,\n            buyPrice = _tradesData$i.buyPrice,\n            sellPrice = _tradesData$i.sellPrice;\n\n        var close = active && status === TRADE_WAIT ? this.getSymbolPrice(symbol) : sellPrice;\n        var percent = close ? this.$utils.percent(close, buyPrice, true) : 0;\n\n        // keep live profit values updated\n        this.tradesData[i].sellPrice = close;\n        this.tradesData[i].profit = percent;\n        total += percent;\n\n        // check bot status and options\n        if (!this.botActive) continue;\n        if (!active || !amount || status === TRADE_SELL) continue;\n        if (!this.checkCanTradeToken(token, amount, close)) continue;\n        if (this.liveMode && !this.hasTokenBalance(token, amount)) continue;\n\n        // stop loss hit, place sell order\n        if (stop < 0 && percent <= stop) {\n          this.tradesData[i].status = TRADE_SELL;\n          this.placeOrder('SELL', symbol, close, amount);\n          continue;\n        }\n        // profit hit, place sell order\n        if (percent >= profit) {\n          this.tradesData[i].status = TRADE_SELL;\n          this.placeOrder('SELL', symbol, close, amount);\n          continue;\n        }\n      }\n      this.botProfit = total;\n    },\n\n\n    // make a copy of current prices to start comparing against\n    buildSnapshot: function buildSnapshot() {\n      this.watcher.setOptions(this.watchOptions);\n      this.watcher.updateSnapshot(this.priceData);\n    },\n\n\n    // when bot form options change\n    onBotOptions: function onBotOptions(e) {\n      var asset = String(this.watchOptions.asset);\n      var percent = String(this.watchOptions.assetPercent);\n      var factor = Number(percent) / 100;\n      var coin = this.balancesData.filter(function (b) {\n        return b.asset === asset;\n      }).shift();\n      this.watchOptions.assetBalance = coin ? +Number(coin.free * factor).toFixed(8) : 0;\n      this.buildSnapshot();\n    },\n\n\n    // start new bot session\n    startBot: function startBot() {\n      if (this.botActive) return;\n      if (this.liveMode && !confirm('Starting the bot in LIVE mode, are you sure?')) {\n        this.liveMode = false;\n        return;\n      }\n      this.botActive = true;\n      this.botStart = Date.now();\n      this.botElapsed = '0s';\n      this.botProfit = 0;\n      this.errorCount = 0;\n      this.buildSnapshot();\n      this.cleanTradesList();\n      this.saveData(this.keys.options, this.watchOptions);\n      this.$bus.emit('showNotice', 'The trade bot is now active!', 'success');\n    },\n\n\n    // stop current bot session\n    stopBot: function stopBot() {\n      if (!this.botActive) return;\n      this.botActive = false;\n      this.buildSessionData();\n      this.$bus.emit('showNotice', 'The trade bot has stopped running.', 'success');\n    },\n\n\n    // place real or simulated order based on some option\n    placeOrder: function placeOrder(side, symbol, price, quantity) {\n      var type = String(this.watchOptions.orderType);\n      var inforce = String(this.watchOptions.orderTime);\n\n      if (this.liveMode === true) {\n        this.$binance.placeOrder(symbol, type, side, price, quantity, inforce);\n      } else {\n        this.$binance.placeFakeOrder(symbol, type, side, price, quantity);\n      } // fake it til you make it.\n    },\n\n\n    // cancel and/or remove order from list\n    cancelOrder: function cancelOrder(symbol, orderId, quantity) {\n      this.$binance.cancelOrder(symbol, orderId, quantity);\n    },\n\n\n    // on order placed in order book\n    onBookCreate: function onBookCreate(order) {\n      var status = order.status,\n          token = order.token,\n          asset = order.asset,\n          type = order.type,\n          side = order.side,\n          price = order.price,\n          quantity = order.quantity;\n\n      var priceStr = this.$utils.fixed(price, asset);\n      var qtyStr = this.$utils.money(quantity, 0);\n      var message = type + ' ' + side + ' Order ' + status + ' for ' + qtyStr + ' ' + token + ' @ ' + priceStr + ' ' + asset + '.';\n      this.$bus.emit('showNotice', message, 'info');\n      this.errorCount = 0;\n    },\n\n\n    // on order removed from order book\n    onBookCancel: function onBookCancel(order) {\n      var status = order.status,\n          token = order.token,\n          type = order.type,\n          side = order.side;\n\n      var message = token + ' ' + type + ' ' + side + ' Order ' + status + '.';\n      this.$bus.emit('showNotice', message, 'info');\n      this.errorCount = 0;\n    },\n\n\n    // on order placing errors\n    onBookFail: function onBookFail(order, error) {\n      this.$bus.emit('showNotice', error, 'error');\n      this.errorCount += 1;\n    },\n\n\n    // attempt to start a new user stream\n    initUserStream: function initUserStream() {\n      this.$binance.initUserStream(false);\n    },\n\n\n    // disconnect from user stream\n    stopUserStream: function stopUserStream() {\n      this.$binance.stopUserStream();\n    },\n\n\n    // on user stream connect\n    onUserInit: function onUserInit(e) {\n      this.socketStatus = 1;\n      this.balancesData = [];\n      this.onBotOptions();\n    },\n\n\n    // on user stream connect failed\n    onUserFail: function onUserFail(error) {\n      this.socketStatus = 0;\n      this.socketError = error;\n      this.$bus.emit('showNotice', error, 'error');\n    },\n\n\n    // on user stream error\n    onUserError: function onUserError(e) {\n      this.socketStatus = 0;\n      this.socketError = String(e.message || 'User account API connection failed, check the console for more details.');\n      this.$bus.emit('showNotice', this.socketError, 'error');\n    },\n\n\n    // on user stream close\n    onUserClose: function onUserClose(e) {\n      this.socketStatus = 0;\n      this.balancesData = [];\n      this.ordersData = [];\n      this.onBotOptions();\n      this.stopBot();\n    },\n\n\n    // on user stream open\n    onUserOpen: function onUserOpen(e) {\n      this.socketStatus = 1;\n      this.socketError = '';\n    },\n\n\n    // on user stream raw data\n    onUserData: function onUserData(e) {\n      this.socketTime = Date.now();\n      this.socketStatus = 2;\n    },\n\n\n    // on user account balances data\n    onUserBalances: function onUserBalances(balances) {\n      this.balancesData = balances;\n      this.onBotOptions();\n    },\n\n\n    // on user stream order data\n    onUserOrder: function onUserOrder(order) {\n      this.handleBotOrder(order);\n      this.updateOrdersList(order);\n      this.notifyOrder(order);\n    },\n\n\n    // toggle trade bot state\n    toggleTradeBot: function toggleTradeBot(action) {\n      switch (action) {\n        case 'start':\n          return this.startBot();\n        case 'stop':\n          return this.stopBot();\n      }\n    }\n  },\n\n  // on component created\n  created: function created() {\n    this.$bus.on('toggleTradeBot', this.toggleTradeBot);\n    this.setupUserHandlers();\n  },\n\n\n  // on component mounted\n  mounted: function mounted() {\n    this.loadSavedData();\n    this.onBotOptions();\n  },\n\n\n  // on component destroyed\n  destroyed: function destroyed() {\n    this.stopUserStream();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvVHJhZGVQYWdlLnZ1ZT9jNGQ3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpaUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa2NBSEE7O0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBLEtBREE7QUFFQTtBQUFBO0FBQUE7QUFBQSxzQkFGQTtBQUdBO0FBQUE7QUFBQTtBQUFBLHNCQUhBO0FBSUE7QUFBQTtBQUFBO0FBQUEsc0JBSkE7QUFLQTtBQUFBO0FBQUE7QUFBQSxzQkFMQTtBQU1BO0FBTkEsR0FOQTs7QUFlQTtBQUNBLE1BaEJBLGtCQWdCQTtBQUNBO0FBQ0E7QUFDQSxxQkFGQTtBQUdBLHNCQUhBO0FBSUEsaUJBSkE7QUFLQSxzQkFMQTtBQU1BLGtCQU5BO0FBT0E7QUFDQSxzQkFSQTtBQVNBLG9CQVRBO0FBVUEsb0JBVkE7QUFXQSxzQkFYQTtBQVlBLG1CQVpBO0FBYUEsc0JBYkE7QUFjQTtBQUNBLG1CQWZBO0FBZ0JBLGtCQWhCQTtBQWlCQSx1QkFqQkE7QUFrQkEsb0JBbEJBO0FBbUJBO0FBQ0EsbUJBcEJBO0FBcUJBLDRCQXJCQTtBQXNCQSxxQkF0QkE7QUF1QkEscUJBdkJBO0FBd0JBO0FBQ0E7QUFDQSw4QkFEQTtBQUVBLDRCQUZBO0FBR0EsNEJBSEE7QUFJQTtBQUpBLE9BekJBO0FBK0JBO0FBQ0Esc0ZBaENBO0FBaUNBO0FBQ0E7QUFDQSxpQkFGQTtBQUdBLG9CQUhBO0FBSUE7QUFDQSx3QkFMQTtBQU1BLHVCQU5BO0FBT0EscUJBUEE7QUFRQTtBQUNBLHlCQVRBO0FBVUEsd0JBVkE7QUFXQSx3QkFYQTtBQVlBLG9CQVpBO0FBYUEsMkJBYkE7QUFjQSxpQkFkQTtBQWVBO0FBQ0EsMEJBaEJBO0FBaUJBLHlCQWpCQTtBQWtCQSw0QkFsQkE7QUFtQkEsa0JBbkJBO0FBb0JBO0FBQ0EsNEJBckJBO0FBc0JBLG1CQXRCQTtBQXVCQTtBQUNBLGdDQXhCQTtBQXlCQSx1QkF6QkE7QUEwQkE7QUFDQSw0QkEzQkE7QUE0QkEsbUJBNUJBO0FBNkJBO0FBQ0EseUJBOUJBO0FBK0JBLHVCQS9CQTtBQWdDQTtBQUNBLDJCQWpDQTtBQWtDQSx3QkFsQ0E7QUFtQ0E7QUFDQSwwQkFwQ0E7QUFxQ0Esd0JBckNBO0FBc0NBO0FBQ0E7QUF2Q0E7QUFqQ0E7QUEyRUEsR0E1RkE7OztBQThGQTtBQUNBOztBQUVBO0FBQ0EsYUFIQSx1QkFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBLEdBL0ZBOztBQTJHQTtBQUNBOztBQUVBO0FBQ0EsY0FIQSx3QkFHQTtBQUFBLDZCQUNBLG9CQURBO0FBQUEsVUFDQSxPQURBLG9CQUNBLE9BREE7QUFBQSxVQUNBLE1BREEsb0JBQ0EsTUFEQTtBQUFBLFVBQ0EsU0FEQSxvQkFDQSxTQURBOztBQUVBO0FBQ0EsS0FOQTs7O0FBUUE7QUFDQSxlQVRBLHlCQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQWRBOzs7QUFnQkE7QUFDQSxrQkFqQkEsNEJBaUJBO0FBQ0E7QUFDQSxLQW5CQTs7O0FBcUJBO0FBQ0EsYUF0QkEsdUJBc0JBO0FBQ0E7QUFDQSxLQXhCQTs7O0FBMEJBO0FBQ0EsZUEzQkEseUJBMkJBO0FBQ0E7QUFDQSxLQTdCQTs7O0FBK0JBO0FBQ0EsZUFoQ0EseUJBZ0NBO0FBQ0E7QUFDQSxLQWxDQTs7O0FBb0NBO0FBQ0EsaUJBckNBLDJCQXFDQTtBQUNBO0FBQ0EsS0F2Q0E7OztBQXlDQTtBQUNBLGVBMUNBLHlCQTBDQTtBQUNBO0FBQ0EsS0E1Q0E7OztBQThDQTtBQUNBLGdCQS9DQSwwQkErQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQW5EQTs7O0FBcURBO0FBQ0EsaUJBdERBLDJCQXNEQTtBQUNBO0FBQUE7QUFBQTtBQUNBLEtBeERBOzs7QUEwREE7QUFDQSxhQTNEQSx1QkEyREE7QUFDQTtBQUNBLEtBN0RBOzs7QUErREE7QUFDQSxrQkFoRUEsNEJBZ0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQXJFQTs7O0FBdUVBO0FBQ0EsZ0JBeEVBLDBCQXdFQTtBQUNBO0FBQ0EsS0ExRUE7OztBQTRFQTtBQUNBLGdCQTdFQSwwQkE2RUE7QUFDQTtBQUNBLEtBL0VBOzs7QUFpRkE7QUFDQSxlQWxGQSx5QkFrRkE7QUFDQTtBQUNBLEtBcEZBOzs7QUFzRkE7QUFDQSxpQkF2RkEsMkJBdUZBO0FBQ0E7QUFDQSxLQXpGQTs7O0FBMkZBO0FBQ0EsZ0JBNUZBLDBCQTRGQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0EsS0EvRkE7OztBQWlHQTtBQUNBLGdCQWxHQSwwQkFrR0E7QUFBQSwrQkFDQSxzQkFEQTtBQUFBLFVBQ0EsTUFEQSxzQkFDQSxNQURBO0FBQUEsVUFDQSxLQURBLHNCQUNBLEtBREE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSxLQTNHQTs7O0FBNkdBO0FBQ0EsY0E5R0Esd0JBOEdBO0FBQUEsNkJBQ0Esb0JBREE7QUFBQSxVQUNBLE1BREEsb0JBQ0EsTUFEQTtBQUFBLFVBQ0EsS0FEQSxvQkFDQSxLQURBOztBQUVBLHlDQUZBLENBRUE7QUFDQSxtREFIQSxDQUdBO0FBQ0E7QUFDQSxLQW5IQTs7O0FBcUhBO0FBQ0EsY0F0SEEsd0JBc0hBO0FBQUEsNkJBQ0Esb0JBREE7QUFBQSxVQUNBLE1BREEsb0JBQ0EsTUFEQTtBQUFBLFVBQ0EsS0FEQSxvQkFDQSxLQURBOztBQUVBLHlDQUZBLENBRUE7QUFDQSxtREFIQSxDQUdBO0FBQ0EsNkRBSkEsQ0FJQTtBQUNBO0FBQ0EsS0E1SEE7OztBQThIQTtBQUNBLGdCQS9IQSwwQkErSEE7QUFBQSwrQkFDQSxzQkFEQTtBQUFBLFVBQ0EsTUFEQSxzQkFDQSxNQURBO0FBQUEsVUFDQSxLQURBLHNCQUNBLEtBREE7O0FBRUEsMkNBRkEsQ0FFQTtBQUNBLG1EQUhBLENBR0E7QUFDQTtBQUNBO0FBcElBLEdBNUdBOztBQW1QQTtBQUNBOztBQUVBO0FBQ0EsZUFIQSx5QkFHQTtBQUNBO0FBQ0EsS0FMQTs7O0FBT0E7QUFDQSxxQkFSQSwrQkFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0F0QkE7OztBQXdCQTtBQUNBLFlBekJBLG9CQXlCQSxHQXpCQSxFQXlCQSxJQXpCQSxFQXlCQTtBQUNBO0FBQ0EsS0EzQkE7OztBQTZCQTtBQUNBLGlCQTlCQSwyQkE4QkE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBdkNBOzs7QUF5Q0E7QUFDQSxlQTFDQSx1QkEwQ0EsTUExQ0EsRUEwQ0EsQ0ExQ0EsRUEwQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUhBO0FBS0EsS0FoREE7OztBQWtEQTtBQUNBLGNBbkRBLHdCQW1EQTtBQUNBO0FBQ0EsS0FyREE7OztBQXVEQTtBQUNBLGVBeERBLHVCQXdEQSxLQXhEQSxFQXdEQTtBQUFBLFVBQ0EsRUFEQSxHQUNBLEtBREEsQ0FDQSxFQURBO0FBQUEsVUFDQSxJQURBLEdBQ0EsS0FEQSxDQUNBLElBREE7QUFBQSxVQUNBLE1BREEsR0FDQSxLQURBLENBQ0EsTUFEQTtBQUFBLFVBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsVUFDQSxLQURBLEdBQ0EsS0FEQSxDQUNBLEtBREE7QUFBQSxVQUNBLElBREEsR0FDQSxLQURBLENBQ0EsSUFEQTtBQUFBLFVBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsVUFDQSxJQURBLEdBQ0EsS0FEQSxDQUNBLElBREE7QUFBQSxVQUNBLElBREEsR0FDQSxLQURBLENBQ0EsSUFEQTtBQUFBLFVBQ0EsTUFEQSxHQUNBLEtBREEsQ0FDQSxNQURBO0FBQUEsVUFDQSxLQURBLEdBQ0EsS0FEQSxDQUNBLEtBREE7QUFBQSxVQUNBLFFBREEsR0FDQSxLQURBLENBQ0EsUUFEQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FwRUE7OztBQXNFQTtBQUNBLGtCQXZFQSwwQkF1RUEsTUF2RUEsRUF1RUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FsRkE7OztBQW9GQTtBQUNBLG1CQXJGQSwyQkFxRkEsS0FyRkEsRUFxRkEsTUFyRkEsRUFxRkE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0E3RkE7OztBQStGQTtBQUNBLG9CQWhHQSw0QkFnR0EsS0FoR0EsRUFnR0E7QUFDQTtBQUFBO0FBQUEsU0FEQSxDQUNBO0FBQ0EsMEVBRkEsQ0FFQTtBQUNBLGtFQUhBLENBR0E7QUFDQSxLQXBHQTs7O0FBc0dBO0FBQ0EsZUF2R0EsdUJBdUdBLEVBdkdBLEVBdUdBO0FBQ0E7QUFBQTtBQUFBO0FBQ0EsS0F6R0E7OztBQTJHQTtBQUNBLG1CQTVHQSw2QkE0R0E7QUFDQTtBQUFBO0FBQUE7QUFDQSxLQTlHQTs7O0FBZ0hBO0FBQ0Esb0JBakhBLDhCQWlIQTtBQUNBO0FBQUEsNEJBQ0Esa0JBREE7QUFBQSxZQUNBLEVBREEsaUJBQ0EsRUFEQTtBQUFBLFlBQ0EsTUFEQSxpQkFDQSxNQURBO0FBQUEsWUFDQSxNQURBLGlCQUNBLE1BREE7QUFBQSxZQUNBLFFBREEsaUJBQ0EsUUFEQTs7QUFFQTtBQUNBO0FBQ0EsS0F0SEE7OztBQXdIQTtBQUNBLG9CQXpIQSw4QkF5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0EseUJBaEJBLENBZ0JBOztBQUVBLGtMQWxCQSxDQWtCQTtBQUNBLG9FQW5CQSxDQW1CQTtBQUNBLDJEQXBCQSxDQW9CQTtBQUNBLEtBOUlBOzs7QUFnSkE7QUFDQSxzQkFqSkEsOEJBaUpBLEVBakpBLEVBaUpBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQSxLQXBKQTs7O0FBc0pBO0FBQ0Esb0JBdkpBLDhCQXVKQTtBQUNBO0FBQ0E7QUFDQSxLQTFKQTs7O0FBNEpBO0FBQ0Esb0JBN0pBLDhCQTZKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBaktBOzs7QUFtS0E7QUFDQSxzQkFwS0EsZ0NBb0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBN0tBOzs7QUErS0E7QUFDQSxvQkFoTEEsNEJBZ0xBLEtBaExBLEVBZ0xBO0FBQ0E7QUFBQTtBQUFBO0FBQ0EsS0FsTEE7OztBQW9MQTtBQUNBLG1CQXJMQSwyQkFxTEEsS0FyTEEsRUFxTEE7QUFDQTtBQUFBO0FBQUE7QUFDQSxLQXZMQTs7O0FBeUxBO0FBQ0EsbUJBMUxBLDZCQTBMQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0EsS0E3TEE7OztBQStMQTtBQUNBLG9CQWhNQSw0QkFnTUEsT0FoTUEsRUFnTUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBLEtBbk1BOzs7QUFxTUE7QUFDQSxxQkF0TUEsK0JBc01BO0FBQUE7O0FBQ0E7QUFDQSxzQ0FEQTtBQUVBLG9FQUZBO0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBUEE7QUFTQSxLQWhOQTs7O0FBa05BO0FBQ0EsbUJBbk5BLDJCQW1OQSxFQW5OQSxFQW1OQTtBQUFBOztBQUNBOztBQUVBO0FBQUEsWUFDQSxNQURBLEdBQ0EsS0FEQSxDQUNBLE1BREE7QUFBQSxZQUNBLE1BREEsR0FDQSxLQURBLENBQ0EsTUFEQTtBQUFBLFlBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsWUFDQSxLQURBLEdBQ0EsS0FEQSxDQUNBLEtBREE7QUFBQSxZQUNBLE1BREEsR0FDQSxLQURBLENBQ0EsTUFEQTtBQUFBLFlBQ0EsU0FEQSxHQUNBLEtBREEsQ0FDQSxTQURBOztBQUVBOztBQUVBO0FBQ0EscUNBREE7QUFFQSxnSEFGQTtBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQVBBO0FBU0EsT0FiQTtBQWNBLEtBcE9BOzs7QUFzT0E7QUFDQSxzQkF2T0EsOEJBdU9BLEtBdk9BLEVBdU9BLE1Bdk9BLEVBdU9BLEtBdk9BLEVBdU9BO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBelBBOzs7QUEyUEE7QUFDQSxrQkE1UEEsMEJBNFBBLEtBNVBBLEVBNFBBLE1BNVBBLEVBNFBBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBREE7QUFFQSwrQkFGQTtBQUdBLHdCQUhBO0FBSUEsdUJBSkE7QUFLQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FEQTtBQUVBLHVIQUZBO0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBdEJBO0FBd0JBLEtBclNBOzs7QUF1U0E7QUFDQSxrQkF4U0EsMEJBd1NBLEtBeFNBLEVBd1NBLEtBeFNBLEVBd1NBO0FBQUEsVUFDQSxFQURBLEdBQ0EsS0FEQSxDQUNBLEVBREE7QUFBQSxVQUNBLE1BREEsR0FDQSxLQURBLENBQ0EsTUFEQTtBQUFBLFVBQ0EsSUFEQSxHQUNBLEtBREEsQ0FDQSxJQURBO0FBQUEsVUFDQSxNQURBLEdBQ0EsS0FEQSxDQUNBLE1BREE7QUFBQSxVQUNBLEtBREEsR0FDQSxLQURBLENBQ0EsS0FEQTtBQUFBLFVBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsVUFDQSxJQURBLEdBQ0EsS0FEQSxDQUNBLElBREE7QUFBQSxVQUNBLElBREEsR0FDQSxLQURBLENBQ0EsSUFEQTtBQUFBLFVBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsVUFDQSxLQURBLEdBQ0EsS0FEQSxDQUNBLEtBREE7QUFBQSxVQUNBLEtBREEsR0FDQSxLQURBLENBQ0EsS0FEQTtBQUFBLFVBQ0EsUUFEQSxHQUNBLEtBREEsQ0FDQSxRQURBO0FBQUEsVUFDQSxNQURBLEdBQ0EsS0FEQSxDQUNBLE1BREE7QUFBQSxVQUNBLE1BREEsR0FDQSxLQURBLENBQ0EsTUFEQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFBQSxZQUNBLE1BREEsR0FDQSxJQURBO0FBQUEsWUFDQSxNQURBLEdBQ0EsVUFEQTtBQUFBLFlBQ0EsUUFEQSxHQUNBLEtBREE7QUFBQSxZQUNBLFNBREEsR0FDQSxLQURBO0FBQUEsWUFDQSxNQURBLEdBQ0EsQ0FEQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLFlBQ0EsT0FEQSxHQUNBLEtBREE7QUFBQSxZQUNBLE9BREEsR0FDQSxVQURBO0FBQUEsWUFDQSxVQURBLEdBQ0EsS0FEQTs7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQSxZQUNBLFFBREEsR0FDQSxJQURBO0FBQUEsWUFDQSxRQURBLEdBQ0EsVUFEQTtBQUFBLFlBQ0EsV0FEQSxHQUNBLEtBREE7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUEsWUFDQSxRQURBLEdBQ0EsSUFEQTtBQUFBLFlBQ0EsUUFEQSxHQUNBLFVBREE7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLEtBbFVBOzs7QUFvVUE7QUFDQSxzQkFyVUEsOEJBcVVBLEVBclVBLEVBcVVBO0FBQUEsVUFDQSxNQURBLEdBQ0EsSUFEQTtBQUFBLFVBQ0EsTUFEQSxHQUNBLFVBREE7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQSxLQXpVQTs7O0FBMlVBO0FBQ0Esb0JBNVVBLDRCQTRVQSxFQTVVQSxFQTRVQTtBQUFBLFVBQ0EsTUFEQSxHQUNBLEtBREE7QUFBQSxVQUNBLE1BREEsR0FDQSxVQURBOztBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0EsS0FoVkE7OztBQWtWQTtBQUNBLGtCQW5WQSw0QkFtVkE7QUFDQTtBQUNBO0FBQ0EsS0F0VkE7OztBQXdWQTtBQUNBLHVCQXpWQSwrQkF5VkEsTUF6VkEsRUF5VkEsTUF6VkEsRUF5VkE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBLEtBNVZBOzs7QUE4VkE7QUFDQSxpQkEvVkEsMkJBK1ZBO0FBQUE7O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BbEJBO0FBbUJBLEtBcFhBOzs7QUFzWEE7QUFDQSxrQkF2WEEsNEJBdVhBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQUEsNEJBQ0Esa0JBREE7QUFBQSxZQUNBLE1BREEsaUJBQ0EsTUFEQTtBQUFBLFlBQ0EsTUFEQSxpQkFDQSxNQURBO0FBQUEsWUFDQSxNQURBLGlCQUNBLE1BREE7QUFBQSxZQUNBLEtBREEsaUJBQ0EsS0FEQTtBQUFBLFlBQ0EsTUFEQSxpQkFDQSxNQURBO0FBQUEsWUFDQSxRQURBLGlCQUNBLFFBREE7QUFBQSxZQUNBLFNBREEsaUJBQ0EsU0FEQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBMVpBOzs7QUE0WkE7QUFDQSxpQkE3WkEsMkJBNlpBO0FBQ0E7QUFDQTtBQUNBLEtBaGFBOzs7QUFrYUE7QUFDQSxnQkFuYUEsd0JBbWFBLENBbmFBLEVBbWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLEtBMWFBOzs7QUE0YUE7QUFDQSxZQTdhQSxzQkE2YUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0E1YkE7OztBQThiQTtBQUNBLFdBL2JBLHFCQStiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FwY0E7OztBQXNjQTtBQUNBLGNBdmNBLHNCQXVjQSxJQXZjQSxFQXVjQSxNQXZjQSxFQXVjQSxLQXZjQSxFQXVjQSxRQXZjQSxFQXVjQTtBQUNBO0FBQ0E7O0FBRUE7QUFBQTtBQUFBLGFBQ0E7QUFBQTtBQUFBLE9BTEEsQ0FLQTtBQUNBLEtBN2NBOzs7QUErY0E7QUFDQSxlQWhkQSx1QkFnZEEsTUFoZEEsRUFnZEEsT0FoZEEsRUFnZEEsUUFoZEEsRUFnZEE7QUFDQTtBQUNBLEtBbGRBOzs7QUFvZEE7QUFDQSxnQkFyZEEsd0JBcWRBLEtBcmRBLEVBcWRBO0FBQUEsVUFDQSxNQURBLEdBQ0EsS0FEQSxDQUNBLE1BREE7QUFBQSxVQUNBLEtBREEsR0FDQSxLQURBLENBQ0EsS0FEQTtBQUFBLFVBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsVUFDQSxJQURBLEdBQ0EsS0FEQSxDQUNBLElBREE7QUFBQSxVQUNBLElBREEsR0FDQSxLQURBLENBQ0EsSUFEQTtBQUFBLFVBQ0EsS0FEQSxHQUNBLEtBREEsQ0FDQSxLQURBO0FBQUEsVUFDQSxRQURBLEdBQ0EsS0FEQSxDQUNBLFFBREE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBNWRBOzs7QUE4ZEE7QUFDQSxnQkEvZEEsd0JBK2RBLEtBL2RBLEVBK2RBO0FBQUEsVUFDQSxNQURBLEdBQ0EsS0FEQSxDQUNBLE1BREE7QUFBQSxVQUNBLEtBREEsR0FDQSxLQURBLENBQ0EsS0FEQTtBQUFBLFVBQ0EsSUFEQSxHQUNBLEtBREEsQ0FDQSxJQURBO0FBQUEsVUFDQSxJQURBLEdBQ0EsS0FEQSxDQUNBLElBREE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FwZUE7OztBQXNlQTtBQUNBLGNBdmVBLHNCQXVlQSxLQXZlQSxFQXVlQSxLQXZlQSxFQXVlQTtBQUNBO0FBQ0E7QUFDQSxLQTFlQTs7O0FBNGVBO0FBQ0Esa0JBN2VBLDRCQTZlQTtBQUNBO0FBQ0EsS0EvZUE7OztBQWlmQTtBQUNBLGtCQWxmQSw0QkFrZkE7QUFDQTtBQUNBLEtBcGZBOzs7QUFzZkE7QUFDQSxjQXZmQSxzQkF1ZkEsQ0F2ZkEsRUF1ZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQTNmQTs7O0FBNmZBO0FBQ0EsY0E5ZkEsc0JBOGZBLEtBOWZBLEVBOGZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FsZ0JBOzs7QUFvZ0JBO0FBQ0EsZUFyZ0JBLHVCQXFnQkEsQ0FyZ0JBLEVBcWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBemdCQTs7O0FBMmdCQTtBQUNBLGVBNWdCQSx1QkE0Z0JBLENBNWdCQSxFQTRnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FsaEJBOzs7QUFvaEJBO0FBQ0EsY0FyaEJBLHNCQXFoQkEsQ0FyaEJBLEVBcWhCQTtBQUNBO0FBQ0E7QUFDQSxLQXhoQkE7OztBQTBoQkE7QUFDQSxjQTNoQkEsc0JBMmhCQSxDQTNoQkEsRUEyaEJBO0FBQ0E7QUFDQTtBQUNBLEtBOWhCQTs7O0FBZ2lCQTtBQUNBLGtCQWppQkEsMEJBaWlCQSxRQWppQkEsRUFpaUJBO0FBQ0E7QUFDQTtBQUNBLEtBcGlCQTs7O0FBc2lCQTtBQUNBLGVBdmlCQSx1QkF1aUJBLEtBdmlCQSxFQXVpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQTNpQkE7OztBQTZpQkE7QUFDQSxrQkE5aUJBLDBCQThpQkEsTUE5aUJBLEVBOGlCQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFGQTtBQUlBO0FBbmpCQSxHQXBQQTs7QUEweUJBO0FBQ0EsU0EzeUJBLHFCQTJ5QkE7QUFDQTtBQUNBO0FBQ0EsR0E5eUJBOzs7QUFnekJBO0FBQ0EsU0FqekJBLHFCQWl6QkE7QUFDQTtBQUNBO0FBQ0EsR0FwekJBOzs7QUFzekJBO0FBQ0EsV0F2ekJBLHVCQXV6QkE7QUFDQTtBQUNBO0FBenpCQSIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICA8bWFpbiBjbGFzcz1cInBhZ2Utd3JhcFwiIDpjbGFzcz1cInsgJ2NvbGxhcHNlZCc6IGhlYWRlci5jb2xsYXBzZWQsICdvcGFxdWUnOiBoZWFkZXIub3BhcXVlIH1cIj5cclxuXHJcbiAgICA8IS0tIGNvbnRyb2xzIHNlY3Rpb24gLS0+XHJcbiAgICA8c2VjdGlvbiBjbGFzcz1cInBhZ2UtdG9wYmFyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC1yb3cgZmxleC1taWRkbGUgZmxleC1zcGFjZVwiPlxyXG5cclxuICAgICAgICAgIDwhLS0gY29udHJvbCBzZWFyY2ggLS0+XHJcbiAgICAgICAgICA8U2VhcmNoIGNsYXNzPVwibGlnaHQgcHVzaC1yaWdodFwiIHYtbW9kZWw9XCJzZWFyY2hTdHJcIj48L1NlYXJjaD5cclxuXHJcbiAgICAgICAgICA8IS0tIGNvbnRyb2wgaGVhZGluZyAtLT5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgdGV4dC1jbGlwIHRleHQtYmlnIHRleHQtY2VudGVyIHB1c2gtcmlnaHQgaWYtbWVkaXVtXCI+VHJhZGluZyBCb3Q8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8IS0tIGNvbnRyb2wgZHJvcGRvd24gbWVudXMgLS0+XHJcbiAgICAgICAgICA8RHJvcGRvd24+XHJcbiAgICAgICAgICAgIDxidXR0b24gc2xvdD1cInRyaWdnZXJcIiBjbGFzcz1cImZvcm0tYnRuIGJnLXByaW1hcnktaG92ZXIgaWNvbi1kb3duLW9wZW4gaWNvbkxlZnRcIj5cclxuICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwic29ja2V0U3RhdHVzID09PSAwXCI+QVBJIE9mZmxpbmUgPGkgY2xhc3M9XCJpY29uLWNsb3NlXCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwic29ja2V0U3RhdHVzID09PSAxXCI+QVBJIENvbm5lY3RpbmcuLi4gPGkgY2xhc3M9XCJpY29uLXNpZ25hbFwiPjwvaT48L3NwYW4+XHJcbiAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cInNvY2tldFN0YXR1cyA9PT0gMlwiPkFQSSBBY3RpdmUgPGkgY2xhc3M9XCJpY29uLWNoZWNrXCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxkaXYgc2xvdD1cImxpc3RcIiBjbGFzcz1cInRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tbGFiZWwgcGFkLWhcIj5BY2NvdW50IEFQSSBDb25uZWN0aW9uPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZC1oIHB1c2gtYm90dG9tXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiIWNhbkNvbm5lY3RcIj5Zb3Ugd2lsbCBuZWVkIHRvIHByb3ZpZGUgeW91ciBBUEkga2V5cyBpbiB0aGUgT3B0aW9ucyBwYWdlIGFuZCBlbmFibGUgaXQgdG8gY29ubmVjdCA8aSBjbGFzcz1cImljb24tY3J5XCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZS1pZj1cIiFzb2NrZXRTdGF0dXNcIj5DdXJyZW50bHkgbm90IGNvbm5lY3RlZCB0byB5b3VyIEJpbmFuY2UgYWNjb3VudCA8aSBjbGFzcz1cImljb24tY3J5XCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZS1pZj1cInNvY2tldFN0YXR1c1wiPkN1cnJlbnRseSBjb25uZWN0ZWQgdG8geW91ciBCaW5hbmNlIGFjY291bnQgPGkgY2xhc3M9XCJpY29uLWNoZWNrXCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFkLWhcIiA6Y2xhc3M9XCJ7ICdkaXNhYmxlZCc6ICFjYW5Db25uZWN0IH1cIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cInNvY2tldFN0YXR1cyA9PT0gMFwiIGNsYXNzPVwiZm9ybS1idG4gYmctc3VjY2Vzcy1ob3ZlciBpY29uLWNsb3NlIGljb25MZWZ0XCIgQGNsaWNrPVwiaW5pdFVzZXJTdHJlYW1cIj5Db25uZWN0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJzb2NrZXRTdGF0dXMgPT09IDFcIiBjbGFzcz1cImZvcm0tYnRuIGJnLWluZm8taG92ZXIgaWNvbi1jbG9zZSBpY29uTGVmdFwiPldhaXRpbmcuLi48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cInNvY2tldFN0YXR1cyA9PT0gMlwiIGNsYXNzPVwiZm9ybS1idG4gYmctZGFuZ2VyLWhvdmVyIGljb24tY2xvc2UgaWNvbkxlZnRcIiBAY2xpY2s9XCJzdG9wVXNlclN0cmVhbVwiPkRpc2Nvbm5lY3Q8L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L0Ryb3Bkb3duPlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L3NlY3Rpb24+XHJcblxyXG4gICAgPCEtLSBhY2NvdW50IGJhbGFuY2VzIHNlY3Rpb24gLS0+XHJcbiAgICA8c2VjdGlvbiBjbGFzcz1cInB1c2gtYm90dG9tXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cclxuICAgICAgICA8IS0tIGFjY291bnQgYmFsYW5jZXMgbGlzdCAtLT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCB0YWJsZWxpc3Qtd3JhcFwiPlxyXG4gICAgICAgICAgPCEtLSBsaXN0IGhlYWRlcnMgLS0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGVsaXN0LWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC1yb3cgZmxleC1taWRkbGUgZmxleC1zdHJldGNoXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC0yMCB0ZXh0LWNsaXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbGlja2FibGVcIiBAY2xpY2s9XCIkc29ydGVyLnNvcnRPcmRlciggJ2JhbGFuY2VzJywgJ25hbWUnLCAnYXNjJyApXCI+XHJcbiAgICAgICAgICAgICAgICAgIFRva2VuIDxpIGNsYXNzPVwidGV4dC1wcmltYXJ5XCIgOmNsYXNzPVwiJHNvcnRlci5nZXRTdHlsZXMoICdiYWxhbmNlcycsICduYW1lJyApXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3QtMjAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbGlja2FibGVcIiBAY2xpY2s9XCIkc29ydGVyLnNvcnRPcmRlciggJ2JhbGFuY2VzJywgJ2Fzc2V0JywgJ2FzYycgKVwiPlxyXG4gICAgICAgICAgICAgICAgICBTeW1ib2wgPGkgY2xhc3M9XCJ0ZXh0LXByaW1hcnlcIiA6Y2xhc3M9XCIkc29ydGVyLmdldFN0eWxlcyggJ2JhbGFuY2VzJywgJ2Fzc2V0JyApXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3QtMjAgdGV4dC1ub3dyYXAgdGV4dC1yaWdodCBwdXNoLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNsaWNrYWJsZVwiIEBjbGljaz1cIiRzb3J0ZXIuc29ydE9yZGVyKCAnYmFsYW5jZXMnLCAndG90YWwnLCAnZGVzYycgKVwiPlxyXG4gICAgICAgICAgICAgICAgICBUb3RhbCA8aSBjbGFzcz1cInRleHQtcHJpbWFyeVwiIDpjbGFzcz1cIiRzb3J0ZXIuZ2V0U3R5bGVzKCAnYmFsYW5jZXMnLCAndG90YWwnIClcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC0yMCB0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0IHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICdiYWxhbmNlcycsICdmcmVlJywgJ2Rlc2MnIClcIj5cclxuICAgICAgICAgICAgICAgICAgRnJlZSA8aSBjbGFzcz1cInRleHQtcHJpbWFyeVwiIDpjbGFzcz1cIiRzb3J0ZXIuZ2V0U3R5bGVzKCAnYmFsYW5jZXMnLCAnZnJlZScgKVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGVsaXN0LTIwIHRleHQtbm93cmFwIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICdiYWxhbmNlcycsICdsb2NrZWQnLCAnZGVzYycgKVwiPlxyXG4gICAgICAgICAgICAgICAgICBMb2NrZWQgPGkgY2xhc3M9XCJ0ZXh0LXByaW1hcnlcIiA6Y2xhc3M9XCIkc29ydGVyLmdldFN0eWxlcyggJ2JhbGFuY2VzJywgJ2xvY2tlZCcgKVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGVsaXN0LTIwIHRleHQtbm93cmFwIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgIFRyYWRlXHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPCEtLSBsaXN0IGRlZmF1bHQgZ3JlZXQgbWVzc2FnZSAtLT5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3QtY29udGVudCBwYWQtdiB0ZXh0LWNlbnRlciB0ZXh0LWluZm8gcG9zLXJlbFwiIHYtaWY9XCIhYmFsYW5jZXNMaXN0Lmxlbmd0aFwiPlxyXG4gICAgICAgICAgICA8ZGl2IHYtaWY9XCJpc0Rpc2Nvbm5lY3RlZFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLWluZm8gaWNvbkxhcmdlXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdj5BY2NvdW50IGJhbGFuY2VzIHdpbGwgYXBwZWFyIG9uY2UgY29ubmVjdGVkIHRvIHRoZSBBUEkuPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic29ja2V0RXJyb3JcIiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+e3sgc29ja2V0RXJyb3IgfX08L2Rpdj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGV4dC1wcmltYXJ5LWhvdmVyIGljb24tY29uZmlnIGljb25MZWZ0XCIgQGNsaWNrPVwiJHJvdXRlci5zZXRSb3V0ZSggJy9vcHRpb25zJyApXCI+TWFuYWdlIE9wdGlvbnM8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzV2FpdGluZ1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLXNpZ25hbCBpY29uTGFyZ2VcIj48L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC13YXJuaW5nIGZ4IGZ4LXB1bHNlXCI+V2FpdGluZyBmb3IgYWNjb3VudCBiYWxhbmNlcyBkYXRhIHRvIGxvYWQuLi48L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzQ29ubmVjdGVkXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb24taGVscCBpY29uTGFyZ2VcIj48L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJzZWFyY2hTdHJcIiBjbGFzcz1cInRleHQtZGFuZ2VyXCI+Q291bGQgbm90IGZpbmQgYW55IHJlc3VsdHMgZm9yOiB7eyBzZWFyY2hTdHIgfX08L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IHYtZWxzZT5ObyBhY2NvdW50IGJhbGFuY2VzIGRhdGEgYXZhaWxhYmxlLjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgIDwhLS0gbGlzdCBpdGVtcyAtLT5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3QtY29udGVudFwiIHYtaWY9XCJiYWxhbmNlc0xpc3QubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3Qtcm93IGZsZXgtcm93IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaFwiIHYtZm9yPVwidCBpbiBiYWxhbmNlc0xpc3RcIiA6a2V5PVwidC5hc3NldFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3QtMjAgdGV4dC1jbGlwIHRleHQtYnJpZ2h0IHB1c2gtcmlnaHQgaWYtbWVkaXVtXCI+e3sgdC5uYW1lIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC0yMCB0ZXh0LW5vd3JhcCB0ZXh0LWJyaWdodCBwdXNoLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGV4dC1wcmltYXJ5LWhvdmVyXCIgdGl0bGU9XCJJbmZvXCIgQGNsaWNrPVwiJGJ1cy5lbWl0KCAnc2V0Um91dGUnLCB0LnJvdXRlIClcIiB2LXRvb2x0aXA+e3sgdC5hc3NldCB9fTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZWxpc3QtMjAgdGV4dC1ub3dyYXAgdGV4dC1wcmltYXJ5IHRleHQtcmlnaHQgdGV4dC1tb25vc3BhY2UgcHVzaC1yaWdodFwiPnt7IHQudG90YWwgfCB0b0ZpeGVkIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC0yMCB0ZXh0LW5vd3JhcCB0ZXh0LWJyaWdodCB0ZXh0LXJpZ2h0IHRleHQtbW9ub3NwYWNlIHB1c2gtcmlnaHRcIj57eyB0LmZyZWUgfCB0b0ZpeGVkIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC0yMCB0ZXh0LW5vd3JhcCB0ZXh0LWRhbmdlciB0ZXh0LXJpZ2h0IHRleHQtbW9ub3NwYWNlXCI+e3sgdC5sb2NrZWQgfCB0b0ZpeGVkIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC0yMCB0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaWNvbi1jaGFydC1saW5lIGljb25MZWZ0IHRleHQtYnRuIGJnLWluZm8taG92ZXJcIiA6ZGlzYWJsZWQ9XCIhY2hlY2tDYW5UcmFkZVRva2VuKCB0LmFzc2V0LCB0LmZyZWUgKVwiIEBjbGljaz1cImluaXRUb2tlblRyYWRlKCB0LmFzc2V0LCB0LmZyZWUgKVwiPlRyYWRlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPCEtLSBsaXN0IGJvdHRvbSBpbmZvIC0tPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlbGlzdC1yb3cgZmxleC1yb3cgZmxleC1taWRkbGUgZmxleC1zcGFjZVwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImljb24tbmV0d29yayBpY29uTGVmdFwiIGhyZWY9XCJodHRwczovL3d3dy5iaW5hbmNlLmNvbS91c2VyQ2VudGVyL2JhbGFuY2VzLmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5NYW5hZ2UgYWNjb3VudCBvbiBCaW5hbmNlPC9hPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNsaXBcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+VXBkYXRlZDwvc3Bhbj4gJm5ic3A7XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgc29ja2V0VXBkYXRlZCB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9zZWN0aW9uPlxyXG5cclxuICAgIDwhLS0gYm90IHNlY3Rpb24gLS0+XHJcbiAgICA8c2VjdGlvbiBjbGFzcz1cInB1c2gtYm90dG9tXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgcGFkLWFsbFwiPlxyXG5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LXJvdyBmbGV4LXNwYWNlXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LW5vd3JhcCB0ZXh0LWJyaWdodCBwdXNoLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uLWNoYXJ0LWxpbmUgaWNvbkxlZnQgdGV4dC1ub3dyYXBcIj5UcmFkZSBCb3Q8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ub3dyYXAgcHVzaC1yaWdodCBpZi1tZWRpdW1cIj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtaW5mb1wiPkJvdCBCYWxhbmNlICZuYnNwOzwvc3Bhbj5cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgYmFsYW5jZVJlbWFpbiB8IHRvRml4ZWQoIHdhdGNoT3B0aW9ucy5hc3NldCApIH19IC8ge3sgYmFsYW5jZVRvdGFsIHwgdG9GaXhlZCggd2F0Y2hPcHRpb25zLmFzc2V0ICkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm9cIj57eyB3YXRjaE9wdGlvbnMuYXNzZXQgfX08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ub3dyYXAgcHVzaC1yaWdodCBpZi1zbWFsbFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+QWN0aXZlIFRyYWRlcyAmbmJzcDs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWJyaWdodFwiPnt7IHBlbmRpbmdUcmFkZXMgfX0gLyB7eyB0b3RhbFRyYWRlcyB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+U2Vzc2lvbiBQL0wgJm5ic3A7PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cInsgJ3RleHQtZ2Fpbic6IGJvdFByb2ZpdCA+IDAsICd0ZXh0LWxvc3MnOiBib3RQcm9maXQgPCAwIH1cIj57eyBib3RQcm9maXQgfCB0b0ZpeGVkKCAzICkgfX0lPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgIDxociAvPlxyXG5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LXJvdyBmbGV4LW1pZGRsZSBmbGV4LXNydGV0Y2hcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZm9ybS1idG4gYmctaW5mby1ob3ZlclwiIDpjbGFzcz1cInsgJ2ljb24tdXAtb3Blbic6IGZvcm1TaG93LCAnaWNvbi1kb3duLW9wZW4nOiAhZm9ybVNob3cgfVwiIHRpdGxlPVwiVG9nZ2xlIGZvcm1cIiBAY2xpY2s9XCJ0b2dnbGVGb3JtXCIgdi10b29sdGlwPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSB0ZXh0LWNsaXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC13YXJuaW5nXCI+Qm90IHt7IGJvdEFjdGl2ZSA/ICdpcyB0cmFkaW5nJyA6ICd3aWxsIHRyYWRlJyB9fSB7eyBjb3VudEluZm8gfX0gdXNpbmcgdGhlIG9wdGlvbnMgYmVsb3cuPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICA8VG9nZ2xlIDpjbGFzcz1cInsgJ2Rpc2FibGVkJzogYm90QWN0aXZlIH1cIiA6dGV4dD1cIidMaXZlIE1vZGUnXCIgdi1tb2RlbD1cImxpdmVNb2RlXCI+PC9Ub2dnbGU+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImJvdEFjdGl2ZSA9PT0gZmFsc2VcIiBjbGFzcz1cImZvcm0tYnRuIGJnLXN1Y2Nlc3MtaG92ZXIgaWNvbi1wbGF5IGljb25MZWZ0XCIgOmRpc2FibGVkPVwiIWNhblN0YXJ0Qm90XCIgQGNsaWNrPVwic3RhcnRCb3RcIj5TdGFydCB0aGUgQm90PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiYm90QWN0aXZlID09PSB0cnVlXCIgY2xhc3M9XCJmb3JtLWJ0biBiZy1kYW5nZXItaG92ZXIgaWNvbi1zdG9wIGljb25MZWZ0XCIgQGNsaWNrPVwic3RvcEJvdFwiPkJvdCBydW5uaW5nIHt7IGJvdEVsYXBzZWQgfX0gLi4uPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJvdC1mb3JtIHBhZC10b3BcIiA6Y2xhc3M9XCJ7ICd2aXNpYmxlJzogZm9ybVNob3cgfVwiPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtZ3JpZCBmbGV4LWdyaWQtbWQgZmxleC1taWRkbGVcIiA6Y2xhc3M9XCJ7ICdkaXNhYmxlZCc6IGJvdEFjdGl2ZSB9XCI+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInB1c2gtcmlnaHQgdGV4dC1wcmltYXJ5XCI+Q3VycmVuY3k8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0TWVudSBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCIgOm9wdGlvbnM9XCJhc3NldE9wdGlvbnNcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLmFzc2V0XCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiPjwvU2VsZWN0TWVudT5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMuYXNzZXRCYWxhbmNlIHwgdG9GaXhlZCggd2F0Y2hPcHRpb25zLmFzc2V0ICkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInB1c2gtcmlnaHQgdGV4dC1wcmltYXJ5XCI+T25seSB1c2U8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiIHR5cGU9XCJyYW5nZVwiIG1pbj1cIjVcIiBtYXg9XCIxMDBcIiBzdGVwPVwiNVwiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMuYXNzZXRQZXJjZW50XCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc2Vjb25kYXJ5XCI+e3sgd2F0Y2hPcHRpb25zLmFzc2V0UGVyY2VudCB9fSUge3sgd2F0Y2hPcHRpb25zLmFzc2V0IH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pbnB1dCB0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwdXNoLXJpZ2h0IHRleHQtcHJpbWFyeVwiPlNwbGl0IHRyYWRlczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCIgdHlwZT1cInJhbmdlXCIgbWluPVwiMVwiIG1heD1cIjEwXCIgc3RlcD1cIjFcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLmFzc2V0U3BsaXRcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMuYXNzZXRTcGxpdCB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taW5wdXQgdGV4dC1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgIDxTZWxlY3RNZW51IGNsYXNzPVwicHVzaC1yaWdodFwiIDpjc3M9XCIndGV4dC1wcmltYXJ5LWhvdmVyJ1wiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMuZmlsdGVyVHlwZVwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFsbG93XCI+T25seSB0b2tlbnM8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRlbnlcIj5Ta2lwIHRva2Vuczwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPC9TZWxlY3RNZW51PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmxleC0xXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlRPS0VOMSBUT0tFTjIgLi4uXCIgdi1tb2RlbD1cIndhdGNoT3B0aW9ucy5maWx0ZXJUb2tlbnNcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCIgIC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0TWVudSBjbGFzcz1cInB1c2gtcmlnaHRcIiA6Y3NzPVwiJ3RleHQtcHJpbWFyeS1ob3ZlcidcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLnByaWNlVHlwZVwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImNoYW5nZVwiPlByaWNlIGNoYW5nZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZ2FpblwiPlByaWNlIHJpc2U8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImxvc3NcIj5QcmljZSBkcm9wPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8L1NlbGVjdE1lbnU+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiIHR5cGU9XCJyYW5nZVwiIG1pbj1cIjAuMFwiIG1heD1cIjEwMC4wXCIgc3RlcD1cIjAuNVwiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMucHJpY2VDaGFuZ2VcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMucHJpY2VDaGFuZ2UgfCB0b0ZpeGVkKCAxICkgfX0lPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pbnB1dCB0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwdXNoLXJpZ2h0IHRleHQtcHJpbWFyeVwiPlZvbHVtZSBnYWluPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCIwLjBcIiBtYXg9XCIxMDAuMFwiIHN0ZXA9XCIwLjVcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLnZvbHVtZUNoYW5nZVwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIiAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNlY29uZGFyeVwiPnt7IHdhdGNoT3B0aW9ucy52b2x1bWVDaGFuZ2UgfCB0b0ZpeGVkKCAxICkgfX0lPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pbnB1dCB0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwdXNoLXJpZ2h0IHRleHQtcHJpbWFyeVwiPldpdGhpbiBsYXN0PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCIwXCIgbWF4PVwiNjBcIiBzdGVwPVwiMVwiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMudGltZUxpbWl0XCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMudGltZUxpbWl0IHwgdG9Ob3VuKCAnbWluJywgJ21pbnMnICkgfX08L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taW5wdXQgdGV4dC1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHVzaC1yaWdodCB0ZXh0LXByaW1hcnlcIj5TZWxsIHByb2ZpdDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCIgdHlwZT1cInJhbmdlXCIgbWluPVwiMC4wXCIgbWF4PVwiMTAwLjBcIiBzdGVwPVwiMC41XCIgdi1tb2RlbD1cIndhdGNoT3B0aW9ucy5wcmljZVByb2ZpdFwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIiAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNlY29uZGFyeVwiPnt7IHdhdGNoT3B0aW9ucy5wcmljZVByb2ZpdHwgdG9GaXhlZCggMSApIH19JTwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taW5wdXQgdGV4dC1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHVzaC1yaWdodCB0ZXh0LXByaW1hcnlcIj5TdG9wIGxvc3M8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiIHR5cGU9XCJyYW5nZVwiIG1pbj1cIjAuMFwiIG1heD1cIjEwLjBcIiBzdGVwPVwiMC41XCIgdi1tb2RlbD1cIndhdGNoT3B0aW9ucy5wcmljZVN0b3BcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMucHJpY2VTdG9wIHwgdG9GaXhlZCggMSApIH19JTwvc3Bhbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taW5wdXQgdGV4dC1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgIDxTZWxlY3RNZW51IGNsYXNzPVwicHVzaC1yaWdodFwiIDpjc3M9XCIndGV4dC1wcmltYXJ5LWhvdmVyJ1wiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMucHJpY2VDaGVja1wiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFib3ZlXCI+UHJpY2UgYWJvdmU8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJlbG93XCI+UHJpY2UgYmVsb3c8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvU2VsZWN0TWVudT5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIjAuMDAwMDAwMDBcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLnByaWNlXCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMuYXNzZXQgfX08L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0taW5wdXQgdGV4dC1ub3dyYXBcIj5cclxuICAgICAgICAgICAgICAgIDxTZWxlY3RNZW51IGNsYXNzPVwicHVzaC1yaWdodFwiIDpjc3M9XCIndGV4dC1wcmltYXJ5LWhvdmVyJ1wiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMudm9sdW1lQ2hlY2tcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhYm92ZVwiPlZvbHVtZSBhYm92ZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYmVsb3dcIj5Wb2x1bWUgYmVsb3c8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvU2VsZWN0TWVudT5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIjAwMDBcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLnZvbHVtZVwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIiAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtc2Vjb25kYXJ5XCI+e3sgd2F0Y2hPcHRpb25zLmFzc2V0IH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0TWVudSBjbGFzcz1cInB1c2gtcmlnaHRcIiA6Y3NzPVwiJ3RleHQtcHJpbWFyeS1ob3ZlcidcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLmNoYW5nZUNoZWNrXCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWJvdmVcIj4yNGggJSBhYm92ZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYmVsb3dcIj4yNGggJSBiZWxvdzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPC9TZWxlY3RNZW51PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCIwLjBcIiBtYXg9XCIxMDAuMFwiIHN0ZXA9XCIwLjVcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLmNoYW5nZVwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIiAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNlY29uZGFyeVwiPnt7IHdhdGNoT3B0aW9ucy5jaGFuZ2UgfCB0b0ZpeGVkKCAxICkgfX0lPC9zcGFuPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pbnB1dCB0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgPFNlbGVjdE1lbnUgY2xhc3M9XCJwdXNoLXJpZ2h0XCIgOmNzcz1cIid0ZXh0LXByaW1hcnktaG92ZXInXCIgdi1tb2RlbD1cIndhdGNoT3B0aW9ucy52b2xhdGlsaXR5Q2hlY2tcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJhYm92ZVwiPlZvbGF0aWxpdHkgYWJvdmU8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJlbG93XCI+Vm9sYXRpbGl0eSBiZWxvdzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPC9TZWxlY3RNZW51PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCIwLjBcIiBtYXg9XCIxMDAuMFwiIHN0ZXA9XCIwLjVcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLnZvbGF0aWxpdHlcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1zZWNvbmRhcnlcIj57eyB3YXRjaE9wdGlvbnMudm9sYXRpbGl0eSB8IHRvRml4ZWQoIDEgKSB9fSU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0TWVudSBjbGFzcz1cInB1c2gtcmlnaHRcIiA6Y3NzPVwiJ3RleHQtcHJpbWFyeS1ob3ZlcidcIiB2LW1vZGVsPVwid2F0Y2hPcHRpb25zLmRhbmdlckNoZWNrXCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWJvdmVcIj5EYW5nZXIgYWJvdmU8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImJlbG93XCI+RGFuZ2VyIGJlbG93PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8L1NlbGVjdE1lbnU+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiIHR5cGU9XCJyYW5nZVwiIG1pbj1cIjAuMFwiIG1heD1cIjEwMC4wXCIgc3RlcD1cIjAuNVwiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMuZGFuZ2VyXCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc2Vjb25kYXJ5XCI+e3sgd2F0Y2hPcHRpb25zLmRhbmdlciB8IHRvRml4ZWQoIDEgKSB9fSU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWlucHV0IHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInB1c2gtcmlnaHQgdGV4dC1wcmltYXJ5XCI+TGltaXQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0TWVudSBjbGFzcz1cImZsZXgtMVwiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMudHJhZGVMaW1pdFwiIEBjaGFuZ2U9XCJvbkJvdE9wdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm11bHRpcGxlXCI+TXVsdGlwbGUgdHJhZGVzIHBlciB0b2tlbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiYWN0aXZlXCI+U2luZ2xlIGFjdGl2ZSB0cmFkZSBwZXIgdG9rZW48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInNpbmdsZVwiPlNpbmdsZSB0cmFkZSBvbmx5IHBlciB0b2tlbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPC9TZWxlY3RNZW51PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1pbnB1dCB0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwdXNoLXJpZ2h0IHRleHQtcHJpbWFyeVwiPk9yZGVyIHR5cGU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8U2VsZWN0TWVudSBjbGFzcz1cImZsZXgtMVwiIHYtbW9kZWw9XCJ3YXRjaE9wdGlvbnMub3JkZXJUeXBlXCIgQGNoYW5nZT1cIm9uQm90T3B0aW9uc1wiPlxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTElNSVRcIj5MSU1JVCBvcmRlcnM8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1BUktFVFwiPk1BUktFVCBvcmRlcnM8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvU2VsZWN0TWVudT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiB2LWlmPVwid2F0Y2hPcHRpb25zLm9yZGVyVHlwZSA9PT0gJ0xJTUlUJ1wiIGNsYXNzPVwiZm9ybS1pbnB1dCB0ZXh0LW5vd3JhcFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwdXNoLXJpZ2h0IHRleHQtcHJpbWFyeVwiPkV4ZWN1dGlvbjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxTZWxlY3RNZW51IGNsYXNzPVwiZmxleC0xXCIgdi1tb2RlbD1cIndhdGNoT3B0aW9ucy5vcmRlclRpbWVcIiBAY2hhbmdlPVwib25Cb3RPcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJHVENcIj5Hb29kIHVudGlsIGNhbmNlbGVkPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJJT0NcIj5JbW1lZGlhdGUgb3IgY2FuY2VsPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJGT0tcIj5GaWxsIGFsbCBvciBjYW5jZWw8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvU2VsZWN0TWVudT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9zZWN0aW9uPlxyXG5cclxuICAgIDwhLS0gaGlzdG9yeSBzZWN0aW9uIC0tPlxyXG4gICAgPHNlY3Rpb24gY2xhc3M9XCJwdXNoLWJvdHRvbVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIHBhZC1hbGxcIj5cclxuXHJcbiAgICAgICAgICA8IS0tIHRyYWRlIGFuZCBvcmRlciB0YWJzIC0tPlxyXG4gICAgICAgICAgPFRhYnMgOmRhdGE9XCJ7IHRvdGFsT3JkZXJzLCB0b3RhbFNlc3Npb25zLCBwZW5kaW5nVHJhZGVzLCB0b3RhbFRyYWRlcyB9XCI+XHJcblxyXG4gICAgICAgICAgICA8IS0tIHRyYWRlcyB0YWIgc2VjdGlvbiAtLT5cclxuICAgICAgICAgICAgPHNlY3Rpb24gYnRuLWNsYXNzPVwiaWNvbi1jaGFydC1saW5lIGljb25MZWZ0XCIgOmJ0bi1uYW1lPVwiJ0JvdCBUcmFkZXMgKCcrIHBlbmRpbmdUcmFkZXMgKycvJysgdG90YWxUcmFkZXMgKycpJ1wiIGFjdGl2ZT5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGFkLXYgdGV4dC1jZW50ZXIgdGV4dC1pbmZvXCIgdi1pZj1cIiF0cmFkZXNMaXN0Lmxlbmd0aFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb24tY2hhcnQtbGluZSBpY29uTGFyZ2VcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+Tm8gdHJhZGVzIGRhdGEgYXZhaWxhYmxlLjwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWxpc3RcIiB2LWlmPVwidHJhZGVzTGlzdC5sZW5ndGhcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWhlYWRlciBmbGV4LW1pZGRsZSBmbGV4LXNwYWNlXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uV2lkdGggdGV4dC1ub3dyYXAgcHVzaC1yaWdodCBpZi1tZWRpdW1cIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICd0cmFkZXMnLCAncGFpcicsICdhc2MnIClcIj5QYWlyPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvIHRleHQtZmFkZWRcIj4vPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICd0cmFkZXMnLCAndGltZScsICdkZXNjJyApXCI+VGltZTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj48c3BhbiBjbGFzcz1cImNsaWNrYWJsZVwiIEBjbGljaz1cIiRzb3J0ZXIuc29ydE9yZGVyKCAndHJhZGVzJywgJ2FjdGl2ZScsICdhc2MnIClcIj5TdGF0dXM8L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHRleHQtaW5mbyBwdXNoLXJpZ2h0XCI+QnV5IFByaWNlPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHRleHQtaW5mbyBwdXNoLXJpZ2h0XCI+Q3VyL1NlbGwgUHJpY2U8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgdGV4dC1pbmZvIHB1c2gtcmlnaHRcIj5QL0w8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtbm93cmFwIHRleHQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHNsb3Q9XCJ0cmlnZ2VyXCIgY2xhc3M9XCJ0ZXh0LXByaW1hcnktaG92ZXIgaWNvbi1jb25maWdcIj48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgIDx1bCBzbG90PVwibGlzdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ0ZXh0LWJyaWdodC1ob3ZlciBpY29uLWNoZWNrIGljb25MZWZ0IGNsaWNrYWJsZVwiIEBjbGljaz1cImNsZWFuVHJhZGVzTGlzdCgpXCI+UmVtb3ZlIENvbXBsZXRlIFRyYWRlczwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRleHQtYnJpZ2h0LWhvdmVyIGljb24tY2xvc2UgaWNvbkxlZnQgY2xpY2thYmxlXCIgQGNsaWNrPVwiZmx1c2hUcmFkZUVudHJpZXMoKVwiPkRlbGV0ZSBUcmFkZSBFbnRyaWVzPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWl0ZW0gZmxleC1taWRkbGUgZmxleC1zdHJldGNoXCIgdi1mb3I9XCJ0IG9mIHRyYWRlc0xpc3RcIiA6a2V5PVwidC5pZFwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbldpZHRoIHRleHQtbm93cmFwIHB1c2gtcmlnaHQgaWYtbWVkaXVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRva2VuSWNvbiA6aW1hZ2U9XCJ0LmltYWdlXCIgOmFsdD1cInQubmFtZVwiPjwvVG9rZW5JY29uPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0ZXh0LXByaW1hcnktaG92ZXJcIiBAY2xpY2s9XCIkcm91dGVyLnNldFJvdXRlKCB0LnJvdXRlIClcIj57eyB0LnBhaXIgfX08L2J1dHRvbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm9cIj57eyB0LnRpbWUgfCB0b0VsYXBzZWQoICdhZ28nLCB0cnVlICkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LW5vd3JhcCBwdXNoLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gOmNsYXNzPVwidHJhZGVTdGF0dXMoIHQuc3RhdHVzLCAxIClcIj57eyB0cmFkZVN0YXR1cyggdC5zdGF0dXMsIDAgKSB9fTwvc3Bhbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNlY29uZGFyeVwiPnt7IHQuYW1vdW50IHwgdG9Nb25leSggMCApIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgdC50b2tlbiB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWJyaWdodFwiPnt7IHQuYnV5UHJpY2UgfCB0b0ZpeGVkKCB0LmFzc2V0ICkgfX08L3NwYW4+IDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgdC5hc3NldCB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgdC5zZWxsUHJpY2UgfCB0b0ZpeGVkKCB0LmFzc2V0ICkgfX08L3NwYW4+IDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgdC5hc3NldCB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7ICd0ZXh0LWdhaW4nOiB0LnByb2ZpdCA+IDAsICd0ZXh0LWxvc3MnOiB0LnByb2ZpdCA8IDAgfVwiPnt7IHQucHJvZml0IHwgdG9GaXhlZCggMyApIH19JTwvc3Bhbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwidC5wcm9maXQgPiAwXCIgY2xhc3M9XCJ0ZXh0LWluZm9cIj5HYWluPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1lbHNlLWlmPVwidC5wcm9maXQgPCAwXCIgY2xhc3M9XCJ0ZXh0LWluZm9cIj5Mb3NzPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1lbHNlIGNsYXNzPVwidGV4dC1pbmZvXCI+U2FtZTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ub3dyYXAgdGV4dC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gc2xvdD1cInRyaWdnZXJcIiBjbGFzcz1cImljb24tY29uZmlnXCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dWwgc2xvdD1cImxpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJ0LmFjdGl2ZVwiIGNsYXNzPVwidGV4dC1nYWluLWhvdmVyIGljb24tc3RvcCBpY29uTGVmdCBjbGlja2FibGVcIiA6Y2xhc3M9XCJ7ICdkaXNhYmxlZCc6ICFpc0Nvbm5lY3RlZCB9XCIgQGNsaWNrPVwic2VsbEFjdGl2ZVRyYWRlKCB0LmlkIClcIj5TZWxsIEAge3sgdC5zZWxsUHJpY2UgfCB0b0ZpeGVkKCB0LmFzc2V0ICkgfX08L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ0ZXh0LWJyaWdodC1ob3ZlciBpY29uLXZpc2libGUgaWNvbkxlZnQgY2xpY2thYmxlXCIgQGNsaWNrPVwibWFya0JvdFRyYWRlQWN0aXZlKCB0LmlkIClcIj5NYXJrIHRyYWRlIGFzIEFjdGl2ZTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRleHQtYnJpZ2h0LWhvdmVyIGljb24tY2hlY2sgaWNvbkxlZnQgY2xpY2thYmxlXCIgQGNsaWNrPVwibWFya0JvdFRyYWRlU29sZCggdC5pZCApXCI+TWFyayB0cmFkZSBhcyBTb2xkPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidGV4dC1kYW5nZXItaG92ZXIgaWNvbi1jbG9zZSBpY29uTGVmdCBjbGlja2FibGVcIiBAY2xpY2s9XCJyZW1vdmVUcmFkZUVudHJ5KCB0LmlkIClcIj5SZW1vdmUgZnJvbSBsaXN0PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWhlYWRlciBmbGV4LW1pZGRsZSB0ZXh0LWluZm8gZmxleC1zcGFjZVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24tbGlzdCBpY29uTGVmdFwiPnt7IHRyYWRlc0xpc3RUZXh0IH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPlxyXG5cclxuICAgICAgICAgICAgPCEtLSBvcmRlcnMgdGFiIHNlY3Rpb24gLS0+XHJcbiAgICAgICAgICAgIDxzZWN0aW9uIGJ0bi1jbGFzcz1cImljb24tbGlzdCBpY29uTGVmdFwiIDpidG4tbmFtZT1cIidPcmRlciBBY3Rpdml0eSAoJysgdG90YWxPcmRlcnMgKycpJ1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWQtdiB0ZXh0LWNlbnRlciB0ZXh0LWluZm9cIiB2LWlmPVwiIW9yZGVyc0xpc3QubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbi1saXN0IGljb25MYXJnZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5ObyBvcmRlcnMgZGF0YSBhdmFpbGFibGUuPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtbGlzdFwiIHYtaWY9XCJvcmRlcnNMaXN0Lmxlbmd0aFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtaGVhZGVyIGZsZXgtbWlkZGxlIGZsZXgtc3BhY2VcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25XaWR0aCB0ZXh0LW5vd3JhcCBwdXNoLXJpZ2h0IGlmLW1lZGl1bVwiPiZuYnNwOzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LW5vd3JhcCBwdXNoLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbGlja2FibGVcIiBAY2xpY2s9XCIkc29ydGVyLnNvcnRPcmRlciggJ29yZGVycycsICdwYWlyJywgJ2FzYycgKVwiPlBhaXI8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm8gdGV4dC1mYWRlZFwiPi88L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjbGlja2FibGVcIiBAY2xpY2s9XCIkc29ydGVyLnNvcnRPcmRlciggJ29yZGVycycsICd0aW1lJywgJ2Rlc2MnIClcIj5UaW1lPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPjxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICdvcmRlcnMnLCAnc2lkZScsICdhc2MnIClcIj5PcmRlcjwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPjxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICdvcmRlcnMnLCAnc3RhdHVzJywgJ2FzYycgKVwiPlN0YXR1czwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgdGV4dC1pbmZvIHB1c2gtcmlnaHRcIj5QcmljZTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LW5vd3JhcCB0ZXh0LWluZm8gcHVzaC1yaWdodCBpZi1tZWRpdW1cIj5GZWU8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgdGV4dC1pbmZvIHB1c2gtcmlnaHRcIj5Ub3RhbDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ub3dyYXAgdGV4dC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gc2xvdD1cInRyaWdnZXJcIiBjbGFzcz1cInRleHQtcHJpbWFyeS1ob3ZlciBpY29uLWNvbmZpZ1wiPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHVsIHNsb3Q9XCJsaXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInRleHQtYnJpZ2h0LWhvdmVyIGljb24tY2xvc2UgaWNvbkxlZnQgY2xpY2thYmxlXCIgQGNsaWNrPVwiY2FuY2VsT3Blbk9yZGVycygpXCI+Q2FuY2VsIE9wZW4gT3JkZXJzPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwidGV4dC1icmlnaHQtaG92ZXIgaWNvbi1jaGVjayBpY29uTGVmdCBjbGlja2FibGVcIiBAY2xpY2s9XCJjbGVhck9yZGVyc0xpc3QoKVwiPlJlbW92ZSBDb21wbGV0ZSBPcmRlcnM8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtaXRlbSBmbGV4LW1pZGRsZSBmbGV4LXNwYWNlXCIgdi1mb3I9XCJvIG9mIG9yZGVyc0xpc3RcIiA6a2V5PVwiby5pZFwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbldpZHRoIHRleHQtbm93cmFwIHB1c2gtcmlnaHQgaWYtbWVkaXVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRva2VuSWNvbiA6aW1hZ2U9XCJvLmltYWdlXCIgOmFsdD1cIm8udG9rZW5cIj48L1Rva2VuSWNvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGV4dC1wcmltYXJ5LWhvdmVyXCIgQGNsaWNrPVwiJHJvdXRlci5zZXRSb3V0ZSggby5yb3V0ZSApXCI+e3sgby5wYWlyIH19PC9idXR0b24+IDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgby50aW1lIHwgdG9FbGFwc2VkKCAnYWdvJywgdHJ1ZSApIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cInsgJ3RleHQtZ2Fpbic6IG8uc2lkZSA9PT0gJ0JVWScsICd0ZXh0LWxvc3MnOiBvLnNpZGUgPT09ICdTRUxMJyB9XCI+e3sgby50eXBlIH19IHt7IG8uc2lkZSB9fTwvc3Bhbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNlY29uZGFyeVwiPnt7IG8uZmlsbGVkIHwgdG9Nb25leSggMCApIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+Lzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc2Vjb25kYXJ5XCI+e3sgby5xdWFudGl0eSB8IHRvTW9uZXkoIDAgKSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtaW5mb1wiPnt7IG8udG9rZW4gfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LXdhcm5pbmcgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cInsgJ3RleHQtZGFuZ2VyJzogby5zdGF0dXMgPT09ICdPUEVOJywgJ3RleHQtc3VjY2Vzcyc6IG8uc3RhdHVzID09PSAnRklMTEVEJyB9XCI+e3sgby5zdGF0dXMgfX08L3NwYW4+IDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1icmlnaHRcIj57eyBvLnBlcmNlbnQgfCB0b0ZpeGVkKCAyICkgfX0lPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgby5hc3NldCB9fSBQcmljZTwvc3Bhbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNlY29uZGFyeVwiPnt7IG8ucHJpY2UgfCB0b0ZpeGVkKCBvLmFzc2V0ICkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LW5vd3JhcCBwdXNoLXJpZ2h0IGlmLW1lZGl1bVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgby5mZWVBc3NldCA/IG8uZmVlQXNzZXQgKycgVG90YWwnIDogJ1RvdGFsJyB9fTwvc3Bhbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWJyaWdodFwiPnt7IG8uZmVlQW1vdW50IHwgdG9GaXhlZCggOCApIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgby5hc3NldCB9fSBUb3RhbDwvc3Bhbj4gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWJyaWdodFwiPnt7IG8udG90YWwgfCB0b0ZpeGVkKCBvLmFzc2V0ICkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ub3dyYXAgdGV4dC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gc2xvdD1cInRyaWdnZXJcIiBjbGFzcz1cImljb24tY29uZmlnXCI+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dWwgc2xvdD1cImxpc3RcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHYtaWY9XCJvLnN0YXR1cyA9PT0gJ09QRU4nXCIgY2xhc3M9XCJ0ZXh0LXdhcm5pbmctaG92ZXIgaWNvbi1zdG9wIGljb25MZWZ0IGNsaWNrYWJsZVwiIEBjbGljaz1cImNhbmNlbE9yZGVyKCBvLnN5bWJvbCwgby5pZCwgby5xdWFudGl0eSApXCI+Q2FuY2VsIHRoaXMgb3JkZXI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJ0ZXh0LWRhbmdlci1ob3ZlciBpY29uLWNsb3NlIGljb25MZWZ0IGNsaWNrYWJsZVwiIEBjbGljaz1cInJlbW92ZU9yZGVyKCBvLmlkIClcIj5SZW1vdmUgZnJvbSBsaXN0PC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPlxyXG5cclxuICAgICAgICAgICAgPCEtLSBzZXNzaW9ucyB0YWIgc2VjdGlvbiAtLT5cclxuICAgICAgICAgICAgPHNlY3Rpb24gYnRuLWNsYXNzPVwiaWNvbi1jYWxlbmRhciBpY29uTGVmdFwiIDpidG4tbmFtZT1cIidCb3QgU2Vzc2lvbnMgKCcrIHRvdGFsU2Vzc2lvbnMgKycpJ1wiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYWQtdiB0ZXh0LWNlbnRlciB0ZXh0LWluZm9cIiB2LWlmPVwiIXNlc3Npb25zTGlzdC5sZW5ndGhcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLWNhbGVuZGFyIGljb25MYXJnZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj5ObyBib3Qgc2Vzc2lvbnMgZGF0YSBhdmFpbGFibGUuPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtbGlzdFwiIHYtaWY9XCJzZXNzaW9uc0xpc3QubGVuZ3RoXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC1oZWFkZXIgZmxleC1taWRkbGUgZmxleC1zcGFjZVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LW5vd3JhcCBwdXNoLXJpZ2h0XCI+PHNwYW4gY2xhc3M9XCJjbGlja2FibGVcIiBAY2xpY2s9XCIkc29ydGVyLnNvcnRPcmRlciggJ3Nlc3Npb25zJywgJ3BhaXInLCAnYXNjJyApXCI+UGFpcjwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodCBpZi1tZWRpdW1cIj48c3BhbiBjbGFzcz1cImNsaWNrYWJsZVwiIEBjbGljaz1cIiRzb3J0ZXIuc29ydE9yZGVyKCAnc2Vzc2lvbnMnLCAndGltZScsICdkZXNjJyApXCI+VGltZTwvc3Bhbj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPjxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICdzZXNzaW9ucycsICdiYWxhbmNlJywgJ2Rlc2MnIClcIj5CYWxhbmNlPC9zcGFuPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xMCB0ZXh0LW5vd3JhcCBwdXNoLXJpZ2h0XCI+PHNwYW4gY2xhc3M9XCJjbGlja2FibGVcIiBAY2xpY2s9XCIkc29ydGVyLnNvcnRPcmRlciggJ3Nlc3Npb25zJywgJ2NvbXBsZXRlJywgJ2Rlc2MnIClcIj5UcmFkZXM8L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj48c3BhbiBjbGFzcz1cImNsaWNrYWJsZVwiIEBjbGljaz1cIiRzb3J0ZXIuc29ydE9yZGVyKCAnc2Vzc2lvbnMnLCAncHJvZml0JywgJ2Rlc2MnIClcIj5Qcm9maXQ8L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHRleHQtaW5mbyBwdXNoLXJpZ2h0XCI+RHVyYXRpb248L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPjxzcGFuIGNsYXNzPVwiY2xpY2thYmxlXCIgQGNsaWNrPVwiJHNvcnRlci5zb3J0T3JkZXIoICdzZXNzaW9ucycsICdsaXZlJywgJ2Rlc2MnIClcIj5MaXZlPC9zcGFuPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ub3dyYXAgdGV4dC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJ0ZXh0LWJyaWdodC1ob3ZlciBpY29uLWNsb3NlXCIgdGl0bGU9XCJGbHVzaCBMaXN0XCIgQGNsaWNrPVwiZmx1c2hTZXNzaW9uRGF0YVwiIHYtdG9vbHRpcD48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LWl0ZW0gZmxleC1taWRkbGUgZmxleC1zdHJldGNoXCIgdi1mb3I9XCJzIG9mIHNlc3Npb25zTGlzdFwiIDprZXk9XCJzLmlkXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtcHJpbWFyeVwiPnt7IHMucGFpciB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtaW5mb1wiPnt7IHMudGltZSB8IHRvRWxhcHNlZCggJ2FnbycsIHRydWUgKSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgcy5iYWxhbmNlIHwgdG9GaXhlZCggcy5hc3NldCApIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgcy5hc3NldCB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgcy5jb21wbGV0ZSB8IHRvTW9uZXkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm9cIj4vPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1icmlnaHRcIj57eyBzLnRvdGFsIHwgdG9Nb25leSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7ICd0ZXh0LWdhaW4nOiBzLnByb2ZpdCA+IDAsICd0ZXh0LWxvc3MnOiBzLnByb2ZpdCA8IDAgfVwiPnt7IHMucHJvZml0IHwgdG9GaXhlZCggMyApIH19JTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEwIHRleHQtbm93cmFwIHB1c2gtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgcy5lbGFwc2VkIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMTAgdGV4dC1ub3dyYXAgcHVzaC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIDpjbGFzcz1cInsgJ3RleHQtc3VjY2Vzcyc6IHMubGl2ZSwgJ3RleHQtd2FybmluZyc6ICFzLmxpdmUgfVwiPnt7IHMubGl2ZSA/ICdZZXMnIDogJ05vJyB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRleHQtbG9zcy1ob3ZlciBpY29uLWNsb3NlXCIgdGl0bGU9XCJSZW1vdmVcIiBAY2xpY2s9XCJkZWxldGVTZXNzaW9uRW50cnkoIHMuaWQgKVwiIHYtdG9vbHRpcD48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9zZWN0aW9uPlxyXG5cclxuICAgICAgICAgIDwvVGFicz5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuXHJcblxyXG4gIDwvbWFpbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbi8vIGNvbXBvbmVudHNcclxuaW1wb3J0IFByb21wdCBmcm9tICcuLi9tb2R1bGVzL3Byb21wdCc7XHJcbmltcG9ydCBXYXRjaGVyIGZyb20gJy4uL21vZHVsZXMvd2F0Y2hlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi9TZWFyY2gudnVlJztcclxuaW1wb3J0IFRhYnMgZnJvbSAnLi9UYWJzLnZ1ZSc7XHJcbmltcG9ydCBEcm9wZG93biBmcm9tICcuL0Ryb3Bkb3duLnZ1ZSc7XHJcbmltcG9ydCBUb2dnbGUgZnJvbSAnLi9Ub2dnbGUudnVlJztcclxuaW1wb3J0IFNlbGVjdE1lbnUgZnJvbSAnLi9TZWxlY3RNZW51LnZ1ZSc7XHJcbmltcG9ydCBUb2tlbkljb24gZnJvbSAnLi9Ub2tlbkljb24udnVlJztcclxuXHJcbi8vIHRyYWRlIHN0YXR1cyBjb25zdGFudHNcclxuY29uc3QgVFJBREVfV0FJVCA9IDA7XHJcbmNvbnN0IFRSQURFX1NFTEwgPSAxO1xyXG5jb25zdCBUUkFERV9ET05FID0gMjtcclxuXHJcbi8vIGNvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblxyXG4gIC8vIHN1YiBjb21wb25lbnRzXHJcbiAgY29tcG9uZW50czogeyBTZWFyY2gsIFRhYnMsIERyb3Bkb3duLCBUb2dnbGUsIFNlbGVjdE1lbnUsIFRva2VuSWNvbiB9LFxyXG5cclxuICAvLyBjb21wb25lbnQgcHJvcHNcclxuICBwcm9wczoge1xyXG4gICAgaGVhZGVyOiB7IHR5cGU6IE9iamVjdCwgZGVmYXVsdCgpIHsgcmV0dXJuIHt9IH0gfSxcclxuICAgIG9wdGlvbnM6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0KCkgeyByZXR1cm4ge30gfSwgcmVxdWlyZWQ6IHRydWUgfSxcclxuICAgIHNvcnREYXRhOiB7IHR5cGU6IE9iamVjdCwgZGVmYXVsdCgpIHsgcmV0dXJuIHt9IH0sIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICBwcmljZURhdGE6IHsgdHlwZTogQXJyYXksIGRlZmF1bHQoKSB7IHJldHVybiBbXSB9LCByZXF1aXJlZDogdHJ1ZSB9LFxyXG4gICAgYXNzZXRzTGlzdDogeyB0eXBlOiBBcnJheSwgZGVmYXVsdCgpIHsgcmV0dXJuIFtdIH0sIHJlcXVpcmVkOiB0cnVlIH0sXHJcbiAgICB0aWNrZXJTdGF0dXM6IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiAwIH0sXHJcbiAgfSxcclxuXHJcbiAgLy8gY29tcG9uZW50IGRhdGFcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLy8gYm90IG9wdGlvbnNcclxuICAgICAgbGl2ZU1vZGU6IGZhbHNlLFxyXG4gICAgICBib3RBY3RpdmU6IGZhbHNlLFxyXG4gICAgICBib3RTdGFydDogMCxcclxuICAgICAgYm90RWxhcHNlZDogJzBzJyxcclxuICAgICAgYm90UHJvZml0OiAwLFxyXG4gICAgICAvLyBhcHAgZGF0YVxyXG4gICAgICBiYWxhbmNlc0RhdGE6IFtdLFxyXG4gICAgICBvcmRlcnNEYXRhOiBbXSxcclxuICAgICAgdHJhZGVzRGF0YTogW10sXHJcbiAgICAgIHNlc3Npb25zRGF0YTogW10sXHJcbiAgICAgIGVycm9yQ291bnQ6IDAsXHJcbiAgICAgIGNvdW50SW5mbzogJy4uLicsXHJcbiAgICAgIC8vIGxpc3RzIGFuZCBmb3Jtc1xyXG4gICAgICBzZWFyY2hTdHI6ICcnLFxyXG4gICAgICBtYXhJdGVtczogMjAsXHJcbiAgICAgIHRyYWRlc1Zpc2libGU6IDIwLFxyXG4gICAgICBmb3JtU2hvdzogdHJ1ZSxcclxuICAgICAgLy8gc29ja2V0IGRhdGFcclxuICAgICAgc29ja2V0VGltZTogMCxcclxuICAgICAgc29ja2V0VXBkYXRlZDogJ05ldmVyJyxcclxuICAgICAgc29ja2V0U3RhdHVzOiAwLFxyXG4gICAgICBzb2NrZXRFcnJvcjogJycsXHJcbiAgICAgIC8vIHN0b3JlIGtleXNcclxuICAgICAga2V5czoge1xyXG4gICAgICAgIG9wdGlvbnM6ICdib3Rfb3B0aW9ucycsXHJcbiAgICAgICAgdHJhZGVzOiAnYm90X3RyYWRlcycsXHJcbiAgICAgICAgb3JkZXJzOiAnYm90X29yZGVycycsXHJcbiAgICAgICAgc2Vzc2lvbnM6ICdib3Rfc2Vzc2lvbnMnLFxyXG4gICAgICB9LFxyXG4gICAgICAvLyBwcmljZSB3YXRjaCBvcHRpb25zXHJcbiAgICAgIHdhdGNoZXI6IG5ldyBXYXRjaGVyKCksXHJcbiAgICAgIHdhdGNoT3B0aW9uczoge1xyXG4gICAgICAgIC8vIGJvdCB0cmFkaW5nIHBhaXIvY3VycmVuY3lcclxuICAgICAgICB0b2tlbjogJycsXHJcbiAgICAgICAgYXNzZXQ6ICdCVEMnLFxyXG4gICAgICAgIC8vIGJvdCBhbGxvY2F0ZWQgYmFsYW5jZSBhbmQgdHJhZGVzXHJcbiAgICAgICAgYXNzZXRQZXJjZW50OiA1MCxcclxuICAgICAgICBhc3NldEJhbGFuY2U6IDAsXHJcbiAgICAgICAgYXNzZXRTcGxpdDogMyxcclxuICAgICAgICAvLyBwcmljZSBjaGFuZ2UvcHJvZml0IHRyaWdnZXIgYW5kIGZpbHRlcnNcclxuICAgICAgICBwcmljZVR5cGU6ICdsb3NzJyxcclxuICAgICAgICBwcmljZUNoYW5nZTogJzInLFxyXG4gICAgICAgIHByaWNlUHJvZml0OiAnNScsXHJcbiAgICAgICAgcHJpY2VTdG9wOiAwLFxyXG4gICAgICAgIHByaWNlQ2hlY2s6ICdhYm92ZScsXHJcbiAgICAgICAgcHJpY2U6ICcnLFxyXG4gICAgICAgIC8vIHZvbHVtZSBjaGFuZ2UgdHJpZ2dlciBhbmQgZmlsdGVyc1xyXG4gICAgICAgIHZvbHVtZVR5cGU6ICdnYWluJyxcclxuICAgICAgICB2b2x1bWVDaGFuZ2U6ICcxJyxcclxuICAgICAgICB2b2x1bWVDaGVjazogJ2Fib3ZlJyxcclxuICAgICAgICB2b2x1bWU6ICcnLFxyXG4gICAgICAgIC8vIDI0aCBwZXJjZW50IGNoYW5nZSBmaWx0ZXJzXHJcbiAgICAgICAgY2hhbmdlQ2hlY2s6ICdiZWxvdycsXHJcbiAgICAgICAgY2hhbmdlOiAnMCcsXHJcbiAgICAgICAgLy8gMjRoIHByaWNlIHZvbGl0aWxpdHkgZmlsdGVyc1xyXG4gICAgICAgIHZvbGF0aWxpdHlDaGVjazogJ2JlbG93JyxcclxuICAgICAgICB2b2xhdGlsaXR5OiAnMCcsXHJcbiAgICAgICAgLy8gcmVjZW50IHB1bXAvZHVtcCBkYW5nZXIgZmlsdGVyXHJcbiAgICAgICAgZGFuZ2VyQ2hlY2s6ICdiZWxvdycsXHJcbiAgICAgICAgZGFuZ2VyOiAnMCcsXHJcbiAgICAgICAgLy8gY2hhbmdlIHRpbWVmcmFtZSBmaWx0ZXJzXHJcbiAgICAgICAgdGltZUNoZWNrOiAnbGVzcycsXHJcbiAgICAgICAgdGltZUxpbWl0OiAnMzAnLFxyXG4gICAgICAgIC8vIHRva2VuIGJhY2svd2hpdGUgbGlzdCBmaWx0ZXJzXHJcbiAgICAgICAgZmlsdGVyVHlwZTogJ2FsbG93JyxcclxuICAgICAgICBmaWx0ZXJUb2tlbnM6ICcnLFxyXG4gICAgICAgIC8vIG9yZGVyIGV4ZWN1dGlvbiBvcHRpb25zXHJcbiAgICAgICAgb3JkZXJUeXBlOiAnTElNSVQnLFxyXG4gICAgICAgIG9yZGVyVGltZTogJ0dUQycsXHJcbiAgICAgICAgLy8gdHJhZGUgbGltaXQgKCBtdWx0aXBsZSwgYWN0aXZlLCBzaW5nbGUgKVxyXG4gICAgICAgIHRyYWRlTGltaXQ6ICdtdWx0aXBsZScsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLy8gd2F0Y2ggbWV0aG9kc1xyXG4gIHdhdGNoOiB7XHJcblxyXG4gICAgLy8gd2hlbiBwcmljZSBkYXRhIGNoYW5nZXNcclxuICAgIHByaWNlRGF0YSgpIHtcclxuICAgICAgdGhpcy51cGRhdGVXYXRjaENvdW50KCk7XHJcbiAgICAgIHRoaXMudXBkYXRlRWxhcHNlZFRpbWVzKCk7XHJcbiAgICAgIHRoaXMuY2hlY2tUcmFkZUJ1eSgpO1xyXG4gICAgICB0aGlzLmNoZWNrVHJhZGVTZWxsKCk7XHJcbiAgICAgIHRoaXMuY2hlY2tCb3RFcnJvcnMoKTtcclxuICAgIH0sXHJcbiAgfSxcclxuXHJcbiAgLy8gY29tcHV0ZWQgbWV0aG9kc1xyXG4gIGNvbXB1dGVkOiB7XHJcblxyXG4gICAgLy8gY2hlY2sgaWYgaXQncyBwb3NzaWJsZSB0byBtYWtlIGFwaSByZXF1ZXN0c1xyXG4gICAgY2FuQ29ubmVjdCgpIHtcclxuICAgICAgbGV0IHsgZW5hYmxlZCwgYXBpa2V5LCBhcGlzZWNyZXQgfSA9IHRoaXMub3B0aW9ucy5iaW5hbmNlO1xyXG4gICAgICByZXR1cm4gKCBlbmFibGVkICYmIGFwaWtleSAmJiBhcGlzZWNyZXQgKSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2hlY2sgaWYgYm90IGNhbiBiZSBzdGFydGVkXHJcbiAgICBjYW5TdGFydEJvdCgpIHtcclxuICAgICAgbGV0IGFzc2V0ID0gU3RyaW5nKCB0aGlzLndhdGNoT3B0aW9ucy5hc3NldCB8fCAnJyApO1xyXG4gICAgICBsZXQgYmFsYW5jZSA9IE51bWJlciggdGhpcy53YXRjaE9wdGlvbnMuYXNzZXRCYWxhbmNlIHx8IDAgKTtcclxuICAgICAgaWYgKCB0aGlzLnRpY2tlclN0YXR1cyA8IDIgfHwgIWFzc2V0IHx8ICFiYWxhbmNlICkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2hlY2sgaWYgYXBpIGNvbm5lY3Rpb24gaXMgb2ZmbGluZVxyXG4gICAgaXNEaXNjb25uZWN0ZWQoKSB7XHJcbiAgICAgIHJldHVybiAoIHRoaXMuc29ja2V0U3RhdHVzID09PSAwICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNoZWNrIGlmIGFwaSBjb25uZWN0aW9uIGluIHByb2dyZXNzXHJcbiAgICBpc1dhaXRpbmcoKSB7XHJcbiAgICAgIHJldHVybiAoIHRoaXMuc29ja2V0U3RhdHVzID09PSAxICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNoZWNrIGlmIGNvbm5lY3RlZCB0byBzb2NrZXQgYXBpXHJcbiAgICBpc0Nvbm5lY3RlZCgpIHtcclxuICAgICAgcmV0dXJuICggdGhpcy5zb2NrZXRTdGF0dXMgPT09IDIgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gbnVtYmVyIG9mIG9yZGVycyBpbiB0aGUgbGlzdFxyXG4gICAgdG90YWxPcmRlcnMoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm9yZGVyc0RhdGEubGVuZ3RoO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBudW1iZXIgb2Ygc2Vzc2lvbnMgaW4gdGhlIGxpc3RcclxuICAgIHRvdGFsU2Vzc2lvbnMoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnNlc3Npb25zRGF0YS5sZW5ndGg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG51bWJlciBvZiB0cmFkZXMgaW4gdGhlIGxpc3RcclxuICAgIHRvdGFsVHJhZGVzKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy50cmFkZXNEYXRhLmxlbmd0aDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gbnVtYmVyIG9mIHRyYWRlcyBpbiBsaXN0IHRoYXQgYXJlIG5vdCB2aXNpYmxlIGR1ZSB0byBwYWdpbmdcclxuICAgIGhpZGRlblRyYWRlcygpIHtcclxuICAgICAgbGV0IGxpc3QgID0gdGhpcy50cmFkZXNEYXRhO1xyXG4gICAgICBsZXQgdG90YWwgPSB0aGlzLnRyYWRlc1Zpc2libGU7XHJcbiAgICAgIHJldHVybiAoIGxpc3QubGVuZ3RoID4gdG90YWwgKSA/ICggbGlzdC5sZW5ndGggLSB0b3RhbCApIDogMDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gbnVtYmVyIG9mIGFjdGl2ZSB0cmFkZXNcclxuICAgIHBlbmRpbmdUcmFkZXMoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRyYWRlc0RhdGEuZmlsdGVyKCBvID0+IG8uYWN0aXZlICkubGVuZ3RoO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXQgbWF4IG51bWJlciBvZiB0cmFkZXMgYm90IGNhbiBtYWtlXHJcbiAgICBtYXhUcmFkZXMoKSB7XHJcbiAgICAgIHJldHVybiBOdW1iZXIoIHRoaXMud2F0Y2hPcHRpb25zLmFzc2V0U3BsaXQgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcGFnaW5hdGlvbiB0ZXh0IGFib3V0IHRyYWRlcyB2aXNpYmxlXHJcbiAgICB0cmFkZXNMaXN0VGV4dCgpIHtcclxuICAgICAgbGV0IHRvdGFsICA9IHRoaXMudG90YWxUcmFkZXM7XHJcbiAgICAgIGxldCBoaWRkZW4gPSB0aGlzLmhpZGRlblRyYWRlcztcclxuICAgICAgbGV0IG5vdW4gICA9ICggaGlkZGVuID09PSAxICkgPyAndHJhZGUnIDogJ3RyYWRlcyc7XHJcbiAgICAgIHJldHVybiBoaWRkZW4gPyBgJHtoaWRkZW59IG1vcmUgJHtub3VufS4uLmAgOiBgU2hvd2luZyBhbGwgdHJhZGVzYDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdG90YWwgYmFsYW5jZSBhbGxvY2F0ZWQgZm9yIGJvdFxyXG4gICAgYmFsYW5jZVRvdGFsKCkge1xyXG4gICAgICByZXR1cm4gTnVtYmVyKCB0aGlzLndhdGNoT3B0aW9ucy5hc3NldEJhbGFuY2UgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGJhbGFuY2UgYW1vdW50IGZvciBlYWNoIHRyYWRlXHJcbiAgICB0cmFkZUJhbGFuY2UoKSB7XHJcbiAgICAgIHJldHVybiBOdW1iZXIoIHRoaXMuYmFsYW5jZVRvdGFsIC8gdGhpcy5tYXhUcmFkZXMgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGJhbGFuY2UgdXNlZCBieSB0aGUgYm90XHJcbiAgICBiYWxhbmNlVXNlZCgpIHtcclxuICAgICAgcmV0dXJuICtOdW1iZXIoIHRoaXMudHJhZGVCYWxhbmNlICogdGhpcy5wZW5kaW5nVHJhZGVzICkudG9GaXhlZCggOCApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjYWxjdWxhdGUgcmVtYWluaW5nIGJhbGFuY2UgZm9yIGJvdCB0cmFkZXNcclxuICAgIGJhbGFuY2VSZW1haW4oKSB7XHJcbiAgICAgIHJldHVybiArTnVtYmVyKCB0aGlzLmJhbGFuY2VUb3RhbCAtIHRoaXMuYmFsYW5jZVVzZWQgKS50b0ZpeGVkKCA4ICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGJ1aWxkIGFzc2V0cyBzZWxlY3Qgb3B0aW9uc1xyXG4gICAgYXNzZXRPcHRpb25zKCkge1xyXG4gICAgICBsZXQgYXNzZXRzID0gdGhpcy5hc3NldHNMaXN0Lm1hcCggYSA9PiB7IHJldHVybiB7IHZhbHVlOiBhLCB0ZXh0OiBhIH0gfSApO1xyXG4gICAgICByZXR1cm4gdGhpcy4kdXRpbHMuc29ydCggYXNzZXRzLCAndmFsdWUnLCAnYXNjJyApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBmaWx0ZXIgYWNjb3VudCBiYWxhbmNlc1xyXG4gICAgYmFsYW5jZXNMaXN0KCkge1xyXG4gICAgICBsZXQgeyBjb2x1bW4sIG9yZGVyIH0gPSB0aGlzLnNvcnREYXRhLmJhbGFuY2VzO1xyXG4gICAgICBsZXQgbGlzdCA9IHRoaXMuYmFsYW5jZXNEYXRhO1xyXG5cclxuICAgICAgaWYgKCB0aGlzLnNlYXJjaFN0ciAmJiB0aGlzLnNlYXJjaFN0ci5sZW5ndGggPiAxICkge1xyXG4gICAgICAgIGxldCByZWcgPSBuZXcgUmVnRXhwKCAnXignKyB0aGlzLnNlYXJjaFN0ciArJyknLCAnaScgKTtcclxuICAgICAgICBsaXN0ID0gbGlzdC5maWx0ZXIoIHQgPT4gKCByZWcudGVzdCggdC5uYW1lICkgfHwgcmVnLnRlc3QoIHQuYXNzZXQgKSApICk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRoaXMuJHV0aWxzLnNvcnQoIGxpc3QsIGNvbHVtbiwgb3JkZXIgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZ2V0IGxpc3Qgb2Ygb3JkZXJzXHJcbiAgICBvcmRlcnNMaXN0KCkge1xyXG4gICAgICBsZXQgeyBjb2x1bW4sIG9yZGVyIH0gPSB0aGlzLnNvcnREYXRhLm9yZGVycztcclxuICAgICAgbGV0IGxpc3QgPSB0aGlzLm9yZGVyc0RhdGEuc2xpY2UoKTsgLy8gY29weVxyXG4gICAgICBsaXN0ID0gdGhpcy4kdXRpbHMuc29ydCggbGlzdCwgY29sdW1uLCBvcmRlciApOyAvLyBzb3J0XHJcbiAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXQgbGlzdCBvZiB0cmFkZXNcclxuICAgIHRyYWRlc0xpc3QoKSB7XHJcbiAgICAgIGxldCB7IGNvbHVtbiwgb3JkZXIgfSA9IHRoaXMuc29ydERhdGEudHJhZGVzO1xyXG4gICAgICBsZXQgbGlzdCA9IHRoaXMudHJhZGVzRGF0YS5zbGljZSgpOyAvLyBjb3B5XHJcbiAgICAgIGxpc3QgPSB0aGlzLiR1dGlscy5zb3J0KCBsaXN0LCBjb2x1bW4sIG9yZGVyICk7IC8vIHNvcnRcclxuICAgICAgbGlzdCA9IHRoaXMuJHV0aWxzLnRyaW1SaWdodCggbGlzdCwgdGhpcy50cmFkZXNWaXNpYmxlICk7IC8vIHRyaW1cclxuICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldCBsaXN0IG9mIHNlc3Npb25zXHJcbiAgICBzZXNzaW9uc0xpc3QoKSB7XHJcbiAgICAgIGxldCB7IGNvbHVtbiwgb3JkZXIgfSA9IHRoaXMuc29ydERhdGEuc2Vzc2lvbnM7XHJcbiAgICAgIGxldCBsaXN0ID0gdGhpcy5zZXNzaW9uc0RhdGEuc2xpY2UoKTsgLy8gY29weVxyXG4gICAgICBsaXN0ID0gdGhpcy4kdXRpbHMuc29ydCggbGlzdCwgY29sdW1uLCBvcmRlciApOyAvLyBzb3J0XHJcbiAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICAvLyBjdXN0b20gbWV0aG9kc1xyXG4gIG1ldGhvZHM6IHtcclxuXHJcbiAgICAvLyBhcHBseSBvcHRpb25zXHJcbiAgICBzYXZlT3B0aW9ucygpIHtcclxuICAgICAgdGhpcy4kb3B0cy5zYXZlT3B0aW9ucyggdGhpcy5vcHRpb25zICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNldHVwIHVzZXIgYWNjb3VudCBzdHJlYW1cclxuICAgIHNldHVwVXNlckhhbmRsZXJzKCkge1xyXG4gICAgICAvLyBvcmRlciBib29rIGV2ZW50c1xyXG4gICAgICB0aGlzLiRiaW5hbmNlLm9uKCAnYm9va19jcmVhdGUnLCB0aGlzLm9uQm9va0NyZWF0ZSApO1xyXG4gICAgICB0aGlzLiRiaW5hbmNlLm9uKCAnYm9va19jYW5jZWwnLCB0aGlzLm9uQm9va0NhbmNlbCApO1xyXG4gICAgICB0aGlzLiRiaW5hbmNlLm9uKCAnYm9va19mYWlsJywgdGhpcy5vbkJvb2tGYWlsICk7XHJcbiAgICAgIC8vIHVzZXIgc3RyZWFtIGV2ZW50c1xyXG4gICAgICB0aGlzLiRiaW5hbmNlLm9uKCAndXNlcl9pbml0JywgdGhpcy5vblVzZXJJbml0ICk7XHJcbiAgICAgIHRoaXMuJGJpbmFuY2Uub24oICd1c2VyX2ZhaWwnLCB0aGlzLm9uVXNlckZhaWwgKTtcclxuICAgICAgdGhpcy4kYmluYW5jZS5vbiggJ3VzZXJfZXJyb3InLCB0aGlzLm9uVXNlckVycm9yICk7XHJcbiAgICAgIHRoaXMuJGJpbmFuY2Uub24oICd1c2VyX2Nsb3NlJywgdGhpcy5vblVzZXJDbG9zZSApO1xyXG4gICAgICB0aGlzLiRiaW5hbmNlLm9uKCAndXNlcl9vcGVuJywgdGhpcy5vblVzZXJPcGVuICk7XHJcbiAgICAgIHRoaXMuJGJpbmFuY2Uub24oICd1c2VyX2RhdGEnLCB0aGlzLm9uVXNlckRhdGEgKTtcclxuICAgICAgdGhpcy4kYmluYW5jZS5vbiggJ3VzZXJfYmFsYW5jZXMnLCB0aGlzLm9uVXNlckJhbGFuY2VzICk7XHJcbiAgICAgIHRoaXMuJGJpbmFuY2Uub24oICd1c2VyX29yZGVyJywgdGhpcy5vblVzZXJPcmRlciApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBsb2FkIG9yIHNhdmUgZGF0YSBmb3IgYW4gb2JqZWN0IGJ5IHJlZiBmb3IgYSBrZXlcclxuICAgIHNhdmVEYXRhKCBrZXksIGRhdGEgKSB7XHJcbiAgICAgIHRoaXMuJHN0b3JlLnNldERhdGEoIGtleSwgZGF0YSApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBsb2FkIHNhdmVkIGNvbXBvbmVudCBkYXRhXHJcbiAgICBsb2FkU2F2ZWREYXRhKCkge1xyXG4gICAgICBsZXQgdHJhZGVzID0gdGhpcy4kc3RvcmUuZ2V0RGF0YSggdGhpcy5rZXlzLnRyYWRlcyApO1xyXG4gICAgICB0aGlzLnRyYWRlc0RhdGEgPSB0cmFkZXMgfHwgdGhpcy50cmFkZXNEYXRhO1xyXG5cclxuICAgICAgbGV0IHNlc3Npb25zID0gdGhpcy4kc3RvcmUuZ2V0RGF0YSggdGhpcy5rZXlzLnNlc3Npb25zICk7XHJcbiAgICAgIHRoaXMuc2Vzc2lvbnNEYXRhID0gc2Vzc2lvbnMgfHwgdGhpcy5zZXNzaW9uc0RhdGE7XHJcblxyXG4gICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuJHN0b3JlLmdldERhdGEoIHRoaXMua2V5cy5vcHRpb25zICk7XHJcbiAgICAgIHRoaXMud2F0Y2hPcHRpb25zID0gT2JqZWN0LmFzc2lnbiggdGhpcy53YXRjaE9wdGlvbnMsIG9wdGlvbnMgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdHJhZGUgc3RhdHVzIHRleHRcclxuICAgIHRyYWRlU3RhdHVzKCBzdGF0dXMsIGMgKSB7XHJcbiAgICAgIHN3aXRjaCAoIHN0YXR1cyApIHtcclxuICAgICAgICBjYXNlIFRSQURFX1dBSVQgOiByZXR1cm4gYyA/ICd0ZXh0LWRhbmdlcicgIDogJ0hPRExJTkcnO1xyXG4gICAgICAgIGNhc2UgVFJBREVfU0VMTCA6IHJldHVybiBjID8gJ3RleHQtd2FybmluZycgOiAnU0VMTElORyc7XHJcbiAgICAgICAgY2FzZSBUUkFERV9ET05FIDogcmV0dXJuIGMgPyAndGV4dC1zdWNjZXNzJyA6ICdTT0xEJztcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyB0b2dnbGUgYm90IGZvcm0gc2hvdy9oaWRlXHJcbiAgICB0b2dnbGVGb3JtKCkge1xyXG4gICAgICB0aGlzLmZvcm1TaG93ID0gIXRoaXMuZm9ybVNob3c7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGFkZCBicm93c2VyIG5vdGlmaWNhdGlvbiBmb3IgYSBmaWxsZWQgb3JkZXJcclxuICAgIG5vdGlmeU9yZGVyKCBvcmRlciApIHtcclxuICAgICAgbGV0IHsgaWQsIHRpbWUsIHN5bWJvbCwgdG9rZW4sIGFzc2V0LCBuYW1lLCBpbWFnZSwgdHlwZSwgc2lkZSwgc3RhdHVzLCBwcmljZSwgcXVhbnRpdHkgfSA9IG9yZGVyO1xyXG4gICAgICBsZXQgZGF0ZSAgICAgPSB0aGlzLiR1dGlscy5kYXRlKCB0aW1lLCB0cnVlICk7XHJcbiAgICAgIGxldCBwcmljZVN0ciA9IHRoaXMuJHV0aWxzLmZpeGVkKCBwcmljZSwgYXNzZXQgKTtcclxuICAgICAgbGV0IHF0eVN0ciAgID0gdGhpcy4kdXRpbHMubW9uZXkoIHF1YW50aXR5ICk7XHJcbiAgICAgIGxldCB0aXRsZSAgICA9IGAke3Rva2VufSAke3NpZGV9IE9yZGVyICR7c3RhdHVzfWA7XHJcbiAgICAgIGxldCBpbmZvICAgICA9IGAke3NpZGV9ICR7cXR5U3RyfSAke3Rva2VufSBAICR7cHJpY2VTdHJ9ICR7YXNzZXR9LiBcXG4ke2RhdGV9LmA7XHJcbiAgICAgIGxldCBpY29uICAgICA9IHRoaXMuJHV0aWxzLmZ1bGxVcmwoIGltYWdlICk7XHJcblxyXG4gICAgICB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCBpbmZvLCAnc3VjY2VzcycgKTtcclxuICAgICAgdGhpcy4kbm90aWZ5LmFkZCggdGl0bGUsIGluZm8sIGljb24gKTtcclxuICAgICAgdGhpcy4kbWVzc2VuZ2VyLmFkZCggdGl0bGUsIGluZm8sIGljb24gKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZ2V0IGN1cnJlbnQgcHJpY2UgZm9yIGEgc3ltYm9sXHJcbiAgICBnZXRTeW1ib2xQcmljZSggc3ltYm9sICkge1xyXG4gICAgICBsZXQgY2xvc2UgPSAwO1xyXG4gICAgICBsZXQgY291bnQgPSB0aGlzLnByaWNlRGF0YS5sZW5ndGg7XHJcblxyXG4gICAgICB3aGlsZSAoIGNvdW50LS0gKSB7XHJcbiAgICAgICAgaWYgKCB0aGlzLnByaWNlRGF0YVsgY291bnQgXS5zeW1ib2wgPT09IHN5bWJvbCApIHtcclxuICAgICAgICAgIGNsb3NlID0gdGhpcy5wcmljZURhdGFbIGNvdW50IF0uY2xvc2U7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNsb3NlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBlbm91Z2ggYmFsYW5jZSBmb3IgYSB0b2tlblxyXG4gICAgaGFzVG9rZW5CYWxhbmNlKCB0b2tlbiwgYW1vdW50ICkge1xyXG4gICAgICBsZXQgY291bnQgPSB0aGlzLmJhbGFuY2VzRGF0YS5sZW5ndGg7XHJcblxyXG4gICAgICB3aGlsZSAoIGNvdW50LS0gKSB7XHJcbiAgICAgICAgbGV0IGIgPSB0aGlzLmJhbGFuY2VzRGF0YVsgY291bnQgXTtcclxuICAgICAgICBpZiAoIGIuYXNzZXQgPT09IHRva2VuICYmIGIuZnJlZSA+PSBhbW91bnQgKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGFkZHMgbmV3IG9yZGVyIHRvIHRoZSBsaXN0XHJcbiAgICB1cGRhdGVPcmRlcnNMaXN0KCBvcmRlciApIHtcclxuICAgICAgbGV0IGxpc3QgPSB0aGlzLm9yZGVyc0RhdGEuZmlsdGVyKCBvID0+ICggby5pZCAhPT0gb3JkZXIuaWQgKSApOyAvLyBmaWx0ZXJcclxuICAgICAgaWYgKCBvcmRlci5zdGF0dXMgIT09ICdDQU5DRUxFRCcgJiYgb3JkZXIucXVhbnRpdHkgKSBsaXN0LnB1c2goIG9yZGVyICk7IC8vIGFkZFxyXG4gICAgICB0aGlzLm9yZGVyc0RhdGEgPSB0aGlzLiR1dGlscy50cmltTGVmdCggbGlzdCwgdGhpcy5tYXhJdGVtcyApOyAvLyB0cmltXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHJlbW92ZSBvcmRlciBmcm9tIHRoZSBsaXN0XHJcbiAgICByZW1vdmVPcmRlciggaWQgKSB7XHJcbiAgICAgIHRoaXMub3JkZXJzRGF0YSA9IHRoaXMub3JkZXJzRGF0YS5maWx0ZXIoIG8gPT4gKCBvLmlkICE9PSBpZCApICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHJlbW92ZWQgZmluaXNoZWQgb3JkZXJzIGZyb20gdGhlIGxpc3RcclxuICAgIGNsZWFyT3JkZXJzTGlzdCgpIHtcclxuICAgICAgdGhpcy5vcmRlcnNEYXRhID0gdGhpcy5vcmRlcnNEYXRhLmZpbHRlciggbyA9PiAoIG8uc3RhdHVzID09PSAnT1BFTicgKSApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjYW5jZWwgb3BlbiBvcmRlcnNcclxuICAgIGNhbmNlbE9wZW5PcmRlcnMoKSB7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXJzRGF0YS5sZW5ndGg7ICsraSApIHtcclxuICAgICAgICBsZXQgeyBpZCwgc3ltYm9sLCBzdGF0dXMsIHF1YW50aXR5IH0gPSB0aGlzLm9yZGVyc0RhdGFbIGkgXTtcclxuICAgICAgICBpZiAoIHN0YXR1cyA9PT0gJ09QRU4nICkgdGhpcy5jYW5jZWxPcmRlciggc3ltYm9sLCBpZCwgcXVhbnRpdHkgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBidWlsZCBib3Qgc2Vzc2lvbiB3aGVuIGJvdCBzdG9wc1xyXG4gICAgYnVpbGRTZXNzaW9uRGF0YSgpIHtcclxuICAgICAgbGV0IGxpc3QgICAgID0gdGhpcy5zZXNzaW9uc0RhdGE7XHJcbiAgICAgIGxldCBpZCAgICAgICA9IHRoaXMuJHV0aWxzLnJhbmRTdHJpbmcoIDIwICk7XHJcbiAgICAgIGxldCB0aW1lICAgICA9IERhdGUubm93KCk7XHJcbiAgICAgIGxldCBlbGFwc2VkICA9IHRoaXMuYm90RWxhcHNlZDtcclxuICAgICAgbGV0IGxpdmUgICAgID0gdGhpcy5saXZlTW9kZTtcclxuICAgICAgbGV0IHRva2VuICAgID0gdGhpcy53YXRjaE9wdGlvbnMudG9rZW47XHJcbiAgICAgIGxldCBhc3NldCAgICA9IHRoaXMud2F0Y2hPcHRpb25zLmFzc2V0O1xyXG4gICAgICBsZXQgYmFsYW5jZSAgPSB0aGlzLndhdGNoT3B0aW9ucy5hc3NldEJhbGFuY2U7XHJcbiAgICAgIGxldCBwYWlyICAgICA9IHRva2VuID8gdG9rZW4gKycvJysgYXNzZXQgOiAnQUxMLycrIGFzc2V0O1xyXG4gICAgICBsZXQgdG90YWwgICAgPSAwO1xyXG4gICAgICBsZXQgY29tcGxldGUgPSAwO1xyXG4gICAgICBsZXQgcHJvZml0ICAgPSAwO1xyXG5cclxuICAgICAgLy8gY2FsY3VsYXRlIHRvdGFsIHByb2ZpdCBmb3IgY29tcGxldGVkIHRyYWRlc1xyXG4gICAgICB0aGlzLnRyYWRlc0RhdGEuZm9yRWFjaCggbyA9PiB7IGlmICggIW8uYWN0aXZlICkgeyBwcm9maXQgKz0gby5wcm9maXQ7IGNvbXBsZXRlKys7IH0gdG90YWwrKzsgfSApO1xyXG4gICAgICBpZiAoICF0b3RhbCApIHJldHVybjsgLy8gbm8gcG9pbnQgaWYgZW1wdHlcclxuXHJcbiAgICAgIGxpc3QucHVzaCggeyBpZCwgdGltZSwgbGl2ZSwgdG9rZW4sIGFzc2V0LCBwYWlyLCBiYWxhbmNlLCB0b3RhbCwgY29tcGxldGUsIGVsYXBzZWQsIHByb2ZpdCB9ICk7IC8vIGFkZFxyXG4gICAgICB0aGlzLnNlc3Npb25zRGF0YSA9IHRoaXMuJHV0aWxzLnRyaW1MZWZ0KCBsaXN0LCB0aGlzLm1heEl0ZW1zICk7IC8vIHRyaW1cclxuICAgICAgdGhpcy5zYXZlRGF0YSggdGhpcy5rZXlzLnNlc3Npb25zLCB0aGlzLnNlc3Npb25zRGF0YSApOyAvLyBzYXZlXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGRlbGV0ZSBlbnRyeSBmcm9tIHNlc3Npb24gbGlzdCBieSBpZFxyXG4gICAgZGVsZXRlU2Vzc2lvbkVudHJ5KCBpZCApIHtcclxuICAgICAgdGhpcy5zZXNzaW9uc0RhdGEgPSB0aGlzLnNlc3Npb25zRGF0YS5maWx0ZXIoIHMgPT4gKCBzLmlkICE9PSBpZCApICk7XHJcbiAgICAgIHRoaXMuc2F2ZURhdGEoIHRoaXMua2V5cy5zZXNzaW9ucywgdGhpcy5zZXNzaW9uc0RhdGEgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZmx1c2ggc2Vzc2lvbiBkYXRhXHJcbiAgICBmbHVzaFNlc3Npb25EYXRhKCkge1xyXG4gICAgICB0aGlzLnNlc3Npb25zRGF0YSA9IFtdO1xyXG4gICAgICB0aGlzLnNhdmVEYXRhKCB0aGlzLmtleXMuc2Vzc2lvbnMsIHRoaXMuc2Vzc2lvbnNEYXRhICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNvdW50IHRvdGFsIHBhaXJzIGZvciBzZWxlY3Qgb3B0aW9uXHJcbiAgICB1cGRhdGVXYXRjaENvdW50KCkge1xyXG4gICAgICBsZXQgYXNzZXQgPSBTdHJpbmcoIHRoaXMud2F0Y2hPcHRpb25zLmFzc2V0IHx8ICcnICk7XHJcbiAgICAgIGxldCBjb3VudCA9IHRoaXMud2F0Y2hlci53YXRjaENvdW50KCB0aGlzLnByaWNlRGF0YSApO1xyXG4gICAgICB0aGlzLmNvdW50SW5mbyA9IHRoaXMuJHV0aWxzLm5vdW4oIGNvdW50LCBhc3NldCArJyBwYWlyJywgYXNzZXQgKycgcGFpcnMnICk7XHJcbiAgICB9LFxyXG5cclxuICAgICAvLyB1cGRhdGUgZWxhcHNlZCB0aW1lc1xyXG4gICAgdXBkYXRlRWxhcHNlZFRpbWVzKCkge1xyXG4gICAgICBpZiAoIHRoaXMuc29ja2V0VGltZSApIHtcclxuICAgICAgICBsZXQgc2VjcyA9ICggRGF0ZS5ub3coKSAtIHRoaXMuc29ja2V0VGltZSApIC8gMTAwMDtcclxuICAgICAgICB0aGlzLnNvY2tldFVwZGF0ZWQgPSB0aGlzLiR1dGlscy5lbGFwc2VkKCBzZWNzLCAnYWdvJywgdHJ1ZSApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICggdGhpcy5ib3RTdGFydCApIHtcclxuICAgICAgICBsZXQgc2VjcyA9ICggRGF0ZS5ub3coKSAtIHRoaXMuYm90U3RhcnQgKSAvIDEwMDA7XHJcbiAgICAgICAgdGhpcy5ib3RFbGFwc2VkID0gdGhpcy4kdXRpbHMuZWxhcHNlZCggc2VjcyApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldCBhY3RpdmUgdHJhZGUgY291bnQgZm9yIGEgdG9rZW5cclxuICAgIGFjdGl2ZVRyYWRlQ291bnQoIHRva2VuICkge1xyXG4gICAgICByZXR1cm4gdGhpcy50cmFkZXNEYXRhLmZpbHRlciggbyA9PiAoIG8uYWN0aXZlICYmIG8udG9rZW4gPT09IHRva2VuICkgKS5sZW5ndGg7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldCB0b3RhbCB0cmFkZSBjb3VudCBmb3IgYSB0b2tlblxyXG4gICAgdG90YWxUcmFkZUNvdW50KCB0b2tlbiApIHtcclxuICAgICAgcmV0dXJuIHRoaXMudHJhZGVzRGF0YS5maWx0ZXIoIG8gPT4gKCBvLnRva2VuID09PSB0b2tlbiApICkubGVuZ3RoO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyByZW1vdmUgY29tcGxldGUgb3JkZXJzIGZyb20gdGhlIGJvdCB0cmFkZXMgbGlzdFxyXG4gICAgY2xlYW5UcmFkZXNMaXN0KCkge1xyXG4gICAgICB0aGlzLnRyYWRlc0RhdGEgPSB0aGlzLnRyYWRlc0RhdGEuZmlsdGVyKCBvID0+ICggby5hY3RpdmUgJiYgby5hbW91bnQgKSApO1xyXG4gICAgICB0aGlzLnNhdmVEYXRhKCB0aGlzLmtleXMudHJhZGVzLCB0aGlzLnRyYWRlc0RhdGEgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcmVtb3ZlIGEgdHJhZGUgZnJvbSB0aGUgbGlzdCBieSBpZFxyXG4gICAgcmVtb3ZlVHJhZGVFbnRyeSggdHJhZGVJZCApIHtcclxuICAgICAgdGhpcy50cmFkZXNEYXRhID0gdGhpcy50cmFkZXNEYXRhLmZpbHRlciggbyA9PiAoIG8uaWQgIT09IHRyYWRlSWQgKSApO1xyXG4gICAgICB0aGlzLnNhdmVEYXRhKCB0aGlzLmtleXMudHJhZGVzLCB0aGlzLnRyYWRlc0RhdGEgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZGVsZXRlIGFsbCB0cmFkZSBkYXRhIGVudHJpZXNcclxuICAgIGZsdXNoVHJhZGVFbnRyaWVzKCkge1xyXG4gICAgICBuZXcgUHJvbXB0KHtcclxuICAgICAgICB0aXRsZTogYENvbmZpcm0gRGVsZXRlIFRyYWRlc2AsXHJcbiAgICAgICAgY29uZmlybTogYFRoaXMgd2lsbCBkZWxldGUgYW55IGFjdGl2ZSB0cmFkZXMsIGFyZSB5b3Ugc3VyZT9gLFxyXG4gICAgICAgIG9uQWNjZXB0OiAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgdGhpcy50cmFkZXNEYXRhID0gW107XHJcbiAgICAgICAgICB0aGlzLnNhdmVEYXRhKCB0aGlzLmtleXMudHJhZGVzLCB0aGlzLnRyYWRlc0RhdGEgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZWxsIGFjdGl2ZSB0cmFkZS9zIGF0IGN1cnJlbnQgcHJpY2VcclxuICAgIHNlbGxBY3RpdmVUcmFkZSggaWQgKSB7XHJcbiAgICAgIGlmICggIXRoaXMuaXNDb25uZWN0ZWQgKSByZXR1cm47XHJcblxyXG4gICAgICB0aGlzLnRyYWRlc0RhdGEuZm9yRWFjaCggdHJhZGUgPT4ge1xyXG4gICAgICAgIGxldCB7IGFjdGl2ZSwgc3ltYm9sLCB0b2tlbiwgYXNzZXQsIGFtb3VudCwgc2VsbFByaWNlIH0gPSB0cmFkZTtcclxuICAgICAgICBpZiAoIHRyYWRlLmlkICE9PSBpZCB8fCAhYW1vdW50IHx8ICFzZWxsUHJpY2UgKSByZXR1cm47XHJcblxyXG4gICAgICAgIG5ldyBQcm9tcHQoe1xyXG4gICAgICAgICAgdGl0bGU6IGBDb25maXJtIFRyYWRlIFNlbGxgLFxyXG4gICAgICAgICAgY29uZmlybTogYFBsYWNlIGFuIG9yZGVyIHRvIFNFTEwgJHthbW91bnR9ICR7dG9rZW59IGF0IGN1cnJlbnQgJHthc3NldH0gdHJhZGluZyBwcmljZT9gLFxyXG4gICAgICAgICAgb25BY2NlcHQ6ICgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHRyYWRlLnN0YXR1cyA9IFRSQURFX1NFTEw7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2VPcmRlciggJ1NFTEwnLCBzeW1ib2wsIHNlbGxQcmljZSwgYW1vdW50ICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjaGVjayBpZiBhIHRva2VuIGZyb20gdGhlIGJhbGFuY2VzIGxpc3QgY2FuIGJlIHRyYWRlZCBiYXNlZCBvbiBtaW4gdG90YWwgbGltaXRcclxuICAgIGNoZWNrQ2FuVHJhZGVUb2tlbiggdG9rZW4sIGFtb3VudCwgcHJpY2UgKSB7XHJcbiAgICAgIHByaWNlICA9IE51bWJlciggcHJpY2UgfHwgMCApO1xyXG4gICAgICBhbW91bnQgPSBNYXRoLmZsb29yKCBOdW1iZXIoIGFtb3VudCB8fCAwICkgKTtcclxuXHJcbiAgICAgIGxldCBhc3NldCA9IHRoaXMud2F0Y2hPcHRpb25zLmFzc2V0O1xyXG4gICAgICBsZXQgdG90YWwgPSAoIHByaWNlICogYW1vdW50ICk7XHJcblxyXG4gICAgICBpZiAoICF0b2tlbiB8fCAhYXNzZXQgfHwgYW1vdW50IDw9IDAgKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGlmICggdG9rZW4gPT09IGFzc2V0IHx8IHRva2VuID09PSAnVVNEVCcgKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICBpZiAoIHByaWNlICkge1xyXG4gICAgICAgIGlmICggdG90YWwgPD0gMCApIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIGFzc2V0ID09PSAnQlRDJyAmJiB0b3RhbCA8IDAuMDAxICkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICggYXNzZXQgPT09ICdFVEgnICYmIHRvdGFsIDwgMC4wMSApIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoIGFzc2V0ID09PSAnQk5CJyAmJiB0b3RhbCA8IDEgKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKCBhc3NldCA9PT0gJ1VTRFQnICYmIHRvdGFsIDwgMTAgKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNvbnZlcnQgdG9rZW4gYmFsYW5jZSBpbnRvIGFjdGl2ZSBib3QgdHJhZGUgZm9yIHNlbGxcclxuICAgIGluaXRUb2tlblRyYWRlKCB0b2tlbiwgYW1vdW50ICkge1xyXG4gICAgICBsZXQgYXNzZXQgICAgPSB0aGlzLndhdGNoT3B0aW9ucy5hc3NldDtcclxuICAgICAgbGV0IHN5bWJvbCAgID0gdG9rZW4gKyBhc3NldDtcclxuICAgICAgbGV0IHF1YW50aXR5ID0gTWF0aC5mbG9vciggYW1vdW50ICk7XHJcbiAgICAgIGxldCBxdHlTdHIgICA9IHRoaXMuJHV0aWxzLm1vbmV5KCBxdWFudGl0eSApO1xyXG4gICAgICBsZXQgcHJpY2UgICAgPSB0aGlzLmdldFN5bWJvbFByaWNlKCBzeW1ib2wgKTtcclxuICAgICAgbGV0IHByaWNlU3RyID0gdGhpcy4kdXRpbHMuZml4ZWQoIHByaWNlLCBhc3NldCApO1xyXG5cclxuICAgICAgLy8gY2hlY2sgaWYgY3VycmVudCBtYXJrZXQgcHJpY2Ugd2FzIGZvdW5mIGZvciB0aGlzIHRva2VuXHJcbiAgICAgIGlmICggIXByaWNlIHx8ICFxdWFudGl0eSApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgYE5vIG1hcmtldCBmb3IgJHtzeW1ib2x9IGF0IHRoZSBtb21lbnQuYCwgJ3dhcm5pbmcnICk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gY2hlY2sgaWYgYW1vdW50IGlzIGFscmVhZHkgdXNlZCBieSBhbm90aGVyIHRyYWRlXHJcbiAgICAgIGlmICggdGhpcy5jaGVja0JvdFRyYWRlRXhpc3RzKCBzeW1ib2wsIHF1YW50aXR5ICkgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsIGBBIHRyYWRlIGZvciB0aGlzICR7dG9rZW59IGFtb3VudCBhbHJlYWR5IGV4aXN0cy5gLCAnd2FybmluZycgKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBhc2sgZm9yIGludGl0aWFsIGJ1eSBwcmljZSBmb3IgdGhlIHRva2VuIGJlaW5nIHRyYWRlZFxyXG4gICAgICBuZXcgUHJvbXB0KHtcclxuICAgICAgICB0aXRsZTogYE9yaWdpbmFsICR7c3ltYm9sfSBCVVkgUHJpY2VgLFxyXG4gICAgICAgIGlucHV0VGV4dDogJzAuMDAwMDAwMDAnLFxyXG4gICAgICAgIGZvcmNlVmFsdWU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6IHByaWNlU3RyLFxyXG4gICAgICAgIG9uQWNjZXB0OiAoIGJ1eVByaWNlICkgPT4ge1xyXG5cclxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlJ3MgZW5vdWdoIHRvIHRyYWRlIHdpdGhcclxuICAgICAgICAgIGlmICggIXRoaXMuY2hlY2tDYW5UcmFkZVRva2VuKCB0b2tlbiwgcXVhbnRpdHksIGJ1eVByaWNlICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCBgTm90IGVub3VnaCAke3Rva2VufSBiYWxhbmNlIHRvIHRyYWRlIHdpdGguYCwgJ3dhcm5pbmcnICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBjb25maXJtIG5ldyB0cmFkZSBlbnRyeVxyXG4gICAgICAgICAgbmV3IFByb21wdCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBgQ29uZmlybSBOZXcgVHJhZGVgLFxyXG4gICAgICAgICAgICBjb25maXJtOiBgU3RhcnQgbmV3IHRyYWRlIHRvIHNlbGwgJHtxdHlTdHJ9ICR7dG9rZW59IHN0YXJ0aW5nIGF0ICR7YnV5UHJpY2V9ICR7YXNzZXR9P2AsXHJcbiAgICAgICAgICAgIG9uQWNjZXB0OiAoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGluc2VydCBuZXcgdHJhZGVcclxuICAgICAgICAgICAgICB0aGlzLmhhbmRsZUJvdE9yZGVyKCB0aGlzLiRiaW5hbmNlLmZha2VPcmRlckRhdGEoIHN5bWJvbCwgJ0xJTUlUJywgJ0JVWScsIGJ1eVByaWNlLCBxdWFudGl0eSwgJ0ZJTExFRCcgKSwgdHJ1ZSApO1xyXG4gICAgICAgICAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsIGBOZXcgdHJhZGUgYWRkZWQgZm9yICR7cXR5U3RyfSAke3Rva2VufSBAICR7YnV5UHJpY2V9ICR7YXNzZXR9LmAsICdzdWNjZXNzJyApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGhhbmRsZSBpbmNvbWluZyBvcmRlciBmb3IgdGhlIGJvdFxyXG4gICAgaGFuZGxlQm90T3JkZXIoIG9yZGVyLCBmb3JjZSApIHtcclxuICAgICAgbGV0IHsgaWQsIHVuaXF1ZSwgdGltZSwgc3ltYm9sLCB0b2tlbiwgYXNzZXQsIG5hbWUsIHBhaXIsIHJvdXRlLCBpbWFnZSwgcHJpY2UsIHF1YW50aXR5LCBmaWxsZWQsIGFtb3VudCB9ID0gb3JkZXI7XHJcbiAgICAgIGxldCB1bnFkb25lID0gb3JkZXIudW5pcXVlICsnXycrIHRoaXMuJHV0aWxzLnJhbmRTdHJpbmcoIDEwICk7XHJcbiAgICAgIGxldCBpbnNlcnQgID0gdGhpcy5ib3RBY3RpdmUgfHwgZm9yY2U7XHJcblxyXG4gICAgICAvLyBidXkgb3JkZXIgZmlsbGVkLCBjcmVhdGUgbmV3IHRyYWRlIGVudHJ5XHJcbiAgICAgIGlmICggb3JkZXIuc3RhdHVzID09PSAnRklMTEVEJyAmJiBvcmRlci5zaWRlID09PSAnQlVZJyAmJiBpbnNlcnQgKSB7XHJcbiAgICAgICAgbGV0IFsgYWN0aXZlLCBzdGF0dXMsIGJ1eVByaWNlLCBzZWxsUHJpY2UsIHByb2ZpdCBdID0gWyB0cnVlLCBUUkFERV9XQUlULCBwcmljZSwgcHJpY2UsIDAgXTtcclxuICAgICAgICB0aGlzLnRyYWRlc0RhdGEucHVzaCggeyBpZCwgdW5pcXVlLCB0aW1lLCBhY3RpdmUsIHN0YXR1cywgc3ltYm9sLCB0b2tlbiwgYXNzZXQsIG5hbWUsIHBhaXIsIHJvdXRlLCBpbWFnZSwgcXVhbnRpdHksIGZpbGxlZCwgYW1vdW50LCBidXlQcmljZSwgc2VsbFByaWNlLCBwcm9maXQgfSApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHNlbGwgb3JkZXIgZmlsbGVkLCB1cGRhdGUgZXhpc3RpbmcgdHJhZGUgZW50cnlcclxuICAgICAgaWYgKCBvcmRlci5zdGF0dXMgPT09ICdGSUxMRUQnICYmIG9yZGVyLnNpZGUgPT09ICdTRUxMJyApIHtcclxuICAgICAgICBsZXQgWyBhY3RpdmUsIHN0YXR1cywgc2VsbFByaWNlIF0gPSBbIGZhbHNlLCBUUkFERV9ET05FLCBwcmljZSBdO1xyXG4gICAgICAgIHRoaXMudHJhZGVzRGF0YS5mb3JFYWNoKCBvID0+IHsgaWYgKCBvLnVuaXF1ZSA9PT0gdW5pcXVlICkgT2JqZWN0LmFzc2lnbiggbywgeyBhY3RpdmUsIHN0YXR1cywgc2VsbFByaWNlLCB1bmlxdWU6IHVucWRvbmUgfSApIH0gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBzZWxsIG9yZGVyIGluaXRpYXRlZCwgdXBkYXRlIGV4aXN0aW5nIHRyYWRlIGVudHJ5XHJcbiAgICAgIGlmICggb3JkZXIuc3RhdHVzID09PSAnT1BFTicgJiYgb3JkZXIuc2lkZSA9PT0gJ1NFTEwnICkge1xyXG4gICAgICAgIGxldCBbIGFjdGl2ZSwgc3RhdHVzLCBzZWxsUHJpY2UgXSA9IFsgdHJ1ZSwgVFJBREVfU0VMTCwgcHJpY2UgXTtcclxuICAgICAgICB0aGlzLnRyYWRlc0RhdGEuZm9yRWFjaCggbyA9PiB7IGlmICggby51bmlxdWUgPT09IHVuaXF1ZSApIE9iamVjdC5hc3NpZ24oIG8sIHsgYWN0aXZlLCBzdGF0dXMsIHNlbGxQcmljZSB9ICkgfSApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIG9yZGVyIHJlbW92ZWQsIHVwZGF0ZSBleGlzdGluZyB0cmFkZSBlbnRyeVxyXG4gICAgICBpZiAoIC9eKENBTkNFTEVEfEVYUElSRUR8UkVKRUNURUR8UkVQTEFDRUQpJC8udGVzdCggb3JkZXIuc3RhdHVzICkgKSB7XHJcbiAgICAgICAgbGV0IFsgYWN0aXZlLCBzdGF0dXMgXSA9IFsgdHJ1ZSwgVFJBREVfV0FJVCBdO1xyXG4gICAgICAgIHRoaXMudHJhZGVzRGF0YS5mb3JFYWNoKCBvID0+IHsgaWYgKCBvLnVuaXF1ZSA9PT0gdW5pcXVlICkgT2JqZWN0LmFzc2lnbiggbywgeyBhY3RpdmUsIHN0YXR1cyB9ICkgfSApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2F2ZURhdGEoIHRoaXMua2V5cy50cmFkZXMsIHRoaXMudHJhZGVzRGF0YSApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBtYXJrIGEgYm90IHRyYWRlIGFzIGFjdGl2ZSAocmVzZXQpXHJcbiAgICBtYXJrQm90VHJhZGVBY3RpdmUoIGlkICkge1xyXG4gICAgICBsZXQgWyBhY3RpdmUsIHN0YXR1cyBdID0gWyB0cnVlLCBUUkFERV9XQUlUIF07XHJcbiAgICAgIHRoaXMudHJhZGVzRGF0YS5mb3JFYWNoKCBvID0+IHsgaWYgKCBvLmlkID09PSBpZCApIE9iamVjdC5hc3NpZ24oIG8sIHsgYWN0aXZlLCBzdGF0dXMgfSApIH0gKTtcclxuICAgICAgdGhpcy5zYXZlRGF0YSggdGhpcy5rZXlzLnRyYWRlcywgdGhpcy50cmFkZXNEYXRhICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG1hcmsgYSBib3QgdHJhZGUgYXMgc29sZCAoY29tcGxldGUpXHJcbiAgICBtYXJrQm90VHJhZGVTb2xkKCBpZCApIHtcclxuICAgICAgbGV0IFsgYWN0aXZlLCBzdGF0dXMgXSA9IFsgZmFsc2UsIFRSQURFX0RPTkUgXTtcclxuICAgICAgdGhpcy50cmFkZXNEYXRhLmZvckVhY2goIG8gPT4geyBpZiAoIG8uaWQgPT09IGlkICkgT2JqZWN0LmFzc2lnbiggbywgeyBhY3RpdmUsIHN0YXR1cyB9ICkgfSApO1xyXG4gICAgICB0aGlzLnNhdmVEYXRhKCB0aGlzLmtleXMudHJhZGVzLCB0aGlzLnRyYWRlc0RhdGEgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc3RvcCB0aGUgYm90IGlmIHRoZXJlIGFyZSByZXF1ZXN0IGVycm9yc1xyXG4gICAgY2hlY2tCb3RFcnJvcnMoKSB7XHJcbiAgICAgIGlmICggIXRoaXMuYm90QWN0aXZlICkgcmV0dXJuO1xyXG4gICAgICBpZiAoIHRoaXMuZXJyb3JDb3VudCA+IDIgKSB0aGlzLnN0b3BCb3QoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2hlY2sgaWYgYSBib3QgdHJhZGUgZXhpc3RzIGJhc2VkIG9uIGEgdW5pcXVlIHRyYWRlIGlkXHJcbiAgICBjaGVja0JvdFRyYWRlRXhpc3RzKCBzeW1ib2wsIGFtb3VudCApIHtcclxuICAgICAgbGV0IHVuaXF1ZSA9IHRoaXMuJHV0aWxzLnVuaXF1ZSggc3ltYm9sICsnfCcrIGFtb3VudCApO1xyXG4gICAgICByZXR1cm4gdGhpcy50cmFkZXNEYXRhLmZpbHRlciggbyA9PiBvLnVuaXF1ZSA9PT0gdW5pcXVlICkubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjaGVjayBwcmljZSB0aWNrZXIgZm9yIGJ1eSB0cmlnZ2VyXHJcbiAgICBjaGVja1RyYWRlQnV5KCkge1xyXG4gICAgICBpZiAoICF0aGlzLmJvdEFjdGl2ZSApIHJldHVybjtcclxuICAgICAgdGhpcy53YXRjaGVyLmNoZWNrKCB0aGlzLnByaWNlRGF0YSwgKCBwLCBwYywgdmMsIHQgKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBvcmRlciBhbW91bnQgYW5kIHRvdGFsXHJcbiAgICAgICAgbGV0IGxpbWl0ICAgID0gU3RyaW5nKCB0aGlzLndhdGNoT3B0aW9ucy50cmFkZUxpbWl0ICk7XHJcbiAgICAgICAgbGV0IHF1YW50aXR5ID0gTWF0aC5mbG9vciggdGhpcy50cmFkZUJhbGFuY2UgLyBwLmNsb3NlICk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGJvdCB0cmFkZSBiYWxhbmNlIGFuZCBvcHRpb25zXHJcbiAgICAgICAgaWYgKCB0aGlzLnBlbmRpbmdUcmFkZXMgPj0gdGhpcy5tYXhUcmFkZXMgKSByZXR1cm47XHJcbiAgICAgICAgaWYgKCB0aGlzLmJhbGFuY2VVc2VkID49IHRoaXMuYmFsYW5jZVRvdGFsICkgcmV0dXJuO1xyXG4gICAgICAgIGlmICggIXRoaXMuY2hlY2tDYW5UcmFkZVRva2VuKCBwLnRva2VuLCBxdWFudGl0eSwgcC5jbG9zZSApICkgcmV0dXJuO1xyXG4gICAgICAgIGlmICggdGhpcy5jaGVja0JvdFRyYWRlRXhpc3RzKCBwLnN5bWJvbCwgcXVhbnRpdHkgKSApIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgdHJhZGUgbGltaXRcclxuICAgICAgICBpZiAoIGxpbWl0ID09PSAnYWN0aXZlJyAmJiB0aGlzLmFjdGl2ZVRyYWRlQ291bnQoIHAudG9rZW4gKSApIHJldHVybjtcclxuICAgICAgICBpZiAoIGxpbWl0ID09PSAnc2luZ2xlJyAmJiB0aGlzLnRvdGFsVHJhZGVDb3VudCggcC50b2tlbiApICkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBwbGFjZSBidXkgb3JkZXJcclxuICAgICAgICB0aGlzLnBsYWNlT3JkZXIoICdCVVknLCBwLnN5bWJvbCwgcC5jbG9zZSwgcXVhbnRpdHkgKTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNoZWNrIGlmIGEgdHJhZGUgbmVlZHMgdG8gYmUgc29sZCBkdWUgdG8gc3RvcCBsb3NzIG9yIHByb2ZpdFxyXG4gICAgY2hlY2tUcmFkZVNlbGwoKSB7XHJcbiAgICAgIGxldCBwcm9maXQgPSBOdW1iZXIoIHRoaXMud2F0Y2hPcHRpb25zLnByaWNlUHJvZml0ICk7XHJcbiAgICAgIGxldCBzdG9wICAgPSBNYXRoLmFicyggdGhpcy53YXRjaE9wdGlvbnMucHJpY2VTdG9wICkgKiAtMTtcclxuICAgICAgbGV0IHRvdGFsICA9IDA7XHJcblxyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnRyYWRlc0RhdGEubGVuZ3RoOyArK2kgKSB7XHJcbiAgICAgICAgbGV0IHsgYWN0aXZlLCBzdGF0dXMsIHN5bWJvbCwgdG9rZW4sIGFtb3VudCwgYnV5UHJpY2UsIHNlbGxQcmljZSB9ID0gdGhpcy50cmFkZXNEYXRhWyBpIF07XHJcbiAgICAgICAgbGV0IGNsb3NlICAgPSAoIGFjdGl2ZSAmJiBzdGF0dXMgPT09IFRSQURFX1dBSVQgKSA/IHRoaXMuZ2V0U3ltYm9sUHJpY2UoIHN5bWJvbCApIDogc2VsbFByaWNlO1xyXG4gICAgICAgIGxldCBwZXJjZW50ID0gY2xvc2UgPyB0aGlzLiR1dGlscy5wZXJjZW50KCBjbG9zZSwgYnV5UHJpY2UsIHRydWUgKSA6IDA7XHJcblxyXG4gICAgICAgIC8vIGtlZXAgbGl2ZSBwcm9maXQgdmFsdWVzIHVwZGF0ZWRcclxuICAgICAgICB0aGlzLnRyYWRlc0RhdGFbIGkgXS5zZWxsUHJpY2UgPSBjbG9zZTtcclxuICAgICAgICB0aGlzLnRyYWRlc0RhdGFbIGkgXS5wcm9maXQgPSBwZXJjZW50O1xyXG4gICAgICAgIHRvdGFsICs9IHBlcmNlbnQ7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGJvdCBzdGF0dXMgYW5kIG9wdGlvbnNcclxuICAgICAgICBpZiAoICF0aGlzLmJvdEFjdGl2ZSApIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmICggIWFjdGl2ZSB8fCAhYW1vdW50IHx8IHN0YXR1cyA9PT0gVFJBREVfU0VMTCApIGNvbnRpbnVlO1xyXG4gICAgICAgIGlmICggIXRoaXMuY2hlY2tDYW5UcmFkZVRva2VuKCB0b2tlbiwgYW1vdW50LCBjbG9zZSApICkgY29udGludWU7XHJcbiAgICAgICAgaWYgKCB0aGlzLmxpdmVNb2RlICYmICF0aGlzLmhhc1Rva2VuQmFsYW5jZSggdG9rZW4sIGFtb3VudCApICkgY29udGludWU7XHJcblxyXG4gICAgICAgIC8vIHN0b3AgbG9zcyBoaXQsIHBsYWNlIHNlbGwgb3JkZXJcclxuICAgICAgICBpZiAoIHN0b3AgPCAwICYmIHBlcmNlbnQgPD0gc3RvcCApIHtcclxuICAgICAgICAgIHRoaXMudHJhZGVzRGF0YVsgaSBdLnN0YXR1cyA9IFRSQURFX1NFTEw7XHJcbiAgICAgICAgICB0aGlzLnBsYWNlT3JkZXIoICdTRUxMJywgc3ltYm9sLCBjbG9zZSwgYW1vdW50ICk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJvZml0IGhpdCwgcGxhY2Ugc2VsbCBvcmRlclxyXG4gICAgICAgIGlmICggcGVyY2VudCA+PSBwcm9maXQgKSB7XHJcbiAgICAgICAgICB0aGlzLnRyYWRlc0RhdGFbIGkgXS5zdGF0dXMgPSBUUkFERV9TRUxMO1xyXG4gICAgICAgICAgdGhpcy5wbGFjZU9yZGVyKCAnU0VMTCcsIHN5bWJvbCwgY2xvc2UsIGFtb3VudCApO1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYm90UHJvZml0ID0gdG90YWw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG1ha2UgYSBjb3B5IG9mIGN1cnJlbnQgcHJpY2VzIHRvIHN0YXJ0IGNvbXBhcmluZyBhZ2FpbnN0XHJcbiAgICBidWlsZFNuYXBzaG90KCkge1xyXG4gICAgICB0aGlzLndhdGNoZXIuc2V0T3B0aW9ucyggdGhpcy53YXRjaE9wdGlvbnMgKTtcclxuICAgICAgdGhpcy53YXRjaGVyLnVwZGF0ZVNuYXBzaG90KCB0aGlzLnByaWNlRGF0YSApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyB3aGVuIGJvdCBmb3JtIG9wdGlvbnMgY2hhbmdlXHJcbiAgICBvbkJvdE9wdGlvbnMoIGUgKSB7XHJcbiAgICAgIGxldCBhc3NldCAgID0gU3RyaW5nKCB0aGlzLndhdGNoT3B0aW9ucy5hc3NldCApO1xyXG4gICAgICBsZXQgcGVyY2VudCA9IFN0cmluZyggdGhpcy53YXRjaE9wdGlvbnMuYXNzZXRQZXJjZW50ICk7XHJcbiAgICAgIGxldCBmYWN0b3IgID0gTnVtYmVyKCBwZXJjZW50ICkgLyAxMDA7XHJcbiAgICAgIGxldCBjb2luICAgID0gdGhpcy5iYWxhbmNlc0RhdGEuZmlsdGVyKCBiID0+ICggYi5hc3NldCA9PT0gYXNzZXQgKSApLnNoaWZ0KCk7XHJcbiAgICAgIHRoaXMud2F0Y2hPcHRpb25zLmFzc2V0QmFsYW5jZSA9IGNvaW4gPyArTnVtYmVyKCBjb2luLmZyZWUgKiBmYWN0b3IgKS50b0ZpeGVkKCA4ICkgOiAwO1xyXG4gICAgICB0aGlzLmJ1aWxkU25hcHNob3QoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc3RhcnQgbmV3IGJvdCBzZXNzaW9uXHJcbiAgICBzdGFydEJvdCgpIHtcclxuICAgICAgaWYgKCB0aGlzLmJvdEFjdGl2ZSApIHJldHVybjtcclxuICAgICAgaWYgKCB0aGlzLmxpdmVNb2RlICYmICFjb25maXJtKCAnU3RhcnRpbmcgdGhlIGJvdCBpbiBMSVZFIG1vZGUsIGFyZSB5b3Ugc3VyZT8nICkgKSB7XHJcbiAgICAgICAgdGhpcy5saXZlTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmJvdEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIHRoaXMuYm90U3RhcnQgPSBEYXRlLm5vdygpO1xyXG4gICAgICB0aGlzLmJvdEVsYXBzZWQgPSAnMHMnO1xyXG4gICAgICB0aGlzLmJvdFByb2ZpdCA9IDA7XHJcbiAgICAgIHRoaXMuZXJyb3JDb3VudCA9IDA7XHJcbiAgICAgIHRoaXMuYnVpbGRTbmFwc2hvdCgpO1xyXG4gICAgICB0aGlzLmNsZWFuVHJhZGVzTGlzdCgpO1xyXG4gICAgICB0aGlzLnNhdmVEYXRhKCB0aGlzLmtleXMub3B0aW9ucywgdGhpcy53YXRjaE9wdGlvbnMgKTtcclxuICAgICAgdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgJ1RoZSB0cmFkZSBib3QgaXMgbm93IGFjdGl2ZSEnLCAnc3VjY2VzcycgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc3RvcCBjdXJyZW50IGJvdCBzZXNzaW9uXHJcbiAgICBzdG9wQm90KCkge1xyXG4gICAgICBpZiAoICF0aGlzLmJvdEFjdGl2ZSApIHJldHVybjtcclxuICAgICAgdGhpcy5ib3RBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5idWlsZFNlc3Npb25EYXRhKCk7XHJcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdUaGUgdHJhZGUgYm90IGhhcyBzdG9wcGVkIHJ1bm5pbmcuJywgJ3N1Y2Nlc3MnICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHBsYWNlIHJlYWwgb3Igc2ltdWxhdGVkIG9yZGVyIGJhc2VkIG9uIHNvbWUgb3B0aW9uXHJcbiAgICBwbGFjZU9yZGVyKCBzaWRlLCBzeW1ib2wsIHByaWNlLCBxdWFudGl0eSApIHtcclxuICAgICAgbGV0IHR5cGUgICAgPSBTdHJpbmcoIHRoaXMud2F0Y2hPcHRpb25zLm9yZGVyVHlwZSApO1xyXG4gICAgICBsZXQgaW5mb3JjZSA9IFN0cmluZyggdGhpcy53YXRjaE9wdGlvbnMub3JkZXJUaW1lICk7XHJcblxyXG4gICAgICBpZiAoIHRoaXMubGl2ZU1vZGUgPT09IHRydWUgKSB7IHRoaXMuJGJpbmFuY2UucGxhY2VPcmRlciggc3ltYm9sLCB0eXBlLCBzaWRlLCBwcmljZSwgcXVhbnRpdHksIGluZm9yY2UgKTsgfVxyXG4gICAgICBlbHNlIHsgdGhpcy4kYmluYW5jZS5wbGFjZUZha2VPcmRlciggc3ltYm9sLCB0eXBlLCBzaWRlLCBwcmljZSwgcXVhbnRpdHkgKTsgfSAvLyBmYWtlIGl0IHRpbCB5b3UgbWFrZSBpdC5cclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2FuY2VsIGFuZC9vciByZW1vdmUgb3JkZXIgZnJvbSBsaXN0XHJcbiAgICBjYW5jZWxPcmRlciggc3ltYm9sLCBvcmRlcklkLCBxdWFudGl0eSApIHtcclxuICAgICAgdGhpcy4kYmluYW5jZS5jYW5jZWxPcmRlciggc3ltYm9sLCBvcmRlcklkLCBxdWFudGl0eSApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvbiBvcmRlciBwbGFjZWQgaW4gb3JkZXIgYm9va1xyXG4gICAgb25Cb29rQ3JlYXRlKCBvcmRlciApIHtcclxuICAgICAgbGV0IHsgc3RhdHVzLCB0b2tlbiwgYXNzZXQsIHR5cGUsIHNpZGUsIHByaWNlLCBxdWFudGl0eSB9ID0gb3JkZXI7XHJcbiAgICAgIGxldCBwcmljZVN0ciA9IHRoaXMuJHV0aWxzLmZpeGVkKCBwcmljZSwgYXNzZXQgKTtcclxuICAgICAgbGV0IHF0eVN0ciAgID0gdGhpcy4kdXRpbHMubW9uZXkoIHF1YW50aXR5LCAwICk7XHJcbiAgICAgIGxldCBtZXNzYWdlICA9IGAke3R5cGV9ICR7c2lkZX0gT3JkZXIgJHtzdGF0dXN9IGZvciAke3F0eVN0cn0gJHt0b2tlbn0gQCAke3ByaWNlU3RyfSAke2Fzc2V0fS5gO1xyXG4gICAgICB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCBtZXNzYWdlLCAnaW5mbycgKTtcclxuICAgICAgdGhpcy5lcnJvckNvdW50ID0gMDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb24gb3JkZXIgcmVtb3ZlZCBmcm9tIG9yZGVyIGJvb2tcclxuICAgIG9uQm9va0NhbmNlbCggb3JkZXIgKSB7XHJcbiAgICAgIGxldCB7IHN0YXR1cywgdG9rZW4sIHR5cGUsIHNpZGUgfSA9IG9yZGVyO1xyXG4gICAgICBsZXQgbWVzc2FnZSA9IGAke3Rva2VufSAke3R5cGV9ICR7c2lkZX0gT3JkZXIgJHtzdGF0dXN9LmA7XHJcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsIG1lc3NhZ2UsICdpbmZvJyApO1xyXG4gICAgICB0aGlzLmVycm9yQ291bnQgPSAwO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvbiBvcmRlciBwbGFjaW5nIGVycm9yc1xyXG4gICAgb25Cb29rRmFpbCggb3JkZXIsIGVycm9yICkge1xyXG4gICAgICB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCBlcnJvciwgJ2Vycm9yJyApO1xyXG4gICAgICB0aGlzLmVycm9yQ291bnQgKz0gMTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gYXR0ZW1wdCB0byBzdGFydCBhIG5ldyB1c2VyIHN0cmVhbVxyXG4gICAgaW5pdFVzZXJTdHJlYW0oKSB7XHJcbiAgICAgIHRoaXMuJGJpbmFuY2UuaW5pdFVzZXJTdHJlYW0oIGZhbHNlICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGRpc2Nvbm5lY3QgZnJvbSB1c2VyIHN0cmVhbVxyXG4gICAgc3RvcFVzZXJTdHJlYW0oKSB7XHJcbiAgICAgIHRoaXMuJGJpbmFuY2Uuc3RvcFVzZXJTdHJlYW0oKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb24gdXNlciBzdHJlYW0gY29ubmVjdFxyXG4gICAgb25Vc2VySW5pdCggZSApIHtcclxuICAgICAgdGhpcy5zb2NrZXRTdGF0dXMgPSAxO1xyXG4gICAgICB0aGlzLmJhbGFuY2VzRGF0YSA9IFtdO1xyXG4gICAgICB0aGlzLm9uQm90T3B0aW9ucygpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvbiB1c2VyIHN0cmVhbSBjb25uZWN0IGZhaWxlZFxyXG4gICAgb25Vc2VyRmFpbCggZXJyb3IgKSB7XHJcbiAgICAgIHRoaXMuc29ja2V0U3RhdHVzID0gMDtcclxuICAgICAgdGhpcy5zb2NrZXRFcnJvciA9IGVycm9yO1xyXG4gICAgICB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCBlcnJvciwgJ2Vycm9yJyApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvbiB1c2VyIHN0cmVhbSBlcnJvclxyXG4gICAgb25Vc2VyRXJyb3IoIGUgKSB7XHJcbiAgICAgIHRoaXMuc29ja2V0U3RhdHVzID0gMDtcclxuICAgICAgdGhpcy5zb2NrZXRFcnJvciA9IFN0cmluZyggZS5tZXNzYWdlIHx8ICdVc2VyIGFjY291bnQgQVBJIGNvbm5lY3Rpb24gZmFpbGVkLCBjaGVjayB0aGUgY29uc29sZSBmb3IgbW9yZSBkZXRhaWxzLicgKTtcclxuICAgICAgdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgdGhpcy5zb2NrZXRFcnJvciwgJ2Vycm9yJyApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvbiB1c2VyIHN0cmVhbSBjbG9zZVxyXG4gICAgb25Vc2VyQ2xvc2UoIGUgKSB7XHJcbiAgICAgIHRoaXMuc29ja2V0U3RhdHVzID0gMDtcclxuICAgICAgdGhpcy5iYWxhbmNlc0RhdGEgPSBbXTtcclxuICAgICAgdGhpcy5vcmRlcnNEYXRhID0gW107XHJcbiAgICAgIHRoaXMub25Cb3RPcHRpb25zKCk7XHJcbiAgICAgIHRoaXMuc3RvcEJvdCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvbiB1c2VyIHN0cmVhbSBvcGVuXHJcbiAgICBvblVzZXJPcGVuKCBlICkge1xyXG4gICAgICB0aGlzLnNvY2tldFN0YXR1cyA9IDE7XHJcbiAgICAgIHRoaXMuc29ja2V0RXJyb3IgPSAnJztcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb24gdXNlciBzdHJlYW0gcmF3IGRhdGFcclxuICAgIG9uVXNlckRhdGEoIGUgKSB7XHJcbiAgICAgIHRoaXMuc29ja2V0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgIHRoaXMuc29ja2V0U3RhdHVzID0gMjtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb24gdXNlciBhY2NvdW50IGJhbGFuY2VzIGRhdGFcclxuICAgIG9uVXNlckJhbGFuY2VzKCBiYWxhbmNlcyApIHtcclxuICAgICAgdGhpcy5iYWxhbmNlc0RhdGEgPSBiYWxhbmNlcztcclxuICAgICAgdGhpcy5vbkJvdE9wdGlvbnMoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb24gdXNlciBzdHJlYW0gb3JkZXIgZGF0YVxyXG4gICAgb25Vc2VyT3JkZXIoIG9yZGVyICkge1xyXG4gICAgICB0aGlzLmhhbmRsZUJvdE9yZGVyKCBvcmRlciApO1xyXG4gICAgICB0aGlzLnVwZGF0ZU9yZGVyc0xpc3QoIG9yZGVyICk7XHJcbiAgICAgIHRoaXMubm90aWZ5T3JkZXIoIG9yZGVyICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHRvZ2dsZSB0cmFkZSBib3Qgc3RhdGVcclxuICAgIHRvZ2dsZVRyYWRlQm90KCBhY3Rpb24gKSB7XHJcbiAgICAgIHN3aXRjaCAoIGFjdGlvbiApIHtcclxuICAgICAgICBjYXNlICdzdGFydCcgIDogIHJldHVybiB0aGlzLnN0YXJ0Qm90KCk7XHJcbiAgICAgICAgY2FzZSAnc3RvcCcgICA6ICByZXR1cm4gdGhpcy5zdG9wQm90KCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfSxcclxuXHJcbiAgLy8gb24gY29tcG9uZW50IGNyZWF0ZWRcclxuICBjcmVhdGVkKCkge1xyXG4gICAgdGhpcy4kYnVzLm9uKCAndG9nZ2xlVHJhZGVCb3QnLCB0aGlzLnRvZ2dsZVRyYWRlQm90ICk7XHJcbiAgICB0aGlzLnNldHVwVXNlckhhbmRsZXJzKCk7XHJcbiAgfSxcclxuXHJcbiAgLy8gb24gY29tcG9uZW50IG1vdW50ZWRcclxuICBtb3VudGVkKCkge1xyXG4gICAgdGhpcy5sb2FkU2F2ZWREYXRhKCk7XHJcbiAgICB0aGlzLm9uQm90T3B0aW9ucygpO1xyXG4gIH0sXHJcblxyXG4gIC8vIG9uIGNvbXBvbmVudCBkZXN0cm95ZWRcclxuICBkZXN0cm95ZWQoKSB7XHJcbiAgICB0aGlzLnN0b3BVc2VyU3RyZWFtKCk7XHJcbiAgfSxcclxuXHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cclxuLmJvdC1mb3JtIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG5cclxuICAmLnZpc2libGUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgfVxyXG59XHJcbjwvc3R5bGU+XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvVHJhZGVQYWdlLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    data: { type: Object, default: function _default() {\n        return {};\n      }\n    }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      slides: [], // content slides\n      tabs: [], // tabs data from slides\n      index: 0, // index of current selected tab\n      inline: false, // if tabs will be displayed inline (flex-row)\n      visible: false, // dropdown tabs visible state\n      width: 0 // computed width taken by all tabs inline\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // rebuild the tabs when some external data changes\n    data: function data() {\n      this.buildTabs();\n    }\n  },\n\n  // computed methods\n  computed: {\n\n    // name of active tab\n    tabName: function tabName() {\n      if (!this.tabs.length) return '';\n      return this.tabs[this.index].name;\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // reset local data\n    resetData: function resetData() {\n      this.slides = [];\n      this.tabs = [];\n    },\n\n\n    // toggle tabs dropdown\n    toggleDropdown: function toggleDropdown(e) {\n      if (this.inline) return;\n      this.visible = !this.visible;\n    },\n\n\n    // show tabs dropdown\n    showDropdown: function showDropdown(e) {\n      if (this.inline) return;\n      this.visible = true;\n    },\n\n\n    // hide tabs dropdown\n    hideDropdown: function hideDropdown(e) {\n      if (this.inline) return;\n      this.visible = false;\n    },\n\n\n    // set active tab\n    activateTab: function activateTab(index) {\n      this.index = typeof index === 'number' ? parseInt(index) : this.index;\n\n      for (var i = 0; i < this.slides.length; ++i) {\n        this.slides[i].classList.remove('active');\n      }\n      this.slides[this.index].classList.add('active');\n      this.hideDropdown();\n      this.buildTabs();\n    },\n\n\n    // calculate total tabs width inline\n    calculateWidth: function calculateWidth() {\n      var div = document.createElement('div');\n      div.style.position = 'absolute';\n      div.style.left = '-1000px';\n      div.style.padding = '0 1em 0 0';\n\n      document.body.appendChild(div);\n      this.width = 0;\n\n      for (var i = 0; i < this.tabs.length; ++i) {\n        div.innerHTML = this.tabs[i].name;\n        this.width += div.clientWidth || 0;\n      }\n      document.body.removeChild(div);\n    },\n\n\n    // resolse tabs display type (inline, dropdown)\n    resolveTabs: function resolveTabs() {\n      var boxWidth = this.$refs.container.offsetWidth || 0;\n      this.inline = window.innerWidth > 720 && this.width < boxWidth;\n    },\n\n\n    // build tabs from slides\n    buildSlides: function buildSlides() {\n      var slots = this.$slots.default.filter(function (e) {\n        return e.elm instanceof Element;\n      });\n      var index = 0;\n      var slides = [];\n\n      for (var i = 0; i < slots.length; ++i) {\n        var slide = slots[i].elm;\n        if (slide.hasAttribute('active')) this.index = i;\n        slide.setAttribute('class', 'tabs-slide fx fx-fade-in');\n        slides.push(slide);\n      }\n      this.slides = slides;\n    },\n\n\n    // create list of tabs from loaded slides (sections)\n    buildTabs: function buildTabs() {\n      var tabs = [];\n\n      for (var i = 0; i < this.slides.length; ++i) {\n        var slide = this.slides[i];\n        var styles = slide.getAttribute('btn-class') || '';\n        var name = slide.getAttribute('btn-name') || 'Tab ' + (i + 1);\n        var active = i === this.index ? true : false;\n        tabs.push({ styles: styles, name: name, active: active });\n      }\n      this.tabs = tabs;\n    }\n  },\n\n  // on mounted\n  mounted: function mounted() {\n    this.buildSlides();\n    this.activateTab();\n    this.calculateWidth();\n    this.resolveTabs();\n    window.addEventListener('resize', this.resolveTabs);\n  },\n\n\n  // on destroyed\n  destroyed: function destroyed() {\n    this.resetData();\n    window.removeEventListener('resize', this.resolveTabs);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Tabs_vue__ = __webpack_require__(8);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Spinner: __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__[\"a\" /* default */], Tabs: __WEBPACK_IMPORTED_MODULE_1__Tabs_vue__[\"a\" /* default */] },\n\n  // component data\n  data: function data() {\n    return {\n      addrlist: []\n    };\n  },\n\n\n  // component methods\n  methods: {\n\n    // lick to binance site with ref id added\n    goBinance: function goBinance(e) {\n      e.preventDefault();\n      this.$bus.emit('handleClick', 'binance', '/', '_blank');\n    },\n\n\n    // copy crypto address to clipboard\n    copyAddress: function copyAddress(token, address) {\n      var copied = this.$utils.copyText(address);\n      if (!copied) return this.$bus.emit('showNotice', 'Oops, looks like this web browser doesn\\'t support that.', 'warning');\n      this.$bus.emit('showNotice', token + ' address copied successfully.', 'success');\n    },\n\n\n    // fetch crypto addresses from json file\n    fetchJson: function fetchJson() {\n      var _this = this;\n\n      this.addrlist = [];\n      this.$refs.jsonSpinner.show('Fetching addresses');\n      this.$ajax.get('public/json/donate.json', {\n        type: 'json',\n        proxy: false,\n        done: function done(xhr, status, response) {\n          // check data\n          if (!response || !Array.isArray(response.addresses)) {\n            return _this.$refs.jsonSpinner.error('Error fetching donation addresses');\n          }\n          _this.$refs.jsonSpinner.hide();\n          _this.addrlist = response.addresses;\n        }\n      });\n    }\n  },\n\n  // component mounted\n  mounted: function mounted() {\n    setTimeout(this.fetchJson, 100);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Tabs_vue__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Toggle_vue__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SelectMenu_vue__ = __webpack_require__(9);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// sub components\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Tabs: __WEBPACK_IMPORTED_MODULE_0__Tabs_vue__[\"a\" /* default */], Toggle: __WEBPACK_IMPORTED_MODULE_1__Toggle_vue__[\"a\" /* default */], SelectMenu: __WEBPACK_IMPORTED_MODULE_2__SelectMenu_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    options: { type: Object, required: true }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      corsProxy: '',\n      canNotify: false,\n      urlSuccess: true,\n      testing: false,\n      // notification choices\n      audioFiles: [{ text: 'Audio 1', value: 'public/audio/audio_1.mp3' }, { text: 'Audio 2', value: 'public/audio/audio_2.mp3' }, { text: 'Audio 3', value: 'public/audio/audio_3.mp3' }, { text: 'Audio 4', value: 'public/audio/audio_4.mp3' }, { text: 'Audio 5', value: 'public/audio/audio_5.mp3' }]\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // list of saved proxies\n    proxyList: function proxyList() {\n      var _this = this;\n\n      return this.options.proxylist.map(function (url) {\n        var selected = url === _this.options.proxy ? true : false;\n        return { url: url, selected: selected };\n      });\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // lick to binance site with ref id added\n    goBinance: function goBinance(e) {\n      e.preventDefault();\n      this.$bus.emit('handleClick', 'binance', '/', '_blank');\n    },\n\n\n    // play selected notification sound\n    playSound: function playSound() {\n      var _options$audio = this.options.audio,\n          file = _options$audio.file,\n          volume = _options$audio.volume;\n\n      this.$utils.playAudio(file, volume);\n    },\n\n\n    // apply options\n    saveOptions: function saveOptions(audio) {\n      var options = Object.assign({}, this.options, { proxy: this.corsProxy });\n      if (audio === true) this.playSound();\n      this.$opts.saveOptions(options);\n    },\n\n\n    // add proxy to options list\n    addProxy: function addProxy(url) {\n      if (!url) return;\n      this.options.proxylist = this.options.proxylist.filter(function (p) {\n        return p !== url;\n      });\n      this.options.proxylist.push(url);\n      this.$bus.emit('showNotice', 'Proxy URL added to list.', 'success');\n      this.saveOptions();\n    },\n\n\n    // remove proxy from options list\n    removeProxy: function removeProxy(url) {\n      if (!url) return;\n      this.options.proxylist = this.options.proxylist.filter(function (p) {\n        return p !== url;\n      });\n      this.$bus.emit('showNotice', 'Proxy URL removed from list.', 'success');\n      this.saveOptions();\n    },\n\n\n    // set active proxy from list\n    setProxy: function setProxy(url) {\n      this.corsProxy = url;\n      this.options.proxy = url;\n      this.saveOptions();\n    },\n\n\n    // test cors proxy url\n    testProxy: function testProxy(url) {\n      var _this2 = this;\n\n      this.testing = true;\n\n      this.$ajax.get(url, {\n        type: 'text',\n        proxy: false, // don't proxy the proxy\n\n        error: function error(xhr, status, _error) {\n          _this2.testing = false;\n          _this2.urlSuccess = false;\n          _this2.$bus.emit('showNotice', _error, 'warning');\n        },\n\n        success: function success(xhr, status, response) {\n          var pass = status && status > 199 && status < 400;\n          var clss = pass ? 'success' : 'warning';\n\n          _this2.testing = false;\n          _this2.urlSuccess = pass;\n          _this2.$bus.emit('showNotice', 'Proxy URL responded with status code (' + status + ').', clss);\n        }\n      });\n    },\n\n\n    // cors proxy form submit handler\n    corsFormSubmit: function corsFormSubmit(e) {\n      e.preventDefault();\n      var url = e.target.proxyurl.value || '';\n      this.testProxy(url);\n    },\n\n\n    // ask user for notification permission\n    askNotifyPermission: function askNotifyPermission(e) {\n      var _this3 = this;\n\n      e.preventDefault();\n      this.canNotify = false;\n      this.$notify.permission(function (status) {\n        _this3.canNotify = status === 'granted' ? true : false;\n      });\n    }\n  },\n\n  // on component mounted\n  mounted: function mounted() {\n    this.corsProxy = this.options.proxy;\n    this.canNotify = this.$notify.canNotify();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__TokenIcon_vue__ = __webpack_require__(6);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { TokenIcon: __WEBPACK_IMPORTED_MODULE_0__TokenIcon_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    historyData: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    modalData: { type: Object, default: function _default() {\n        return {};\n      }\n    }\n  },\n\n  // custom methods\n  methods: {\n\n    // delete item from history\n    deleteHistory: function deleteHistory(id) {\n      this.$history.remove(id);\n    },\n\n\n    // flush history list\n    flushHistory: function flushHistory() {\n      this.$history.flush();\n    },\n\n\n    // format info string\n    formatInfo: function formatInfo(info) {\n      return String(info || '').replace(/[\\r\\n]+/g, ', ') + '.';\n    }\n  },\n\n  // on component destroyed\n  destroyed: function destroyed() {\n    this.$history.reset();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvSGlzdG9yeVBhZ2UudnVlPzA4NmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEZBSEE7O0FBS0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBLHNCQURBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFGQSxHQU5BOztBQVdBO0FBQ0E7O0FBRUE7QUFDQSxpQkFIQSx5QkFHQSxFQUhBLEVBR0E7QUFDQTtBQUNBLEtBTEE7OztBQU9BO0FBQ0EsZ0JBUkEsMEJBUUE7QUFDQTtBQUNBLEtBVkE7OztBQVlBO0FBQ0EsY0FiQSxzQkFhQSxJQWJBLEVBYUE7QUFDQTtBQUNBO0FBZkEsR0FaQTs7QUE4QkE7QUFDQSxXQS9CQSx1QkErQkE7QUFDQTtBQUNBO0FBakNBIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8c2VjdGlvbiBjbGFzcz1cImhpc3RvcnktcGFnZVwiPlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXgtcm93IGZsZXgtbWlkZGxlIGZsZXgtc3RyZXRjaCBwdXNoLWJvdHRvbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSB0ZXh0LWNsaXAgcHVzaC1yaWdodFwiPlJlY2VudCBwcmljZSBhbGVydCBhY3Rpdml0eSBoaXN0b3J5ICh7eyBoaXN0b3J5RGF0YS5sZW5ndGggfX0pPC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiZm9ybS1idG4gYmctaW5mby1ob3ZlciBpY29uLWNsb3NlIGljb25MZWZ0XCIgOmNsYXNzPVwieyAnZGlzYWJsZWQnOiAhaGlzdG9yeURhdGEubGVuZ3RoIH1cIiBAY2xpY2s9XCJmbHVzaEhpc3RvcnlcIj5GbHVzaDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXgtbGlzdFwiPlxuICAgICAgPGRpdiB2LWlmPVwiIWhpc3RvcnlEYXRhLmxlbmd0aFwiIGNsYXNzPVwiZmxleC1pdGVtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgdGV4dC1pbmZvIHRleHQtZmFkZWRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24taW5mbyBpY29uTGVmdFwiPlRoZXJlJ3Mgbm90aGluZyBoZXJlIHJpZ2h0IG5vdy48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHYtZm9yPVwiZSBpbiBoaXN0b3J5RGF0YVwiIDprZXk9XCJlLmlkXCIgY2xhc3M9XCJmbGV4LWl0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtcmlnaHRcIiA6Y2xhc3M9XCJ7ICdhbGVydC1idWJibGUnOiBlLmlzTmV3IH1cIj5cbiAgICAgICAgICA8VG9rZW5JY29uIDppbWFnZT1cImUuaWNvblwiPjwvVG9rZW5JY29uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZGVmYXVsdFwiPnt7IGUudGl0bGUgfX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1pbmZvXCI+e3sgZm9ybWF0SW5mbyggZS5pbmZvICkgfX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNsaXAgdGV4dC1yaWdodFwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJpY29uLWNsb3NlXCIgdGl0bGU9XCJEZWxldGVcIiBAY2xpY2s9XCJkZWxldGVIaXN0b3J5KCBlLmlkIClcIiB2LXRvb2x0aXA+PC9idXR0b24+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZGVmYXVsdFwiPnt7IGUudGltZSB8IHRvRWxhcHNlZCB9fSBhZ288L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICA8L3NlY3Rpb24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFRva2VuSWNvbiBmcm9tICcuL1Rva2VuSWNvbi52dWUnO1xuXG4vLyBjb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb21wb25lbnQgbGlzdFxuICBjb21wb25lbnRzOiB7IFRva2VuSWNvbiB9LFxuXG4gIC8vIGNvbXBvbmVudCBwcm9wc1xuICBwcm9wczoge1xuICAgIGhpc3RvcnlEYXRhOiB7IHR5cGU6IEFycmF5LCBkZWZhdWx0KCkgeyByZXR1cm4gW10gfSwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBtb2RhbERhdGE6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0KCkgeyByZXR1cm4ge30gfSB9LFxuICB9LFxuXG4gIC8vIGN1c3RvbSBtZXRob2RzXG4gIG1ldGhvZHM6IHtcblxuICAgIC8vIGRlbGV0ZSBpdGVtIGZyb20gaGlzdG9yeVxuICAgIGRlbGV0ZUhpc3RvcnkoIGlkICkge1xuICAgICAgdGhpcy4kaGlzdG9yeS5yZW1vdmUoIGlkICk7XG4gICAgfSxcblxuICAgIC8vIGZsdXNoIGhpc3RvcnkgbGlzdFxuICAgIGZsdXNoSGlzdG9yeSgpIHtcbiAgICAgIHRoaXMuJGhpc3RvcnkuZmx1c2goKTtcbiAgICB9LFxuXG4gICAgLy8gZm9ybWF0IGluZm8gc3RyaW5nXG4gICAgZm9ybWF0SW5mbyggaW5mbyApIHtcbiAgICAgIHJldHVybiBTdHJpbmcoIGluZm8gfHwgJycgKS5yZXBsYWNlKCAvW1xcclxcbl0rL2csICcsICcgKSArICcuJztcbiAgICB9XG4gIH0sXG5cbiAgLy8gb24gY29tcG9uZW50IGRlc3Ryb3llZFxuICBkZXN0cm95ZWQoKSB7XG4gICAgdGhpcy4kaGlzdG9yeS5yZXNldCgpO1xuICB9XG59XG48L3NjcmlwdD5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL0hpc3RvcnlQYWdlLnZ1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AlarmsList_vue__ = __webpack_require__(34);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_25937a2e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AlarmsList_vue__ = __webpack_require__(102);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AlarmsList_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_25937a2e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AlarmsList_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BbGFybXNMaXN0LnZ1ZT80N2U2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FsYXJtc0xpc3QudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9BbGFybXNMaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjU5MzdhMmVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BbGFybXNMaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL0FsYXJtc0xpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSAzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    alarmsData: { type: Array, default: function _default() {\n        return [];\n      },\n      required: true },\n    pairData: { type: Object, default: function _default() {\n        return {};\n      }\n    }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      curPrice: ''\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // filter alarms for this token\n    alarmsList: function alarmsList() {\n      var list = this.alarmsData.slice();\n      var symbol = this.pairData.symbol || '';\n\n      // sort all alarms by symbol\n      list = this.$utils.sort(list, 'symbol', 'asc');\n\n      // sort alarms for a specific symbol by status\n      if (symbol) {\n        list = list.filter(function (a) {\n          return a.symbol === symbol;\n        });\n        list = this.$utils.sort(list, 'active', 'desc');\n      }\n      // update count outside\n      this.$emit('listCount', list.length);\n      return list;\n    }\n  },\n\n  // component methods\n  methods: {\n\n    // save a new alert for this token\n    saveAlarm: function saveAlarm(e) {\n      var _pairData = this.pairData,\n          symbol = _pairData.symbol,\n          asset = _pairData.asset,\n          close = _pairData.close;\n\n      var price = parseFloat(e.target.price.value) || 0;\n      var saved = this.$alarms.add(this.pairData, price);\n      if (!saved) return this.$bus.emit('showNotice', 'Please enter a different ' + asset + ' alarm price.', 'warning');\n      this.$bus.emit('showNotice', 'New alarm for ' + symbol + ' set for ' + price.toFixed(8) + ' ' + asset + '.', 'success');\n    },\n\n\n    // toggle existing alarm for as symbol by id\n    toggleAlarm: function toggleAlarm(id, symbol, toggle) {\n      var action = toggle ? 'enabled' : 'disabled';\n      this.$alarms.toggle(id, toggle);\n      this.$bus.emit('showNotice', 'Alarm for ' + symbol + ' has been ' + action + '.', 'success');\n    },\n\n\n    // remove an alert from the list by id\n    deleteAlarm: function deleteAlarm(id, symbol) {\n      this.$alarms.remove(id);\n      this.$bus.emit('showNotice', 'Alarm for ' + symbol + ' has been removed.', 'success');\n    },\n\n\n    // flush all alarms from the list\n    flushAlarms: function flushAlarms() {\n      if (!confirm('Delete all alarms from the list?')) return;\n      this.$alarms.flush();\n      this.$bus.emit('showNotice', 'All alarms have been deleted.', 'success');\n    }\n  },\n\n  // component mounted\n  mounted: function mounted() {\n    if (this.pairData.symbol) {\n      this.curPrice = Number(this.pairData.close).toFixed(8);\n    }\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvQWxhcm1zTGlzdC52dWU/Y2ZmMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJEQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQSxzQkFEQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBRkEsR0FIQTs7QUFRQTtBQUNBLE1BVEEsa0JBU0E7QUFDQTtBQUNBO0FBREE7QUFHQSxHQWJBOzs7QUFlQTtBQUNBOztBQUVBO0FBQ0EsY0FIQSx3QkFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbEJBLEdBaEJBOztBQXFDQTtBQUNBOztBQUVBO0FBQ0EsYUFIQSxxQkFHQSxDQUhBLEVBR0E7QUFBQSxzQkFDQSxhQURBO0FBQUEsVUFDQSxNQURBLGFBQ0EsTUFEQTtBQUFBLFVBQ0EsS0FEQSxhQUNBLEtBREE7QUFBQSxVQUNBLEtBREEsYUFDQSxLQURBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FUQTs7O0FBV0E7QUFDQSxlQVpBLHVCQVlBLEVBWkEsRUFZQSxNQVpBLEVBWUEsTUFaQSxFQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FoQkE7OztBQWtCQTtBQUNBLGVBbkJBLHVCQW1CQSxFQW5CQSxFQW1CQSxNQW5CQSxFQW1CQTtBQUNBO0FBQ0E7QUFDQSxLQXRCQTs7O0FBd0JBO0FBQ0EsZUF6QkEseUJBeUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE3QkEsR0F0Q0E7O0FBc0VBO0FBQ0EsU0F2RUEscUJBdUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzRUEiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxzZWN0aW9uPlxuXG4gICAgPGZvcm0gdi1pZj1cInBhaXJEYXRhLnN5bWJvbFwiIGNsYXNzPVwiZmxleC1yb3cgZmxleC1taWRkbGUgZmxleC1zdHJldGNoIHB1c2gtYm90dG9tXCIgYWN0aW9uPVwiI1wiIEBzdWJtaXQucHJldmVudD1cInNhdmVBbGFybVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0taW5wdXQgZmxleC0xIHB1c2gtcmlnaHRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImljb24tY2hhcnQtbGluZSBwdXNoLXJpZ2h0XCI+PC9kaXY+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cInB1c2gtcmlnaHRcIiBwbGFjZWhvbGRlcj1cIjAuMDAwMDAwMDBcIiBuYW1lPVwicHJpY2VcIiB2LW1vZGVsPVwiY3VyUHJpY2VcIiAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmV5XCI+e3sgcGFpckRhdGEuYXNzZXQgfX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJmb3JtLWJ0biBiZy1pbmZvLWhvdmVyIGljb24tYWRkIGljb25MZWZ0XCI+Q3JlYXRlPC9idXR0b24+XG4gICAgPC9mb3JtPlxuXG4gICAgPGRpdiBjbGFzcz1cImZsZXgtbGlzdFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZsZXgtaGVhZGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwdXNoLXJpZ2h0XCI+PHNwYW4gY2xhc3M9XCJpY29uLWFsYXJtIHRleHQtZmFkZWRcIj48L3NwYW4+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiPlN5bWJvbDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIj5BbGFybTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIj5TdGF0dXM8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCI+Q3JlYXRlZDwvZGl2PlxuICAgICAgICA8ZGl2PjxidXR0b24gY2xhc3M9XCJpY29uLWNsb3NlIHRleHQtZGFuZ2VyLWhvdmVyXCIgdGl0bGU9XCJEZWxldGUgQWxsXCIgQGNsaWNrPVwiZmx1c2hBbGFybXNcIiB2LXRvb2x0aXA+PC9idXR0b24+PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWlmPVwiIWFsYXJtc0xpc3QubGVuZ3RoXCIgY2xhc3M9XCJmbGV4LWl0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSB0ZXh0LWluZm8gdGV4dC1mYWRlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi1pbmZvXCI+Jm5ic3A7PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHYtaWY9XCJwYWlyRGF0YS5zeW1ib2xcIj5UaGVyZSBhcmUgbm8gYWxhcm1zIGZvciB7eyBwYWlyRGF0YS5zeW1ib2wgfX0uPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHYtZWxzZT5UaGVyZSBhcmUgbm8gYWxhcm1zLjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWZvcj1cImEgaW4gYWxhcm1zTGlzdFwiIDprZXk9XCJhLmlkXCIgY2xhc3M9XCJmbGV4LWl0ZW1cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInB1c2gtcmlnaHRcIj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiaWNvbi1hbGFybVwiIDpjbGFzcz1cInsgJ3RleHQtZ2Fpbic6IGEuYWN0aXZlLCAndGV4dC1pbmZvJzogIWEuYWN0aXZlIH1cIiB0aXRsZT1cIlRvZ2dsZVwiIEBjbGljaz1cInRvZ2dsZUFsYXJtKCBhLmlkLCBhLnN5bWJvbCwgIWEuYWN0aXZlIClcIiB2LXRvb2x0aXA+PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwidGV4dC1icmlnaHQtaG92ZXJcIiBAY2xpY2s9XCIkYnVzLmVtaXQoICdzZXRSb3V0ZScsICcvc3ltYm9sLycrIGEuc3ltYm9sIClcIj57eyBhLnBhaXIgfX08L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1iaWdcIiA6Y2xhc3M9XCJbICd0ZXh0LScrIGEuY2hlY2sgXVwiPnt7IGEuc2lnbiB9fTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtYnJpZ2h0XCI+e3sgYS5wcmljZSB8IHRvRml4ZWQoIGEuYXNzZXQgKSB9fTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtaW5mb1wiPnt7IGEuYXNzZXQgfX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIHB1c2gtcmlnaHRcIj5cbiAgICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7ICd0ZXh0LXN1Y2Nlc3MnOiBhLmFjdGl2ZSwgJ3RleHQtaW5mbyc6ICFhLmFjdGl2ZSB9XCI+e3sgYS5hY3RpdmUgPyAnQWN0aXZlJyA6ICdUcmlnZ2VyZWQnIH19PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMSBwdXNoLXJpZ2h0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LWdyZXlcIj57eyBhLnRpbWUgfCB0b0RhdGUgfX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJpY29uLWNsb3NlXCIgdGl0bGU9XCJEZWxldGVcIiBAY2xpY2s9XCJkZWxldGVBbGFybSggYS5pZCwgYS5zeW1ib2wgKVwiIHYtdG9vbHRpcD48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgIDwvZGl2PlxuXG4gIDwvc2VjdGlvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4vLyBjb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IHtcblxuICAvLyBjb21wb25lbnQgcHJvcHNcbiAgcHJvcHM6IHtcbiAgICBhbGFybXNEYXRhOiB7IHR5cGU6IEFycmF5LCBkZWZhdWx0KCkgeyByZXR1cm4gW10gfSwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBwYWlyRGF0YTogeyB0eXBlOiBPYmplY3QsIGRlZmF1bHQoKSB7IHJldHVybiB7fSB9IH0sXG4gIH0sXG5cbiAgLy8gY29tb25lbnQgZGF0YVxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjdXJQcmljZTogJycsXG4gICAgfVxuICB9LFxuXG4gIC8vIGNvbXB1dGVkIG1ldGhvZHNcbiAgY29tcHV0ZWQ6IHtcblxuICAgIC8vIGZpbHRlciBhbGFybXMgZm9yIHRoaXMgdG9rZW5cbiAgICBhbGFybXNMaXN0KCkge1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLmFsYXJtc0RhdGEuc2xpY2UoKTtcbiAgICAgIGxldCBzeW1ib2wgPSB0aGlzLnBhaXJEYXRhLnN5bWJvbCB8fCAnJztcblxuICAgICAgLy8gc29ydCBhbGwgYWxhcm1zIGJ5IHN5bWJvbFxuICAgICAgbGlzdCA9IHRoaXMuJHV0aWxzLnNvcnQoIGxpc3QsICdzeW1ib2wnLCAnYXNjJyApO1xuXG4gICAgICAvLyBzb3J0IGFsYXJtcyBmb3IgYSBzcGVjaWZpYyBzeW1ib2wgYnkgc3RhdHVzXG4gICAgICBpZiAoIHN5bWJvbCApIHtcbiAgICAgICAgbGlzdCA9IGxpc3QuZmlsdGVyKCBhID0+IGEuc3ltYm9sID09PSBzeW1ib2wgKTtcbiAgICAgICAgbGlzdCA9IHRoaXMuJHV0aWxzLnNvcnQoIGxpc3QsICdhY3RpdmUnLCAnZGVzYycgKTtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZSBjb3VudCBvdXRzaWRlXG4gICAgICB0aGlzLiRlbWl0KCAnbGlzdENvdW50JywgbGlzdC5sZW5ndGggKTtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH0sXG4gIH0sXG5cbiAgLy8gY29tcG9uZW50IG1ldGhvZHNcbiAgbWV0aG9kczoge1xuXG4gICAgLy8gc2F2ZSBhIG5ldyBhbGVydCBmb3IgdGhpcyB0b2tlblxuICAgIHNhdmVBbGFybSggZSApIHtcbiAgICAgIGxldCB7IHN5bWJvbCwgYXNzZXQsIGNsb3NlIH0gPSB0aGlzLnBhaXJEYXRhO1xuICAgICAgbGV0IHByaWNlID0gcGFyc2VGbG9hdCggZS50YXJnZXQucHJpY2UudmFsdWUgKSB8fCAwO1xuICAgICAgbGV0IHNhdmVkID0gdGhpcy4kYWxhcm1zLmFkZCggdGhpcy5wYWlyRGF0YSwgcHJpY2UgKTtcbiAgICAgIGlmICggIXNhdmVkICkgcmV0dXJuIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdQbGVhc2UgZW50ZXIgYSBkaWZmZXJlbnQgJysgYXNzZXQgKycgYWxhcm0gcHJpY2UuJywgJ3dhcm5pbmcnICk7XG4gICAgICB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCAnTmV3IGFsYXJtIGZvciAnKyBzeW1ib2wgKycgc2V0IGZvciAnKyBwcmljZS50b0ZpeGVkKCA4ICkgKycgJysgYXNzZXQgKycuJywgJ3N1Y2Nlc3MnICk7XG4gICAgfSxcblxuICAgIC8vIHRvZ2dsZSBleGlzdGluZyBhbGFybSBmb3IgYXMgc3ltYm9sIGJ5IGlkXG4gICAgdG9nZ2xlQWxhcm0oIGlkLCBzeW1ib2wsIHRvZ2dsZSApIHtcbiAgICAgIGxldCBhY3Rpb24gPSB0b2dnbGUgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnO1xuICAgICAgdGhpcy4kYWxhcm1zLnRvZ2dsZSggaWQsIHRvZ2dsZSApO1xuICAgICAgdGhpcy4kYnVzLmVtaXQoICdzaG93Tm90aWNlJywgJ0FsYXJtIGZvciAnKyBzeW1ib2wgKycgaGFzIGJlZW4gJysgYWN0aW9uICsnLicsICdzdWNjZXNzJyApO1xuICAgIH0sXG5cbiAgICAvLyByZW1vdmUgYW4gYWxlcnQgZnJvbSB0aGUgbGlzdCBieSBpZFxuICAgIGRlbGV0ZUFsYXJtKCBpZCwgc3ltYm9sICkge1xuICAgICAgdGhpcy4kYWxhcm1zLnJlbW92ZSggaWQgKTtcbiAgICAgIHRoaXMuJGJ1cy5lbWl0KCAnc2hvd05vdGljZScsICdBbGFybSBmb3IgJysgc3ltYm9sICsnIGhhcyBiZWVuIHJlbW92ZWQuJywgJ3N1Y2Nlc3MnICk7XG4gICAgfSxcblxuICAgIC8vIGZsdXNoIGFsbCBhbGFybXMgZnJvbSB0aGUgbGlzdFxuICAgIGZsdXNoQWxhcm1zKCkge1xuICAgICAgaWYgKCAhY29uZmlybSggJ0RlbGV0ZSBhbGwgYWxhcm1zIGZyb20gdGhlIGxpc3Q/JyApICkgcmV0dXJuO1xuICAgICAgdGhpcy4kYWxhcm1zLmZsdXNoKCk7XG4gICAgICB0aGlzLiRidXMuZW1pdCggJ3Nob3dOb3RpY2UnLCAnQWxsIGFsYXJtcyBoYXZlIGJlZW4gZGVsZXRlZC4nLCAnc3VjY2VzcycgKTtcbiAgICB9LFxuICB9LFxuXG4gIC8vIGNvbXBvbmVudCBtb3VudGVkXG4gIG1vdW50ZWQoKSB7XG4gICAgaWYgKCB0aGlzLnBhaXJEYXRhLnN5bWJvbCApIHtcbiAgICAgIHRoaXMuY3VyUHJpY2UgPSBOdW1iZXIoIHRoaXMucGFpckRhdGEuY2xvc2UgKS50b0ZpeGVkKCA4ICk7XG4gICAgfVxuICB9LFxuXG59XG48L3NjcmlwdD5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL0FsYXJtc0xpc3QudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Tabs_vue__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__TokenIcon_vue__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LineChart_vue__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AlarmsList_vue__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__NewsList_vue__ = __webpack_require__(104);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component list\n  components: { Spinner: __WEBPACK_IMPORTED_MODULE_0__Spinner_vue__[\"a\" /* default */], Tabs: __WEBPACK_IMPORTED_MODULE_1__Tabs_vue__[\"a\" /* default */], TokenIcon: __WEBPACK_IMPORTED_MODULE_2__TokenIcon_vue__[\"a\" /* default */], LineChart: __WEBPACK_IMPORTED_MODULE_3__LineChart_vue__[\"a\" /* default */], AlarmsList: __WEBPACK_IMPORTED_MODULE_4__AlarmsList_vue__[\"a\" /* default */], NewsList: __WEBPACK_IMPORTED_MODULE_5__NewsList_vue__[\"a\" /* default */] },\n\n  // component props\n  props: {\n    modalData: { type: Object, default: function _default() {\n        return {};\n      },\n      required: true }, // pair data\n    alarmsData: { type: Array, default: function _default() {\n        return [];\n      }\n    },\n    newsEntries: { type: Array, default: function _default() {\n        return [];\n      }\n    }\n  },\n\n  // comonent data\n  data: function data() {\n    return {\n      coinRank: 0,\n      marketCap: 0,\n      totalSupply: 0,\n      totalVolume: 0,\n      curPrice: this.modalData.close,\n      usdPrice: 0,\n      alarmsCount: 0,\n      newsCount: 0,\n      // line chart\n      chartWidth: 800,\n      chartHeight: 120,\n      chartData: []\n    };\n  },\n\n\n  // watch methods\n  watch: {\n\n    // update title as token data changes\n    modalData: function modalData() {\n      var p = this.modalData;\n      this.$bus.emit('setTitle', p.pair + ' ' + p.arrow + ' ' + p.sign + p.percent);\n    }\n  },\n\n  // component methods\n  methods: {\n\n    // lick to binance site with ref id added\n    tradeLink: function tradeLink() {\n      var _modalData = this.modalData,\n          token = _modalData.token,\n          asset = _modalData.asset;\n\n      this.$bus.emit('handleClick', 'binance', '/en/trade/' + token + '_' + asset + '/', '_blank');\n    },\n\n\n    // update alarms count for this token\n    onAlarmsCount: function onAlarmsCount(count) {\n      this.alarmsCount = count;\n    },\n\n\n    // update events count for this token\n    onNewsCount: function onNewsCount(count) {\n      this.newsCount = count;\n    },\n\n\n    // spinner helper\n    spinner: function spinner(name, method, message) {\n      if (!this.$refs[name] || !method) return;\n      this.$refs[name][method](message);\n    },\n\n\n    // fetch token data from api\n    fetchGlobalData: function fetchGlobalData() {\n      var _this = this;\n\n      var token = this.modalData.token;\n      token = token === 'BCC' ? 'BCH' : token;\n      token = token === 'IOTA' ? 'IOT' : token;\n      token = token === 'YOYO' ? 'YOYOW' : token;\n\n      this.$ajax.get('https://coincap.io/page/' + token, {\n        type: 'json',\n        cache: 600,\n        proxy: false,\n\n        success: function success(xhr, status, response) {\n          if (!response || !response.id) return;\n          if (response.rank) _this.coinRank = response.rank;\n          if (response.market_cap) _this.marketCap = response.market_cap;\n          if (response.supply) _this.totalSupply = response.supply;\n          if (response.volume) _this.totalVolume = response.volume;\n          if (response.price_usd) _this.usdPrice = response.price_usd;\n        },\n        error: function error(xhr, status, _error) {\n          _this.$bus.emit('showNotice', _error, 'warning');\n        }\n      });\n    },\n\n\n    // fetch last 24h candle data\n    fetchChartData: function fetchChartData() {\n      var _this2 = this;\n\n      var symbol = this.modalData.symbol;\n      var endpoint = 'https://api.binance.com/api/v1/klines?symbol=' + symbol + '&interval=1h&limit=168';\n      this.spinner('chartSpinner', 'show', 'loading chart data');\n\n      this.$ajax.get(endpoint, {\n        type: 'json',\n        cache: 600,\n\n        success: function success(xhr, status, response) {\n          _this2.spinner('chartSpinner', 'hide');\n          _this2.chartData = [];\n          for (var i = 0; i < response.length; ++i) {\n            _this2.chartData.push(parseFloat(response[i][4])); // close price\n          }\n        },\n        error: function error(xhr, status, _error2) {\n          _this2.spinner('chartSpinner', 'error', 'No chart for ' + symbol);\n          _this2.$bus.emit('showNotice', _error2, 'warning');\n        }\n      });\n    }\n  },\n\n  // component mounted\n  mounted: function mounted() {\n    this.fetchGlobalData();\n    this.fetchChartData();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// component\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // component props\n  props: {\n    pairData: { type: Object, default: function _default() {\n        return {};\n      }\n    },\n    newsEntries: { type: Array, default: function _default() {\n        return [];\n      }\n    }\n  },\n\n  // component data\n  data: function data() {\n    return {\n      sentimentData: null\n    };\n  },\n\n\n  // computed methods\n  computed: {\n\n    // get filtered list and emit list length\n    newsList: function newsList() {\n      return this.getNewsList();\n    }\n  },\n\n  // component methods\n  methods: {\n\n    // get news list for a token, or all items\n    getNewsList: function getNewsList() {\n      var pair = this.pairData;\n      var list = this.newsEntries;\n\n      if (pair.token) {\n        var search = pair.token + '|' + pair.name;\n        list = this.$utils.search(list, 'text', search, true);\n      }\n      this.$emit('listCount', list.length);\n      return list;\n    },\n\n\n    // analize news data for token\n    analizeNewsList: function analizeNewsList() {\n      var data = null;\n      var list = this.getNewsList();\n\n      if (list.length && this.pairData.token) {\n        var text = list.reduce(function (a, t) {\n          return a += ' ' + t.text;\n        }, '').trim();\n        data = this.$sentiment.analyze(text);\n      }\n      this.sentimentData = data;\n    }\n  },\n\n  // on mounted\n  mounted: function mounted() {\n    this.analizeNewsList();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlPzYyMWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUEsS0FEQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBRkEsR0FIQTs7QUFRQTtBQUNBLE1BVEEsa0JBU0E7QUFDQTtBQUNBO0FBREE7QUFHQSxHQWJBOzs7QUFlQTtBQUNBOztBQUVBO0FBQ0EsWUFIQSxzQkFHQTtBQUNBO0FBQ0E7QUFMQSxHQWhCQTs7QUF3QkE7QUFDQTs7QUFFQTtBQUNBLGVBSEEseUJBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBYkE7OztBQWVBO0FBQ0EsbUJBaEJBLDZCQWdCQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXpCQSxHQXpCQTs7QUFxREE7QUFDQSxTQXREQSxxQkFzREE7QUFDQTtBQUNBO0FBeERBIiwiZmlsZSI6IjM2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8c2VjdGlvbj5cblxuICAgIDxkaXYgY2xhc3M9XCJmbGV4LWxpc3RcIj5cblxuICAgICAgPGRpdiB2LWlmPVwic2VudGltZW50RGF0YVwiIGNsYXNzPVwiZmxleC1oZWFkZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgtMVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi1jaGFydC1saW5lXCI+Jm5ic3A7PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvIHRleHQtY2xpcFwiPlNlbnRpbWVudCBmb3Ige3sgcGFpckRhdGEubmFtZSB9fSBiYXNlZCBvbiB7eyBuZXdzTGlzdC5sZW5ndGggfCB0b05vdW4oICd0d2VldCcsICd0d2VldHMnICkgfX0gaXMmbmJzcDs8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW5vd3JhcFwiIDpjbGFzcz1cInNlbnRpbWVudERhdGEuc3R5bGVzXCIgdi1odG1sPVwic2VudGltZW50RGF0YS5zZW50aW1lbnRcIj48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgdi1pZj1cIiFuZXdzTGlzdC5sZW5ndGhcIiBjbGFzcz1cImZsZXgtaXRlbVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleC0xIHRleHQtaW5mbyB0ZXh0LWZhZGVkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uLWluZm9cIj4mbmJzcDs8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gdi1pZj1cInBhaXJEYXRhLnRva2VuXCI+VGhlcmUgYXJlIG5vIG5ld3MvZXZlbnRzIGRhdGEgZm9yIHt7IHBhaXJEYXRhLm5hbWUgfX0uPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIHYtZWxzZT5UaGVyZSBhcmUgbm8gbmV3cy9ldmVudHMgbG9hZGVkLjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWZvcj1cInQgaW4gbmV3c0xpc3RcIiA6a2V5PVwidC5pZFwiIGNsYXNzPVwiZmxleC1pdGVtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4LTEgcHVzaC1yaWdodFwiPlxuICAgICAgICAgIDxhIGNsYXNzPVwiaWNvbi10d3RyIGljb25MZWZ0IHRleHQtcHJpbWFyeVwiIDpocmVmPVwidC5saW5rXCIgdGFyZ2V0PVwiX2JsYW5rXCI+e3sgdC5uYW1lIH19PC9hPiAmbmJzcDtcbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJ0ZXh0LWRlZmF1bHRcIj5Ae3sgdC5oYW5kbGUgfX08L3NtYWxsPiA8YnIgLz5cbiAgICAgICAgICA8c21hbGwgY2xhc3M9XCJ0ZXh0LWJyaWdodFwiIHYtaHRtbD1cInQudGV4dFwiPjwvc21hbGw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cblxuICA8L3NlY3Rpb24+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuLy8gY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29tcG9uZW50IHByb3BzXG4gIHByb3BzOiB7XG4gICAgcGFpckRhdGE6IHsgdHlwZTogT2JqZWN0LCBkZWZhdWx0KCkgeyByZXR1cm4ge30gfSB9LFxuICAgIG5ld3NFbnRyaWVzOiB7IHR5cGU6IEFycmF5LCBkZWZhdWx0KCkgeyByZXR1cm4gW10gfSB9LFxuICB9LFxuXG4gIC8vIGNvbXBvbmVudCBkYXRhXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbnRpbWVudERhdGE6IG51bGwsXG4gICAgfVxuICB9LFxuXG4gIC8vIGNvbXB1dGVkIG1ldGhvZHNcbiAgY29tcHV0ZWQ6IHtcblxuICAgIC8vIGdldCBmaWx0ZXJlZCBsaXN0IGFuZCBlbWl0IGxpc3QgbGVuZ3RoXG4gICAgbmV3c0xpc3QoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXROZXdzTGlzdCgpO1xuICAgIH0sXG4gIH0sXG5cbiAgLy8gY29tcG9uZW50IG1ldGhvZHNcbiAgbWV0aG9kczoge1xuXG4gICAgLy8gZ2V0IG5ld3MgbGlzdCBmb3IgYSB0b2tlbiwgb3IgYWxsIGl0ZW1zXG4gICAgZ2V0TmV3c0xpc3QoKSB7XG4gICAgICBsZXQgcGFpciA9IHRoaXMucGFpckRhdGE7XG4gICAgICBsZXQgbGlzdCA9IHRoaXMubmV3c0VudHJpZXM7XG5cbiAgICAgIGlmICggcGFpci50b2tlbiApIHtcbiAgICAgICAgbGV0IHNlYXJjaCA9IHBhaXIudG9rZW4gKyd8JysgcGFpci5uYW1lO1xuICAgICAgICBsaXN0ID0gdGhpcy4kdXRpbHMuc2VhcmNoKCBsaXN0LCAndGV4dCcsIHNlYXJjaCwgdHJ1ZSApO1xuICAgICAgfVxuICAgICAgdGhpcy4kZW1pdCggJ2xpc3RDb3VudCcsIGxpc3QubGVuZ3RoICk7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuXG4gICAgLy8gYW5hbGl6ZSBuZXdzIGRhdGEgZm9yIHRva2VuXG4gICAgYW5hbGl6ZU5ld3NMaXN0KCkge1xuICAgICAgbGV0IGRhdGEgPSBudWxsO1xuICAgICAgbGV0IGxpc3QgPSB0aGlzLmdldE5ld3NMaXN0KCk7XG5cbiAgICAgIGlmICggbGlzdC5sZW5ndGggJiYgdGhpcy5wYWlyRGF0YS50b2tlbiApIHtcbiAgICAgICAgbGV0IHRleHQgPSBsaXN0LnJlZHVjZSggKCBhLCB0ICkgPT4gYSArPSAnICcrIHQudGV4dCwgJycgKS50cmltKCk7XG4gICAgICAgIGRhdGEgPSB0aGlzLiRzZW50aW1lbnQuYW5hbHl6ZSggdGV4dCApO1xuICAgICAgfVxuICAgICAgdGhpcy5zZW50aW1lbnREYXRhID0gZGF0YTtcbiAgICB9LFxuICB9LFxuXG4gIC8vIG9uIG1vdW50ZWRcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLmFuYWxpemVOZXdzTGlzdCgpO1xuICB9LFxufVxuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('Object.defineProperty(__webpack_exports__, "__esModule", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__configs_defaultOptions__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_options__ = __webpack_require__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_binance__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_alarms__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_history__ = __webpack_require__(43);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_notify__ = __webpack_require__(44);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_news__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_messenger__ = __webpack_require__(47);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__modules_router__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__modules_ajax__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__modules_bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__modules_sorter__ = __webpack_require__(51);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__modules_scroller__ = __webpack_require__(52);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__modules_tooltip__ = __webpack_require__(53);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__modules_store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__modules_sentiment__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__modules_utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__modules_utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__modules_utils__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__components_App_vue__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18_vue__ = __webpack_require__(108);\n/**\n * Main app entry file.\n */\nwindow.DEBUG = false;\n\n// app dependencies\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// setup common helper classes\nvar _options = new __WEBPACK_IMPORTED_MODULE_1__modules_options__["a" /* default */](__WEBPACK_IMPORTED_MODULE_0__configs_defaultOptions__["a" /* default */]);\nvar _binance = new __WEBPACK_IMPORTED_MODULE_2__modules_binance__["a" /* default */]();\nvar _alarms = new __WEBPACK_IMPORTED_MODULE_3__modules_alarms__["a" /* default */]();\nvar _history = new __WEBPACK_IMPORTED_MODULE_4__modules_history__["a" /* default */]();\nvar _notify = new __WEBPACK_IMPORTED_MODULE_5__modules_notify__["a" /* default */]();\nvar _news = new __WEBPACK_IMPORTED_MODULE_6__modules_news__["a" /* default */]();\nvar _messenger = new __WEBPACK_IMPORTED_MODULE_7__modules_messenger__["a" /* default */]();\nvar _router = new __WEBPACK_IMPORTED_MODULE_8__modules_router__["a" /* default */]();\nvar _ajax = new __WEBPACK_IMPORTED_MODULE_9__modules_ajax__["a" /* default */]();\nvar _bus = new __WEBPACK_IMPORTED_MODULE_10__modules_bus__["a" /* default */]();\nvar _sorter = new __WEBPACK_IMPORTED_MODULE_11__modules_sorter__["a" /* default */]();\nvar _scroller = new __WEBPACK_IMPORTED_MODULE_12__modules_scroller__["a" /* default */]();\nvar _tooltip = new __WEBPACK_IMPORTED_MODULE_13__modules_tooltip__["a" /* default */]();\n\n// create custom global vue properties\nObject.defineProperties(__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].prototype, {\n  $opts: {\n    get: function get() {\n      return _options;\n    }\n  },\n  $binance: {\n    get: function get() {\n      return _binance;\n    }\n  },\n  $alarms: {\n    get: function get() {\n      return _alarms;\n    }\n  },\n  $history: {\n    get: function get() {\n      return _history;\n    }\n  },\n  $notify: {\n    get: function get() {\n      return _notify;\n    }\n  },\n  $news: {\n    get: function get() {\n      return _news;\n    }\n  },\n  $messenger: {\n    get: function get() {\n      return _messenger;\n    }\n  },\n  $router: {\n    get: function get() {\n      return _router;\n    }\n  },\n  $ajax: {\n    get: function get() {\n      return _ajax;\n    }\n  },\n  $scroller: {\n    get: function get() {\n      return _scroller;\n    }\n  },\n  $bus: {\n    get: function get() {\n      return _bus;\n    }\n  },\n  $sorter: {\n    get: function get() {\n      return _sorter;\n    }\n  },\n  $store: {\n    get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_14__modules_store__["a" /* default */];\n    }\n  },\n  $sentiment: {\n    get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_15__modules_sentiment__["a" /* default */];\n    }\n  },\n  $utils: {\n    get: function get() {\n      return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a;\n    }\n  }\n});\n\n// single tooltip instance for entire app\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].directive(\'tooltip\', {\n  bind: function bind(el) {\n    _tooltip.select(el);\n  },\n  unbind: function unbind(el) {\n    _tooltip.unselect(el);\n  }\n});\n\n// global filters used to format currency and price change values\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].filter(\'toLinks\', function (text) {\n  return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a.linkUrl(text);\n});\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].filter(\'toNoun\', function (num, s, p) {\n  return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a.noun(num, s, p);\n});\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].filter(\'toElapsed\', function (time, suffix, short) {\n  return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a.elapsed((Date.now() - time) / 1000, suffix, short);\n});\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].filter(\'toDate\', function (time, full) {\n  return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a.date(time, full);\n});\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].filter(\'toMoney\', function (num, decimals) {\n  return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a.money(num, decimals);\n});\n__WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */].filter(\'toFixed\', function (num, asset) {\n  return __WEBPACK_IMPORTED_MODULE_16__modules_utils___default.a.fixed(num, asset);\n});\n\n// init and/or render\nwindow.addEventListener(\'load\', function (e) {\n  if (window.top !== window) return;\n  document.body.setAttribute(\'tabindex\', \'0\');\n  new __WEBPACK_IMPORTED_MODULE_18_vue__["a" /* default */]({ el: \'#app\', render: function render(h) {\n      return h(__WEBPACK_IMPORTED_MODULE_17__components_App_vue__["a" /* default */]);\n    } });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///37\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * Application options object\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // cors proxy for outgoing http requests\n  proxy: 'https://cors-anywhere.herokuapp.com/',\n\n  // custom proxy list\n  proxylist: ['https://cors-anywhere.herokuapp.com/', 'http://localhost:8080/'],\n\n  // notification options\n  notify: {\n    enabled: true,\n    duration: 10\n  },\n\n  // notification audio\n  audio: {\n    enabled: true,\n    volume: 0.5,\n    file: 'public/audio/audio_2.mp3'\n  },\n\n  // search options\n  search: {\n    fullword: false, // must type full search words\n    fullcase: true // must type correct word upper/lower case letters\n  },\n\n  // live price options\n  prices: {\n    header: true, // show top coins in header\n    chart: true, // show live price chart in list\n    asset: 'BTC', // filter by base asset (BTC, ETH, BNB, USDT)\n    sort: 'assetVolume', // price data to sort by\n    order: 'desc', // price sort direction\n    limit: 20 // how many entries to show\n  },\n\n  // news related options\n  news: {\n    enabled: true, // enable fetching on a timer\n    notify: false, // show push notifications for news\n    send: false, // include news in outgoing notifications (email/telegram)\n    interval: 5, // how often to try fetching from each source (secs)\n    delay: 500, // how long to wait before fetching again from each source (secs)\n    tweets: 1, // how many tweets to fetch at once from each source\n    total: 100, // how many total tweets to store\n    max: 30, // max number of news entries to show\n    days: 1 // only show entries posted within this number of days\n  },\n\n  // binance api config\n  binance: {\n    enabled: false, // status\n    apikey: '', // api key\n    apisecret: '' // api secret\n  },\n\n  // mailgun api config\n  mailgun: {\n    enabled: false, // status\n    domain: '', // account domain\n    apikey: '', // api key\n    email: '' // recipient email\n  },\n\n  // telegram bot api config\n  telegram: {\n    enabled: false, // status\n    botkey: '', // telegram bot id\n    userid: '' // recipient chat id\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlncy9kZWZhdWx0T3B0aW9ucy5qcz9jY2VjIl0sIm5hbWVzIjpbInByb3h5IiwicHJveHlsaXN0Iiwibm90aWZ5IiwiZW5hYmxlZCIsImR1cmF0aW9uIiwiYXVkaW8iLCJ2b2x1bWUiLCJmaWxlIiwic2VhcmNoIiwiZnVsbHdvcmQiLCJmdWxsY2FzZSIsInByaWNlcyIsImhlYWRlciIsImNoYXJ0IiwiYXNzZXQiLCJzb3J0Iiwib3JkZXIiLCJsaW1pdCIsIm5ld3MiLCJzZW5kIiwiaW50ZXJ2YWwiLCJkZWxheSIsInR3ZWV0cyIsInRvdGFsIiwibWF4IiwiZGF5cyIsImJpbmFuY2UiLCJhcGlrZXkiLCJhcGlzZWNyZXQiLCJtYWlsZ3VuIiwiZG9tYWluIiwiZW1haWwiLCJ0ZWxlZ3JhbSIsImJvdGtleSIsInVzZXJpZCJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBLHlEQUFlOztBQUViO0FBQ0FBLFNBQU8sc0NBSE07O0FBS2I7QUFDQUMsYUFBVyxDQUNULHNDQURTLEVBRVQsd0JBRlMsQ0FORTs7QUFXYjtBQUNBQyxVQUFRO0FBQ05DLGFBQVMsSUFESDtBQUVOQyxjQUFVO0FBRkosR0FaSzs7QUFpQmI7QUFDQUMsU0FBTztBQUNMRixhQUFTLElBREo7QUFFTEcsWUFBUSxHQUZIO0FBR0xDLFVBQU07QUFIRCxHQWxCTTs7QUF3QmI7QUFDQUMsVUFBUTtBQUNOQyxjQUFVLEtBREosRUFDWTtBQUNsQkMsY0FBVSxJQUZKLENBRVk7QUFGWixHQXpCSzs7QUE4QmI7QUFDQUMsVUFBUTtBQUNOQyxZQUFRLElBREYsRUFDZTtBQUNyQkMsV0FBTyxJQUZELEVBRWU7QUFDckJDLFdBQU8sS0FIRCxFQUdlO0FBQ3JCQyxVQUFNLGFBSkEsRUFJZTtBQUNyQkMsV0FBTyxNQUxELEVBS2U7QUFDckJDLFdBQU8sRUFORCxDQU1lO0FBTmYsR0EvQks7O0FBd0NiO0FBQ0FDLFFBQU07QUFDSmYsYUFBUyxJQURMLEVBQ1c7QUFDZkQsWUFBUSxLQUZKLEVBRVk7QUFDaEJpQixVQUFNLEtBSEYsRUFHWTtBQUNoQkMsY0FBVSxDQUpOLEVBSVk7QUFDaEJDLFdBQU8sR0FMSCxFQUtZO0FBQ2hCQyxZQUFRLENBTkosRUFNWTtBQUNoQkMsV0FBTyxHQVBILEVBT1k7QUFDaEJDLFNBQUssRUFSRCxFQVFZO0FBQ2hCQyxVQUFNLENBVEYsQ0FTWTtBQVRaLEdBekNPOztBQXFEYjtBQUNBQyxXQUFTO0FBQ1B2QixhQUFTLEtBREYsRUFDUztBQUNoQndCLFlBQVEsRUFGRCxFQUVTO0FBQ2hCQyxlQUFXLEVBSEosQ0FHUztBQUhULEdBdERJOztBQTREYjtBQUNBQyxXQUFTO0FBQ1AxQixhQUFTLEtBREYsRUFDUztBQUNoQjJCLFlBQVEsRUFGRCxFQUVTO0FBQ2hCSCxZQUFRLEVBSEQsRUFHUztBQUNoQkksV0FBTyxFQUpBLENBSVM7QUFKVCxHQTdESTs7QUFvRWI7QUFDQUMsWUFBVTtBQUNSN0IsYUFBUyxLQURELEVBQ1E7QUFDaEI4QixZQUFRLEVBRkEsRUFFUTtBQUNoQkMsWUFBUSxFQUhBLENBR1E7QUFIUjtBQXJFRyxDQUFmIiwiZmlsZSI6IjM4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBcHBsaWNhdGlvbiBvcHRpb25zIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCB7XG5cbiAgLy8gY29ycyBwcm94eSBmb3Igb3V0Z29pbmcgaHR0cCByZXF1ZXN0c1xuICBwcm94eTogJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLycsXG5cbiAgLy8gY3VzdG9tIHByb3h5IGxpc3RcbiAgcHJveHlsaXN0OiBbXG4gICAgJ2h0dHBzOi8vY29ycy1hbnl3aGVyZS5oZXJva3VhcHAuY29tLycsXG4gICAgJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8nLFxuICBdLFxuXG4gIC8vIG5vdGlmaWNhdGlvbiBvcHRpb25zXG4gIG5vdGlmeToge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgZHVyYXRpb246IDEwLFxuICB9LFxuXG4gIC8vIG5vdGlmaWNhdGlvbiBhdWRpb1xuICBhdWRpbzoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgdm9sdW1lOiAwLjUsXG4gICAgZmlsZTogJ3B1YmxpYy9hdWRpby9hdWRpb18yLm1wMycsXG4gIH0sXG5cbiAgLy8gc2VhcmNoIG9wdGlvbnNcbiAgc2VhcmNoOiB7XG4gICAgZnVsbHdvcmQ6IGZhbHNlLCAgLy8gbXVzdCB0eXBlIGZ1bGwgc2VhcmNoIHdvcmRzXG4gICAgZnVsbGNhc2U6IHRydWUsICAgLy8gbXVzdCB0eXBlIGNvcnJlY3Qgd29yZCB1cHBlci9sb3dlciBjYXNlIGxldHRlcnNcbiAgfSxcblxuICAvLyBsaXZlIHByaWNlIG9wdGlvbnNcbiAgcHJpY2VzOiB7XG4gICAgaGVhZGVyOiB0cnVlLCAgICAgICAgLy8gc2hvdyB0b3AgY29pbnMgaW4gaGVhZGVyXG4gICAgY2hhcnQ6IHRydWUsICAgICAgICAgLy8gc2hvdyBsaXZlIHByaWNlIGNoYXJ0IGluIGxpc3RcbiAgICBhc3NldDogJ0JUQycsICAgICAgICAvLyBmaWx0ZXIgYnkgYmFzZSBhc3NldCAoQlRDLCBFVEgsIEJOQiwgVVNEVClcbiAgICBzb3J0OiAnYXNzZXRWb2x1bWUnLCAvLyBwcmljZSBkYXRhIHRvIHNvcnQgYnlcbiAgICBvcmRlcjogJ2Rlc2MnLCAgICAgICAvLyBwcmljZSBzb3J0IGRpcmVjdGlvblxuICAgIGxpbWl0OiAyMCwgICAgICAgICAgIC8vIGhvdyBtYW55IGVudHJpZXMgdG8gc2hvd1xuICB9LFxuXG4gIC8vIG5ld3MgcmVsYXRlZCBvcHRpb25zXG4gIG5ld3M6IHtcbiAgICBlbmFibGVkOiB0cnVlLCAvLyBlbmFibGUgZmV0Y2hpbmcgb24gYSB0aW1lclxuICAgIG5vdGlmeTogZmFsc2UsICAvLyBzaG93IHB1c2ggbm90aWZpY2F0aW9ucyBmb3IgbmV3c1xuICAgIHNlbmQ6IGZhbHNlLCAgICAvLyBpbmNsdWRlIG5ld3MgaW4gb3V0Z29pbmcgbm90aWZpY2F0aW9ucyAoZW1haWwvdGVsZWdyYW0pXG4gICAgaW50ZXJ2YWw6IDUsICAgIC8vIGhvdyBvZnRlbiB0byB0cnkgZmV0Y2hpbmcgZnJvbSBlYWNoIHNvdXJjZSAoc2VjcylcbiAgICBkZWxheTogNTAwLCAgICAgLy8gaG93IGxvbmcgdG8gd2FpdCBiZWZvcmUgZmV0Y2hpbmcgYWdhaW4gZnJvbSBlYWNoIHNvdXJjZSAoc2VjcylcbiAgICB0d2VldHM6IDEsICAgICAgLy8gaG93IG1hbnkgdHdlZXRzIHRvIGZldGNoIGF0IG9uY2UgZnJvbSBlYWNoIHNvdXJjZVxuICAgIHRvdGFsOiAxMDAsICAgICAvLyBob3cgbWFueSB0b3RhbCB0d2VldHMgdG8gc3RvcmVcbiAgICBtYXg6IDMwLCAgICAgICAgLy8gbWF4IG51bWJlciBvZiBuZXdzIGVudHJpZXMgdG8gc2hvd1xuICAgIGRheXM6IDEsICAgICAgICAvLyBvbmx5IHNob3cgZW50cmllcyBwb3N0ZWQgd2l0aGluIHRoaXMgbnVtYmVyIG9mIGRheXNcbiAgfSxcblxuICAvLyBiaW5hbmNlIGFwaSBjb25maWdcbiAgYmluYW5jZToge1xuICAgIGVuYWJsZWQ6IGZhbHNlLCAvLyBzdGF0dXNcbiAgICBhcGlrZXk6ICcnLCAgICAgLy8gYXBpIGtleVxuICAgIGFwaXNlY3JldDogJycsICAvLyBhcGkgc2VjcmV0XG4gIH0sXG5cbiAgLy8gbWFpbGd1biBhcGkgY29uZmlnXG4gIG1haWxndW46IHtcbiAgICBlbmFibGVkOiBmYWxzZSwgLy8gc3RhdHVzXG4gICAgZG9tYWluOiAnJywgICAgIC8vIGFjY291bnQgZG9tYWluXG4gICAgYXBpa2V5OiAnJywgICAgIC8vIGFwaSBrZXlcbiAgICBlbWFpbDogJycsICAgICAgLy8gcmVjaXBpZW50IGVtYWlsXG4gIH0sXG5cbiAgLy8gdGVsZWdyYW0gYm90IGFwaSBjb25maWdcbiAgdGVsZWdyYW06IHtcbiAgICBlbmFibGVkOiBmYWxzZSwgLy8gc3RhdHVzXG4gICAgYm90a2V5OiAnJywgICAgIC8vIHRlbGVncmFtIGJvdCBpZFxuICAgIHVzZXJpZDogJycsICAgICAvLyByZWNpcGllbnQgY2hhdCBpZFxuICB9LFxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbmZpZ3MvZGVmYXVsdE9wdGlvbnMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__utils__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * App Options helper class\r\n */\n\n\n\n\nvar Options = function (_Bus) {\n  _inherits(Options, _Bus);\n\n  /**\r\n   * Constructor\r\n   */\n  function Options(options) {\n    _classCallCheck(this, Options);\n\n    var _this = _possibleConstructorReturn(this, (Options.__proto__ || Object.getPrototypeOf(Options)).call(this));\n\n    _this._key = \'app_options_data\';\n    _this._options = {};\n    _this.setOptions(options);\n    return _this;\n  }\n\n  /**\r\n   * Loads and sets saved data from store\r\n   */\n\n\n  _createClass(Options, [{\n    key: \'loadOptions\',\n    value: function loadOptions() {\n      var options = __WEBPACK_IMPORTED_MODULE_1__store__["a" /* default */].getData(this._key);\n      this.setOptions(options);\n    }\n\n    /**\r\n     * Set new options data and save to store\r\n     * @param {object}  options  Options object\r\n     */\n\n  }, {\n    key: \'saveOptions\',\n    value: function saveOptions(options) {\n      this.setOptions(options);\n      __WEBPACK_IMPORTED_MODULE_1__store__["a" /* default */].setData(this._key, this._options);\n    }\n\n    /**\r\n     * Set new options data and emit changes\r\n     * @param {object}  options  Options object\r\n     */\n\n  }, {\n    key: \'setOptions\',\n    value: function setOptions(options) {\n      this._options = __WEBPACK_IMPORTED_MODULE_2__utils___default.a.deepMerge({}, this._options, options);\n      this.emit(\'update\', this._options);\n    }\n\n    /**\r\n     * Get options by name, or all\r\n     * @param {string}  key  Options object key\r\n     * @param {*}       def  Optional default value\r\n     */\n\n  }, {\n    key: \'getOptions\',\n    value: function getOptions(key, def) {\n      if (key && typeof key === \'string\') {\n        if (this._options.hasOwnProperty(key)) return this._options[key];\n        return def;\n      }\n      return this._options;\n    }\n  }]);\n\n  return Options;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__["a" /* default */]);\n\n/* harmony default export */ __webpack_exports__["a"] = (Options);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9vcHRpb25zLmpzPzc4NmYiXSwibmFtZXMiOlsiT3B0aW9ucyIsIm9wdGlvbnMiLCJfa2V5IiwiX29wdGlvbnMiLCJzZXRPcHRpb25zIiwic3RvcmUiLCJnZXREYXRhIiwic2V0RGF0YSIsInV0aWxzIiwiZGVlcE1lcmdlIiwiZW1pdCIsImtleSIsImRlZiIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7O0FBR0E7QUFDQTtBQUNBOztJQUVxQkEsTzs7O0FBRW5COzs7QUFHQSxtQkFBYUMsT0FBYixFQUF1QjtBQUFBOztBQUFBOztBQUVyQixVQUFLQyxJQUFMLEdBQVksa0JBQVo7QUFDQSxVQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsVUFBS0MsVUFBTCxDQUFpQkgsT0FBakI7QUFKcUI7QUFLdEI7O0FBRUQ7Ozs7Ozs7a0NBR2M7QUFDWixVQUFJQSxVQUFVLHVEQUFBSSxDQUFNQyxPQUFOLENBQWUsS0FBS0osSUFBcEIsQ0FBZDtBQUNBLFdBQUtFLFVBQUwsQ0FBaUJILE9BQWpCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Z0NBSWFBLE8sRUFBVTtBQUNyQixXQUFLRyxVQUFMLENBQWlCSCxPQUFqQjtBQUNBSSxNQUFBLHVEQUFBQSxDQUFNRSxPQUFOLENBQWUsS0FBS0wsSUFBcEIsRUFBMEIsS0FBS0MsUUFBL0I7QUFDRDs7QUFFRDs7Ozs7OzsrQkFJWUYsTyxFQUFVO0FBQ3BCLFdBQUtFLFFBQUwsR0FBZ0IsOENBQUFLLENBQU1DLFNBQU4sQ0FBaUIsRUFBakIsRUFBcUIsS0FBS04sUUFBMUIsRUFBb0NGLE9BQXBDLENBQWhCO0FBQ0EsV0FBS1MsSUFBTCxDQUFXLFFBQVgsRUFBcUIsS0FBS1AsUUFBMUI7QUFDRDs7QUFFRDs7Ozs7Ozs7K0JBS1lRLEcsRUFBS0MsRyxFQUFNO0FBQ3JCLFVBQUtELE9BQU8sT0FBT0EsR0FBUCxLQUFlLFFBQTNCLEVBQXNDO0FBQ3BDLFlBQUssS0FBS1IsUUFBTCxDQUFjVSxjQUFkLENBQThCRixHQUE5QixDQUFMLEVBQTJDLE9BQU8sS0FBS1IsUUFBTCxDQUFlUSxHQUFmLENBQVA7QUFDM0MsZUFBT0MsR0FBUDtBQUNEO0FBQ0QsYUFBTyxLQUFLVCxRQUFaO0FBQ0Q7Ozs7RUFqRGtDLHFEOzt5REFBaEJILE8iLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQXBwIE9wdGlvbnMgaGVscGVyIGNsYXNzXHJcbiAqL1xyXG5pbXBvcnQgQnVzIGZyb20gJy4vYnVzJztcclxuaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUnO1xyXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcHRpb25zIGV4dGVuZHMgQnVzIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0b3JcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl9rZXkgPSAnYXBwX29wdGlvbnNfZGF0YSc7XHJcbiAgICB0aGlzLl9vcHRpb25zID0ge307XHJcbiAgICB0aGlzLnNldE9wdGlvbnMoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWRzIGFuZCBzZXRzIHNhdmVkIGRhdGEgZnJvbSBzdG9yZVxyXG4gICAqL1xyXG4gIGxvYWRPcHRpb25zKCkge1xyXG4gICAgbGV0IG9wdGlvbnMgPSBzdG9yZS5nZXREYXRhKCB0aGlzLl9rZXkgKTtcclxuICAgIHRoaXMuc2V0T3B0aW9ucyggb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG5ldyBvcHRpb25zIGRhdGEgYW5kIHNhdmUgdG8gc3RvcmVcclxuICAgKiBAcGFyYW0ge29iamVjdH0gIG9wdGlvbnMgIE9wdGlvbnMgb2JqZWN0XHJcbiAgICovXHJcbiAgc2F2ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XHJcbiAgICB0aGlzLnNldE9wdGlvbnMoIG9wdGlvbnMgKTtcclxuICAgIHN0b3JlLnNldERhdGEoIHRoaXMuX2tleSwgdGhpcy5fb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG5ldyBvcHRpb25zIGRhdGEgYW5kIGVtaXQgY2hhbmdlc1xyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSAgb3B0aW9ucyAgT3B0aW9ucyBvYmplY3RcclxuICAgKi9cclxuICBzZXRPcHRpb25zKCBvcHRpb25zICkge1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IHV0aWxzLmRlZXBNZXJnZSgge30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMgKTtcclxuICAgIHRoaXMuZW1pdCggJ3VwZGF0ZScsIHRoaXMuX29wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBvcHRpb25zIGJ5IG5hbWUsIG9yIGFsbFxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSAga2V5ICBPcHRpb25zIG9iamVjdCBrZXlcclxuICAgKiBAcGFyYW0geyp9ICAgICAgIGRlZiAgT3B0aW9uYWwgZGVmYXVsdCB2YWx1ZVxyXG4gICAqL1xyXG4gIGdldE9wdGlvbnMoIGtleSwgZGVmICkge1xyXG4gICAgaWYgKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGlmICggdGhpcy5fb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgga2V5ICkgKSByZXR1cm4gdGhpcy5fb3B0aW9uc1sga2V5IF07XHJcbiAgICAgIHJldHVybiBkZWY7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL29wdGlvbnMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__symbol__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__utils__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Binance socket api wrapper class\n */\n\n\n\n\nvar Binance = function (_Bus) {\n  _inherits(Binance, _Bus);\n\n  /**\n   * Constructor\n   */\n  function Binance() {\n    _classCallCheck(this, Binance);\n\n    var _this = _possibleConstructorReturn(this, (Binance.__proto__ || Object.getPrototypeOf(Binance)).call(this));\n\n    _this._ajax = null;\n    _this._apiurl = 'https://api.binance.com/api';\n    _this._wssurl = 'wss://stream.binance.com:9443';\n    _this._apikey = ''; // binance API key\n    _this._apisecret = ''; // binance API secret\n    _this._listenkey = ''; // user stream listen key\n    _this._wait = 10000; // reconnect wait (mils)\n    _this._names = {}; // map of token names passed in\n    _this._symbols = {}; // unique symbols data cache\n    _this._assets = []; // unique list of base assets\n    _this._reconnect = {};\n    _this._timers = {};\n    _this._socks = {};\n    return _this;\n  }\n\n  /**\n   * Set ajax module reference to use for requests\n   * @param {object}  ajax  Ajax class instance\n   */\n\n\n  _createClass(Binance, [{\n    key: 'useAjax',\n    value: function useAjax(ajax) {\n      this._ajax = ajax;\n    }\n\n    /**\n     * Set API key\n     * @param {string} key\n     */\n\n  }, {\n    key: 'setApiKey',\n    value: function setApiKey(key) {\n      this._apikey = String(key || '').trim();\n    }\n\n    /**\n     * Set API secret\n     * @param {string} secret\n     */\n\n  }, {\n    key: 'setApiSecret',\n    value: function setApiSecret(secret) {\n      this._apisecret = String(secret || '').trim();\n    }\n\n    /**\n     * Set object map of token -> name\n     * @param {object}  namesMap  Tokens names map\n     */\n\n  }, {\n    key: 'setNames',\n    value: function setNames(namesMap) {\n      this._names = Object.assign(this._names, namesMap);\n    }\n\n    /**\n     * Set socket reconnect boolean for an id\n     * @param {string}   id      Sock id ref\n     * @param {boolean}  toggle  Toggle\n     */\n\n  }, {\n    key: 'setReconnect',\n    value: function setReconnect(id, toggle) {\n      this._reconnect[id] = toggle ? true : false;\n    }\n\n    /**\n     * Check reconnect toggle for an id and call a handler function\n     * @param {string}    id        Sock id ref\n     * @param {function}  callback  Handler function\n     */\n\n  }, {\n    key: 'checkReconnect',\n    value: function checkReconnect(id, callback) {\n      if (!this._reconnect[id]) return;\n      setTimeout(callback, this._wait);\n    }\n\n    /**\n     * Add base asset symbol to the list\n     * @param {string}  asset  Asset symbol\n     */\n\n  }, {\n    key: 'addAsset',\n    value: function addAsset(asset) {\n      if (asset && this._assets.indexOf(asset) < 0) {\n        this._assets.push(asset);\n        this.emit('assets', this._assets);\n      }\n    }\n\n    // get public api endpoint url\n\n  }, {\n    key: 'getPublicUrl',\n    value: function getPublicUrl(endpoint, params) {\n      var qstr = this._ajax.serializeData(Object.assign({}, params));\n      return this._apiurl + endpoint + '?' + qstr;\n    }\n\n    // get user signed api endpoint url\n\n  }, {\n    key: 'getSignedUrl',\n    value: function getSignedUrl(endpoint, params) {\n      var crypto = window.CryptoJS || null;\n      var recvWindow = 100000;\n      var timestamp = Date.now() - recvWindow / 2;\n      var qstr = this._ajax.serializeData(Object.assign({ recvWindow: recvWindow, timestamp: timestamp }, params));\n      var signature = crypto ? crypto.HmacSHA256(qstr, this._apisecret).toString(crypto.enc.Hex) : '';\n      return this._apiurl + endpoint + '?' + qstr + '&signature=' + signature;\n    }\n\n    /**\n     * Parse user balances data\n     * @param {object}  data  Data payload from websocket, or http response\n     */\n\n  }, {\n    key: 'parseUserBalances',\n    value: function parseUserBalances(data) {\n      var _this2 = this;\n\n      var balances = [];\n      if (Array.isArray(data)) balances = data; // as-is\n      if (Array.isArray(data.balances)) balances = data.balances; // http\n      if (Array.isArray(data.B)) balances = data.B; // websocket\n\n      balances = balances.map(function (t) {\n        var asset = String(t.a || t.asset || '');\n        var pair = asset === 'BTC' ? 'USDT' : 'BTC';\n        var route = '/symbol/' + asset + pair;\n        var name = _this2._names[asset] || asset;\n        var free = parseFloat(t.f || t.free) || 0;\n        var locked = parseFloat(t.l || t.locked) || 0;\n        var total = free + locked;\n        return { asset: asset, name: name, route: route, free: free, locked: locked, total: total };\n      });\n      return balances.filter(function (t) {\n        return t.total > 0;\n      });\n    }\n\n    /**\n     * Parse order data from an API/Socket response and combine it with symbol data\n     * @param {object}  data  Order data response\n     */\n\n  }, {\n    key: 'parseOrderData',\n    value: function parseOrderData(data) {\n      var now = Date.now();\n      var time = Number(data.T || data.transactTime || now); // transaction time\n      var id = String(data.i || data.orderId || ''); // order id\n      var symbol = String(data.s || data.symbol || ''); // trade pair symbol\n      var side = String(data.S || data.side || ''); // book side (BUY, SELL)\n      var type = String(data.o || data.type || ''); // order type (LIMIT, MARKET, etc)\n      var status = String(data.X || data.status || ''); // order status (NEW, CANCELED, FILLED, etc)\n      var price = Number(data.p || data.price || 0); // order book price\n      var quantity = Number(data.q || data.origQty || 0); // original trade quantity\n      var filled = Number(data.z || data.executedQty || 0); // filled trade quantity\n      var total = Number(data.Z || data.cummulativeQuoteQty || 0); // total trade asset cost\n      var feeAsset = String(data.N || ''); // fee asset used for commission (BNB, etc)\n      var feeAmount = Number(data.n || 0); // fee commission amount\n      var percent = Number(filled / quantity * 100); // filled percent\n\n      // resolve available amount after token fee has been deducted\n      var smb = this._symbols[symbol] || new __WEBPACK_IMPORTED_MODULE_1__symbol__[\"a\" /* default */](symbol);\n      var amount = feeAsset === smb.token ? quantity - feeAmount : quantity;\n      var unique = __WEBPACK_IMPORTED_MODULE_2__utils___default.a.unique(symbol + '|' + Math.floor(amount));\n\n      status = status === 'NEW' ? 'OPEN' : status;\n      if (!price && total) {\n        price = total / quantity;\n      }\n      if (!total && price) {\n        total = price * quantity;\n      }\n\n      return smb.getData({ id: id, unique: unique, side: side, time: time, type: type, status: status, price: price, quantity: quantity, filled: filled, amount: amount, total: total, feeAsset: feeAsset, feeAmount: feeAmount, percent: percent });\n    }\n\n    /**\n     * Build fake order data\n     * @param {string}  symbol    Full trading symbol\n     * @param {string}  type      Order type (LIMIT, MARKET)\n     * @param {string}  side      Book side (BUY, SELL)\n     * @param {number}  price     Book price\n     * @param {number}  quantity  Order quantity\n     */\n\n  }, {\n    key: 'fakeOrderData',\n    value: function fakeOrderData(symbol, type, side, price, quantity, status) {\n      var time = Date.now();\n      var id = __WEBPACK_IMPORTED_MODULE_2__utils___default.a.randString(20);\n      var priceStr = Number(price).toFixed(8);\n      var quantityStr = Number(quantity).toFixed(0);\n      var totalStr = Number(price * quantity).toFixed(8);\n      return this.parseOrderData({\n        symbol: symbol,\n        orderId: id,\n        transactTime: time,\n        price: priceStr,\n        origQty: quantityStr,\n        executedQty: quantityStr,\n        cummulativeQuoteQty: totalStr,\n        status: status,\n        type: type,\n        side: side\n      });\n    }\n\n    /**\n     * Simulate an order with fake API request\n     * @param {string}  symbol    Full trading symbol\n     * @param {string}  type      Order type (LIMIT, MARKET)\n     * @param {string}  side      Book side (BUY, SELL)\n     * @param {number}  price     Book price\n     * @param {number}  quantity  Order quantity\n     */\n\n  }, {\n    key: 'placeFakeOrder',\n    value: function placeFakeOrder(symbol, type, side, price, quantity) {\n      var _this3 = this;\n\n      var secs = Math.floor(1000 + Math.random() * 4000); // 1-5 secs\n      var orderOpen = this.fakeOrderData(symbol, type, side, price, quantity, 'OPEN');\n      var orderFilled = this.fakeOrderData(symbol, type, side, price, quantity, 'FILLED');\n      var orderCanceled = this.fakeOrderData(symbol, type, side, price, quantity, 'CANCELED');\n      var orderResult = secs < 4900 ? orderFilled : orderCanceled;\n      setTimeout(function () {\n        _this3.emit('book_create', orderOpen);\n      }, 300); // added to book\n      setTimeout(function () {\n        _this3.emit('user_order', orderResult);\n      }, secs); // filled or canceled\n    }\n\n    /**\n     * Place new order in book\n     * @param {string}  symbol    Full trading symbol\n     * @param {string}  type      Order type (LIMIT, MARKET)\n     * @param {string}  side      Book side (BUY, SELL)\n     * @param {number}  price     Book price\n     * @param {number}  quantity  Order quantity\n     * @param {string}  inforce   Time inforce type (GTC, IOC, FOK)\n     */\n\n  }, {\n    key: 'placeOrder',\n    value: function placeOrder(symbol, type, side, price, quantity, inforce) {\n      var _this4 = this;\n\n      if (!this._apikey || !this._ajax) return;\n      if (!symbol || !type || !side || !quantity || quantity <= 0) return;\n\n      price = Number(price).toFixed(8);\n      quantity = Number(quantity).toFixed(0);\n      inforce = String(inforce || 'FOK');\n\n      var params = { symbol: symbol, side: side, type: type, quantity: quantity };\n      if (type === 'LIMIT') Object.assign(params, { price: price, timeInForce: inforce });\n      Object.assign(params, { newOrderRespType: 'RESULT' });\n\n      this._ajax.post(this.getSignedUrl('/v3/order', params), {\n        type: 'json',\n        headers: { 'X-MBX-APIKEY': this._apikey },\n\n        success: function success(xhr, status, response) {\n          var order = _this4.parseOrderData(response);\n          _this4.emit('book_create', order);\n        },\n        error: function error(xhr, status, _error) {\n          var order = _this4.fakeOrderData(symbol, type, side, price, quantity, 'REJECTED');\n          _this4.emit('book_fail', order, _error);\n        }\n      });\n    }\n\n    /**\n     * Cancel order from book\n     * @param {string}  symbol    Full trading symbol\n     * @param {number}  orderId   Order ID number\n     * @param {number}  quantity  Order quantity\n     */\n\n  }, {\n    key: 'cancelOrder',\n    value: function cancelOrder(symbol, orderId, quantity) {\n      var _this5 = this;\n\n      if (!this._apikey || !this._ajax) return;\n      if (!symbol || !orderId) return;\n\n      this._ajax.delete(this.getSignedUrl('/v3/order', { symbol: symbol, orderId: orderId }), {\n        type: 'json',\n        headers: { 'X-MBX-APIKEY': this._apikey },\n\n        success: function success(xhr, status, response) {\n          var order = _this5.fakeOrderData(symbol, 'MARKET', 'CANCEL', 1, quantity, 'COMPLETE');\n          _this5.emit('book_cancel', order);\n        },\n        error: function error(xhr, status, _error2) {\n          var order = _this5.fakeOrderData(symbol, 'MARKET', 'CANCEL', 1, quantity, 'FAILED');\n          _this5.emit('book_fail', order, _error2);\n        }\n      });\n    }\n\n    /**\n     * Get user account data over ajax\n     */\n\n  }, {\n    key: 'fetchUserAccount',\n    value: function fetchUserAccount() {\n      var _this6 = this;\n\n      if (!this._apikey || !this._ajax) return;\n\n      this._ajax.get(this.getSignedUrl('/v3/account'), {\n        type: 'json',\n        headers: { 'X-MBX-APIKEY': this._apikey },\n\n        success: function success(xhr, status, response) {\n          var balances = _this6.parseUserBalances(response);\n          _this6.emit('user_balances', balances);\n          _this6.emit('user_data', true);\n        },\n        error: function error(xhr, status, _error3) {\n          _this6.emit('user_fail', _error3);\n          _this6.stopUserStream();\n        }\n      });\n    }\n\n    /**\n     * Fetch current open orders\n     */\n\n  }, {\n    key: 'fetchOpenOrders',\n    value: function fetchOpenOrders() {\n      var _this7 = this;\n\n      if (!this._apikey || !this._ajax) return;\n\n      this._ajax.get(this.getSignedUrl('/v3/openOrders'), {\n        type: 'json',\n        headers: { 'X-MBX-APIKEY': this._apikey },\n\n        success: function success(xhr, status, response) {\n          response.forEach(function (o) {\n            return _this7.emit('user_order', _this7.parseOrderData(o));\n          });\n          _this7.emit('user_data', true);\n        },\n        error: function error(xhr, status, _error4) {\n          _this7.emit('user_fail', _error4);\n        }\n      });\n    }\n\n    /**\n     * Attempt to start a new user stream\n     * @param {boolean}  reconnect  Auto reconnect on close\n     */\n\n  }, {\n    key: 'initUserStream',\n    value: function initUserStream(reconnect) {\n      var _this8 = this;\n\n      if (!this._apikey || !this._ajax) return;\n\n      this.emit('user_init', Date.now());\n      this.stopUserStream();\n\n      this._ajax.post(this.getPublicUrl('/v1/userDataStream'), {\n        type: 'json',\n        headers: { 'X-MBX-APIKEY': this._apikey },\n\n        success: function success(xhr, status, response) {\n          var time = 1000 * 60 * 20; // 20 mins\n          var func = _this8.extendStreamKey.bind(_this8);\n          _this8._listenkey = String(response.listenKey || '').trim();\n          _this8.emit('user_listenkey', _this8._listenkey);\n          _this8.startUserStream(_this8._listenkey, reconnect);\n          _this8.startTimer('user', time, func, false);\n        },\n        error: function error(xhr, status, _error5) {\n          _this8.emit('user_fail', _error5);\n        }\n      });\n    }\n\n    /**\n     * Extend user stream listen key\n     */\n\n  }, {\n    key: 'extendStreamKey',\n    value: function extendStreamKey() {\n      var _this9 = this;\n\n      if (!this._apikey || !this._ajax) return;\n      if (!this._listenkey) return;\n\n      this._ajax.put(this.getPublicUrl('/v1/userDataStream', { listenKey: this._listenkey }), {\n        type: 'json',\n        headers: { 'X-MBX-APIKEY': this._apikey },\n\n        success: function success(xhr, status, response) {\n          _this9.emit('user_listenkey', _this9._listenkey);\n        }\n      });\n    }\n\n    /**\n     * Connect to a live user account data stream\n     * @param {string}   listenKey  Binance user stream listenKey\n     * @param {boolean}  reconnect  Auto reconnect on close\n     */\n\n  }, {\n    key: 'startUserStream',\n    value: function startUserStream(listenKey, reconnect) {\n      var _this10 = this;\n\n      this.setReconnect('user', reconnect || false);\n      this.emit('user_init', Date.now());\n\n      var ws = this.sockConnect('user', this._wssurl + '/ws/' + listenKey);\n      if (!ws) return this.emit('user_fail', 'Could not connect to user stream API endpoint.');\n\n      ws.addEventListener('open', function (e) {\n        _this10.emit('user_open', e);\n        _this10.fetchUserAccount();\n        _this10.fetchOpenOrders();\n      });\n\n      ws.addEventListener('error', function (e) {\n        _this10.emit('user_error', e);\n        _this10.stopTimer('user');\n      });\n\n      ws.addEventListener('close', function (e) {\n        _this10.emit('user_close', e);\n        _this10.stopTimer('user');\n        _this10.checkReconnect('user', function () {\n          return _this10.startUserStream(listenKey, reconnect);\n        });\n      });\n\n      ws.addEventListener('message', function (e) {\n        _this10.emit('user_data', true);\n        var data = JSON.parse(e.data || '{}') || {};\n\n        if (data.e === 'outboundAccountInfo') {\n          var balances = _this10.parseUserBalances(data);\n          return _this10.emit('user_balances', balances);\n        }\n        if (data.e === 'executionReport') {\n          var order = _this10.parseOrderData(data);\n          return _this10.emit('user_order', order);\n        }\n      });\n    }\n\n    /**\n     * Stop user stream\n     */\n\n  }, {\n    key: 'stopUserStream',\n    value: function stopUserStream() {\n      this.setReconnect('user', false);\n      this.stopTimer('user');\n      this.sockClose('user');\n    }\n\n    /**\n     * Connect to live ticker prices socket endpoint\n     * @param {boolean}  reconnect  Auto reconnect on close\n     */\n\n  }, {\n    key: 'startTickerStream',\n    value: function startTickerStream(reconnect) {\n      var _this11 = this;\n\n      this.setReconnect('ticker', reconnect || false);\n      this.emit('ticker_init', Date.now());\n\n      var ws = this.sockConnect('ticker', this._wssurl + '/ws/!ticker@arr');\n      if (!ws) return this.emit('ticker_fail', 'Could not connect to live ticker stream API endpoint.');\n\n      ws.addEventListener('open', function (e) {\n        _this11.emit('ticker_open', e);\n        _this11.startTickerTimer();\n      });\n\n      ws.addEventListener('error', function (e) {\n        _this11.emit('ticker_error', e);\n        _this11.stopTimer('ticker');\n      });\n\n      ws.addEventListener('close', function (e) {\n        _this11.emit('ticker_close', e);\n        _this11.stopTimer('ticker');\n        _this11.checkReconnect('ticker', function () {\n          return _this11.startTickerStream(reconnect);\n        });\n      });\n\n      ws.addEventListener('message', function (e) {\n        _this11.emit('ticker_data', true);\n\n        var list = JSON.parse(e.data || '[]') || [];\n        var count = list.length;\n\n        while (count--) {\n          var tkr = list[count];\n          var smb = _this11._symbols[tkr.s] || new __WEBPACK_IMPORTED_MODULE_1__symbol__[\"a\" /* default */](tkr.s);\n\n          smb.setName(_this11._names[smb.token]);\n          smb.setTickerData(tkr);\n\n          _this11.addAsset(smb.asset);\n          _this11._symbols[tkr.s] = smb;\n        }\n      });\n    }\n\n    /**\n     * Start ticker data timer\n     */\n\n  }, {\n    key: 'startTickerTimer',\n    value: function startTickerTimer() {\n      var _this12 = this;\n\n      this.stopTimer('ticker');\n      this.startTimer('ticker', 1000, function () {\n        var keys = Object.keys(_this12._symbols);\n        var count = keys.length;\n        var prices = [];\n\n        while (count--) {\n          prices.push(_this12._symbols[keys[count]]);\n        }_this12.emit('ticker_prices', prices);\n      }, true);\n    }\n\n    /**\n     * Stop price ticker\n     */\n\n  }, {\n    key: 'stopTickerStream',\n    value: function stopTickerStream() {\n      this.setReconnect('ticker', false);\n      this.stopTimer('ticker');\n      this.sockClose('ticker');\n    }\n\n    /**\n     * Start custom timer\n     * @param {string}    id        Timer id name\n     * @param {number}    time      Interval mils\n     * @param {function}  callback  Callback function\n     * @param {boolean}   init      Init callback\n     */\n\n  }, {\n    key: 'startTimer',\n    value: function startTimer(id, time, callback, init) {\n      this.stopTimer(id);\n      this._timers[id] = setInterval(callback, time);\n      if (init) callback();\n    }\n\n    /**\n     * Stop custom timer\n     * @param {string}  id  Timer id name\n     */\n\n  }, {\n    key: 'stopTimer',\n    value: function stopTimer(id) {\n      if (!id || !this._timers.hasOwnProperty(id)) return;\n      clearInterval(this._timers[id]);\n      delete this._timers[id];\n    }\n\n    /**\n     * Create a WebSocket connection\n     * @param {string}  id      Ref id name\n     * @param {string}  endpoint  Socket endpoint url\n     */\n\n  }, {\n    key: 'sockConnect',\n    value: function sockConnect(id, endpoint) {\n      if (!id || !endpoint) return;\n      this.emit('sock_init', endpoint);\n      this.sockClose(id);\n\n      if (!('WebSocket' in window)) {\n        this.emit('sock_fail', 'This web browser does not have WebSocket support.');\n        return false;\n      }\n      try {\n        var ws = new WebSocket(endpoint);\n        this._socks[id] = ws;\n        return ws;\n      } catch (err) {\n        var message = String(err.message || 'WebSocket endpoint connection failed for (' + endpoint + ').');\n        this.emit('sock_fail', message);\n        return false;\n      }\n    }\n\n    /**\n     * Close socket connection and remove it from the list\n     * @param {string}  id  Socket id name\n     */\n\n  }, {\n    key: 'sockClose',\n    value: function sockClose(id) {\n      if (!id || !this._socks.hasOwnProperty(id)) return;\n      this.emit('sock_close', id);\n      this._socks[id].close();\n      delete this._socks[id];\n    }\n\n    /**\n     * Close all active socket connections\n     */\n\n  }, {\n    key: 'sockCloseAll',\n    value: function sockCloseAll() {\n      var _this13 = this;\n\n      Object.keys(this._socks).forEach(function (id) {\n        return _this13.sockClose(id);\n      });\n    }\n  }]);\n\n  return Binance;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Binance);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///40\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _Symbol; });\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Ticker symbol class\r\n */\nvar _Symbol = function () {\n\n  // constructor\n  function _Symbol(symbol) {\n    _classCallCheck(this, _Symbol);\n\n    var regex = /^([A-Z]+)(BTC|ETH|BNB|USDT|USDC|TUSD|PAX|DAI)$/;\n    this.symbol = String(symbol || '').toUpperCase();\n    this.token = this.symbol.replace(regex, '$1');\n    this.asset = this.symbol.replace(regex, '$2');\n    this.name = this.token;\n    this.pair = this.token + '/' + this.asset;\n    this.route = '/symbol/' + this.symbol;\n    this.image = 'public/images/icons/default_.png';\n    this.open = 0;\n    this.high = 0;\n    this.low = 0;\n    this.close = 0;\n    this.change = 0;\n    this.percent = 0;\n    this.trades = 0;\n    this.tokenVolume = 0;\n    this.assetVolume = 0;\n    this.volatility = 0;\n    this.danger = 0;\n    this.time = 0;\n    this.history = [];\n    this.candles = [];\n    this.sign = '';\n    this.arrow = '';\n    this.style = '';\n    this.resolveImage();\n  }\n\n  /**\r\n   * Resolve token icon image\r\n   */\n\n\n  _createClass(_Symbol, [{\n    key: 'resolveImage',\n    value: function resolveImage() {\n      var _this = this;\n\n      var img = new Image();\n      img.addEventListener('load', function (e) {\n        _this.image = img.src;img = null;\n      });\n      img.src = 'public/images/icons/' + String(this.token).toLowerCase() + '_.png';\n    }\n\n    /**\r\n     * Set token name\r\n     * @param {string} name Token name\r\n     */\n\n  }, {\n    key: 'setName',\n    value: function setName(name) {\n      this.name = String(name || this.token);\n    }\n\n    /**\r\n     * Set latest ticker values\r\n     * @param {*} * Ticker values\r\n     */\n\n  }, {\n    key: 'setTickerData',\n    value: function setTickerData(ticker) {\n      this.open = Number(ticker.o || ticker.openPrice || 0);\n      this.high = Number(ticker.h || ticker.highPrice || 0);\n      this.low = Number(ticker.l || ticker.lowPrice || 0);\n      this.close = Number(ticker.c || ticker.lastPrice || 0);\n      this.change = Number(ticker.p || ticker.priceChange || 0);\n      this.percent = Number(ticker.P || ticker.priceChangePercent || 0);\n      this.trades = Number(ticker.n || ticker.count || 0);\n      this.tokenVolume = Number(ticker.v || ticker.volume || 0);\n      this.assetVolume = Number(ticker.q || ticker.quoteVolume || 0);\n      this.sign = this.percent > 0 ? '+' : '';\n      this.arrow = this.percent > 0 ? '▲' : '▼';\n      this.calcVolatility();\n      this.calcDanger();\n      this.calcHistory();\n      this.calcStyle();\n    }\n\n    /**\r\n     * Get symbol data with merged data\r\n     * @param {object}  merge  Optional object\r\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData(merge) {\n      var volume = this.assetVolume;\n      var symbol = this.symbol,\n          token = this.token,\n          asset = this.asset,\n          name = this.name,\n          pair = this.pair,\n          route = this.route,\n          image = this.image,\n          close = this.close;\n\n      return Object.assign({ symbol: symbol, token: token, asset: asset, name: name, pair: pair, route: route, image: image, close: close, volume: volume }, merge);\n    }\n\n    /**\r\n     * Cleanup stored price data\r\n     */\n\n  }, {\n    key: 'flushData',\n    value: function flushData() {\n      this.history = [];\n      this.candles = [];\n    }\n\n    /**\r\n     * Calculate style class based on percent\r\n     */\n\n  }, {\n    key: 'calcStyle',\n    value: function calcStyle() {\n      this.style = '';\n      if (this.percent > 0) this.style = 'gain';\n      if (this.percent < 0) this.style = 'loss';\n    }\n\n    /**\r\n     * Calculate 24h high/low volatility score\r\n     */\n\n  }, {\n    key: 'calcVolatility',\n    value: function calcVolatility() {\n      var change = this.high - this.low;\n      this.volatility = this.high ? change / this.high * 100.0 : 0.0;\n    }\n\n    /**\r\n     * Calculate possible pump/dump danger score based on cached price action from recent few hours\r\n     */\n\n  }, {\n    key: 'calcDanger',\n    value: function calcDanger() {\n      var now = Date.now();\n      var wait = 300; // secs to wait\n      var hrs = 3; // hours to store prices\n      var secs = (now - this.time) / 1000;\n      var total = 60 * 60 * hrs / wait;\n\n      if (secs < wait) return;\n      this.candles.push(this.close);\n      this.candles.splice(0, this.candles.length - total);\n\n      var idx = this.candles.length;\n      var min = this.candles[0];\n      var max = this.candles[0];\n\n      while (idx--) {\n        var price = this.candles[idx];\n        min = price < min ? price : min;\n        max = price > max ? price : max;\n      }\n      var change = max - min;\n      this.danger = max ? change / max * 100.0 : 0.0;\n      this.time = now;\n    }\n\n    /**\r\n     * Manages a history list with the latest close price\r\n     */\n\n  }, {\n    key: 'calcHistory',\n    value: function calcHistory() {\n      if (!this.history.length) this.fakeHistory();\n      this.history.push(this.close);\n      this.history.splice(0, this.history.length - 30);\n    }\n\n    /**\r\n     * Come up with some fake history prices to fill in the initial line chart\r\n     */\n\n  }, {\n    key: 'fakeHistory',\n    value: function fakeHistory() {\n      var num = this.close * 0.0002;\n      var min = -Math.abs(num);\n      var max = Math.abs(num);\n      this.history = [];\n\n      for (var i = 0; i < 30; ++i) {\n        var rand = Math.random() * (max - min) + min;\n        this.history.push(this.close + rand);\n      }\n    }\n  }]);\n\n  return _Symbol;\n}();\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///41\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__utils__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Price alarms helper class\r\n */\n\n\n\n\nvar Alarms = function (_Bus) {\n  _inherits(Alarms, _Bus);\n\n  /**\r\n   * Constructor\r\n   */\n  function Alarms(options) {\n    _classCallCheck(this, Alarms);\n\n    var _this = _possibleConstructorReturn(this, (Alarms.__proto__ || Object.getPrototypeOf(Alarms)).call(this));\n\n    _this._alarms = [];\n    _this._options = Object.assign({\n      // key used for storage\n      key: 'alarms_data'\n      // ...\n    }, options);\n    return _this;\n  }\n\n  /**\r\n   * Save current alarms data to store and emit list\r\n   */\n\n\n  _createClass(Alarms, [{\n    key: 'saveData',\n    value: function saveData() {\n      this.emit('update', this._alarms);\n      __WEBPACK_IMPORTED_MODULE_1__store__[\"a\" /* default */].setData(this._options.key, this._alarms);\n    }\n\n    /**\r\n     * Load saved history data from store\r\n     */\n\n  }, {\n    key: 'loadData',\n    value: function loadData() {\n      var data = __WEBPACK_IMPORTED_MODULE_1__store__[\"a\" /* default */].getData(this._options.key);\n      if (!data || !Array.isArray(data)) return;\n      this._alarms = data;\n      this.emit('update', this._alarms);\n    }\n\n    /**\r\n     * Get count of active alarms for a symbol\r\n     * @param {string}  symbol  Pair symbol string\r\n     */\n\n  }, {\n    key: 'getCount',\n    value: function getCount(symbol) {\n      return this._alarms.filter(function (a) {\n        return a.symbol === symbol && a.active;\n      }).length;\n    }\n\n    /**\r\n     * Adds an alarm for a pair\r\n     * @param {object}  pairData  Pair data object from binance socket class\r\n     * @param {number}  price     Alarm price\r\n     */\n\n  }, {\n    key: 'add',\n    value: function add(pairData, price) {\n      if (!pairData || !pairData.symbol || !pairData.close) return false;\n      var symbol = pairData.symbol,\n          token = pairData.token,\n          asset = pairData.asset,\n          pair = pairData.pair,\n          image = pairData.image,\n          close = pairData.close;\n\n\n      close = parseFloat(close) || 0; // current price\n      price = parseFloat(price) || 0; // alarm price\n\n      if (!close || !price || close === price) return false;\n      if (this.find(symbol, price).length) return false;\n\n      var id = __WEBPACK_IMPORTED_MODULE_2__utils___default.a.randString(20);\n      var time = Date.now();\n      var active = true;\n      var arrow = price > close ? '▲' : '▼';\n      var sign = price > close ? '≥' : '≤';\n      var check = price > close ? 'gain' : 'loss';\n      var alarm = { id: id, time: time, active: active, arrow: arrow, sign: sign, check: check, symbol: symbol, token: token, asset: asset, pair: pair, image: image, close: close, price: price };\n\n      this._alarms.push(alarm);\n      this.saveData();\n      return true;\n    }\n\n    /**\r\n     * Find existing alarms for a symbol and price\r\n     * @param {string}  symbol  Pair symbol string\r\n     * @param {number}  price   Alarm price\r\n     */\n\n  }, {\n    key: 'find',\n    value: function find(symbol, price) {\n      price = parseFloat(price) || 0;\n      return this._alarms.filter(function (a) {\n        return a.symbol === symbol && a.price === price;\n      });\n    }\n\n    /**\r\n     * Remove an alarm from the list by ID\r\n     * @param {string}  id  Unique alarm ID\r\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(id) {\n      if (!id || typeof id !== 'string') return;\n      this._alarms = this._alarms.filter(function (a) {\n        return a.id !== id;\n      });\n      this.saveData();\n    }\n\n    /**\r\n     * Toggle status for an alarm by ID\r\n     * @param {string}   id      Unique alarm ID\r\n     * @param {boolean}  active  Alarm active status\r\n     */\n\n  }, {\n    key: 'toggle',\n    value: function toggle(id, active) {\n      if (!id || typeof id !== 'string') return;\n      if (typeof active !== 'boolean') return;\n\n      this._alarms.forEach(function (a) {\n        if (a.id !== id) return;\n        a.active = active;\n      });\n      this.saveData();\n    }\n\n    /**\r\n     * Flush all alarms\r\n     */\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this._alarms = [];\n      this.saveData();\n    }\n\n    /**\r\n     * Check price of a symbol against all saved alarms\r\n     * @param {string}   symbol    Pair symbol string\r\n     * @param {number}   close     Current pair close price\r\n     * @param {function} callback  Callback handler\r\n     */\n\n  }, {\n    key: 'check',\n    value: function check(symbol, close, callback) {\n      var count = 0;\n\n      for (var i = 0; i < this._alarms.length; ++i) {\n        var a = this._alarms[i];\n        var price = Number(a.price || 0);\n\n        if (a.symbol !== symbol || !a.active) continue;\n        if (a.check === 'loss' && close > price) continue;\n        if (a.check === 'gain' && close < price) continue;\n\n        var diff = 'equal to';\n        if (close > price) diff = 'more than';\n        if (close < price) diff = 'less than';\n\n        var closeFixed = Number(close).toFixed(8);\n        var priceFixed = Number(price).toFixed(8);\n\n        var title = a.symbol + ' price ' + a.arrow + ' ' + closeFixed + ' ' + a.asset;\n        var info = a.symbol + ' is now ' + diff + ' your alarm price of ' + priceFixed + ' ' + a.asset + '.';\n\n        callback(title, info, a);\n        a.active = false;\n        count++;\n      }\n      // save alarms data if alarms were triggered\n      if (count) this.saveData();\n    }\n  }]);\n\n  return Alarms;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Alarms);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__utils__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Handles saving data to a history list\r\n */\n\n\n\n\nvar History = function (_Bus) {\n  _inherits(History, _Bus);\n\n  /**\r\n   * Constructor\r\n   */\n  function History(options) {\n    _classCallCheck(this, History);\n\n    var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this));\n\n    _this._alarms = [];\n    _this._sto = null;\n    _this._options = Object.assign({\n      // key used for storage\n      key: 'history_data',\n      // auto remove entries past this value (secs)\n      expire: 1800,\n      // total number of entries to keep in list\n      total: 20\n      // ...\n    }, options);\n    return _this;\n  }\n\n  /**\r\n   * Save current history data to store and emit list\r\n   */\n\n\n  _createClass(History, [{\n    key: 'saveData',\n    value: function saveData() {\n      this._autoClean();\n      this.emit('update', this._alarms);\n      __WEBPACK_IMPORTED_MODULE_1__store__[\"a\" /* default */].setData(this._options.key, this._alarms);\n      if (this._sto) clearTimeout(this._sto);\n      this._sto = setTimeout(this.saveData.bind(this), 30000);\n    }\n\n    /**\r\n     * Load saved history data from store\r\n     */\n\n  }, {\n    key: 'loadData',\n    value: function loadData() {\n      var data = __WEBPACK_IMPORTED_MODULE_1__store__[\"a\" /* default */].getData(this._options.key);\n      if (!data || !Array.isArray(data)) return;\n      this._alarms = data;\n      this.saveData();\n    }\n\n    /**\r\n     * Add data to history\r\n     * @param {string}  title  Title string\r\n     * @param {string}  info   Info string\r\n     * @param {string}  icon   Icon image URL\r\n     */\n\n  }, {\n    key: 'add',\n    value: function add(title, info, icon) {\n      if (!title || !info) return;\n      var id = __WEBPACK_IMPORTED_MODULE_2__utils___default.a.randString(20);\n      var time = Date.now();\n      var isNew = true;\n      this._alarms.unshift({ id: id, time: time, isNew: isNew, title: title, info: info, icon: icon });\n      this.saveData();\n    }\n\n    /**\r\n     * Remove an entry from the list by ID\r\n     * @param {string}  id  Unique entry ID\r\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove(id) {\n      if (!id || typeof id !== 'string') return;\n      this._alarms = this._alarms.filter(function (e) {\n        return e.id !== id;\n      });\n      this.saveData();\n    }\n\n    /**\r\n     * Reset new entry indicators\r\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._alarms.forEach(function (e) {\n        e.isNew = false;\n      });\n      this.saveData();\n    }\n\n    /**\r\n     * Remove all entries from the list\r\n     */\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this._alarms = [];\n      this.saveData();\n    }\n\n    /**\r\n     * Cleanup the list and emit changes\r\n     */\n\n  }, {\n    key: '_autoClean',\n    value: function _autoClean() {\n      var time = Date.now();\n      var expire = parseInt(this._options.expire) | 0;\n      var total = parseInt(this._options.total) | 0;\n      if (expire) this._alarms = this._alarms.filter(function (e) {\n        return (time - e.time) / 1000 < expire;\n      });\n      if (total) this._alarms = this._alarms.slice(0, total);\n    }\n  }]);\n\n  return History;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (History);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9oaXN0b3J5LmpzPzE4NTAiXSwibmFtZXMiOlsiSGlzdG9yeSIsIm9wdGlvbnMiLCJfYWxhcm1zIiwiX3N0byIsIl9vcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwia2V5IiwiZXhwaXJlIiwidG90YWwiLCJfYXV0b0NsZWFuIiwiZW1pdCIsInN0b3JlIiwic2V0RGF0YSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJzYXZlRGF0YSIsImJpbmQiLCJkYXRhIiwiZ2V0RGF0YSIsIkFycmF5IiwiaXNBcnJheSIsInRpdGxlIiwiaW5mbyIsImljb24iLCJpZCIsInV0aWxzIiwicmFuZFN0cmluZyIsInRpbWUiLCJEYXRlIiwibm93IiwiaXNOZXciLCJ1bnNoaWZ0IiwiZmlsdGVyIiwiZSIsImZvckVhY2giLCJwYXJzZUludCIsInNsaWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7O0FBR0E7QUFDQTtBQUNBOztJQUVxQkEsTzs7O0FBRW5COzs7QUFHQSxtQkFBYUMsT0FBYixFQUF1QjtBQUFBOztBQUFBOztBQUVyQixVQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNBLFVBQUtDLElBQUwsR0FBWSxJQUFaO0FBQ0EsVUFBS0MsUUFBTCxHQUFnQkMsT0FBT0MsTUFBUCxDQUFlO0FBQzdCO0FBQ0FDLFdBQUssY0FGd0I7QUFHN0I7QUFDQUMsY0FBUSxJQUpxQjtBQUs3QjtBQUNBQyxhQUFPO0FBQ1A7QUFQNkIsS0FBZixFQVFiUixPQVJhLENBQWhCO0FBSnFCO0FBYXRCOztBQUVEOzs7Ozs7OytCQUdXO0FBQ1QsV0FBS1MsVUFBTDtBQUNBLFdBQUtDLElBQUwsQ0FBVyxRQUFYLEVBQXFCLEtBQUtULE9BQTFCO0FBQ0FVLE1BQUEsdURBQUFBLENBQU1DLE9BQU4sQ0FBZSxLQUFLVCxRQUFMLENBQWNHLEdBQTdCLEVBQWtDLEtBQUtMLE9BQXZDO0FBQ0EsVUFBSyxLQUFLQyxJQUFWLEVBQWlCVyxhQUFjLEtBQUtYLElBQW5CO0FBQ2pCLFdBQUtBLElBQUwsR0FBWVksV0FBWSxLQUFLQyxRQUFMLENBQWNDLElBQWQsQ0FBb0IsSUFBcEIsQ0FBWixFQUF3QyxLQUF4QyxDQUFaO0FBQ0Q7O0FBRUQ7Ozs7OzsrQkFHVztBQUNULFVBQUlDLE9BQU8sdURBQUFOLENBQU1PLE9BQU4sQ0FBZSxLQUFLZixRQUFMLENBQWNHLEdBQTdCLENBQVg7QUFDQSxVQUFLLENBQUNXLElBQUQsSUFBUyxDQUFDRSxNQUFNQyxPQUFOLENBQWVILElBQWYsQ0FBZixFQUF1QztBQUN2QyxXQUFLaEIsT0FBTCxHQUFlZ0IsSUFBZjtBQUNBLFdBQUtGLFFBQUw7QUFDRDs7QUFFRDs7Ozs7Ozs7O3dCQU1LTSxLLEVBQU9DLEksRUFBTUMsSSxFQUFPO0FBQ3ZCLFVBQUssQ0FBQ0YsS0FBRCxJQUFVLENBQUNDLElBQWhCLEVBQXVCO0FBQ3ZCLFVBQUlFLEtBQVEsOENBQUFDLENBQU1DLFVBQU4sQ0FBa0IsRUFBbEIsQ0FBWjtBQUNBLFVBQUlDLE9BQVFDLEtBQUtDLEdBQUwsRUFBWjtBQUNBLFVBQUlDLFFBQVEsSUFBWjtBQUNBLFdBQUs3QixPQUFMLENBQWE4QixPQUFiLENBQXNCLEVBQUVQLE1BQUYsRUFBTUcsVUFBTixFQUFZRyxZQUFaLEVBQW1CVCxZQUFuQixFQUEwQkMsVUFBMUIsRUFBZ0NDLFVBQWhDLEVBQXRCO0FBQ0EsV0FBS1IsUUFBTDtBQUNEOztBQUVEOzs7Ozs7OzJCQUlRUyxFLEVBQUs7QUFDWCxVQUFLLENBQUNBLEVBQUQsSUFBTyxPQUFPQSxFQUFQLEtBQWMsUUFBMUIsRUFBcUM7QUFDckMsV0FBS3ZCLE9BQUwsR0FBZSxLQUFLQSxPQUFMLENBQWErQixNQUFiLENBQXFCO0FBQUEsZUFBS0MsRUFBRVQsRUFBRixLQUFTQSxFQUFkO0FBQUEsT0FBckIsQ0FBZjtBQUNBLFdBQUtULFFBQUw7QUFDRDs7QUFFRDs7Ozs7OzRCQUdRO0FBQ04sV0FBS2QsT0FBTCxDQUFhaUMsT0FBYixDQUFzQixhQUFLO0FBQUVELFVBQUVILEtBQUYsR0FBVSxLQUFWO0FBQWtCLE9BQS9DO0FBQ0EsV0FBS2YsUUFBTDtBQUNEOztBQUVEOzs7Ozs7NEJBR1E7QUFDTixXQUFLZCxPQUFMLEdBQWUsRUFBZjtBQUNBLFdBQUtjLFFBQUw7QUFDRDs7QUFFRDs7Ozs7O2lDQUdhO0FBQ1gsVUFBSVksT0FBT0MsS0FBS0MsR0FBTCxFQUFYO0FBQ0EsVUFBSXRCLFNBQVM0QixTQUFVLEtBQUtoQyxRQUFMLENBQWNJLE1BQXhCLElBQW1DLENBQWhEO0FBQ0EsVUFBSUMsUUFBUTJCLFNBQVUsS0FBS2hDLFFBQUwsQ0FBY0ssS0FBeEIsSUFBa0MsQ0FBOUM7QUFDQSxVQUFLRCxNQUFMLEVBQWMsS0FBS04sT0FBTCxHQUFlLEtBQUtBLE9BQUwsQ0FBYStCLE1BQWIsQ0FBcUI7QUFBQSxlQUFPLENBQUVMLE9BQU9NLEVBQUVOLElBQVgsSUFBb0IsSUFBdEIsR0FBK0JwQixNQUFwQztBQUFBLE9BQXJCLENBQWY7QUFDZCxVQUFLQyxLQUFMLEVBQWEsS0FBS1AsT0FBTCxHQUFlLEtBQUtBLE9BQUwsQ0FBYW1DLEtBQWIsQ0FBb0IsQ0FBcEIsRUFBdUI1QixLQUF2QixDQUFmO0FBQ2Q7Ozs7RUEzRmtDLHFEOzt5REFBaEJULE8iLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSGFuZGxlcyBzYXZpbmcgZGF0YSB0byBhIGhpc3RvcnkgbGlzdFxyXG4gKi9cclxuaW1wb3J0IEJ1cyBmcm9tICcuL2J1cyc7XHJcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJztcclxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlzdG9yeSBleHRlbmRzIEJ1cyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5fYWxhcm1zID0gW107XHJcbiAgICB0aGlzLl9zdG8gPSBudWxsO1xyXG4gICAgdGhpcy5fb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oIHtcclxuICAgICAgLy8ga2V5IHVzZWQgZm9yIHN0b3JhZ2VcclxuICAgICAga2V5OiAnaGlzdG9yeV9kYXRhJyxcclxuICAgICAgLy8gYXV0byByZW1vdmUgZW50cmllcyBwYXN0IHRoaXMgdmFsdWUgKHNlY3MpXHJcbiAgICAgIGV4cGlyZTogMTgwMCxcclxuICAgICAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgdG8ga2VlcCBpbiBsaXN0XHJcbiAgICAgIHRvdGFsOiAyMCxcclxuICAgICAgLy8gLi4uXHJcbiAgICB9LCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTYXZlIGN1cnJlbnQgaGlzdG9yeSBkYXRhIHRvIHN0b3JlIGFuZCBlbWl0IGxpc3RcclxuICAgKi9cclxuICBzYXZlRGF0YSgpIHtcclxuICAgIHRoaXMuX2F1dG9DbGVhbigpO1xyXG4gICAgdGhpcy5lbWl0KCAndXBkYXRlJywgdGhpcy5fYWxhcm1zICk7XHJcbiAgICBzdG9yZS5zZXREYXRhKCB0aGlzLl9vcHRpb25zLmtleSwgdGhpcy5fYWxhcm1zICk7XHJcbiAgICBpZiAoIHRoaXMuX3N0byApIGNsZWFyVGltZW91dCggdGhpcy5fc3RvICk7XHJcbiAgICB0aGlzLl9zdG8gPSBzZXRUaW1lb3V0KCB0aGlzLnNhdmVEYXRhLmJpbmQoIHRoaXMgKSwgMzAwMDAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWQgc2F2ZWQgaGlzdG9yeSBkYXRhIGZyb20gc3RvcmVcclxuICAgKi9cclxuICBsb2FkRGF0YSgpIHtcclxuICAgIGxldCBkYXRhID0gc3RvcmUuZ2V0RGF0YSggdGhpcy5fb3B0aW9ucy5rZXkgKTtcclxuICAgIGlmICggIWRhdGEgfHwgIUFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHJldHVybjtcclxuICAgIHRoaXMuX2FsYXJtcyA9IGRhdGE7XHJcbiAgICB0aGlzLnNhdmVEYXRhKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgZGF0YSB0byBoaXN0b3J5XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICB0aXRsZSAgVGl0bGUgc3RyaW5nXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9ICBpbmZvICAgSW5mbyBzdHJpbmdcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gIGljb24gICBJY29uIGltYWdlIFVSTFxyXG4gICAqL1xyXG4gIGFkZCggdGl0bGUsIGluZm8sIGljb24gKSB7XHJcbiAgICBpZiAoICF0aXRsZSB8fCAhaW5mbyApIHJldHVybjtcclxuICAgIGxldCBpZCAgICA9IHV0aWxzLnJhbmRTdHJpbmcoIDIwICk7XHJcbiAgICBsZXQgdGltZSAgPSBEYXRlLm5vdygpO1xyXG4gICAgbGV0IGlzTmV3ID0gdHJ1ZTtcclxuICAgIHRoaXMuX2FsYXJtcy51bnNoaWZ0KCB7IGlkLCB0aW1lLCBpc05ldywgdGl0bGUsIGluZm8sIGljb24gfSApO1xyXG4gICAgdGhpcy5zYXZlRGF0YSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGFuIGVudHJ5IGZyb20gdGhlIGxpc3QgYnkgSURcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gIGlkICBVbmlxdWUgZW50cnkgSURcclxuICAgKi9cclxuICByZW1vdmUoIGlkICkge1xyXG4gICAgaWYgKCAhaWQgfHwgdHlwZW9mIGlkICE9PSAnc3RyaW5nJyApIHJldHVybjtcclxuICAgIHRoaXMuX2FsYXJtcyA9IHRoaXMuX2FsYXJtcy5maWx0ZXIoIGUgPT4gZS5pZCAhPT0gaWQgKTtcclxuICAgIHRoaXMuc2F2ZURhdGEoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IG5ldyBlbnRyeSBpbmRpY2F0b3JzXHJcbiAgICovXHJcbiAgcmVzZXQoKSB7XHJcbiAgICB0aGlzLl9hbGFybXMuZm9yRWFjaCggZSA9PiB7IGUuaXNOZXcgPSBmYWxzZTsgfSApO1xyXG4gICAgdGhpcy5zYXZlRGF0YSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIGFsbCBlbnRyaWVzIGZyb20gdGhlIGxpc3RcclxuICAgKi9cclxuICBmbHVzaCgpIHtcclxuICAgIHRoaXMuX2FsYXJtcyA9IFtdO1xyXG4gICAgdGhpcy5zYXZlRGF0YSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xlYW51cCB0aGUgbGlzdCBhbmQgZW1pdCBjaGFuZ2VzXHJcbiAgICovXHJcbiAgX2F1dG9DbGVhbigpIHtcclxuICAgIGxldCB0aW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGxldCBleHBpcmUgPSBwYXJzZUludCggdGhpcy5fb3B0aW9ucy5leHBpcmUgKSB8IDA7XHJcbiAgICBsZXQgdG90YWwgPSBwYXJzZUludCggdGhpcy5fb3B0aW9ucy50b3RhbCApIHwgMDtcclxuICAgIGlmICggZXhwaXJlICkgdGhpcy5fYWxhcm1zID0gdGhpcy5fYWxhcm1zLmZpbHRlciggZSA9PiAoICggdGltZSAtIGUudGltZSApIC8gMTAwMCApIDwgZXhwaXJlICk7XHJcbiAgICBpZiAoIHRvdGFsICkgdGhpcy5fYWxhcm1zID0gdGhpcy5fYWxhcm1zLnNsaWNlKCAwLCB0b3RhbCApO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9oaXN0b3J5LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__utils__);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Push notifications and custom alarms handler class\n */\n\n\nvar Notify = function () {\n\n  // constructor\n  function Notify(options) {\n    _classCallCheck(this, Notify);\n\n    this._queue = [];\n    this._notices = [];\n    this._options = {\n      // toggle notifications\n      enabled: true,\n      // notifications duration (secs)\n      duration: 10,\n      // toggle notification sound\n      sound: true,\n      // volume of notification sound ( 0 - 1 )\n      volume: 1,\n      // audio file to play on with notifications\n      audio: 'public/audio/audio_3.mp3',\n      // default notification image file\n      image: 'public/images/notification.png'\n    };\n    this.setOptions(options);\n    this._watchQueue();\n  }\n\n  // merge new options\n\n\n  _createClass(Notify, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this._options, options);\n    }\n\n    // add a notification message to the queue\n\n  }, {\n    key: 'add',\n    value: function add(title, body, icon, link) {\n      if (!title || !body) return;\n      var id = __WEBPACK_IMPORTED_MODULE_0__utils___default.a.randString(20);\n      var time = Date.now();\n      icon = String(icon || this._options.image);\n      this._queue = this._queue.filter(function (n) {\n        return n.title !== title;\n      });\n      this._queue.push({ id: id, time: time, title: title, body: body, icon: icon, link: link });\n    }\n\n    // flush the queue\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this._queue = [];\n    }\n\n    // check if notification is supported\n\n  }, {\n    key: 'hasSupport',\n    value: function hasSupport() {\n      return window && 'Notification' in window;\n    }\n\n    // check if Notification is possible\n\n  }, {\n    key: 'canNotify',\n    value: function canNotify() {\n      if (!this.hasSupport()) return false;\n      if (Notification.permission !== 'granted') return false;\n      return true;\n    }\n\n    // ask for browser notifications permission\n\n  }, {\n    key: 'permission',\n    value: function permission(callback) {\n      if (!this.hasSupport()) return;\n      Notification.requestPermission().then(function (response) {\n        if (typeof callback === 'function') callback(response);\n      });\n    }\n\n    // play notification sound if enabled\n\n  }, {\n    key: 'playSound',\n    value: function playSound() {\n      if (this._options.sound) {\n        __WEBPACK_IMPORTED_MODULE_0__utils___default.a.playAudio(this._options.audio, this._options.volume);\n      }\n    }\n\n    // limit visible notifications to a fixed number\n\n  }, {\n    key: '_cleanupNotifications',\n    value: function _cleanupNotifications() {\n      var limit = 3;\n      if (this._notices.length <= limit) return;\n      for (var i = 0; i < this._notices.length - limit; ++i) {\n        this._notices[i].close(); // trigger close event\n      }\n    }\n\n    // create notifications from the queue on a timer\n\n  }, {\n    key: '_watchQueue',\n    value: function _watchQueue() {\n      var _this = this;\n\n      this._cleanupNotifications();\n      setTimeout(this._watchQueue.bind(this), 500);\n      if (!this._options.enabled || !this._queue.length) return;\n      if (!this.canNotify()) return;\n\n      // create new notification\n\n      var _queue$shift = this._queue.shift(),\n          id = _queue$shift.id,\n          time = _queue$shift.time,\n          title = _queue$shift.title,\n          body = _queue$shift.body,\n          icon = _queue$shift.icon,\n          link = _queue$shift.link;\n\n      var a = new Notification(title, { body: body, icon: icon, tag: id });\n\n      // auto-close on optional duration\n      var ttl = parseInt(this._options.duration);\n      if (ttl) setTimeout(function () {\n        return a.close();\n      }, 1000 * ttl);\n\n      // keep track of visible notifications\n      a.addEventListener('show', function (e) {\n        if (!e || !e.target || !e.target.tag) return;\n        _this.playSound();\n      });\n      // remove notification from local array when it closes\n      a.addEventListener('close', function (e) {\n        if (!e || !e.target || !e.target.tag) return;\n        _this._notices = _this._notices.filter(function (a) {\n          return a.tag !== e.target.tag;\n        });\n      });\n      // convert url string to clickable link\n      if (link && typeof link === 'string') {\n        a.addEventListener('click', function (e) {\n          e.preventDefault();window.open(link, '_blank');\n        });\n      }\n      // custom click handler\n      if (link && typeof link === 'function') {\n        a.addEventListener('click', link);\n      }\n      // add to tracker\n      this._notices.push(a);\n    }\n  }]);\n\n  return Notify;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Notify);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__twitter__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__store__ = __webpack_require__(2);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Twitter news handler class\r\n */\n\n\n\n\nvar News = function (_Bus) {\n  _inherits(News, _Bus);\n\n  /**\r\n   * Constructor\r\n   */\n  function News() {\n    _classCallCheck(this, News);\n\n    var _this = _possibleConstructorReturn(this, (News.__proto__ || Object.getPrototypeOf(News)).call(this));\n\n    _this._ajax = null;\n    _this._accountsKey = 'news_accounts_data';\n    _this._tweetsKey = 'news_tweets_data';\n    _this._handlers = [];\n    _this._tweets = [];\n    _this._blacklist = [];\n    _this._counter = 0;\n    _this._interval = null;\n    _this._options = {\n      enabled: true, // aut re-fetch news on a timer\n      interval: 5, // how often to try fetching from each source (secs)\n      delay: 300, // how long to wait before fetching again from each source (secs)\n      days: 1, // only show entries posted within this number of days\n      tweets: 1, // how many tweets to fetch at once from each source\n      total: 100 // max number of news entries to store in list\n    };\n    _this.tweetsHandler = _this.tweetsHandler.bind(_this);\n    _this.setupTimer();\n    return _this;\n  }\n\n  /**\r\n   * Set ajax module reference to use for requests\r\n   * @param {object}  ajax  Ajax class instance\r\n   */\n\n\n  _createClass(News, [{\n    key: 'useAjax',\n    value: function useAjax(ajax) {\n      this._ajax = ajax;\n    }\n\n    /**\r\n     * Update options\r\n     * @param {object}  options  Options object\r\n     */\n\n  }, {\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this._options, options);\n      this.setupTimer();\n      this.updateHandlers();\n      this.filterTweets();\n    }\n\n    /**\r\n     * Load saved accounts list from store\r\n     */\n\n  }, {\n    key: 'loadAccounts',\n    value: function loadAccounts() {\n      var accounts = __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].getData(this._accountsKey);\n      if (!Array.isArray(accounts) || !accounts.length) return;\n      this.importAccounts(accounts, true);\n    }\n\n    /**\r\n     * Save accounts list to store\r\n     */\n\n  }, {\n    key: 'saveAccounts',\n    value: function saveAccounts() {\n      var accounts = this._handlers.map(function (tw) {\n        return tw.handle;\n      });\n      __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].setData(this._accountsKey, accounts);\n      this.emit('handlers', this._handlers);\n    }\n\n    /**\r\n     * Load list of twitter handles\r\n     * @param {array}    accounts  List of twitter handle string names\r\n     * @param {boolean}  reset     Reset current list of loaded handlers\r\n     * @param {boolean}  save      Save list of account after importing\r\n     */\n\n  }, {\n    key: 'importAccounts',\n    value: function importAccounts(accounts, reset, save) {\n      accounts = Array.isArray(accounts) ? accounts : [];\n      var count = 0;\n\n      // reset current list, if a new list is available\n      if (reset && accounts.length) this._handlers = [];\n      // import new accounts list\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = accounts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var handle = _step.value;\n          this.trackAccount(handle) && count++;\n        } // save accounts back to store, or just emit loaded list\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (save) {\n        this.saveAccounts();\n      } else {\n        this.emit('handlers', this._handlers);\n      }\n\n      return count;\n    }\n\n    /**\r\n     * Checks if a handle is already being tracked\r\n     * @param {string}  handle  Twitter handle\r\n     */\n\n  }, {\n    key: 'tracking',\n    value: function tracking(handle) {\n      if (!handle || typeof handle !== 'string') return false;\n      return this._handlers.filter(function (tw) {\n        return tw.handle === handle;\n      }).length ? true : false;\n    }\n\n    /**\r\n     * Start tracking a new twitter account\r\n     * @param {string}   handle  Twitter handle\r\n     * @param {boolean}  fetch   Fetch tweets after adding\r\n     * @param {boolean}  save    Save accounts after adding\r\n     */\n\n  }, {\n    key: 'trackAccount',\n    value: function trackAccount(handle, fetch, save) {\n      if (!handle || typeof handle !== 'string') return false;\n      if (this.tracking(handle)) return false;\n      // create new handler, add to list and update options\n      var tw = new __WEBPACK_IMPORTED_MODULE_1__twitter__[\"a\" /* default */](handle);\n      this.updateHandlers(tw);\n      this._handlers.push(tw);\n      // fetch tweets now if needed and emit event\n      if (fetch) tw.fetchTweets(this._ajax, this.tweetsHandler);\n      if (save) this.saveAccounts();\n      return true;\n    }\n\n    /**\r\n     * Stop tracking a twitter account\r\n     * @param {string}  handle  Twitter handle\r\n     */\n\n  }, {\n    key: 'untrackAccount',\n    value: function untrackAccount(handle) {\n      if (!handle || typeof handle !== 'string') return false;\n      // get handler that is being removed from the list, if it exists\n      var tw = this._handlers.filter(function (tw) {\n        return tw.handle === handle;\n      }).shift();\n      if (!tw) return true;\n      // remove handler from the list and emit events\n      this._handlers = this._handlers.filter(function (tw) {\n        return tw.handle !== handle;\n      });\n      this._tweets = this._tweets.filter(function (t) {\n        return t.handle !== handle;\n      });\n      this.saveAccounts();\n      this.saveTweets();\n      return true;\n    }\n\n    /**\r\n     * Update options for each Twitter handler\r\n     */\n\n  }, {\n    key: 'updateHandlers',\n    value: function updateHandlers(tw) {\n      var fetchDelay = parseInt(this._options.delay) || 300;\n      var limitCount = parseInt(this._options.tweets) || 1;\n      if (tw instanceof __WEBPACK_IMPORTED_MODULE_1__twitter__[\"a\" /* default */]) return tw.setOptions({ fetchDelay: fetchDelay, limitCount: limitCount });\n      this._handlers.forEach(function (tw) {\n        return tw.setOptions({ fetchDelay: fetchDelay, limitCount: limitCount });\n      });\n    }\n\n    /**\r\n     * Load cached tweets from store\r\n     */\n\n  }, {\n    key: 'loadTweets',\n    value: function loadTweets() {\n      var tweets = __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].getData(this._tweetsKey);\n      if (!Array.isArray(tweets) || !tweets.length) return;\n      this._tweets = tweets;\n      this.resetTweets();\n      this.filterTweets();\n      this.saveTweets();\n    }\n\n    /**\r\n     * Save current tweets to store\r\n     */\n\n  }, {\n    key: 'saveTweets',\n    value: function saveTweets() {\n      __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].setData(this._tweetsKey, this._tweets);\n      this.emit('tweets', this._tweets);\n    }\n\n    /**\r\n     * Reset new entries indicator\r\n     */\n\n  }, {\n    key: 'resetTweets',\n    value: function resetTweets() {\n      this._tweets.forEach(function (t) {\n        t.isNew = false;\n      });\n      this.saveTweets();\n    }\n\n    /**\r\n     * Flush tweets list\r\n     */\n\n  }, {\n    key: 'flushTweets',\n    value: function flushTweets() {\n      this._tweets = [];\n      this._blacklist = [];\n      this.saveTweets();\n    }\n\n    /**\r\n     * Remove tweet from list and add ID to blacklist\r\n     * @param {string}  id  Tweet ID\r\n     */\n\n  }, {\n    key: 'blockTweet',\n    value: function blockTweet(id) {\n      if (!id) return false;\n      this._tweets = this._tweets.filter(function (t) {\n        return t.id !== id;\n      });\n      this._blacklist = this._blacklist.filter(function (tid) {\n        return tid !== id;\n      });\n      this._blacklist.push(id);\n      this.saveTweets();\n      return true;\n    }\n\n    /**\r\n     * Add new tweet object to the list\r\n     * @param {object}  tweet  Tweet object\r\n     */\n\n  }, {\n    key: 'addTweet',\n    value: function addTweet(tweet) {\n      if (!tweet || !('id' in tweet)) return false;\n      if (this.tweetExists(tweet)) return false;\n      if (this.tweetBlocked(tweet)) return false;\n      if (this.tweetExpired(tweet)) return false;\n      tweet.isNew = true; // for indicator\n      this._tweets.push(tweet);\n      return true;\n    }\n\n    /**\r\n     * Checks if a tweet is in the list of news\r\n     * @param {object}  tweet  Tweet object\r\n     */\n\n  }, {\n    key: 'tweetExists',\n    value: function tweetExists(tweet) {\n      if (!tweet || !('id' in tweet)) return false;\n      return this._tweets.filter(function (t) {\n        return t.id === tweet.id;\n      }).length ? true : false;\n    }\n\n    /**\r\n     * Checks if a tweet is in the blocklist\r\n     * @param {object}  tweet  Tweet object\r\n     */\n\n  }, {\n    key: 'tweetBlocked',\n    value: function tweetBlocked(tweet) {\n      if (!tweet || !('id' in tweet)) return false;\n      return this._blacklist.filter(function (id) {\n        return id === tweet.id;\n      }).length ? true : false;\n    }\n\n    /**\r\n     * Checks if a tweet is too old, based on option\r\n     * @param {object}  tweet  Tweet object\r\n     */\n\n  }, {\n    key: 'tweetExpired',\n    value: function tweetExpired(tweet) {\n      if (!tweet || !('id' in tweet)) return false;\n      var days = parseInt(this._options.days) | 0;\n      var secs = (Date.now() - tweet.time) / 1000;\n      var age = Math.ceil(secs / 86400);\n      return age > days ? true : false;\n    }\n\n    /**\r\n     * Handles new tweets that are fetched from the Twitter class\r\n     * @param {string}  err    Error string (empty on success)\r\n     * @param {array}  tweets  Tweets array (empty on error)\r\n     */\n\n  }, {\n    key: 'tweetsHandler',\n    value: function tweetsHandler(err, tweets) {\n      if (err) return this.emit('error', err);\n      if (!tweets.length) return;\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = tweets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var tweet = _step2.value;\n\n          // it's possible added tweets can get removed due to filtering...\n          var added = this.addTweet(tweet);\n          this.filterTweets();\n\n          // double check if the tweet survived and emit it\n          if (added && this.tweetExists(tweet)) {\n            this.emit('tweet', tweet);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.saveAccounts();\n      this.saveTweets();\n    }\n\n    /**\r\n     * Cleanup tweets list\r\n     */\n\n  }, {\n    key: 'filterTweets',\n    value: function filterTweets() {\n      var _this2 = this;\n\n      var total = parseInt(this._options.total);\n\n      // filter out old tweets\n      this._tweets = this._tweets.filter(function (tweet) {\n        return !_this2.tweetExpired(tweet);\n      });\n      // sort tweets from new to old\n      this._tweets = this._tweets.sort(function (a, b) {\n        if (a.time > b.time) return -1;\n        if (a.time < b.time) return 1;\n        return 0;\n      });\n      // trim tweets list\n      if (total) {\n        this._tweets = this._tweets.slice(0, total);\n      }\n    }\n\n    /**\r\n     * Fetch tweets for an account by handle\r\n     * @param {string}  handle  Twitter handle\r\n     */\n\n  }, {\n    key: 'fetchByHandle',\n    value: function fetchByHandle(handle) {\n      if (!handle || typeof handle !== 'string') return false;\n      var tw = this._handlers.filter(function (tw) {\n        return tw.handle === handle;\n      }).shift();\n      if (tw) tw.fetchTweets(this._ajax, this.tweetsHandler);\n      return true;\n    }\n\n    /**\r\n     * Fetch tweets from next handler down the list\r\n     */\n\n  }, {\n    key: 'fetchNextHandler',\n    value: function fetchNextHandler() {\n      if (!this._handlers.length) return;\n      var last = this._handlers.length - 1;\n      var tw = this._handlers[this._counter];\n      if (tw) tw.fetchTweets(this._ajax, this.tweetsHandler);\n      this._counter = this._counter < last ? this._counter + 1 : 0;\n    }\n\n    /**\r\n     * Start the tweets interval handler\r\n     */\n\n  }, {\n    key: 'setupTimer',\n    value: function setupTimer() {\n      var _this3 = this;\n\n      this.stopTimer();\n      var secs = parseInt(this._options.interval);\n      if (!secs) return;\n      this._interval = setInterval(function () {\n        if (!_this3._options.enabled) return;\n        _this3.fetchNextHandler();\n      }, 1000 * secs);\n    }\n\n    /**\r\n     * Stop the tweets interval handler\r\n     */\n\n  }, {\n    key: 'stopTimer',\n    value: function stopTimer() {\n      if (this._interval) {\n        clearInterval(this._interval);\n        this._interval = null;\n      }\n    }\n  }]);\n\n  return News;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (News);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///45\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Twitter scraper and tweets manager class.\n */\nvar Twitter = function () {\n\n  /**\n   * Constructor\n   * @param {string}  handle   Twitter handle\n   * @param {object}  options  Fetching options\n   */\n  function Twitter(handle, options) {\n    _classCallCheck(this, Twitter);\n\n    if (!handle || typeof handle !== 'string') {\n      throw 'Must provide a valid twitter handle string.';\n    }\n    this.uid = '';\n    this.handle = '';\n    this.name = '';\n    this.avatar = '';\n    this.url = '';\n    this.error = '';\n    this.last = 0;\n    this.fetching = false;\n    this._options = {\n      skipPinned: true, // ignore pinned tweets\n      skipRetweet: true, // ignore re-tweets\n      cleanTweets: true, // strip html and whitespace from tweets\n      fetchDelay: 300, // prevent re-fetching for (secs)\n      limitCount: 1 // limit number of tweets parsed\n    };\n    this.setOptions(options);\n    this.setData({ handle: handle, name: handle });\n  }\n\n  /**\n    * Update options\n    * @param {object}  options  Options object\n    */\n\n\n  _createClass(Twitter, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this._options, options);\n    }\n\n    /**\n     * Set new acocunt data\n     * @param {object} data  Twitter account data\n     */\n\n  }, {\n    key: 'setData',\n    value: function setData(data) {\n      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return;\n      if (data.uid) this.uid = String(this.uid).replace(/[^\\w\\-]+/g, '');\n      if (data.handle) this.handle = String(data.handle).replace(/[^\\w\\-]+/g, '');\n      if (data.name) this.name = String(data.name).replace(/[\\r\\n\\s\\t]+/g, ' ').trim();\n      if (data.avatar) this.avatar = String(data.avatar).trim();\n      this.url = 'https://twitter.com/' + this.handle;\n    }\n\n    /**\n     * Get account info\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      var uid = this.uid,\n          handle = this.handle,\n          name = this.name,\n          avatar = this.avatar,\n          url = this.url,\n          last = this.last,\n          fetching = this.fetching,\n          error = this.error;\n\n      return { uid: uid, handle: handle, name: name, avatar: avatar, url: url, last: last, fetching: fetching, error: error };\n    }\n\n    /**\n     * Fetch remote tweets using ajax module\n     * @param {object}    ajax      Ajax module instance to use for request\n     * @param {function}  callback  Callback function\n     */\n\n  }, {\n    key: 'fetchTweets',\n    value: function fetchTweets(ajax, callback) {\n      var _this = this;\n\n      if (!callback || typeof callback !== 'function') return;\n      if (!ajax || (typeof ajax === 'undefined' ? 'undefined' : _typeof(ajax)) !== 'object') return callback('Must provide an ajax module reference.', []);\n      if (!this._canFetch()) return callback('', []); // too soon, ignore\n\n      this.fetching = true;\n      this.error = '';\n\n      ajax.get(this.url, {\n        type: 'text',\n        timeout: 30,\n\n        done: function done(xhr, status, response) {\n          _this.fetching = false;\n        },\n        error: function error(xhr, status, _error) {\n          _this.error = _error + ' | @' + _this.handle + '.';\n          return callback(_this.error, []);\n        },\n        success: function success(xhr, status, response) {\n          var parser = new DOMParser();\n          var html = _this._cleanHtml(response);\n          var doc = parser.parseFromString(html, 'text/html');\n\n          if (doc && doc instanceof HTMLDocument) {\n            _this.last = Date.now();\n            callback('', _this.parseTweets(doc));\n          } else {\n            _this.error = 'DOMParserError: Could not parse response from ' + _this.url;\n            callback(_this.error, []);\n          }\n          parser = null;\n          html = null;\n          doc = null;\n        }\n      });\n    }\n\n    /**\n     * Darse account and tweets data from a fetched HTML response\n     * @param {HTMLDocument}  doc  Twitter account page document\n     */\n\n  }, {\n    key: 'parseTweets',\n    value: function parseTweets(doc) {\n      var limit = this._options.limitCount | 0;\n      var count = 0;\n      var output = [];\n\n      // look for profile avatar\n      var avatar = doc.querySelector('img.ProfileAvatar-image');\n      avatar = avatar ? avatar.src : '';\n\n      // look for items\n      var items = doc.querySelectorAll('.stream-item') || [];\n\n      // loop tweet list items\n      for (var i = 0; i < items.length; ++i) {\n        if (limit && count >= limit) break;\n\n        // look for tweet data\n        var item = items[i];\n        var tweet = item ? item.querySelector('.js-stream-tweet') : null; // metadata tag\n        var posted = item ? item.querySelector('.js-short-timestamp') : null; // date tag\n        var content = item ? item.querySelector('.js-tweet-text') : null; // tweet wrapper\n        var text = '';\n\n        // look for account info\n        var id = tweet ? tweet.getAttribute('data-tweet-id') || '' : '';\n        var uid = tweet ? tweet.getAttribute('data-user-id') || '' : '';\n        var name = tweet ? tweet.getAttribute('data-name') || '' : '';\n        var handle = tweet ? tweet.getAttribute('data-screen-name') || '' : '';\n        var link = tweet ? 'https://twitter.com' + tweet.getAttribute('data-permalink-path') || '' : '';\n        var time = posted ? Number(posted.getAttribute('data-time-ms')) || 0 : 0;\n\n        // update profile details\n        this.setData({ uid: uid, handle: handle, name: name, avatar: avatar });\n\n        // resolve tweet text\n        if (content) {\n          text = this._options.cleanTweets ? this._cleanTweet(content.textContent) : String(content.innerHTML || '').trim();\n        }\n        // check a few things, skip if needed\n        if (!id || !uid || !name || !handle || !text || !time || time < 0) continue;\n        if (this._options.skipPinned && item.classList.contains('js-pinned')) continue;\n        if (this._options.skipRetweet && tweet.hasAttribute('data-retweet-id')) continue;\n\n        // format time\n        var d = new Date(time);\n        var date = d.toDateString();\n\n        // add tweet to list and update account info\n        output.push({ id: id, uid: uid, time: time, date: date, name: name, handle: handle, avatar: avatar, text: text, link: link });\n        count++;\n      }\n      items = null;\n      return output;\n    }\n\n    /**\n     * Check last fetch time to see if it's ok to fetch again\n     */\n\n  }, {\n    key: '_canFetch',\n    value: function _canFetch() {\n      var now = Date.now();\n      var elapsed = Math.floor((now - this.last) / 1000);\n      var delay = this._options.fetchDelay | 0;\n\n      if (this.fetching || this.last >= now) return false; // busy, wait\n      if (delay && elapsed < delay) return false; // too soon, wait\n      return true; // looks good\n    }\n\n    /**\n     * Clean tweet text\n     * @param {string}  text  Strign to clean\n     */\n\n  }, {\n    key: '_cleanTweet',\n    value: function _cleanTweet(text) {\n      return String(text || '').replace(/([^\\s]+)(https?\\:|pic\\.)/g, '$1 $2') // add space around links\n      .replace('pic.twitter', 'https://pic.twitter') // fix some links without proto\n      .replace(/([\\`\\'\\’]+)/g, \"'\") // normalize apostrophes\n      .replace(/([\\“\\”\\“\\”\\\"]+)/g, '\"') // normalize quotes\n      .replace(/[\\…\\#\\$]+/g, ' ') // remove some junk chars\n      .replace(/[\\t\\r\\n\\s\\uFEFF\\xA0]+/g, ' ').trim(); // collapse whitespace\n    }\n\n    /**\n     * Clean html content\n     * @param {string}  html  HTML text to clean\n     */\n\n  }, {\n    key: '_cleanHtml',\n    value: function _cleanHtml(html) {\n      return String(html || '').replace(/<(style|script)[^>]*>(?:(?!<\\/(style|script)>)[^])*<\\/(style|script)>/gim, '').replace(/[\\r\\n\\s\\t]+/g, ' ').trim();\n    }\n  }]);\n\n  return Twitter;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Twitter);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Binance socket api wrapper class\r\n */\n\n\nvar Messenger = function (_Bus) {\n  _inherits(Messenger, _Bus);\n\n  // constructor\n  function Messenger(options) {\n    _classCallCheck(this, Messenger);\n\n    var _this = _possibleConstructorReturn(this, (Messenger.__proto__ || Object.getPrototypeOf(Messenger)).call(this));\n\n    _this._ajax = null;\n    _this._sto = null;\n    _this._queue = [];\n    _this._options = Object.assign({\n      // how often to check the queue\n      seconds: 60,\n      // API options for mailgun\n      mailgun: { enabled: false, apikey: '', email: '', domain: '' },\n      // API options for telegram\n      telegram: { enabled: false, botkey: '', userid: '' }\n      // ...\n    }, options);\n    return _this;\n  }\n\n  /**\r\n   * Merge options\r\n   * @param {object}  options  Options object\r\n   */\n\n\n  _createClass(Messenger, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this._options, options);\n    }\n\n    /**\r\n     * Set ajax module reference to use for requests\r\n     * @param {object}  ajax  Ajax class instance\r\n     */\n\n  }, {\n    key: 'useAjax',\n    value: function useAjax(ajax) {\n      this._ajax = ajax;\n    }\n\n    /**\r\n     * Push message data to queue\r\n     * @param {string}  title     Message title\r\n     * @param {string}  message   Message text\r\n     * @param {string}  image     Message image/icon\r\n     * @param {*}       data      Optional data\r\n     */\n\n  }, {\n    key: 'add',\n    value: function add(title, message, image, data) {\n      title = String(title || '');\n      message = String(message || '');\n      image = String(image || '');\n      if (!title || !message) return;\n      this._queue.push({ title: title, message: message, image: image, data: data });\n    }\n\n    /**\r\n     * Flush queue data\r\n     */\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this._queue = [];\n    }\n\n    /**\r\n     * Start the timer\r\n     */\n\n  }, {\n    key: 'start',\n    value: function start() {\n      this.stop();\n      this._checkQueue();\n    }\n\n    /**\r\n     * Stop the timer\r\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (this._sto) clearTimeout(this._sto);\n    }\n\n    /**\r\n     * Queue checker\r\n     */\n\n  }, {\n    key: '_checkQueue',\n    value: function _checkQueue() {\n      var secs = parseInt(this._options.seconds) || 0;\n      this._sto = setTimeout(this._checkQueue.bind(this), 1000 * secs);\n      if (!secs || !this._queue.length) return;\n      this.emit('queue', this._queue);\n      this._mailgunSend();\n      this._telegramSend();\n      this._queue = [];\n    }\n\n    /**\r\n     * Send queue messages using Mailgun API\r\n     */\n\n  }, {\n    key: '_mailgunSend',\n    value: function _mailgunSend() {\n      var _this2 = this;\n\n      var _options$mailgun = this._options.mailgun,\n          enabled = _options$mailgun.enabled,\n          apikey = _options$mailgun.apikey,\n          email = _options$mailgun.email,\n          domain = _options$mailgun.domain;\n\n      if (!enabled || !apikey || !email || !domain || !this._ajax) return;\n      var content = '';\n\n      this._queue.forEach(function (q) {\n        var title = q.title,\n            message = q.message,\n            image = q.image;\n\n        message = String(message).replace(/\\n+/g, ' <br />');\n        content += '\\n      <div style=\"border-top: 1px dashed rgba( 0,0,0,0.1 ); margin: 0 0 1em 0;\">\\n        <table width=\"100%\" border=\"0\">\\n          <tr>\\n            <td><img src=\"' + image + '\" alt=\"image\" style=\"width: 42px; height: auto; margin: 0 .5em 0 0;\" /></td>\\n            <td width=\"100%\"><b>' + title + '</b> <br /> ' + message + '</td>\\n          </tr>\\n        </table>\\n      </div>';\n      });\n\n      var html = '\\n    <!DOCTYPE html>\\n    <html lang=\"en-US\">\\n      <body style=\"margin: 0; padding: 0;\">\\n        <div style=\"font-family: monospace; font-size: 10px; padding: 1em;\">\\n          ' + content + '\\n        </div>\\n      </body>\\n    </html>';\n\n      var fdata = new FormData();\n      fdata.append('from', 'Binance Watch App <noreply@' + domain + '>');\n      fdata.append('to', 'E-mail Recipient <' + email + '>');\n      fdata.append('subject', 'Binance Watch E-mail Notifications (' + this._queue.length + ')');\n      fdata.append('html', String(html).trim());\n\n      this._ajax.post('https://api.mailgun.net/v3/' + domain + '/messages', {\n        type: 'json',\n        data: fdata,\n        auth: { username: 'api', password: apikey },\n        done: function done(xhr, status, response) {\n          if (!response || !response.id) return console.warn('Mailgun-API', status, response);\n          _this2.emit('sent', 'E-mail notifications sent to (' + email + ').');\n        }\n      });\n    }\n\n    /**\r\n     * Send queue messages using Telegram API\r\n     */\n\n  }, {\n    key: '_telegramSend',\n    value: function _telegramSend() {\n      var _this3 = this;\n\n      var _options$telegram = this._options.telegram,\n          enabled = _options$telegram.enabled,\n          botkey = _options$telegram.botkey,\n          userid = _options$telegram.userid;\n\n      if (!enabled || !botkey || !userid || !this._ajax) return;\n      var content = '';\n\n      this._queue.forEach(function (q) {\n        var title = q.title,\n            message = q.message;\n\n        content += '<b>' + title + '</b> \\n';\n        content += message + ' \\n';\n        content += '\\n';\n      });\n\n      var fdata = new FormData();\n      fdata.append('chat_id', userid);\n      fdata.append('text', String(content).trim());\n      fdata.append('parse_mode', 'html');\n\n      this._ajax.post('https://api.telegram.org/bot' + botkey + '/sendMessage', {\n        type: 'json',\n        data: fdata,\n        done: function done(xhr, status, response) {\n          if (!response || !response.ok) return console.warn('Telegram-API', status, response);\n          _this3.emit('sent', 'Telegram notifications sent to (' + userid + ').');\n        }\n      });\n    }\n  }]);\n\n  return Messenger;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Messenger);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Basic URL hash router\r\n */\nvar Router = function () {\n\n  // constructor\n  function Router() {\n    _classCallCheck(this, Router);\n\n    this._routes = {};\n    this._init();\n  }\n\n  // get routes data\n\n\n  _createClass(Router, [{\n    key: 'getRoutes',\n    value: function getRoutes() {\n      return this._routes;\n    }\n\n    // set a url hash route\n\n  }, {\n    key: 'setRoute',\n    value: function setRoute(route) {\n      route = this._path(route);\n      window.location.hash = route;\n    }\n\n    // add custom route and callback to list\n\n  }, {\n    key: 'on',\n    value: function on(route, callback) {\n      route = this._path(route);\n      if (!route || typeof callback !== 'function') return;\n      this._routes[route] = callback;\n    }\n\n    // delete route handler\n\n  }, {\n    key: 'off',\n    value: function off(route) {\n      route = this._path(route);\n      if (this._routes.hasOwnProperty(route)) {\n        delete this._routes[route];\n      }\n    }\n\n    // trigger saved handler for a path\n\n  }, {\n    key: 'trigger',\n    value: function trigger(path) {\n      var _this = this;\n\n      path = this._path(path);\n      if (!path) return;\n\n      Object.keys(this._routes).forEach(function (route) {\n        var cb = _this._routes[route];\n\n        // path matches route, call handler as is\n        if (path === route) return cb();\n\n        // use regexp to test route\n        var reg = new RegExp('^' + route + '$');\n        var matches = reg.exec(path);\n\n        // found something, pass regexp matches as arguments to handler\n        if (matches) {\n          matches = Array.from(matches);\n          matches.shift();\n          cb.apply(cb, matches);\n        }\n      });\n    }\n\n    // clean path\n\n  }, {\n    key: '_path',\n    value: function _path(path) {\n      return '/' + String(path || '').replace(/^[\\#\\/]+|[\\/]+$/g, '').trim();\n    }\n\n    // start watching for hash changes\n\n  }, {\n    key: '_init',\n    value: function _init() {\n      var _this2 = this;\n\n      var _w = window;\n      _w.addEventListener('hashchange', function (e) {\n        _this2.trigger(_w.location.hash);\n      });\n      _w.addEventListener('load', function (e) {\n        _this2.trigger(_w.location.hash);\n      });\n    }\n  }]);\n\n  return Router;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Router);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yb3V0ZXIuanM/Y2Q5MSJdLCJuYW1lcyI6WyJSb3V0ZXIiLCJfcm91dGVzIiwiX2luaXQiLCJyb3V0ZSIsIl9wYXRoIiwid2luZG93IiwibG9jYXRpb24iLCJoYXNoIiwiY2FsbGJhY2siLCJoYXNPd25Qcm9wZXJ0eSIsInBhdGgiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImNiIiwicmVnIiwiUmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJBcnJheSIsImZyb20iLCJzaGlmdCIsImFwcGx5IiwiU3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJfdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztJQUdxQkEsTTs7QUFFbkI7QUFDQSxvQkFBYztBQUFBOztBQUNaLFNBQUtDLE9BQUwsR0FBZSxFQUFmO0FBQ0EsU0FBS0MsS0FBTDtBQUNEOztBQUVEOzs7OztnQ0FDWTtBQUNWLGFBQU8sS0FBS0QsT0FBWjtBQUNEOztBQUVEOzs7OzZCQUNVRSxLLEVBQVE7QUFDaEJBLGNBQVEsS0FBS0MsS0FBTCxDQUFZRCxLQUFaLENBQVI7QUFDQUUsYUFBT0MsUUFBUCxDQUFnQkMsSUFBaEIsR0FBdUJKLEtBQXZCO0FBQ0Q7O0FBRUQ7Ozs7dUJBQ0lBLEssRUFBT0ssUSxFQUFXO0FBQ3BCTCxjQUFRLEtBQUtDLEtBQUwsQ0FBWUQsS0FBWixDQUFSO0FBQ0EsVUFBSyxDQUFDQSxLQUFELElBQVUsT0FBT0ssUUFBUCxLQUFvQixVQUFuQyxFQUFnRDtBQUNoRCxXQUFLUCxPQUFMLENBQWNFLEtBQWQsSUFBd0JLLFFBQXhCO0FBQ0Q7O0FBRUQ7Ozs7d0JBQ0tMLEssRUFBUTtBQUNYQSxjQUFRLEtBQUtDLEtBQUwsQ0FBWUQsS0FBWixDQUFSO0FBQ0EsVUFBSyxLQUFLRixPQUFMLENBQWFRLGNBQWIsQ0FBNkJOLEtBQTdCLENBQUwsRUFBNEM7QUFDMUMsZUFBTyxLQUFLRixPQUFMLENBQWNFLEtBQWQsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7NEJBQ1NPLEksRUFBTztBQUFBOztBQUNkQSxhQUFPLEtBQUtOLEtBQUwsQ0FBWU0sSUFBWixDQUFQO0FBQ0EsVUFBSyxDQUFDQSxJQUFOLEVBQWE7O0FBRWJDLGFBQU9DLElBQVAsQ0FBYSxLQUFLWCxPQUFsQixFQUE0QlksT0FBNUIsQ0FBcUMsaUJBQVM7QUFDNUMsWUFBSUMsS0FBSyxNQUFLYixPQUFMLENBQWNFLEtBQWQsQ0FBVDs7QUFFQTtBQUNBLFlBQUtPLFNBQVNQLEtBQWQsRUFBc0IsT0FBT1csSUFBUDs7QUFFdEI7QUFDQSxZQUFJQyxNQUFNLElBQUlDLE1BQUosQ0FBWSxNQUFLYixLQUFMLEdBQVksR0FBeEIsQ0FBVjtBQUNBLFlBQUljLFVBQVVGLElBQUlHLElBQUosQ0FBVVIsSUFBVixDQUFkOztBQUVBO0FBQ0EsWUFBS08sT0FBTCxFQUFlO0FBQ2JBLG9CQUFVRSxNQUFNQyxJQUFOLENBQVlILE9BQVosQ0FBVjtBQUNBQSxrQkFBUUksS0FBUjtBQUNBUCxhQUFHUSxLQUFILENBQVVSLEVBQVYsRUFBY0csT0FBZDtBQUNEO0FBQ0YsT0FoQkQ7QUFpQkQ7O0FBRUQ7Ozs7MEJBQ09QLEksRUFBTztBQUNaLGFBQU8sTUFBS2EsT0FBUWIsUUFBUSxFQUFoQixFQUFxQmMsT0FBckIsQ0FBOEIsa0JBQTlCLEVBQWtELEVBQWxELEVBQXVEQyxJQUF2RCxFQUFaO0FBQ0Q7O0FBRUQ7Ozs7NEJBQ1E7QUFBQTs7QUFDTixVQUFNQyxLQUFLckIsTUFBWDtBQUNBcUIsU0FBR0MsZ0JBQUgsQ0FBcUIsWUFBckIsRUFBbUMsYUFBSztBQUFFLGVBQUtDLE9BQUwsQ0FBY0YsR0FBR3BCLFFBQUgsQ0FBWUMsSUFBMUI7QUFBa0MsT0FBNUU7QUFDQW1CLFNBQUdDLGdCQUFILENBQXFCLE1BQXJCLEVBQTZCLGFBQUs7QUFBRSxlQUFLQyxPQUFMLENBQWNGLEdBQUdwQixRQUFILENBQVlDLElBQTFCO0FBQWtDLE9BQXRFO0FBQ0Q7Ozs7Ozt5REFwRWtCUCxNIiwiZmlsZSI6IjQ4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEJhc2ljIFVSTCBoYXNoIHJvdXRlclxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHtcclxuXHJcbiAgLy8gY29uc3RydWN0b3JcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX3JvdXRlcyA9IHt9O1xyXG4gICAgdGhpcy5faW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IHJvdXRlcyBkYXRhXHJcbiAgZ2V0Um91dGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JvdXRlcztcclxuICB9XHJcblxyXG4gIC8vIHNldCBhIHVybCBoYXNoIHJvdXRlXHJcbiAgc2V0Um91dGUoIHJvdXRlICkge1xyXG4gICAgcm91dGUgPSB0aGlzLl9wYXRoKCByb3V0ZSApO1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSByb3V0ZTtcclxuICB9XHJcblxyXG4gIC8vIGFkZCBjdXN0b20gcm91dGUgYW5kIGNhbGxiYWNrIHRvIGxpc3RcclxuICBvbiggcm91dGUsIGNhbGxiYWNrICkge1xyXG4gICAgcm91dGUgPSB0aGlzLl9wYXRoKCByb3V0ZSApO1xyXG4gICAgaWYgKCAhcm91dGUgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nICkgcmV0dXJuO1xyXG4gICAgdGhpcy5fcm91dGVzWyByb3V0ZSBdID0gY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICAvLyBkZWxldGUgcm91dGUgaGFuZGxlclxyXG4gIG9mZiggcm91dGUgKSB7XHJcbiAgICByb3V0ZSA9IHRoaXMuX3BhdGgoIHJvdXRlICk7XHJcbiAgICBpZiAoIHRoaXMuX3JvdXRlcy5oYXNPd25Qcm9wZXJ0eSggcm91dGUgKSApIHtcclxuICAgICAgZGVsZXRlIHRoaXMuX3JvdXRlc1sgcm91dGUgXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHRyaWdnZXIgc2F2ZWQgaGFuZGxlciBmb3IgYSBwYXRoXHJcbiAgdHJpZ2dlciggcGF0aCApIHtcclxuICAgIHBhdGggPSB0aGlzLl9wYXRoKCBwYXRoICk7XHJcbiAgICBpZiAoICFwYXRoICkgcmV0dXJuO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKCB0aGlzLl9yb3V0ZXMgKS5mb3JFYWNoKCByb3V0ZSA9PiB7XHJcbiAgICAgIGxldCBjYiA9IHRoaXMuX3JvdXRlc1sgcm91dGUgXTtcclxuXHJcbiAgICAgIC8vIHBhdGggbWF0Y2hlcyByb3V0ZSwgY2FsbCBoYW5kbGVyIGFzIGlzXHJcbiAgICAgIGlmICggcGF0aCA9PT0gcm91dGUgKSByZXR1cm4gY2IoKTtcclxuXHJcbiAgICAgIC8vIHVzZSByZWdleHAgdG8gdGVzdCByb3V0ZVxyXG4gICAgICBsZXQgcmVnID0gbmV3IFJlZ0V4cCggJ14nKyByb3V0ZSArJyQnICk7XHJcbiAgICAgIGxldCBtYXRjaGVzID0gcmVnLmV4ZWMoIHBhdGggKTtcclxuXHJcbiAgICAgIC8vIGZvdW5kIHNvbWV0aGluZywgcGFzcyByZWdleHAgbWF0Y2hlcyBhcyBhcmd1bWVudHMgdG8gaGFuZGxlclxyXG4gICAgICBpZiAoIG1hdGNoZXMgKSB7XHJcbiAgICAgICAgbWF0Y2hlcyA9IEFycmF5LmZyb20oIG1hdGNoZXMgKTtcclxuICAgICAgICBtYXRjaGVzLnNoaWZ0KCk7XHJcbiAgICAgICAgY2IuYXBwbHkoIGNiLCBtYXRjaGVzICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gY2xlYW4gcGF0aFxyXG4gIF9wYXRoKCBwYXRoICkge1xyXG4gICAgcmV0dXJuICcvJysgU3RyaW5nKCBwYXRoIHx8ICcnICkucmVwbGFjZSggL15bXFwjXFwvXSt8W1xcL10rJC9nLCAnJyApLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIC8vIHN0YXJ0IHdhdGNoaW5nIGZvciBoYXNoIGNoYW5nZXNcclxuICBfaW5pdCgpIHtcclxuICAgIGNvbnN0IF93ID0gd2luZG93O1xyXG4gICAgX3cuYWRkRXZlbnRMaXN0ZW5lciggJ2hhc2hjaGFuZ2UnLCBlID0+IHsgdGhpcy50cmlnZ2VyKCBfdy5sb2NhdGlvbi5oYXNoICkgfSApO1xyXG4gICAgX3cuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBlID0+IHsgdGhpcy50cmlnZ2VyKCBfdy5sb2NhdGlvbi5oYXNoICkgfSApO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9yb3V0ZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__store__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__logger__ = __webpack_require__(50);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__utils__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Basic XHR ajax request module\n */\n\n\n\n\n// ajax class\n\nvar Ajax = function () {\n\n  /**\n   * Constructor\n   * @param {object}  options  Initial options\n   */\n  function Ajax(options) {\n    _classCallCheck(this, Ajax);\n\n    this._url = null;\n    this._options = {\n      // save response data to local store cache\n      cache: false,\n      // key prefix for local store cache\n      prefix: 'ajax_data_',\n      // proxy url to preppend to outgoing requests\n      proxy: ''\n    };\n    this.setOptions(options);\n  }\n\n  /**\n   * Merge options\n   * @param {object}  options  Options object\n   */\n\n\n  _createClass(Ajax, [{\n    key: 'setOptions',\n    value: function setOptions(options) {\n      Object.assign(this._options, options);\n    }\n\n    /**\n     * Convert object into a query string\n     * @param {object}  data  Key/Val data pairs\n     */\n\n  }, {\n    key: 'serializeData',\n    value: function serializeData(data) {\n      var q = [];\n      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n        Object.keys(data).forEach(function (k) {\n          q.push(encodeURIComponent(k) + '=' + encodeURIComponent(data[k]));\n        });\n      }\n      return q.join('&');\n    }\n\n    /**\n     * GET request alias\n     */\n\n  }, {\n    key: 'get',\n    value: function get(address, options) {\n      this.request('GET', address, options);\n    }\n\n    /**\n     * POST request alias\n     */\n\n  }, {\n    key: 'post',\n    value: function post(address, options) {\n      this.request('POST', address, options);\n    }\n\n    /**\n     * PUT request alias\n     */\n\n  }, {\n    key: 'put',\n    value: function put(address, options) {\n      this.request('PUT', address, options);\n    }\n\n    /**\n     * DELETE request alias\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(address, options) {\n      this.request('DELETE', address, options);\n    }\n\n    /**\n     * AJAX request method\n     * @param {string}  method   Request method verb\n     * @param {string}  address  Endpoint URL\n     * @param {object}  options  Request options\n     */\n\n  }, {\n    key: 'request',\n    value: function request(method, address, options) {\n      var _this = this;\n\n      method = String(method || '').toUpperCase();\n      address = String(address || '').trim();\n      options = Object.assign({}, this._options, options);\n\n      // setup options\n      var isDone = false;\n      var type = String(options.type || 'text');\n      var proxy = String(options.proxy || '').trim();\n      var timeout = parseInt(options.timeout) || 0;\n      var headers = Object.assign({}, options.headers);\n      var cacheTime = parseInt(options.cache) || 0; // seconds to be cached\n      var cacheKey = options.prefix + __WEBPACK_IMPORTED_MODULE_2__utils___default.a.unique(method + '|' + address);\n      var xhr = new XMLHttpRequest();\n\n      // setup callbacks\n      var onError = typeof options.error === 'function' ? options.error : function () {};\n      var onSuccess = typeof options.success === 'function' ? options.success : function () {};\n      var onDone = typeof options.done === 'function' ? options.done : function () {};\n\n      // check params\n      if (!method) return onError(xhr, 0, 'Must specify a request method to make a new request.');\n      if (!address) return onError(xhr, 0, 'Must specify a request url address to make a new request.');\n\n      // check cache\n      if (cacheTime) {\n        var cacheData = __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].getData(cacheKey);\n        if (cacheData) {\n          onSuccess(xhr, 200, cacheData);\n          onDone(xhr, 200, cacheData);\n          isDone = true;\n          return;\n        }\n      }\n\n      // resolve full request url\n      var fullUrl = __WEBPACK_IMPORTED_MODULE_2__utils___default.a.fullUrl(address);\n      try {\n        this._url = new URL(fullUrl);\n      } catch (err) {}\n\n      // encode data for get requests\n      if (method === 'GET' && _typeof(options.data) === 'object') {\n        headers['Content-type'] = 'application/x-www-form-urlencoded';\n        fullUrl += '?' + this.serializeData(options.data);\n        options.data = null;\n      }\n\n      // init request handler\n      xhr.open(method, proxy + fullUrl, true);\n      xhr.responseType = type;\n\n      // set timeout\n      if (timeout) {\n        xhr.timeout = timeout < 1000 ? 1000 * timeout : timeout;\n      }\n\n      // default headers\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      xhr.setRequestHeader('Accept', 'application/json, text/plain, text/html, */*');\n\n      // check for basic auth data and set header\n      if (options.auth && _typeof(options.auth) === 'object') {\n        var username = String(options.auth.username || '').trim();\n        var password = String(options.auth.password || '').trim();\n        xhr.setRequestHeader('Authorization', 'Basic ' + btoa(username + ':' + password));\n      }\n\n      // custom headers\n      Object.keys(headers).forEach(function (name) {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n\n      // data load handler\n      xhr.addEventListener('load', function (e) {\n        var _responseParams2 = _this._responseParams('load', xhr, type),\n            status = _responseParams2.status,\n            response = _responseParams2.response,\n            error = _responseParams2.error;\n\n        Object(__WEBPACK_IMPORTED_MODULE_1__logger__[\"a\" /* default */])(status, method, fullUrl);\n        Object(__WEBPACK_IMPORTED_MODULE_1__logger__[\"a\" /* default */])(response);\n\n        if (status && status < 400) {\n          if (cacheTime) __WEBPACK_IMPORTED_MODULE_0__store__[\"a\" /* default */].setData(cacheKey, response, cacheTime);\n          onSuccess(xhr, status, response);\n        } else {\n          onError(xhr, status, error);\n        }\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // request error handler\n      xhr.addEventListener('error', function (e) {\n        var _responseParams3 = _this._responseParams('error', xhr, type),\n            status = _responseParams3.status,\n            response = _responseParams3.response,\n            error = _responseParams3.error;\n\n        onError(xhr, status, error);\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // request abort handler\n      xhr.addEventListener('abort', function (e) {\n        var _responseParams4 = _this._responseParams('abort', xhr, type),\n            status = _responseParams4.status,\n            response = _responseParams4.response,\n            error = _responseParams4.error;\n\n        onError(xhr, status, error);\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // request timeout handler\n      xhr.addEventListener('timeout', function (e) {\n        var _responseParams5 = _this._responseParams('timeout', xhr, type),\n            status = _responseParams5.status,\n            response = _responseParams5.response,\n            error = _responseParams5.error;\n\n        onError(xhr, status, error);\n        if (!isDone) onDone(xhr, status, response);\n        isDone = true;\n      });\n\n      // send the request\n      xhr.send(options.data || null);\n    }\n\n    /**\n     * Parse information about the response\n     * @param {string}  evt   Event type\n     * @param {object}  xhr   XMLHttpRequest object\n     * @param {string}  type  Expected response type\n     */\n\n  }, {\n    key: '_responseParams',\n    value: function _responseParams(evt, xhr, type) {\n      var hostname = this._url.hostname || 'nohost';\n      var status = xhr.status | 0;\n      var response = type === 'text' ? xhr.responseText : xhr.response;\n      var error = '';\n\n      if (evt === 'load' && status >= 400 && response) {\n        error = hostname + '(' + status + '): ' + this._dataReduce(response);\n      }\n      if (evt === 'error') {\n        error = hostname + '(' + status + '): The request has been aborted due to a network related problem.';\n      }\n      if (evt === 'abort') {\n        error = hostname + '(' + status + '): The request has been aborted by the client before completing.';\n      }\n      if (evt === 'timeout') {\n        error = hostname + '(' + status + '): The request has been aborted due to the server not responding.';\n      }\n      if ((status <= 0 || status >= 400) && !error) {\n        error = hostname + '(' + status + '): The request was rejected by the server and no error message was given.';\n      }\n      return { status: status, response: response, error: error };\n    }\n\n    /**\n     * Reduce data object into a single string line.\n     * @param {object}  data     Object or string to be scanned\n     * @param {array}   output   Output array\n     */\n\n  }, {\n    key: '_dataReduce',\n    value: function _dataReduce(data, output) {\n      var _this2 = this;\n\n      output = output || [];\n\n      if (data && typeof data === 'string') {\n        output.push(data);\n      } else if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n        Object.keys(data).forEach(function (key) {\n          _this2._dataReduce(data[key], output);\n        });\n      }\n      return output.join(' | ').replace(/[\\t\\r\\n\\s]+/g, ' ').trim();\n    }\n  }]);\n\n  return Ajax;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Ajax);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///49\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };\n\n/**\r\n * Console log wrapper\r\n */\n/* harmony default export */ __webpack_exports__["a"] = (function () {\n  var w = global || window || null;\n  if (!w || !w.DEBUG || !w.console) return;\n\n  for (var i = 0; i < arguments.length; ++i) {\n    if (_typeof(arguments[i]) === \'object\') {\n      arguments[i] = JSON.stringify(arguments[i], null, 2);\n    }\n  }\n  console.log(\'-\'.repeat(100));\n  console.log.apply(console, arguments);\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9sb2dnZXIuanM/ZDRlOSJdLCJuYW1lcyI6WyJ3IiwiZ2xvYmFsIiwid2luZG93IiwiREVCVUciLCJjb25zb2xlIiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2ciLCJyZXBlYXQiLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7O0FBR0EseURBQWUsWUFBVztBQUN4QixNQUFNQSxJQUFJQyxVQUFVQyxNQUFWLElBQW9CLElBQTlCO0FBQ0EsTUFBSyxDQUFDRixDQUFELElBQU0sQ0FBQ0EsRUFBRUcsS0FBVCxJQUFrQixDQUFDSCxFQUFFSSxPQUExQixFQUFvQzs7QUFFcEMsT0FBTSxJQUFJQyxJQUFJLENBQWQsRUFBaUJBLElBQUlDLFVBQVVDLE1BQS9CLEVBQXVDLEVBQUVGLENBQXpDLEVBQTZDO0FBQzNDLFFBQUssUUFBT0MsVUFBV0QsQ0FBWCxDQUFQLE1BQTBCLFFBQS9CLEVBQTBDO0FBQ3hDQyxnQkFBV0QsQ0FBWCxJQUFpQkcsS0FBS0MsU0FBTCxDQUFnQkgsVUFBV0QsQ0FBWCxDQUFoQixFQUFnQyxJQUFoQyxFQUFzQyxDQUF0QyxDQUFqQjtBQUNEO0FBQ0Y7QUFDREQsVUFBUU0sR0FBUixDQUFhLElBQUlDLE1BQUosQ0FBWSxHQUFaLENBQWI7QUFDQVAsVUFBUU0sR0FBUixDQUFZRSxLQUFaLENBQW1CUixPQUFuQixFQUE0QkUsU0FBNUI7QUFDRCxDIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbnNvbGUgbG9nIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xyXG4gIGNvbnN0IHcgPSBnbG9iYWwgfHwgd2luZG93IHx8IG51bGw7XHJcbiAgaWYgKCAhdyB8fCAhdy5ERUJVRyB8fCAhdy5jb25zb2xlICkgcmV0dXJuO1xyXG5cclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kgKSB7XHJcbiAgICBpZiAoIHR5cGVvZiBhcmd1bWVudHNbIGkgXSA9PT0gJ29iamVjdCcgKSB7XHJcbiAgICAgIGFyZ3VtZW50c1sgaSBdID0gSlNPTi5zdHJpbmdpZnkoIGFyZ3VtZW50c1sgaSBdLCBudWxsLCAyICk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCAnLScucmVwZWF0KCAxMDAgKSApO1xyXG4gIGNvbnNvbGUubG9nLmFwcGx5KCBjb25zb2xlLCBhcmd1bWVudHMgKTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9sb2dnZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__store__ = __webpack_require__(2);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Helper module for sorting lists\r\n */\n\n\n\nvar Sorter = function (_Bus) {\n  _inherits(Sorter, _Bus);\n\n  /**\r\n   * Constructor\r\n   */\n  function Sorter(target) {\n    _classCallCheck(this, Sorter);\n\n    var _this = _possibleConstructorReturn(this, (Sorter.__proto__ || Object.getPrototypeOf(Sorter)).call(this));\n\n    _this._key = 'list_sort_data';\n    _this._lists = {};\n    return _this;\n  }\n\n  /**\r\n   * Save sort data to store\r\n   */\n\n\n  _createClass(Sorter, [{\n    key: 'saveData',\n    value: function saveData() {\n      __WEBPACK_IMPORTED_MODULE_1__store__[\"a\" /* default */].setData(this._key, this._lists);\n      this.emit('save', this._lists);\n    }\n\n    /**\r\n     * Load sort data from store\r\n     */\n\n  }, {\n    key: 'loadData',\n    value: function loadData() {\n      var data = __WEBPACK_IMPORTED_MODULE_1__store__[\"a\" /* default */].getData(this._key);\n      this._lists = data || this._lists;\n      this.emit('load', this._lists);\n    }\n\n    /**\r\n     *  Get all sort data\r\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      return this._lists;\n    }\n\n    /**\r\n     * Set sort data for a key\r\n     */\n\n  }, {\n    key: 'setKey',\n    value: function setKey(key, column, order, search) {\n      column = String(column || 'id');\n      order = String(order || 'asc');\n      search = String(search || '');\n      this._lists[key] = { column: column, order: order, search: search };\n      return this._lists[key];\n    }\n\n    /**\r\n     * Get sort data for a key\r\n     */\n\n  }, {\n    key: 'getKey',\n    value: function getKey(key) {\n      return this._lists[key] || null;\n    }\n\n    /**\r\n     * Set new sort order for a key\r\n     */\n\n  }, {\n    key: 'sortOrder',\n    value: function sortOrder(key, column, order) {\n      var d = this._lists[key] || null;\n      if (d) {\n        if (column !== d.column) {\n          d.order = order || 'asc';\n        } else {\n          d.order = d.order === 'asc' ? 'desc' : 'asc';\n        }\n        d.column = column;\n      }\n      this.emit('change', this._lists);\n      this.saveData();\n      return d;\n    }\n\n    /**\r\n     * Apply search text for a key\r\n     */\n\n  }, {\n    key: 'setSearch',\n    value: function setSearch(key, text) {\n      var d = this._lists[key] || null;\n      if (d) d.search = String(text || '').trim();\n      this.emit('change', this._lists);\n      return d;\n    }\n\n    /**\r\n     * Check if sort column is active for a key\r\n     */\n\n  }, {\n    key: 'checkActive',\n    value: function checkActive(key, column) {\n      var d = this._lists[key] || null;\n      if (d) return d.column === column;\n      return false;\n    }\n\n    /**\r\n     * Get css icon style for a key\r\n     */\n\n  }, {\n    key: 'getStyles',\n    value: function getStyles(key, column) {\n      var d = this._lists[key] || null;\n      var c = column || d.column;\n      if (d && c === d.column && d.order === 'asc') return 'icon-up';\n      if (d && c === d.column && d.order === 'desc') return 'icon-down';\n      return 'hidden';\n    }\n  }]);\n\n  return Sorter;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Sorter);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9zb3J0ZXIuanM/YTE3NiJdLCJuYW1lcyI6WyJTb3J0ZXIiLCJ0YXJnZXQiLCJfa2V5IiwiX2xpc3RzIiwic3RvcmUiLCJzZXREYXRhIiwiZW1pdCIsImRhdGEiLCJnZXREYXRhIiwia2V5IiwiY29sdW1uIiwib3JkZXIiLCJzZWFyY2giLCJTdHJpbmciLCJkIiwic2F2ZURhdGEiLCJ0ZXh0IiwidHJpbSIsImMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7O0FBR0E7QUFDQTs7SUFFcUJBLE07OztBQUVuQjs7O0FBR0Esa0JBQWFDLE1BQWIsRUFBc0I7QUFBQTs7QUFBQTs7QUFFcEIsVUFBS0MsSUFBTCxHQUFZLGdCQUFaO0FBQ0EsVUFBS0MsTUFBTCxHQUFjLEVBQWQ7QUFIb0I7QUFJckI7O0FBRUQ7Ozs7Ozs7K0JBR1c7QUFDVEMsTUFBQSx1REFBQUEsQ0FBTUMsT0FBTixDQUFlLEtBQUtILElBQXBCLEVBQTBCLEtBQUtDLE1BQS9CO0FBQ0EsV0FBS0csSUFBTCxDQUFXLE1BQVgsRUFBbUIsS0FBS0gsTUFBeEI7QUFDRDs7QUFFRDs7Ozs7OytCQUdXO0FBQ1QsVUFBSUksT0FBTyx1REFBQUgsQ0FBTUksT0FBTixDQUFlLEtBQUtOLElBQXBCLENBQVg7QUFDQSxXQUFLQyxNQUFMLEdBQWNJLFFBQVEsS0FBS0osTUFBM0I7QUFDQSxXQUFLRyxJQUFMLENBQVcsTUFBWCxFQUFtQixLQUFLSCxNQUF4QjtBQUNEOztBQUVEOzs7Ozs7OEJBR1U7QUFDUixhQUFPLEtBQUtBLE1BQVo7QUFDRDs7QUFFRDs7Ozs7OzJCQUdRTSxHLEVBQUtDLE0sRUFBUUMsSyxFQUFPQyxNLEVBQVM7QUFDbkNGLGVBQVNHLE9BQVFILFVBQVUsSUFBbEIsQ0FBVDtBQUNBQyxjQUFTRSxPQUFRRixTQUFTLEtBQWpCLENBQVQ7QUFDQUMsZUFBU0MsT0FBUUQsVUFBVSxFQUFsQixDQUFUO0FBQ0EsV0FBS1QsTUFBTCxDQUFhTSxHQUFiLElBQXFCLEVBQUVDLGNBQUYsRUFBVUMsWUFBVixFQUFpQkMsY0FBakIsRUFBckI7QUFDQSxhQUFPLEtBQUtULE1BQUwsQ0FBYU0sR0FBYixDQUFQO0FBQ0Q7O0FBRUQ7Ozs7OzsyQkFHUUEsRyxFQUFNO0FBQ1osYUFBTyxLQUFLTixNQUFMLENBQWFNLEdBQWIsS0FBc0IsSUFBN0I7QUFDRDs7QUFFRDs7Ozs7OzhCQUdXQSxHLEVBQUtDLE0sRUFBUUMsSyxFQUFRO0FBQzlCLFVBQUlHLElBQUksS0FBS1gsTUFBTCxDQUFhTSxHQUFiLEtBQXNCLElBQTlCO0FBQ0EsVUFBS0ssQ0FBTCxFQUFTO0FBQ1AsWUFBS0osV0FBV0ksRUFBRUosTUFBbEIsRUFBMkI7QUFBRUksWUFBRUgsS0FBRixHQUFVQSxTQUFTLEtBQW5CO0FBQTJCLFNBQXhELE1BQ0s7QUFBRUcsWUFBRUgsS0FBRixHQUFZRyxFQUFFSCxLQUFGLEtBQVksS0FBZCxHQUF3QixNQUF4QixHQUFpQyxLQUEzQztBQUFtRDtBQUMxREcsVUFBRUosTUFBRixHQUFXQSxNQUFYO0FBQ0Q7QUFDRCxXQUFLSixJQUFMLENBQVcsUUFBWCxFQUFxQixLQUFLSCxNQUExQjtBQUNBLFdBQUtZLFFBQUw7QUFDQSxhQUFPRCxDQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs4QkFHV0wsRyxFQUFLTyxJLEVBQU87QUFDckIsVUFBSUYsSUFBSSxLQUFLWCxNQUFMLENBQWFNLEdBQWIsS0FBc0IsSUFBOUI7QUFDQSxVQUFLSyxDQUFMLEVBQVNBLEVBQUVGLE1BQUYsR0FBV0MsT0FBUUcsUUFBUSxFQUFoQixFQUFxQkMsSUFBckIsRUFBWDtBQUNULFdBQUtYLElBQUwsQ0FBVyxRQUFYLEVBQXFCLEtBQUtILE1BQTFCO0FBQ0EsYUFBT1csQ0FBUDtBQUNEOztBQUVEOzs7Ozs7Z0NBR2FMLEcsRUFBS0MsTSxFQUFTO0FBQ3pCLFVBQUlJLElBQUksS0FBS1gsTUFBTCxDQUFhTSxHQUFiLEtBQXNCLElBQTlCO0FBQ0EsVUFBS0ssQ0FBTCxFQUFTLE9BQVNBLEVBQUVKLE1BQUYsS0FBYUEsTUFBdEI7QUFDVCxhQUFPLEtBQVA7QUFDRDs7QUFFRDs7Ozs7OzhCQUdXRCxHLEVBQUtDLE0sRUFBUztBQUN2QixVQUFJSSxJQUFJLEtBQUtYLE1BQUwsQ0FBYU0sR0FBYixLQUFzQixJQUE5QjtBQUNBLFVBQUlTLElBQUlSLFVBQVVJLEVBQUVKLE1BQXBCO0FBQ0EsVUFBS0ksS0FBS0ksTUFBTUosRUFBRUosTUFBYixJQUF1QkksRUFBRUgsS0FBRixLQUFZLEtBQXhDLEVBQWdELE9BQU8sU0FBUDtBQUNoRCxVQUFLRyxLQUFLSSxNQUFNSixFQUFFSixNQUFiLElBQXVCSSxFQUFFSCxLQUFGLEtBQVksTUFBeEMsRUFBaUQsT0FBTyxXQUFQO0FBQ2pELGFBQU8sUUFBUDtBQUNEOzs7O0VBaEdpQyxxRDs7eURBQWZYLE0iLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSGVscGVyIG1vZHVsZSBmb3Igc29ydGluZyBsaXN0c1xyXG4gKi9cclxuaW1wb3J0IEJ1cyBmcm9tICcuL2J1cyc7XHJcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvcnRlciBleHRlbmRzIEJ1cyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnVjdG9yXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIHRhcmdldCApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl9rZXkgPSAnbGlzdF9zb3J0X2RhdGEnO1xyXG4gICAgdGhpcy5fbGlzdHMgPSB7fTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNhdmUgc29ydCBkYXRhIHRvIHN0b3JlXHJcbiAgICovXHJcbiAgc2F2ZURhdGEoKSB7XHJcbiAgICBzdG9yZS5zZXREYXRhKCB0aGlzLl9rZXksIHRoaXMuX2xpc3RzICk7XHJcbiAgICB0aGlzLmVtaXQoICdzYXZlJywgdGhpcy5fbGlzdHMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWQgc29ydCBkYXRhIGZyb20gc3RvcmVcclxuICAgKi9cclxuICBsb2FkRGF0YSgpIHtcclxuICAgIGxldCBkYXRhID0gc3RvcmUuZ2V0RGF0YSggdGhpcy5fa2V5ICk7XHJcbiAgICB0aGlzLl9saXN0cyA9IGRhdGEgfHwgdGhpcy5fbGlzdHM7XHJcbiAgICB0aGlzLmVtaXQoICdsb2FkJywgdGhpcy5fbGlzdHMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqICBHZXQgYWxsIHNvcnQgZGF0YVxyXG4gICAqL1xyXG4gIGdldERhdGEoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGlzdHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgc29ydCBkYXRhIGZvciBhIGtleVxyXG4gICAqL1xyXG4gIHNldEtleSgga2V5LCBjb2x1bW4sIG9yZGVyLCBzZWFyY2ggKSB7XHJcbiAgICBjb2x1bW4gPSBTdHJpbmcoIGNvbHVtbiB8fCAnaWQnICk7XHJcbiAgICBvcmRlciAgPSBTdHJpbmcoIG9yZGVyIHx8ICdhc2MnICk7XHJcbiAgICBzZWFyY2ggPSBTdHJpbmcoIHNlYXJjaCB8fCAnJyApO1xyXG4gICAgdGhpcy5fbGlzdHNbIGtleSBdID0geyBjb2x1bW4sIG9yZGVyLCBzZWFyY2ggfTtcclxuICAgIHJldHVybiB0aGlzLl9saXN0c1sga2V5IF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgc29ydCBkYXRhIGZvciBhIGtleVxyXG4gICAqL1xyXG4gIGdldEtleSgga2V5ICkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xpc3RzWyBrZXkgXSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG5ldyBzb3J0IG9yZGVyIGZvciBhIGtleVxyXG4gICAqL1xyXG4gIHNvcnRPcmRlcigga2V5LCBjb2x1bW4sIG9yZGVyICkge1xyXG4gICAgbGV0IGQgPSB0aGlzLl9saXN0c1sga2V5IF0gfHwgbnVsbDtcclxuICAgIGlmICggZCApIHtcclxuICAgICAgaWYgKCBjb2x1bW4gIT09IGQuY29sdW1uICkgeyBkLm9yZGVyID0gb3JkZXIgfHwgJ2FzYyc7IH1cclxuICAgICAgZWxzZSB7IGQub3JkZXIgPSAoIGQub3JkZXIgPT09ICdhc2MnICkgPyAnZGVzYycgOiAnYXNjJzsgfVxyXG4gICAgICBkLmNvbHVtbiA9IGNvbHVtbjtcclxuICAgIH1cclxuICAgIHRoaXMuZW1pdCggJ2NoYW5nZScsIHRoaXMuX2xpc3RzICk7XHJcbiAgICB0aGlzLnNhdmVEYXRhKCk7XHJcbiAgICByZXR1cm4gZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IHNlYXJjaCB0ZXh0IGZvciBhIGtleVxyXG4gICAqL1xyXG4gIHNldFNlYXJjaCgga2V5LCB0ZXh0ICkge1xyXG4gICAgbGV0IGQgPSB0aGlzLl9saXN0c1sga2V5IF0gfHwgbnVsbDtcclxuICAgIGlmICggZCApIGQuc2VhcmNoID0gU3RyaW5nKCB0ZXh0IHx8ICcnICkudHJpbSgpO1xyXG4gICAgdGhpcy5lbWl0KCAnY2hhbmdlJywgdGhpcy5fbGlzdHMgKTtcclxuICAgIHJldHVybiBkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgc29ydCBjb2x1bW4gaXMgYWN0aXZlIGZvciBhIGtleVxyXG4gICAqL1xyXG4gIGNoZWNrQWN0aXZlKCBrZXksIGNvbHVtbiApIHtcclxuICAgIGxldCBkID0gdGhpcy5fbGlzdHNbIGtleSBdIHx8IG51bGw7XHJcbiAgICBpZiAoIGQgKSByZXR1cm4gKCBkLmNvbHVtbiA9PT0gY29sdW1uICk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgY3NzIGljb24gc3R5bGUgZm9yIGEga2V5XHJcbiAgICovXHJcbiAgZ2V0U3R5bGVzKCBrZXksIGNvbHVtbiApIHtcclxuICAgIGxldCBkID0gdGhpcy5fbGlzdHNbIGtleSBdIHx8IG51bGw7XHJcbiAgICBsZXQgYyA9IGNvbHVtbiB8fCBkLmNvbHVtbjtcclxuICAgIGlmICggZCAmJiBjID09PSBkLmNvbHVtbiAmJiBkLm9yZGVyID09PSAnYXNjJyApIHJldHVybiAnaWNvbi11cCc7XHJcbiAgICBpZiAoIGQgJiYgYyA9PT0gZC5jb2x1bW4gJiYgZC5vcmRlciA9PT0gJ2Rlc2MnICkgcmV0dXJuICdpY29uLWRvd24nO1xyXG4gICAgcmV0dXJuICdoaWRkZW4nO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvc29ydGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///51\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bus__ = __webpack_require__(1);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Scroller Class.\n * For calling custom function based on scroll position, or to auto-scroll.\n */\n\n\nvar Scroller = function (_Bus) {\n  _inherits(Scroller, _Bus);\n\n  /**\n   * Constructor\n   */\n  function Scroller(target) {\n    _classCallCheck(this, Scroller);\n\n    var _this = _possibleConstructorReturn(this, (Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call(this));\n\n    _this._tdef = document.scrollingElement || document.documentElement || window;\n    _this._target = target instanceof Element ? target : _this._tdef;\n    _this._scrolling = false;\n    _this._pos = 0;\n    _this._to = 0;\n    _this._min = 0;\n    _this._max = 0;\n    _this._ease = 10;\n    _this._triggers = [];\n    _this._onScroll = _this._onScroll.bind(_this);\n    _this.addTrigger('up');\n    _this.addTrigger('down');\n    window.addEventListener('scroll', _this._onScroll);\n    window.addEventListener('resize', _this._onScroll);\n    return _this;\n  }\n\n  /**\n   * Add custom scroll trigger\n   * @param {string}    name   Trigger name\n   * @param {number}    pos    Trigger scroll position\n   * @param {function}  cb     Optional callback handler\n   * @param {object}    data\n   */\n\n\n  _createClass(Scroller, [{\n    key: 'addTrigger',\n    value: function addTrigger(name, pos, cb, data) {\n      var trigger = String(name || '').trim().toLowerCase();\n      var position = parseFloat(pos) || 0;\n      var callback = typeof cb === 'function' ? cb : function () {};\n      var called = false;\n      if (!trigger) return;\n      this._triggers.push(Object.assign({ trigger: trigger, position: position, called: called }, data));\n      this.on(trigger, callback);\n    }\n\n    /**\n     * Reset triggers called state to false\n     */\n\n  }, {\n    key: 'resetTriggers',\n    value: function resetTriggers() {\n      this._triggers.forEach(function (t) {\n        called = false;\n      });\n    }\n\n    /**\n     * When elements enter and leave the viewport area\n     * @param {*}         targets   CSS selector, or array list of target elements\n     * @param {function}  callback  Callback function\n     */\n\n  }, {\n    key: 'onVisible',\n    value: function onVisible(targets, callback) {\n      var elms = this._getElmList(targets);\n      var emap = new Array(elms.length).fill(false);\n      this.addTrigger('reveal', 0, callback, { elms: elms, emap: emap });\n    }\n\n    /**\n     * Auto scroll page to a target destination\n     * @param {*}  dest      String selector, number or element\n     * @param {*}  callback  Callback function\n     */\n\n  }, {\n    key: 'jumpTo',\n    value: function jumpTo(dest, callback) {\n      var scrollHeight = Math.max(0, Math.floor(this._target.scrollHeight || 0));\n      var clientHeight = Math.max(0, Math.floor(this._target.clientHeight || 0));\n\n      this._max = Math.floor(scrollHeight - clientHeight);\n      this._pos = this._target.scrollTop || 0;\n      this._to = this._pos;\n\n      if (typeof dest === 'number') {\n        this._to = dest;\n      } else if ((typeof dest === 'undefined' ? 'undefined' : _typeof(dest)) === 'object' && dest instanceof Element) {\n        this._to = this._pos + dest.getBoundingClientRect().top || this._pos;\n      } else if (typeof dest === 'string') {\n        if (/^(up|top)$/i.test(dest)) {\n          this._to = this._min;\n        } else if (/^(middle|center)$/i.test(dest)) {\n          this._to = this._max / 2;\n        } else if (/^(down|bottom)$/i.test(dest)) {\n          this._to = this._max;\n        } else if (/^([0-9]+)$/.test(dest)) {\n          this._to = parseInt(dest);\n        } else {\n          var node = document.querySelector(dest);\n          this._to = node ? this._pos + node.getBoundingClientRect().top : this._pos;\n        }\n      }\n      this._to = Math.max(this._min, Math.min(this._to, this._max));\n      this._jumpLoop(callback);\n    }\n\n    /**\n     * Autoscroll animation loop\n     */\n\n  }, {\n    key: '_jumpLoop',\n    value: function _jumpLoop(cb) {\n      var _this2 = this;\n\n      if (Math.abs(this._to - this._pos) < 1) {\n        this._scrolling = false;\n        this._target.scrollTop = this._to;\n        this._onScrollTick();\n        if (typeof cb === 'function') cb(this._to);\n        return;\n      }\n      this._scrolling = true;\n      this._pos += (this._to - this._pos) / this._ease;\n      this._target.scrollTop = this._pos;\n      window.requestAnimationFrame(function () {\n        _this2._jumpLoop(cb);\n      });\n    }\n\n    // check scroll behavior\n\n  }, {\n    key: '_onScrollTick',\n    value: function _onScrollTick() {\n      var sp = this._target.scrollTop | 0;\n      this.emit('scroll', sp);\n\n      for (var i = 0; i < this._triggers.length; ++i) {\n        var t = this._triggers[i];\n\n        if (t.trigger === 'up') {\n          var check = sp < this._pos;\n          if (!t.called && check) this.emit(t.trigger, sp);\n          t.called = check;\n        }\n        if (t.trigger === 'down') {\n          var _check = sp > this._pos;\n          if (!t.called && _check) this.emit(t.trigger, sp);\n          t.called = _check;\n        }\n        if (t.trigger === 'more') {\n          var _check2 = sp > t.position;\n          if (!t.called && _check2) this.emit(t.trigger, sp);\n          t.called = _check2;\n        }\n        if (t.trigger === 'less') {\n          var _check3 = sp < t.position;\n          if (!t.called && _check3) this.emit(t.trigger, sp);\n          t.called = _check3;\n        }\n        if (t.trigger === 'reveal' && t.elms) {\n          for (var _i = 0; _i < t.elms.length; ++_i) {\n            var e = t.elms[_i];\n            var c = t.emap[_i];\n            var v = this._checkVisible(e);\n            if (!c && v) this.emit('show', e, sp); // entering\n            if (c && !v) this.emit('hide', e, sp); // leaving\n            t.emap[_i] = v;\n          }\n        }\n      }\n      this._pos = sp;\n    }\n\n    /**\n     * Checks if an element is visible within the height of the scroll window\n     * @param {element} elm  Element object\n     */\n\n  }, {\n    key: '_checkVisible',\n    value: function _checkVisible(elm) {\n      var height = this._target.clientHeight | 0;\n      var box = elm.getBoundingClientRect();\n      var yPos = box.top + box.height / 2; // elm middle\n      return yPos >= 0 && yPos <= height;\n    }\n\n    /**\n     * Handler for native scroll event\n     * @param {object}  e  Event object\n     */\n\n  }, {\n    key: '_onScroll',\n    value: function _onScroll(e) {\n      var _this3 = this;\n\n      if (this._scrolling) return;\n      this._scrolling = true;\n      window.requestAnimationFrame(function () {\n        _this3._onScrollTick();\n        _this3._scrolling = false;\n      });\n    }\n\n    /**\n     * Resolve list of elements from an arg\n     * @param {*}  elms  String selector, nodelist or array\n     */\n\n  }, {\n    key: '_getElmList',\n    value: function _getElmList(elms) {\n      if (typeof elms === 'string') return document.querySelectorAll(elms);\n      if (Array.isArray(elms) || elms instanceof NodeList) return elms;\n      if (elms instanceof Element) return [elms];\n      return [];\n    }\n  }]);\n\n  return Scroller;\n}(__WEBPACK_IMPORTED_MODULE_0__bus__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Scroller);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///52\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__viewport__ = __webpack_require__(54);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Tooltips Class.\n * Adds custom tooltips to elements on the page.\n */\n\n\nvar Tooltip = function () {\n\n  // class constructor\n  function Tooltip(options) {\n    _classCallCheck(this, Tooltip);\n\n    this._options = Object.assign({\n      // class to apply to tooltip element\n      tipClass: 'tooltip-wrap',\n      // class to apply when tooltip is placed on the left\n      leftClass: 'tooltip-left',\n      // class to apply when tooltip is placed on the right\n      rightClass: 'tooltip-right',\n      // class to apply when tooltip is placed on the top\n      topClass: 'tooltip-top',\n      // class to apply when tooltip is placed on the bottom\n      bottomClass: 'tooltip-bottom',\n      // delay to show the tooltip\n      showDelay: 100,\n      // auto hide delay\n      hideDelay: 3000\n      // ...\n    }, options);\n\n    this._tooltip = null;\n    this._hovItem = null;\n    this._timeout = null;\n    this._autohide = null;\n    this._visible = false;\n    this._elements = [];\n    this._onScroll = this._onScroll.bind(this);\n    this._init();\n  }\n\n  // set target elements\n\n\n  _createClass(Tooltip, [{\n    key: 'select',\n    value: function select(selector) {\n      if (typeof selector === 'string') {\n        this._elements = document.querySelectorAll(selector) || [];\n      } else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) === 'object' && selector instanceof Element) {\n        this._elements.push(selector);\n      }\n      for (var i = 0; i < this._elements.length; ++i) {\n        this._setupItem(this._elements[i]);\n      }\n      this._hideTooltip();\n    }\n\n    // remove element from the list\n\n  }, {\n    key: 'unselect',\n    value: function unselect(element) {\n      if ((typeof element === 'undefined' ? 'undefined' : _typeof(element)) === 'object' && element instanceof Element) {\n        for (var i = 0, t = this._elements.length; i < t; ++i) {\n          if (this._elements[i] === element) {\n            this._resetItem(this._elements[i]);\n            this._elements.splice(i, 1);\n            break;\n          }\n        }\n        this._hideTooltip();\n      }\n    }\n\n    // cleanup this instance\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      for (var i = 0; i < this._elements.length; ++i) {\n        this._resetItem(this._elements[i]);\n      }\n      if (document.body.contains(this._tooltip)) {\n        document.body.removeChild(this._tooltip);\n      }\n      window.removeEventListener('scroll', this._onScroll);\n      this._elements = [];\n      this._tooltip = null;\n    }\n\n    // initlaize elements\n\n  }, {\n    key: '_init',\n    value: function _init() {\n      this._tooltip = document.createElement('div');\n      this._tooltip.className = this._options.tipClass;\n      this._tooltip.style['display'] = 'block';\n      this._tooltip.style['position'] = 'absolute';\n      this._tooltip.style['pointer-events'] = 'none';\n      this._hideTooltip();\n      document.body.appendChild(this._tooltip);\n      window.addEventListener('scroll', this._onScroll);\n    }\n\n    // set an element to have tooltip, if not alredy setup\n\n  }, {\n    key: '_setupItem',\n    value: function _setupItem(item) {\n      var _this = this;\n\n      if (item && item instanceof Element) {\n        if (item.hasAttribute('title')) {\n          item.setAttribute('data-tip', item.getAttribute('title') || '');\n          item.removeAttribute('title');\n          item.addEventListener('mouseenter', function (e) {\n            _this._onEnter(e);\n          });\n          item.addEventListener('touchstart', function (e) {\n            _this._onEnter(e);\n          });\n          item.addEventListener('mouseleave', function (e) {\n            _this._onLeave(e);\n          });\n          item.addEventListener('touchend', function (e) {\n            _this._onLeave(e);\n          });\n        }\n      }\n    }\n\n    // remove tooltip events from element, if needed\n\n  }, {\n    key: '_resetItem',\n    value: function _resetItem(item) {\n      var _this2 = this;\n\n      if (item && item instanceof Element) {\n        if (item.hasAttribute('data-tip')) {\n          item.setAttribute('title', item.getAttribute('data-tip') || '');\n          item.removeAttribute('data-tip');\n          item.removeEventListener('mouseenter', function (e) {\n            _this2._onEnter(e);\n          });\n          item.removeEventListener('touchstart', function (e) {\n            _this2._onEnter(e);\n          });\n          item.removeEventListener('mouseleave', function (e) {\n            _this2._onLeave(e);\n          });\n          item.removeEventListener('touchend', function (e) {\n            _this2._onLeave(e);\n          });\n        }\n      }\n    }\n\n    // decides where to place the tooltip in relation to item and screen bounds\n\n  }, {\n    key: '_showTooltip',\n    value: function _showTooltip() {\n      if (this._tooltip && this._hovItem) {\n\n        var box = this._hovItem.getBoundingClientRect(),\n            centerX = box.left + (this._hovItem.offsetWidth - this._tooltip.offsetWidth) / 2,\n            centerY = box.top + (this._hovItem.offsetHeight - this._tooltip.offsetHeight) / 2,\n            leftPos = box.left - this._tooltip.offsetWidth,\n            rightPos = box.left + this._hovItem.offsetWidth,\n            topPos = box.top - this._tooltip.offsetHeight,\n            bottomPos = box.top + this._hovItem.offsetHeight,\n            tipHalf = this._tooltip.offsetWidth / 2,\n            clss = this._options.topClass,\n            left = centerX,\n            top = topPos;\n\n        // move to the right\n        if (box.left < tipHalf) {\n          clss = this._options.rightClass;\n          left = rightPos;\n          top = centerY;\n        }\n        // move to the left\n        else if (__WEBPACK_IMPORTED_MODULE_0__viewport__[\"a\" /* default */].clientWidth() - rightPos < tipHalf) {\n            clss = this._options.leftClass;\n            left = leftPos;\n            top = centerY;\n          }\n          // move to the bottom\n          else if (topPos < 0) {\n              clss = this._options.bottomClass;\n              left = centerX;\n              top = bottomPos;\n            }\n        if (left > 1 && top > 1 && this._tooltip.innerHTML) {\n          this._tooltip.className = this._options.tipClass + ' ' + clss;\n          this._tooltip.style['left'] = __WEBPACK_IMPORTED_MODULE_0__viewport__[\"a\" /* default */].scrollLeft() + left + 'px';\n          this._tooltip.style['top'] = __WEBPACK_IMPORTED_MODULE_0__viewport__[\"a\" /* default */].scrollTop() + top + 'px';\n          this._visible = true;\n        }\n      }\n    }\n\n    // move tooltip object off screen, reset content and class\n\n  }, {\n    key: '_hideTooltip',\n    value: function _hideTooltip() {\n      if (this._tooltip) {\n        this._tooltip.innerHTML = '';\n        this._tooltip.className = this._options.tipClass;\n        this._tooltip.style['left'] = '-1000px';\n        this._tooltip.style['top'] = '-1000px';\n        this._visible = false;\n      }\n    }\n\n    // when mouse enters target element\n\n  }, {\n    key: '_onEnter',\n    value: function _onEnter(e) {\n      var item = e.target;\n      var title = item.getAttribute('data-tip');\n\n      if (title) {\n        this._hovItem = item;\n        this._tooltip.innerHTML = title;\n\n        if (this._timeout) clearTimeout(this._timeout);\n        this._timeout = setTimeout(this._showTooltip.bind(this), this._options.showDelay);\n\n        if (this._autohide) clearTimeout(this._autohide);\n        this._autohide = setTimeout(this._hideTooltip.bind(this), this._options.hideDelay);\n      }\n    }\n\n    // when mouse leaves target element\n\n  }, {\n    key: '_onLeave',\n    value: function _onLeave(e) {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n        this._timeout = null;\n      }\n      this._hovItem = null;\n      this._hideTooltip();\n    }\n\n    // hide tooltip over fixed elements when scrolled\n\n  }, {\n    key: '_onScroll',\n    value: function _onScroll(e) {\n      if (this._visible) {\n        this._hideTooltip();\n      }\n    }\n  }]);\n\n  return Tooltip;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Tooltip);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/**\r\n * Viewport Object.\r\n * Helper for working with viewport data.\r\n */\nvar _w = window || {};\nvar _s = window.screen || {};\nvar _d = document.documentElement || {};\nvar _b = document.body || {};\n\n/* harmony default export */ __webpack_exports__["a"] = ({\n  screenWidth: function screenWidth() {\n    return Math.max(0, _s.width || _s.availWidth || 0);\n  },\n  screenHeight: function screenHeight() {\n    return Math.max(0, _s.height || _s.availHeight || 0);\n  },\n  clientWidth: function clientWidth() {\n    return Math.max(0, _w.innerWidth || _d.clientWidth || _b.clientWidth || 0);\n  },\n  clientHeight: function clientHeight() {\n    return Math.max(0, _w.innerHeight || _d.clientHeight || _b.clientHeight || 0);\n  },\n  pageWidth: function pageWidth() {\n    return Math.max(0, _b.scrollWidth || 0, _b.offsetWidth || 0, _d.clientWidth || 0, _d.offsetWidth || 0, _d.scrollWidth || 0);\n  },\n  pageHeight: function pageHeight() {\n    return Math.max(0, _b.scrollHeight || 0, _b.offsetHeight || 0, _d.clientHeight || 0, _d.offsetHeight || 0, _d.scrollHeight || 0);\n  },\n  pageLeft: function pageLeft() {\n    return Math.max(0, _d.clientLeft || _b.clientLeft || 0);\n  },\n  pageTop: function pageTop() {\n    return Math.max(0, _d.clientTop || _b.clientTop || 0);\n  },\n  scrollLeft: function scrollLeft() {\n    return Math.max(0, _w.pageXOffset || _d.scrollLeft || _b.scrollLeft || 0) - this.pageLeft();\n  },\n  scrollTop: function scrollTop() {\n    return Math.max(0, _w.pageYOffset || _d.scrollTop || _b.scrollTop || 0) - this.pageTop();\n  },\n  scrollRight: function scrollRight() {\n    // max right\n    return Math.max(0, Math.floor(this.pageWidth() - this.clientWidth()));\n  },\n  scrollBottom: function scrollBottom() {\n    // max bottom\n    return Math.max(0, Math.floor(this.pageHeight() - this.clientHeight()));\n  },\n  mouseLeft: function mouseLeft(e) {\n    var t = e && e.changedTouches ? e.changedTouches[0] : {};\n    return e ? Math.max(0, t.pageX || e.pageX || e.clientX || 0) : 0;\n  },\n  mouseTop: function mouseTop(e) {\n    var t = e && e.changedTouches ? e.changedTouches[0] : {};\n    return e ? Math.max(0, t.pageY || e.pageY || e.clientY || 0) : 0;\n  },\n  centerX: function centerX(e) {\n    // pointer axis from center\n    return this.mouseLeft(e) - this.clientWidth() / 2;\n  },\n  centerY: function centerY(e) {\n    // pointer axis from center\n    return this.mouseTop(e) - this.clientHeight() / 2;\n  },\n  elementWidth: function elementWidth(e) {\n    // border-box\n    return e ? Math.max(0, e.offsetWidth || 0) : 0;\n  },\n  elementHeight: function elementHeight(e) {\n    // border-box\n    return e ? Math.max(0, e.offsetHeight || 0) : 0;\n  },\n  elementLeft: function elementLeft(e) {\n    // from window\n    return e ? e.getBoundingClientRect().left : 0;\n  },\n  elementTop: function elementTop(e) {\n    // from window\n    return e ? e.getBoundingClientRect().top : 0;\n  },\n  clampValue: function clampValue(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy92aWV3cG9ydC5qcz85MzQ4Il0sIm5hbWVzIjpbIl93Iiwid2luZG93IiwiX3MiLCJzY3JlZW4iLCJfZCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiX2IiLCJib2R5Iiwic2NyZWVuV2lkdGgiLCJNYXRoIiwibWF4Iiwid2lkdGgiLCJhdmFpbFdpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwiYXZhaWxIZWlnaHQiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsInBhZ2VXaWR0aCIsInNjcm9sbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJwYWdlSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwicGFnZUxlZnQiLCJjbGllbnRMZWZ0IiwicGFnZVRvcCIsImNsaWVudFRvcCIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsUmlnaHQiLCJmbG9vciIsInNjcm9sbEJvdHRvbSIsIm1vdXNlTGVmdCIsImUiLCJ0IiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsImNsaWVudFgiLCJtb3VzZVRvcCIsInBhZ2VZIiwiY2xpZW50WSIsImNlbnRlclgiLCJjZW50ZXJZIiwiZWxlbWVudFdpZHRoIiwiZWxlbWVudEhlaWdodCIsImVsZW1lbnRMZWZ0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImVsZW1lbnRUb3AiLCJ0b3AiLCJjbGFtcFZhbHVlIiwidmFsdWUiLCJtaW4iXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBSUEsSUFBTUEsS0FBS0MsVUFBVSxFQUFyQjtBQUNBLElBQU1DLEtBQUtELE9BQU9FLE1BQVAsSUFBaUIsRUFBNUI7QUFDQSxJQUFNQyxLQUFLQyxTQUFTQyxlQUFULElBQTRCLEVBQXZDO0FBQ0EsSUFBTUMsS0FBS0YsU0FBU0csSUFBVCxJQUFpQixFQUE1Qjs7QUFFQSx5REFBZTtBQUNiQyxlQUFhLHVCQUFXO0FBQ3RCLFdBQU9DLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFULEdBQUdVLEtBQUgsSUFBWVYsR0FBR1csVUFBZixJQUE2QixDQUExQyxDQUFQO0FBQ0QsR0FIWTtBQUliQyxnQkFBYyx3QkFBVztBQUN2QixXQUFPSixLQUFLQyxHQUFMLENBQVUsQ0FBVixFQUFhVCxHQUFHYSxNQUFILElBQWFiLEdBQUdjLFdBQWhCLElBQStCLENBQTVDLENBQVA7QUFDRCxHQU5ZO0FBT2JDLGVBQWEsdUJBQVc7QUFDdEIsV0FBT1AsS0FBS0MsR0FBTCxDQUFVLENBQVYsRUFBYVgsR0FBR2tCLFVBQUgsSUFBaUJkLEdBQUdhLFdBQXBCLElBQW1DVixHQUFHVSxXQUF0QyxJQUFxRCxDQUFsRSxDQUFQO0FBQ0QsR0FUWTtBQVViRSxnQkFBYyx3QkFBVztBQUN2QixXQUFPVCxLQUFLQyxHQUFMLENBQVUsQ0FBVixFQUFhWCxHQUFHb0IsV0FBSCxJQUFrQmhCLEdBQUdlLFlBQXJCLElBQXFDWixHQUFHWSxZQUF4QyxJQUF3RCxDQUFyRSxDQUFQO0FBQ0QsR0FaWTtBQWFiRSxhQUFXLHFCQUFXO0FBQ3BCLFdBQU9YLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFKLEdBQUdlLFdBQUgsSUFBa0IsQ0FBL0IsRUFBa0NmLEdBQUdnQixXQUFILElBQWtCLENBQXBELEVBQXVEbkIsR0FBR2EsV0FBSCxJQUFrQixDQUF6RSxFQUE0RWIsR0FBR21CLFdBQUgsSUFBa0IsQ0FBOUYsRUFBaUduQixHQUFHa0IsV0FBSCxJQUFrQixDQUFuSCxDQUFQO0FBQ0QsR0FmWTtBQWdCYkUsY0FBWSxzQkFBVztBQUNyQixXQUFPZCxLQUFLQyxHQUFMLENBQVUsQ0FBVixFQUFhSixHQUFHa0IsWUFBSCxJQUFtQixDQUFoQyxFQUFtQ2xCLEdBQUdtQixZQUFILElBQW1CLENBQXRELEVBQXlEdEIsR0FBR2UsWUFBSCxJQUFtQixDQUE1RSxFQUErRWYsR0FBR3NCLFlBQUgsSUFBbUIsQ0FBbEcsRUFBcUd0QixHQUFHcUIsWUFBSCxJQUFtQixDQUF4SCxDQUFQO0FBQ0QsR0FsQlk7QUFtQmJFLFlBQVUsb0JBQVc7QUFDbkIsV0FBT2pCLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFQLEdBQUd3QixVQUFILElBQWlCckIsR0FBR3FCLFVBQXBCLElBQWtDLENBQS9DLENBQVA7QUFDRCxHQXJCWTtBQXNCYkMsV0FBUyxtQkFBVztBQUNsQixXQUFPbkIsS0FBS0MsR0FBTCxDQUFVLENBQVYsRUFBYVAsR0FBRzBCLFNBQUgsSUFBZ0J2QixHQUFHdUIsU0FBbkIsSUFBZ0MsQ0FBN0MsQ0FBUDtBQUNELEdBeEJZO0FBeUJiQyxjQUFZLHNCQUFXO0FBQ3JCLFdBQU9yQixLQUFLQyxHQUFMLENBQVUsQ0FBVixFQUFhWCxHQUFHZ0MsV0FBSCxJQUFrQjVCLEdBQUcyQixVQUFyQixJQUFtQ3hCLEdBQUd3QixVQUF0QyxJQUFvRCxDQUFqRSxJQUF1RSxLQUFLSixRQUFMLEVBQTlFO0FBQ0QsR0EzQlk7QUE0QmJNLGFBQVcscUJBQVc7QUFDcEIsV0FBT3ZCLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFYLEdBQUdrQyxXQUFILElBQWtCOUIsR0FBRzZCLFNBQXJCLElBQWtDMUIsR0FBRzBCLFNBQXJDLElBQWtELENBQS9ELElBQXFFLEtBQUtKLE9BQUwsRUFBNUU7QUFDRCxHQTlCWTtBQStCYk0sZUFBYSx1QkFBVztBQUFFO0FBQ3hCLFdBQU96QixLQUFLQyxHQUFMLENBQVUsQ0FBVixFQUFhRCxLQUFLMEIsS0FBTCxDQUFZLEtBQUtmLFNBQUwsS0FBbUIsS0FBS0osV0FBTCxFQUEvQixDQUFiLENBQVA7QUFDRCxHQWpDWTtBQWtDYm9CLGdCQUFjLHdCQUFXO0FBQUU7QUFDekIsV0FBTzNCLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWFELEtBQUswQixLQUFMLENBQVksS0FBS1osVUFBTCxLQUFvQixLQUFLTCxZQUFMLEVBQWhDLENBQWIsQ0FBUDtBQUNELEdBcENZO0FBcUNibUIsYUFBVyxtQkFBVUMsQ0FBVixFQUFjO0FBQ3ZCLFFBQUlDLElBQU1ELEtBQUtBLEVBQUVFLGNBQVQsR0FBNEJGLEVBQUVFLGNBQUYsQ0FBa0IsQ0FBbEIsQ0FBNUIsR0FBb0QsRUFBNUQ7QUFDQSxXQUFPRixJQUFJN0IsS0FBS0MsR0FBTCxDQUFVLENBQVYsRUFBYTZCLEVBQUVFLEtBQUYsSUFBV0gsRUFBRUcsS0FBYixJQUFzQkgsRUFBRUksT0FBeEIsSUFBbUMsQ0FBaEQsQ0FBSixHQUEwRCxDQUFqRTtBQUNELEdBeENZO0FBeUNiQyxZQUFVLGtCQUFVTCxDQUFWLEVBQWM7QUFDdEIsUUFBSUMsSUFBTUQsS0FBS0EsRUFBRUUsY0FBVCxHQUE0QkYsRUFBRUUsY0FBRixDQUFrQixDQUFsQixDQUE1QixHQUFvRCxFQUE1RDtBQUNBLFdBQU9GLElBQUk3QixLQUFLQyxHQUFMLENBQVUsQ0FBVixFQUFhNkIsRUFBRUssS0FBRixJQUFXTixFQUFFTSxLQUFiLElBQXNCTixFQUFFTyxPQUF4QixJQUFtQyxDQUFoRCxDQUFKLEdBQTBELENBQWpFO0FBQ0QsR0E1Q1k7QUE2Q2JDLFdBQVMsaUJBQVVSLENBQVYsRUFBYztBQUFFO0FBQ3ZCLFdBQVMsS0FBS0QsU0FBTCxDQUFnQkMsQ0FBaEIsSUFBd0IsS0FBS3RCLFdBQUwsS0FBcUIsQ0FBdEQ7QUFDRCxHQS9DWTtBQWdEYitCLFdBQVMsaUJBQVVULENBQVYsRUFBYztBQUFFO0FBQ3ZCLFdBQVMsS0FBS0ssUUFBTCxDQUFlTCxDQUFmLElBQXVCLEtBQUtwQixZQUFMLEtBQXNCLENBQXREO0FBQ0QsR0FsRFk7QUFtRGI4QixnQkFBYyxzQkFBVVYsQ0FBVixFQUFjO0FBQUU7QUFDNUIsV0FBT0EsSUFBSTdCLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWE0QixFQUFFaEIsV0FBRixJQUFpQixDQUE5QixDQUFKLEdBQXdDLENBQS9DO0FBQ0QsR0FyRFk7QUFzRGIyQixpQkFBZSx1QkFBVVgsQ0FBVixFQUFjO0FBQUU7QUFDN0IsV0FBT0EsSUFBSTdCLEtBQUtDLEdBQUwsQ0FBVSxDQUFWLEVBQWE0QixFQUFFYixZQUFGLElBQWtCLENBQS9CLENBQUosR0FBeUMsQ0FBaEQ7QUFDRCxHQXhEWTtBQXlEYnlCLGVBQWEscUJBQVVaLENBQVYsRUFBYztBQUFFO0FBQzNCLFdBQU9BLElBQUlBLEVBQUVhLHFCQUFGLEdBQTBCQyxJQUE5QixHQUFxQyxDQUE1QztBQUNELEdBM0RZO0FBNERiQyxjQUFZLG9CQUFVZixDQUFWLEVBQWM7QUFBRTtBQUMxQixXQUFPQSxJQUFJQSxFQUFFYSxxQkFBRixHQUEwQkcsR0FBOUIsR0FBb0MsQ0FBM0M7QUFDRCxHQTlEWTtBQStEYkMsY0FBWSxvQkFBVUMsS0FBVixFQUFpQkMsR0FBakIsRUFBc0IvQyxHQUF0QixFQUE0QjtBQUN0QyxXQUFPRCxLQUFLQyxHQUFMLENBQVUrQyxHQUFWLEVBQWVoRCxLQUFLZ0QsR0FBTCxDQUFVRCxLQUFWLEVBQWlCOUMsR0FBakIsQ0FBZixDQUFQO0FBQ0Q7QUFqRVksQ0FBZiIsImZpbGUiOiI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBWaWV3cG9ydCBPYmplY3QuXHJcbiAqIEhlbHBlciBmb3Igd29ya2luZyB3aXRoIHZpZXdwb3J0IGRhdGEuXHJcbiAqL1xyXG5jb25zdCBfdyA9IHdpbmRvdyB8fCB7fTtcclxuY29uc3QgX3MgPSB3aW5kb3cuc2NyZWVuIHx8IHt9O1xyXG5jb25zdCBfZCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCB7fTtcclxuY29uc3QgX2IgPSBkb2N1bWVudC5ib2R5IHx8IHt9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIHNjcmVlbldpZHRoOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBNYXRoLm1heCggMCwgX3Mud2lkdGggfHwgX3MuYXZhaWxXaWR0aCB8fCAwICk7XHJcbiAgfSxcclxuICBzY3JlZW5IZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KCAwLCBfcy5oZWlnaHQgfHwgX3MuYXZhaWxIZWlnaHQgfHwgMCApO1xyXG4gIH0sXHJcbiAgY2xpZW50V2lkdGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KCAwLCBfdy5pbm5lcldpZHRoIHx8IF9kLmNsaWVudFdpZHRoIHx8IF9iLmNsaWVudFdpZHRoIHx8IDAgKTtcclxuICB9LFxyXG4gIGNsaWVudEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoIDAsIF93LmlubmVySGVpZ2h0IHx8IF9kLmNsaWVudEhlaWdodCB8fCBfYi5jbGllbnRIZWlnaHQgfHwgMCApO1xyXG4gIH0sXHJcbiAgcGFnZVdpZHRoOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBNYXRoLm1heCggMCwgX2Iuc2Nyb2xsV2lkdGggfHwgMCwgX2Iub2Zmc2V0V2lkdGggfHwgMCwgX2QuY2xpZW50V2lkdGggfHwgMCwgX2Qub2Zmc2V0V2lkdGggfHwgMCwgX2Quc2Nyb2xsV2lkdGggfHwgMCApO1xyXG4gIH0sXHJcbiAgcGFnZUhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoIDAsIF9iLnNjcm9sbEhlaWdodCB8fCAwLCBfYi5vZmZzZXRIZWlnaHQgfHwgMCwgX2QuY2xpZW50SGVpZ2h0IHx8IDAsIF9kLm9mZnNldEhlaWdodCB8fCAwLCBfZC5zY3JvbGxIZWlnaHQgfHwgMCApO1xyXG4gIH0sXHJcbiAgcGFnZUxlZnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KCAwLCBfZC5jbGllbnRMZWZ0IHx8IF9iLmNsaWVudExlZnQgfHwgMCApO1xyXG4gIH0sXHJcbiAgcGFnZVRvcDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoIDAsIF9kLmNsaWVudFRvcCB8fCBfYi5jbGllbnRUb3AgfHwgMCApO1xyXG4gIH0sXHJcbiAgc2Nyb2xsTGVmdDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoIDAsIF93LnBhZ2VYT2Zmc2V0IHx8IF9kLnNjcm9sbExlZnQgfHwgX2Iuc2Nyb2xsTGVmdCB8fCAwICkgLSB0aGlzLnBhZ2VMZWZ0KCk7XHJcbiAgfSxcclxuICBzY3JvbGxUb3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KCAwLCBfdy5wYWdlWU9mZnNldCB8fCBfZC5zY3JvbGxUb3AgfHwgX2Iuc2Nyb2xsVG9wIHx8IDAgKSAtIHRoaXMucGFnZVRvcCgpO1xyXG4gIH0sXHJcbiAgc2Nyb2xsUmlnaHQ6IGZ1bmN0aW9uKCkgeyAvLyBtYXggcmlnaHRcclxuICAgIHJldHVybiBNYXRoLm1heCggMCwgTWF0aC5mbG9vciggdGhpcy5wYWdlV2lkdGgoKSAtIHRoaXMuY2xpZW50V2lkdGgoKSApICk7XHJcbiAgfSxcclxuICBzY3JvbGxCb3R0b206IGZ1bmN0aW9uKCkgeyAvLyBtYXggYm90dG9tXHJcbiAgICByZXR1cm4gTWF0aC5tYXgoIDAsIE1hdGguZmxvb3IoIHRoaXMucGFnZUhlaWdodCgpIC0gdGhpcy5jbGllbnRIZWlnaHQoKSApICk7XHJcbiAgfSxcclxuICBtb3VzZUxlZnQ6IGZ1bmN0aW9uKCBlICkge1xyXG4gICAgdmFyIHQgPSAoIGUgJiYgZS5jaGFuZ2VkVG91Y2hlcyApID8gZS5jaGFuZ2VkVG91Y2hlc1sgMCBdIDoge307XHJcbiAgICByZXR1cm4gZSA/IE1hdGgubWF4KCAwLCB0LnBhZ2VYIHx8IGUucGFnZVggfHwgZS5jbGllbnRYIHx8IDAgKSA6IDA7XHJcbiAgfSxcclxuICBtb3VzZVRvcDogZnVuY3Rpb24oIGUgKSB7XHJcbiAgICB2YXIgdCA9ICggZSAmJiBlLmNoYW5nZWRUb3VjaGVzICkgPyBlLmNoYW5nZWRUb3VjaGVzWyAwIF0gOiB7fTtcclxuICAgIHJldHVybiBlID8gTWF0aC5tYXgoIDAsIHQucGFnZVkgfHwgZS5wYWdlWSB8fCBlLmNsaWVudFkgfHwgMCApIDogMDtcclxuICB9LFxyXG4gIGNlbnRlclg6IGZ1bmN0aW9uKCBlICkgeyAvLyBwb2ludGVyIGF4aXMgZnJvbSBjZW50ZXJcclxuICAgIHJldHVybiAoIHRoaXMubW91c2VMZWZ0KCBlICkgLSAoIHRoaXMuY2xpZW50V2lkdGgoKSAvIDIgKSApO1xyXG4gIH0sXHJcbiAgY2VudGVyWTogZnVuY3Rpb24oIGUgKSB7IC8vIHBvaW50ZXIgYXhpcyBmcm9tIGNlbnRlclxyXG4gICAgcmV0dXJuICggdGhpcy5tb3VzZVRvcCggZSApIC0gKCB0aGlzLmNsaWVudEhlaWdodCgpIC8gMiApICk7XHJcbiAgfSxcclxuICBlbGVtZW50V2lkdGg6IGZ1bmN0aW9uKCBlICkgeyAvLyBib3JkZXItYm94XHJcbiAgICByZXR1cm4gZSA/IE1hdGgubWF4KCAwLCBlLm9mZnNldFdpZHRoIHx8IDAgKSA6IDA7XHJcbiAgfSxcclxuICBlbGVtZW50SGVpZ2h0OiBmdW5jdGlvbiggZSApIHsgLy8gYm9yZGVyLWJveFxyXG4gICAgcmV0dXJuIGUgPyBNYXRoLm1heCggMCwgZS5vZmZzZXRIZWlnaHQgfHwgMCApIDogMDtcclxuICB9LFxyXG4gIGVsZW1lbnRMZWZ0OiBmdW5jdGlvbiggZSApIHsgLy8gZnJvbSB3aW5kb3dcclxuICAgIHJldHVybiBlID8gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IDogMDtcclxuICB9LFxyXG4gIGVsZW1lbnRUb3A6IGZ1bmN0aW9uKCBlICkgeyAvLyBmcm9tIHdpbmRvd1xyXG4gICAgcmV0dXJuIGUgPyBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA6IDA7XHJcbiAgfSxcclxuICBjbGFtcFZhbHVlOiBmdW5jdGlvbiggdmFsdWUsIG1pbiwgbWF4ICkge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCB2YWx1ZSwgbWF4ICkgKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvdmlld3BvcnQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///54\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/**\n * Basic sentiment analysis module\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // score list data\n  _afinn: {},\n\n  // words that negate the score of a following word\n  _negators: [\"cant\", \"can't\", \"dont\", \"don't\", \"doesnt\", \"doesn't\", \"not\", \"non\", \"wont\", \"won't\", \"isnt\", \"isn't\", \"wouldnt\", \"wouldn't\", \"couldnt\", \"couldn't\", \"didnt\", \"didn't\", \"wasnt\", \"wasn't\", \"havent\", \"haven't\", \"ain't\", \"aint\", \"werent\", \"weren't\"],\n\n  // build afinn wordlist\n  merge: function merge(list) {\n    this._afinn = Object.assign(this._afinn, list);\n  },\n\n\n  // analyse sentiment for text\n  analyze: function analyze(text) {\n    var score = 0;\n    var negative = 0;\n    var positive = 0;\n    var comparative = 0;\n    var list = this._splitWords(text);\n    var total = list.length;\n    var i = total;\n\n    // loop filtered input words\n    while (i--) {\n      if (!this._afinn.hasOwnProperty(list[i])) continue; // not found\n\n      var w = list[i]; // current word\n      var p = i > 0 ? list[i - 1] : ''; // previous word\n      var s = parseFloat(this._afinn[w]) | 0; // word score\n\n      if (!p || !s) continue; // no score\n      if (this._negators.indexOf(p) >= 0) s *= -1; // flip score\n      if (s > 0) positive += s;\n      if (s < 0) negative += s;\n      score += s;\n    }\n\n    // sentiment string params\n    var params = ['', 'Neutral', 'icon-help iconLeft text-info'];\n    // positive\n    if (score === 1) params = ['+', 'Ok', 'icon-help iconLeft text-success'];\n    if (score > 1) params = ['+', 'Positive', 'icon-like iconLeft text-success'];\n    if (score > 10) params = ['+', 'Positive', 'icon-like iconLeft text-gain'];\n    // negative\n    if (score === -1) params = ['-', 'Ok', 'icon-help iconLeft text-danger'];\n    if (score < -1) params = ['-', 'Negative', 'icon-dislike iconLeft text-danger'];\n    if (score < -10) params = ['-', 'Negative', 'icon-dislike iconLeft text-loss'];\n\n    // build sentiment info\n\n    var _params = params,\n        _params2 = _slicedToArray(_params, 3),\n        sign = _params2[0],\n        word = _params2[1],\n        styles = _params2[2];\n\n    var sentiment = [word, sign + Math.abs(score)].join(' ');\n\n    // build final data\n    comparative = total ? score / total : 0;\n    return { score: score, positive: positive, negative: negative, comparative: comparative, sign: sign, word: word, styles: styles, sentiment: sentiment };\n  },\n\n\n  // filter input text into word list\n  _splitWords: function _splitWords(input) {\n    var div = document.createElement('div');\n    div.innerHTML = String(input || '');\n\n    // strip html\n    var output = String(div.textContent || div.innerText || '').toLowerCase().trim();\n\n    // clean string\n    output = output.replace(/([\\`\\'\\’]+)/g, \"'\") // normalize apostrophes\n    .replace(/([\\“\\”\\“\\”\\\"]+)/g, '\"') // normalize quotes\n    .replace(/([\\-]+)/g, '-') // normalize dashes\n    .replace(/([^a-z\\'\\-]+)/g, ' ') // only allow these\n    .replace(/[\\t\\r\\n\\s\\uFEFF\\xA0]+/g, ' ') // remove whitespace\n    .trim();\n\n    // split\n    return output.split(/\\s+/g);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///55\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__ = __webpack_require__(12);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3345f714_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__ = __webpack_require__(107);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(57)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_3345f714_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlP2Q2YzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI1Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTMzNDVmNzE0XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FwcC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0FwcC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTMzNDVmNzE0XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vQXBwLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlPzQxYzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0zMzQ1ZjcxNFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FwcC52dWVcbi8vIG1vZHVsZSBpZCA9IDU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///57\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Topbar_vue__ = __webpack_require__(13);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_595a8e3d_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Topbar_vue__ = __webpack_require__(62);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(59)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Topbar_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_595a8e3d_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Topbar_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub3BiYXIudnVlPzVmYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTU5NWE4ZTNkXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9wYmFyLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RvcGJhci52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RvcGJhci52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTU5NWE4ZTNkXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9wYmFyLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ub3BiYXIudnVlXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub3BiYXIudnVlPzEyZDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01OTVhOGUzZFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RvcGJhci52dWVcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWU/MzAwZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcIm9taXRcIjoxLFwicmVtb3ZlXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTNmNDNhYjFkXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz9kYXRhPUBpbXBvcnQgXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1wiOyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvRHJvcGRvd24udnVlXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{ref:"menu",staticClass:"dropdown-menu",on:{"mouseleave":_vm.listHide}},[_c(\'div\',{ref:"trigger",staticClass:"dropdown-trigger clickable",on:{"click":_vm.listShow}},[_vm._t("trigger")],2),_vm._v(" "),_c(\'div\',{staticClass:"dropdown-container",class:{ \'visible\': _vm.visible, \'top\': _vm.top, \'right\': _vm.right, \'bottom\': _vm.bottom, \'left\': _vm.left },on:{"click":function($event){$event.stopPropagation();}}},[_vm._t("list")],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ecm9wZG93bi52dWU/NGQ0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQiwyQ0FBMkMsMkJBQTJCLFlBQVksMkRBQTJELHNCQUFzQiw4Q0FBOEMsd0NBQXdDLHFHQUFxRyxLQUFLLHlCQUF5Qiw0QkFBNEI7QUFDbGdCO0FBQ0EsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6IjYxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3JlZjpcIm1lbnVcIixzdGF0aWNDbGFzczpcImRyb3Bkb3duLW1lbnVcIixvbjp7XCJtb3VzZWxlYXZlXCI6X3ZtLmxpc3RIaWRlfX0sW19jKCdkaXYnLHtyZWY6XCJ0cmlnZ2VyXCIsc3RhdGljQ2xhc3M6XCJkcm9wZG93bi10cmlnZ2VyIGNsaWNrYWJsZVwiLG9uOntcImNsaWNrXCI6X3ZtLmxpc3RTaG93fX0sW192bS5fdChcInRyaWdnZXJcIildLDIpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZHJvcGRvd24tY29udGFpbmVyXCIsY2xhc3M6eyAndmlzaWJsZSc6IF92bS52aXNpYmxlLCAndG9wJzogX3ZtLnRvcCwgJ3JpZ2h0JzogX3ZtLnJpZ2h0LCAnYm90dG9tJzogX3ZtLmJvdHRvbSwgJ2xlZnQnOiBfdm0ubGVmdCB9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fX19LFtfdm0uX3QoXCJsaXN0XCIpXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0zZjQzYWIxZFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0Ryb3Bkb3duLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///61\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'header\',{staticClass:"topbar-wrap",class:{ \'collapsed\': _vm.header.collapsed }},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"topbar-main flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"topbar-logo"},[_c(\'h1\',{staticClass:"text-primary-hover clickable",on:{"click":function($event){_vm.setRoute( \'/\' )}}},[_c(\'i\',{staticClass:"icon-chart-line"}),_vm._v(" "),_c(\'span\',{staticClass:"text-uppercase text-clip if-medium"},[_vm._v("Binance Watch")])])]),_vm._v(" "),_c(\'div\',{staticClass:"topbar-prices flex-row flex-middle flex-1"},_vm._l((_vm.assetPrices),function(a,i){return (_vm.options.prices.header)?_c(\'div\',{key:a.token,staticClass:"text-clip clickable fx fx-slide-down",class:\'fx-delay-\' + (i + 1),on:{"click":function($event){_vm.setRoute( a.route )}}},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(a.token))]),_vm._v(" "),_c(\'span\',{class:{ \'text-gain\': ( a.percent > 0 ), \'text-loss\': ( a.percent < 0 ) }},[_vm._v(_vm._s(a.sign)+_vm._s(_vm._f("toFixed")(a.percent, 3 ))+"%")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-default"},[_vm._v("$"+_vm._s(_vm._f("toFixed")(a.close, a.asset ))+" "+_vm._s(a.arrow))]),_vm._v(" "),_c(\'br\')]):_vm._e()})),_vm._v(" "),_c(\'div\',{staticClass:"topbar-menu text-nowrap"},[_c(\'button\',{staticClass:"topbar-btn",class:{ \'icon-visible text-danger pulse\': _vm.watching, \'icon-hidden text-grey\': !_vm.watching },on:{"click":function($event){_vm.$bus.emit( \'toggleWatchform\', \'toggle\' )}}}),_vm._v(" "),_c(\'Dropdown\',{staticClass:"topbar-dropdown"},[_c(\'button\',{staticClass:"topbar-btn icon-signal",class:{ \'text-gain\': _vm.tickerStatus, \'text-danger\': !_vm.tickerStatus },attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'div\',{staticClass:"text-center",attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"form-label pad-h"},[_vm._v("Price Ticker Connection")]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"pad-h push-bottom"},[_c(\'span\',{staticClass:"text-default"},[_vm._v("Status:")]),_vm._v("  \\n              "),(_vm.tickerStatus == 0)?_c(\'span\',{staticClass:"text-loss"},[_vm._v("Disconnected "),_c(\'i\',{staticClass:"icon-cry"})]):_vm._e(),_vm._v(" "),(_vm.tickerStatus == 1)?_c(\'span\',{staticClass:"text-primary"},[_vm._v("Connecting... "),_c(\'i\',{staticClass:"icon-clock"})]):_vm._e(),_vm._v(" "),(_vm.tickerStatus == 2)?_c(\'span\',{staticClass:"text-gain"},[_vm._v("Connected "),_c(\'i\',{staticClass:"icon-check"})]):_vm._e(),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-default"},[_vm._v("Time:")]),_vm._v("  \\n              "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.tickerTime))])]),_vm._v(" "),_c(\'div\',{staticClass:"pad-h"},[(_vm.tickerStatus)?_c(\'button\',{staticClass:"form-btn icon-close iconLeft bg-danger-hover",on:{"click":_vm.toggleConnection}},[_vm._v("Disconnect")]):_c(\'button\',{staticClass:"form-btn icon-connection iconLeft bg-success-hover",on:{"click":_vm.toggleConnection}},[_vm._v("Connect")])])])]),_vm._v(" "),_c(\'Dropdown\',{staticClass:"topbar-dropdown",class:{ \'alert-bubble\': _vm.hasBubble }},[_c(\'button\',{staticClass:"topbar-btn icon-menu",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"heading"},[_c(\'span\',{staticClass:"form-label"},[_vm._v("Main Navigation")])]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/\' )}}},[_c(\'i\',{staticClass:"icon-chart-line iconLeft"}),_vm._v(" Live Ticker\\n            ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/trade\' )}}},[_c(\'i\',{staticClass:"icon-percent iconLeft"}),_vm._v(" Trade Bot\\n            ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/news\' )}}},[_c(\'i\',{staticClass:"icon-feedback iconLeft"}),_vm._v(" Twitter News "),(_vm.newsCount)?_c(\'span\',{staticClass:"text-grey"},[_vm._v("("+_vm._s(_vm.newsCount)+")")]):_vm._e()]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/alarms\' )}}},[_c(\'i\',{staticClass:"icon-alarm iconLeft"}),_vm._v(" Saved Alarms "),(_vm.alarmsData.length)?_c(\'span\',{staticClass:"text-grey"},[_vm._v("("+_vm._s(_vm.alarmsData.length)+")")]):_vm._e()]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/history\' )}}},[_c(\'i\',{staticClass:"icon-clock iconLeft"}),_vm._v(" Recent History "),(_vm.historyData.length)?_c(\'span\',{staticClass:"text-grey"},[_vm._v("("+_vm._s(_vm.historyData.length)+")")]):_vm._e()]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/options\' )}}},[_c(\'i\',{staticClass:"icon-config iconLeft"}),_vm._v(" App Options\\n            ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable text-bright-hover text-nowrap",on:{"click":function($event){_vm.setRoute( \'/about\' )}}},[_c(\'i\',{staticClass:"icon-help iconLeft"}),_vm._v(" App Info\\n            ")])])])],1)])])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///62\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Modal_vue__ = __webpack_require__(15);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_059372b4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Modal_vue__ = __webpack_require__(65);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(64)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Modal_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_059372b4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Modal_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/MGJiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQSx3QkFBb1Y7QUFDcFY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dLO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjYzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XFxcIm9taXRcXFwiOjEsXFxcInJlbW92ZVxcXCI6dHJ1ZX0hdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMDU5MzcyYjRcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOmZhbHNlfSFwb3N0Y3NzLWxvYWRlciFzYXNzLWxvYWRlcj9kYXRhPUBpbXBvcnQgXFxcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXFxcIjshLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Nb2RhbC52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Nb2RhbC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL01vZGFsLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMDU5MzcyYjRcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Nb2RhbC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlXG4vLyBtb2R1bGUgaWQgPSA2M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///63\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/NmQzZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luL2Rpc3QvbG9hZGVyLmpzP3tcIm9taXRcIjoxLFwicmVtb3ZlXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTA1OTM3MmI0XCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcz9kYXRhPUBpbXBvcnQgXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1wiOyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvTW9kYWwudnVlXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///64\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"modal-overlay",class:{ \'visible\': _vm.visible, \'under\': _vm.under },on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}},[_c(\'section\',{ref:"container",staticClass:"modal-container",on:{"click":function($event){$event.stopPropagation();}}},[_c(\'header\',{staticClass:"flex-row flex-middle flex-stretch pad-all border-bottom"},[_c(\'div\',{staticClass:"flex-1 text-clip text-bright"},[_vm._v(_vm._s(_vm.title))]),_vm._v(" "),_c(\'button\',{staticClass:"text-danger-hover icon-close",on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}})]),_vm._v(" "),_c(\'main\',{staticClass:"modal-body"},[_vm._t("default")],2)])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Nb2RhbC52dWU/ZDk0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLGlCQUFpQixtQ0FBbUMsNkNBQTZDLEtBQUsseUJBQXlCLHlCQUF5QiwyQkFBMkIsZ0JBQWdCLGtEQUFrRCx5QkFBeUIsNEJBQTRCLGVBQWUsc0VBQXNFLFlBQVksMkNBQTJDLHVEQUF1RCwrQ0FBK0MseUJBQXlCLHlCQUF5QiwyQkFBMkIsMkJBQTJCLHlCQUF5QjtBQUN0dkI7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJtb2RhbC1vdmVybGF5XCIsY2xhc3M6eyAndmlzaWJsZSc6IF92bS52aXNpYmxlLCAndW5kZXInOiBfdm0udW5kZXIgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0uY2xvc2UoJGV2ZW50KX19fSxbX2MoJ3NlY3Rpb24nLHtyZWY6XCJjb250YWluZXJcIixzdGF0aWNDbGFzczpcIm1vZGFsLWNvbnRhaW5lclwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7fX19LFtfYygnaGVhZGVyJyx7c3RhdGljQ2xhc3M6XCJmbGV4LXJvdyBmbGV4LW1pZGRsZSBmbGV4LXN0cmV0Y2ggcGFkLWFsbCBib3JkZXItYm90dG9tXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgdGV4dC1jbGlwIHRleHQtYnJpZ2h0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50aXRsZSkpXSksX3ZtLl92KFwiIFwiKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWRhbmdlci1ob3ZlciBpY29uLWNsb3NlXCIsb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtyZXR1cm4gX3ZtLmNsb3NlKCRldmVudCl9fX0pXSksX3ZtLl92KFwiIFwiKSxfYygnbWFpbicse3N0YXRpY0NsYXNzOlwibW9kYWwtYm9keVwifSxbX3ZtLl90KFwiZGVmYXVsdFwiKV0sMildKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0wNTkzNzJiNFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL01vZGFsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///65\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Notify_vue__ = __webpack_require__(16);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4a85ec8e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Notify_vue__ = __webpack_require__(68);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(67)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Notify_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4a85ec8e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Notify_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlPzhhMGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTRhODVlYzhlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vTm90aWZ5LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05vdGlmeS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05vdGlmeS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTRhODVlYzhlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTm90aWZ5LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlP2E4MjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi00YTg1ZWM4ZVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL05vdGlmeS52dWVcbi8vIG1vZHVsZSBpZCA9IDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{staticClass:"notify-wrap"},_vm._l((_vm.alerts),function(a){return _c(\'div\',{key:a.id,staticClass:"notify-alert",class:[ \'notify-\' + a.type, { \'notify-closed\': a.closed } ]},[_c(\'span\',{staticClass:"notify-message"},[_vm._v(_vm._s(a.message))]),_vm._v(" "),_c(\'button\',{staticClass:"notify-close icon-close",on:{"click":function($event){$event.stopPropagation();_vm.close( a.id )}}})])}))}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ob3RpZnkudnVlPzBhMjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixxQkFBcUIsMEJBQTBCLGlDQUFpQyxpQkFBaUIsaUVBQWlFLDRCQUE0QixHQUFHLGFBQWEsNkJBQTZCLHVEQUF1RCwwQ0FBMEMseUJBQXlCLHlCQUF5QixvQkFBb0IsSUFBSTtBQUMvZTtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzZWN0aW9uJyx7c3RhdGljQ2xhc3M6XCJub3RpZnktd3JhcFwifSxfdm0uX2woKF92bS5hbGVydHMpLGZ1bmN0aW9uKGEpe3JldHVybiBfYygnZGl2Jyx7a2V5OmEuaWQsc3RhdGljQ2xhc3M6XCJub3RpZnktYWxlcnRcIixjbGFzczpbICdub3RpZnktJyArIGEudHlwZSwgeyAnbm90aWZ5LWNsb3NlZCc6IGEuY2xvc2VkIH0gXX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJub3RpZnktbWVzc2FnZVwifSxbX3ZtLl92KF92bS5fcyhhLm1lc3NhZ2UpKV0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwibm90aWZ5LWNsb3NlIGljb24tY2xvc2VcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO192bS5jbG9zZSggYS5pZCApfX19KV0pfSkpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00YTg1ZWM4ZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL05vdGlmeS52dWVcbi8vIG1vZHVsZSBpZCA9IDY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_WatchForm_vue__ = __webpack_require__(17);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5eaf47b6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_WatchForm_vue__ = __webpack_require__(74);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(70)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_WatchForm_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5eaf47b6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_WatchForm_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9XYXRjaEZvcm0udnVlP2IwNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI2OS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTVlYWY0N2I2XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vV2F0Y2hGb3JtLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1dhdGNoRm9ybS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1dhdGNoRm9ybS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTVlYWY0N2I2XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vV2F0Y2hGb3JtLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9XYXRjaEZvcm0udnVlXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///69\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9XYXRjaEZvcm0udnVlPzlhMmQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi01ZWFmNDdiNlwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1dhdGNoRm9ybS52dWVcbi8vIG1vZHVsZSBpZCA9IDcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///70\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\n * Watchform presets\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ([{\n  name: 'Top Coins',\n  info: 'Coins with recent high trading volume.',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '2',\n    priceCheck: 'below',\n    price: '',\n    volumeType: 'gain',\n    volumeChange: '2',\n    volumeCheck: 'above',\n    volume: '1000',\n    volatilityCheck: 'above',\n    volatility: '0',\n    dangerCheck: 'below',\n    danger: '0',\n    timeCheck: 'less',\n    timeLimit: '60'\n  }\n}, {\n  name: 'Big Change',\n  info: 'Big price change within a short time period.',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '3',\n    priceCheck: 'above',\n    price: '0.00000100',\n    volumeType: 'gain',\n    volumeChange: '2',\n    volumeCheck: 'above',\n    volume: '',\n    volatilityCheck: 'above',\n    volatility: '5',\n    dangerCheck: 'above',\n    danger: '0',\n    timeCheck: 'less',\n    timeLimit: '30'\n  }\n}, {\n  name: 'Slow Market',\n  info: 'Small price change with low volume.',\n  options: {\n    asset: 'BTC',\n    priceType: 'change',\n    priceChange: '1.5',\n    priceCheck: 'above',\n    price: '0.00000100',\n    volumeType: 'gain',\n    volumeChange: '0.5',\n    volumeCheck: 'above',\n    volume: '',\n    volatilityCheck: 'above',\n    volatility: '0',\n    dangerCheck: 'below',\n    danger: '0',\n    timeCheck: 'less',\n    timeLimit: '60'\n  }\n}]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlncy93YXRjaFByZXNldHMuanM/NTFjOSJdLCJuYW1lcyI6WyJuYW1lIiwiaW5mbyIsIm9wdGlvbnMiLCJhc3NldCIsInByaWNlVHlwZSIsInByaWNlQ2hhbmdlIiwicHJpY2VDaGVjayIsInByaWNlIiwidm9sdW1lVHlwZSIsInZvbHVtZUNoYW5nZSIsInZvbHVtZUNoZWNrIiwidm9sdW1lIiwidm9sYXRpbGl0eUNoZWNrIiwidm9sYXRpbGl0eSIsImRhbmdlckNoZWNrIiwiZGFuZ2VyIiwidGltZUNoZWNrIiwidGltZUxpbWl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0EseURBQWUsQ0FDYjtBQUNFQSxRQUFNLFdBRFI7QUFFRUMsUUFBTSx3Q0FGUjtBQUdFQyxXQUFTO0FBQ1BDLFdBQU8sS0FEQTtBQUVQQyxlQUFXLFFBRko7QUFHUEMsaUJBQWEsR0FITjtBQUlQQyxnQkFBWSxPQUpMO0FBS1BDLFdBQU8sRUFMQTtBQU1QQyxnQkFBWSxNQU5MO0FBT1BDLGtCQUFjLEdBUFA7QUFRUEMsaUJBQWEsT0FSTjtBQVNQQyxZQUFRLE1BVEQ7QUFVUEMscUJBQWlCLE9BVlY7QUFXUEMsZ0JBQVksR0FYTDtBQVlQQyxpQkFBYSxPQVpOO0FBYVBDLFlBQVEsR0FiRDtBQWNQQyxlQUFXLE1BZEo7QUFlUEMsZUFBVztBQWZKO0FBSFgsQ0FEYSxFQXNCYjtBQUNFakIsUUFBTSxZQURSO0FBRUVDLFFBQU0sOENBRlI7QUFHRUMsV0FBUztBQUNQQyxXQUFPLEtBREE7QUFFUEMsZUFBVyxRQUZKO0FBR1BDLGlCQUFhLEdBSE47QUFJUEMsZ0JBQVksT0FKTDtBQUtQQyxXQUFPLFlBTEE7QUFNUEMsZ0JBQVksTUFOTDtBQU9QQyxrQkFBYyxHQVBQO0FBUVBDLGlCQUFhLE9BUk47QUFTUEMsWUFBUSxFQVREO0FBVVBDLHFCQUFpQixPQVZWO0FBV1BDLGdCQUFZLEdBWEw7QUFZUEMsaUJBQWEsT0FaTjtBQWFQQyxZQUFRLEdBYkQ7QUFjUEMsZUFBVyxNQWRKO0FBZVBDLGVBQVc7QUFmSjtBQUhYLENBdEJhLEVBMkNiO0FBQ0VqQixRQUFNLGFBRFI7QUFFRUMsUUFBTSxxQ0FGUjtBQUdFQyxXQUFTO0FBQ1BDLFdBQU8sS0FEQTtBQUVQQyxlQUFXLFFBRko7QUFHUEMsaUJBQWEsS0FITjtBQUlQQyxnQkFBWSxPQUpMO0FBS1BDLFdBQU8sWUFMQTtBQU1QQyxnQkFBWSxNQU5MO0FBT1BDLGtCQUFjLEtBUFA7QUFRUEMsaUJBQWEsT0FSTjtBQVNQQyxZQUFRLEVBVEQ7QUFVUEMscUJBQWlCLE9BVlY7QUFXUEMsZ0JBQVksR0FYTDtBQVlQQyxpQkFBYSxPQVpOO0FBYVBDLFlBQVEsR0FiRDtBQWNQQyxlQUFXLE1BZEo7QUFlUEMsZUFBVztBQWZKO0FBSFgsQ0EzQ2EsQ0FBZiIsImZpbGUiOiI3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogV2F0Y2hmb3JtIHByZXNldHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgbmFtZTogJ1RvcCBDb2lucycsXG4gICAgaW5mbzogJ0NvaW5zIHdpdGggcmVjZW50IGhpZ2ggdHJhZGluZyB2b2x1bWUuJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBhc3NldDogJ0JUQycsXG4gICAgICBwcmljZVR5cGU6ICdjaGFuZ2UnLFxuICAgICAgcHJpY2VDaGFuZ2U6ICcyJyxcbiAgICAgIHByaWNlQ2hlY2s6ICdiZWxvdycsXG4gICAgICBwcmljZTogJycsXG4gICAgICB2b2x1bWVUeXBlOiAnZ2FpbicsXG4gICAgICB2b2x1bWVDaGFuZ2U6ICcyJyxcbiAgICAgIHZvbHVtZUNoZWNrOiAnYWJvdmUnLFxuICAgICAgdm9sdW1lOiAnMTAwMCcsXG4gICAgICB2b2xhdGlsaXR5Q2hlY2s6ICdhYm92ZScsXG4gICAgICB2b2xhdGlsaXR5OiAnMCcsXG4gICAgICBkYW5nZXJDaGVjazogJ2JlbG93JyxcbiAgICAgIGRhbmdlcjogJzAnLFxuICAgICAgdGltZUNoZWNrOiAnbGVzcycsXG4gICAgICB0aW1lTGltaXQ6ICc2MCcsXG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ0JpZyBDaGFuZ2UnLFxuICAgIGluZm86ICdCaWcgcHJpY2UgY2hhbmdlIHdpdGhpbiBhIHNob3J0IHRpbWUgcGVyaW9kLicsXG4gICAgb3B0aW9uczoge1xuICAgICAgYXNzZXQ6ICdCVEMnLFxuICAgICAgcHJpY2VUeXBlOiAnY2hhbmdlJyxcbiAgICAgIHByaWNlQ2hhbmdlOiAnMycsXG4gICAgICBwcmljZUNoZWNrOiAnYWJvdmUnLFxuICAgICAgcHJpY2U6ICcwLjAwMDAwMTAwJyxcbiAgICAgIHZvbHVtZVR5cGU6ICdnYWluJyxcbiAgICAgIHZvbHVtZUNoYW5nZTogJzInLFxuICAgICAgdm9sdW1lQ2hlY2s6ICdhYm92ZScsXG4gICAgICB2b2x1bWU6ICcnLFxuICAgICAgdm9sYXRpbGl0eUNoZWNrOiAnYWJvdmUnLFxuICAgICAgdm9sYXRpbGl0eTogJzUnLFxuICAgICAgZGFuZ2VyQ2hlY2s6ICdhYm92ZScsXG4gICAgICBkYW5nZXI6ICcwJyxcbiAgICAgIHRpbWVDaGVjazogJ2xlc3MnLFxuICAgICAgdGltZUxpbWl0OiAnMzAnLFxuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdTbG93IE1hcmtldCcsXG4gICAgaW5mbzogJ1NtYWxsIHByaWNlIGNoYW5nZSB3aXRoIGxvdyB2b2x1bWUuJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBhc3NldDogJ0JUQycsXG4gICAgICBwcmljZVR5cGU6ICdjaGFuZ2UnLFxuICAgICAgcHJpY2VDaGFuZ2U6ICcxLjUnLFxuICAgICAgcHJpY2VDaGVjazogJ2Fib3ZlJyxcbiAgICAgIHByaWNlOiAnMC4wMDAwMDEwMCcsXG4gICAgICB2b2x1bWVUeXBlOiAnZ2FpbicsXG4gICAgICB2b2x1bWVDaGFuZ2U6ICcwLjUnLFxuICAgICAgdm9sdW1lQ2hlY2s6ICdhYm92ZScsXG4gICAgICB2b2x1bWU6ICcnLFxuICAgICAgdm9sYXRpbGl0eUNoZWNrOiAnYWJvdmUnLFxuICAgICAgdm9sYXRpbGl0eTogJzAnLFxuICAgICAgZGFuZ2VyQ2hlY2s6ICdiZWxvdycsXG4gICAgICBkYW5nZXI6ICcwJyxcbiAgICAgIHRpbWVDaGVjazogJ2xlc3MnLFxuICAgICAgdGltZUxpbWl0OiAnNjAnLFxuICAgIH1cbiAgfSxcbl1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb25maWdzL3dhdGNoUHJlc2V0cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///71\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RNZW51LnZ1ZT8yNjg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjcyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1wib21pdFwiOjEsXCJyZW1vdmVcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMGI3NGU5YTZcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzP2RhdGE9QGltcG9ydCBcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXCI7IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9TZWxlY3RNZW51LnZ1ZVxuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{ref:"menu",staticClass:"select-wrap",on:{"mouseleave":_vm.listHide}},[_c(\'button\',{ref:"trigger",staticClass:"select-trigger text-nowrap",class:_vm.css,attrs:{"type":"button"},on:{"click":_vm.onClick,"focus":_vm.onFocus}},[_vm._v("\\n    "+_vm._s(_vm.text || \'Select...\')+" "),_c(\'i\',{staticClass:"icon-down-open text-info"})]),_vm._v(" "),_c(\'div\',{staticClass:"select-container",class:{ \'visible\': _vm.visible, \'top\': _vm.top, \'bottom\': _vm.bottom }},[_c(\'ul\',{staticClass:"select-list"},[(!_vm.optionsList.length)?_c(\'li\',[_vm._v("No options")]):_vm._e(),_vm._v(" "),_vm._l((_vm.optionsList),function( o,i){return _c(\'li\',{key:o.value,class:{ \'active\': o.active },on:{"click":function($event){$event.stopPropagation();_vm.changeOption( i, true )}}},[_vm._v(_vm._s(o.text))])})],2)]),_vm._v(" "),_c(\'div\',{staticClass:"select-elements"},[_vm._t("default")],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWxlY3RNZW51LnZ1ZT85YTc1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLHlDQUF5QywyQkFBMkIsZUFBZSw0RUFBNEUsZ0JBQWdCLEtBQUsseUNBQXlDLCtEQUErRCx1Q0FBdUMsMEJBQTBCLHNDQUFzQyxnRUFBZ0UsV0FBVywwQkFBMEIseUhBQXlILGdCQUFnQixtQkFBbUIscUJBQXFCLEtBQUsseUJBQXlCLHlCQUF5Qiw4QkFBOEIsMkJBQTJCLDhCQUE4Qiw4QkFBOEI7QUFDLzZCO0FBQ0EsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6IjczLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3JlZjpcIm1lbnVcIixzdGF0aWNDbGFzczpcInNlbGVjdC13cmFwXCIsb246e1wibW91c2VsZWF2ZVwiOl92bS5saXN0SGlkZX19LFtfYygnYnV0dG9uJyx7cmVmOlwidHJpZ2dlclwiLHN0YXRpY0NsYXNzOlwic2VsZWN0LXRyaWdnZXIgdGV4dC1ub3dyYXBcIixjbGFzczpfdm0uY3NzLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwifSxvbjp7XCJjbGlja1wiOl92bS5vbkNsaWNrLFwiZm9jdXNcIjpfdm0ub25Gb2N1c319LFtfdm0uX3YoXCJcXG4gICAgXCIrX3ZtLl9zKF92bS50ZXh0IHx8ICdTZWxlY3QuLi4nKStcIiBcIiksX2MoJ2knLHtzdGF0aWNDbGFzczpcImljb24tZG93bi1vcGVuIHRleHQtaW5mb1wifSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInNlbGVjdC1jb250YWluZXJcIixjbGFzczp7ICd2aXNpYmxlJzogX3ZtLnZpc2libGUsICd0b3AnOiBfdm0udG9wLCAnYm90dG9tJzogX3ZtLmJvdHRvbSB9fSxbX2MoJ3VsJyx7c3RhdGljQ2xhc3M6XCJzZWxlY3QtbGlzdFwifSxbKCFfdm0ub3B0aW9uc0xpc3QubGVuZ3RoKT9fYygnbGknLFtfdm0uX3YoXCJObyBvcHRpb25zXCIpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfdm0uX2woKF92bS5vcHRpb25zTGlzdCksZnVuY3Rpb24oIG8saSl7cmV0dXJuIF9jKCdsaScse2tleTpvLnZhbHVlLGNsYXNzOnsgJ2FjdGl2ZSc6IG8uYWN0aXZlIH0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpeyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtfdm0uY2hhbmdlT3B0aW9uKCBpLCB0cnVlICl9fX0sW192bS5fdihfdm0uX3Moby50ZXh0KSldKX0pXSwyKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic2VsZWN0LWVsZW1lbnRzXCJ9LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0wYjc0ZTlhNlwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1NlbGVjdE1lbnUudnVlXG4vLyBtb2R1bGUgaWQgPSA3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///73\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"watchform-overlay",class:{ \'visible\': _vm.visible, \'overflow\': _vm.overflow, \'under\': _vm.under },on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}},[_c(\'section\',{staticClass:"watchform-wrap",class:{ \'collapsed\': _vm.header.collapsed },on:{"click":function($event){$event.stopPropagation();}}},[_c(\'button\',{staticClass:"watchform-close text-primary-hover",on:{"click":function($event){$event.stopPropagation();return _vm.close($event)}}},[_c(\'span\',{staticClass:"icon-close iconLeft"},[_vm._v("Close")])]),_vm._v(" "),_c(\'div\',{ref:"watchform",staticClass:"watchform-container"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-1 text-info push-right"},[_c(\'span\',{staticClass:"text-bright icon-config iconLeft"},[_vm._v("Presets:")]),_vm._v(" "),_vm._l((_vm.presetsList),function(p){return _c(\'button\',{key:p.name,staticClass:"push-left",class:{ \'text-gain\': p.active },on:{"click":function($event){$event.preventDefault();_vm.applyPreset( p.name )}}},[_vm._v(_vm._s(p.name))])})],2),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"icon-visible iconLeft text-primary"},[_vm._v(_vm._s(_vm.countInfo))])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"flex-grid flex-grid-md flex-middle"},[_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"flex-1",attrs:{"options":_vm.assetOptions},on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.asset),callback:function ($$v) {_vm.$set(_vm.watchOptions, "asset", $$v)},expression:"watchOptions.asset"}})],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.priceType),callback:function ($$v) {_vm.$set(_vm.watchOptions, "priceType", $$v)},expression:"watchOptions.priceType"}},[_c(\'option\',{attrs:{"value":"change"}},[_vm._v("Price change")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"gain"}},[_vm._v("Price gain")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"loss"}},[_vm._v("Price loss")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceChange),expression:"watchOptions.priceChange"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.priceChange)},on:{"change":_vm.formChange,"__r":function($event){_vm.$set(_vm.watchOptions, "priceChange", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.priceChange, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.volumeType),callback:function ($$v) {_vm.$set(_vm.watchOptions, "volumeType", $$v)},expression:"watchOptions.volumeType"}},[_c(\'option\',{attrs:{"value":"change"}},[_vm._v("Volume change")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"gain"}},[_vm._v("Volume gain")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"loss"}},[_vm._v("Volume loss")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volumeChange),expression:"watchOptions.volumeChange"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.volumeChange)},on:{"change":_vm.formChange,"__r":function($event){_vm.$set(_vm.watchOptions, "volumeChange", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.volumeChange, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.priceCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "priceCheck", $$v)},expression:"watchOptions.priceCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Price above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Price below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.price),expression:"watchOptions.price"}],staticClass:"flex-1 push-right",attrs:{"type":"text","placeholder":"0.00000000"},domProps:{"value":(_vm.watchOptions.price)},on:{"keyup":_vm.numInput,"change":_vm.formChange,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "price", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.watchOptions.asset))])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.volumeCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "volumeCheck", $$v)},expression:"watchOptions.volumeCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Volume above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Volume below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volume),expression:"watchOptions.volume"}],staticClass:"flex-1 push-right",attrs:{"type":"text","placeholder":"0000"},domProps:{"value":(_vm.watchOptions.volume)},on:{"keyup":_vm.numInput,"change":_vm.formChange,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "volume", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.watchOptions.asset))])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.timeCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "timeCheck", $$v)},expression:"watchOptions.timeCheck"}},[_c(\'option\',{attrs:{"value":"less"}},[_vm._v("Within last")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"more"}},[_vm._v("Wait past")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.timeLimit),expression:"watchOptions.timeLimit"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0","max":"60","step":"1"},domProps:{"value":(_vm.watchOptions.timeLimit)},on:{"change":_vm.formChange,"__r":function($event){_vm.$set(_vm.watchOptions, "timeLimit", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.watchOptions.timeLimit, \'min\', \'mins\' )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.changeCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "changeCheck", $$v)},expression:"watchOptions.changeCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("24h % above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("24h % below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.change),expression:"watchOptions.change"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.change)},on:{"change":_vm.formChange,"__r":function($event){_vm.$set(_vm.watchOptions, "change", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.change, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.volatilityCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "volatilityCheck", $$v)},expression:"watchOptions.volatilityCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Volatility above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Volatility below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volatility),expression:"watchOptions.volatility"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.volatility)},on:{"change":_vm.formChange,"__r":function($event){_vm.$set(_vm.watchOptions, "volatility", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.volatility, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.dangerCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "dangerCheck", $$v)},expression:"watchOptions.dangerCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Danger above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Danger below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.danger),expression:"watchOptions.danger"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.danger)},on:{"change":_vm.formChange,"__r":function($event){_vm.$set(_vm.watchOptions, "danger", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.danger, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",on:{"change":_vm.formChange},model:{value:(_vm.watchOptions.filterType),callback:function ($$v) {_vm.$set(_vm.watchOptions, "filterType", $$v)},expression:"watchOptions.filterType"}},[_c(\'option\',{attrs:{"value":"allow"}},[_vm._v("Only tokens")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"deny"}},[_vm._v("Skip tokens")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.filterText),expression:"watchOptions.filterText"}],staticClass:"flex-1 push-right",attrs:{"type":"text","placeholder":"TOKEN1 TOKEN2 ..."},domProps:{"value":(_vm.watchOptions.filterText)},on:{"change":_vm.formChange,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "filterText", $event.target.value)}}})],1),_vm._v(" "),_c(\'div\',[_c(\'button\',{staticClass:"form-btn iconLeft",class:{ \'bg-danger-hover icon-stop\': _vm.active, \'bg-success-hover icon-play\': !_vm.active },attrs:{"type":"button","disabled":!_vm.tickerStatus},on:{"click":function($event){$event.preventDefault();return _vm.toggleWatch($event)}}},[_vm._v("\\n                "+_vm._s(_vm.active ? \'Watching \'+ _vm.elapsed +\' ...\' : \'Start watching ...\')+"\\n            ")])])])])])])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///74\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenList_vue__ = __webpack_require__(20);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6653d62c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenList_vue__ = __webpack_require__(85);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(76)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenList_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6653d62c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenList_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkxpc3QudnVlP2FmNTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI3NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTY2NTNkNjJjXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVG9rZW5MaXN0LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuTGlzdC52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuTGlzdC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTY2NTNkNjJjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9rZW5MaXN0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9Ub2tlbkxpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///75\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkxpc3QudnVlPzBlNzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi02NjUzZDYyY1wiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1Rva2VuTGlzdC52dWVcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///76\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZT84NDdiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ijc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1wib21pdFwiOjEsXCJyZW1vdmVcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtYzMzMGE4Y2VcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzP2RhdGE9QGltcG9ydCBcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXCI7IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"spinner-overlay",class:{ \'visible\': _vm.visible, \'failed\': _vm.failed },on:{"click":function($event){$event.stopPropagation();return _vm.click($event)}}},[_c(\'div\',{staticClass:"spinner-content"},[_c(\'div\',{staticClass:"spinner-wheel"}),_vm._v(" "),(_vm.message)?_c(\'div\',{staticClass:"spinner-messge",domProps:{"textContent":_vm._s(_vm.message)}}):_vm._e()])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TcGlubmVyLnZ1ZT9iZjE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLHFDQUFxQywrQ0FBK0MsS0FBSyx5QkFBeUIseUJBQXlCLDJCQUEyQixZQUFZLDhCQUE4QixZQUFZLDRCQUE0QixzQ0FBc0MsdUNBQXVDLG1DQUFtQztBQUNsZDtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInNwaW5uZXItb3ZlcmxheVwiLGNsYXNzOnsgJ3Zpc2libGUnOiBfdm0udmlzaWJsZSwgJ2ZhaWxlZCc6IF92bS5mYWlsZWQgfSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0uY2xpY2soJGV2ZW50KX19fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic3Bpbm5lci1jb250ZW50XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzcGlubmVyLXdoZWVsXCJ9KSxfdm0uX3YoXCIgXCIpLChfdm0ubWVzc2FnZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic3Bpbm5lci1tZXNzZ2VcIixkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSk6X3ZtLl9lKCldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1jMzMwYThjZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1NwaW5uZXIudnVlXG4vLyBtb2R1bGUgaWQgPSA3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///78\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"search-wrap form-input"},[_c(\'span\',{staticClass:"search-icon icon-search iconLeft"}),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.searchStr),expression:"searchStr"}],staticClass:"search-input flex-1 push-right",attrs:{"type":"text","placeholder":"Search..."},domProps:{"value":(_vm.searchStr)},on:{"click":_vm.onClick,"change":_vm.onChange,"keyup":_vm.onInput,"input":function($event){if($event.target.composing){ return; }_vm.searchStr=$event.target.value}}}),_vm._v(" "),(_vm.searchStr)?_c(\'button\',{staticClass:"icon-close text-info-hover",on:{"click":_vm.onReset}}):_vm._e()])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9TZWFyY2gudnVlPzhiMzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIscUNBQXFDLGFBQWEsK0NBQStDLDBCQUEwQixhQUFhLDRFQUE0RSxzREFBc0Qsd0NBQXdDLFdBQVcsd0JBQXdCLEtBQUssdUZBQXVGLDRCQUE0QixRQUFRLEVBQUUsb0NBQW9DLDJDQUEyQyw2Q0FBNkMscUJBQXFCO0FBQ2x0QjtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI3OS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInNlYXJjaC13cmFwIGZvcm0taW5wdXRcIn0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJzZWFyY2gtaWNvbiBpY29uLXNlYXJjaCBpY29uTGVmdFwifSksX3ZtLl92KFwiIFwiKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLnNlYXJjaFN0ciksZXhwcmVzc2lvbjpcInNlYXJjaFN0clwifV0sc3RhdGljQ2xhc3M6XCJzZWFyY2gtaW5wdXQgZmxleC0xIHB1c2gtcmlnaHRcIixhdHRyczp7XCJ0eXBlXCI6XCJ0ZXh0XCIsXCJwbGFjZWhvbGRlclwiOlwiU2VhcmNoLi4uXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5zZWFyY2hTdHIpfSxvbjp7XCJjbGlja1wiOl92bS5vbkNsaWNrLFwiY2hhbmdlXCI6X3ZtLm9uQ2hhbmdlLFwia2V5dXBcIjpfdm0ub25JbnB1dCxcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS5zZWFyY2hTdHI9JGV2ZW50LnRhcmdldC52YWx1ZX19fSksX3ZtLl92KFwiIFwiKSwoX3ZtLnNlYXJjaFN0cik/X2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiaWNvbi1jbG9zZSB0ZXh0LWluZm8taG92ZXJcIixvbjp7XCJjbGlja1wiOl92bS5vblJlc2V0fX0pOl92bS5fZSgpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWY2NmMyMmY4XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvU2VhcmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkljb24udnVlP2M3ODUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi04MDBjMTE1ZVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1Rva2VuSWNvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///80\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"tokenicon-wrap"},[_c(\'img\',{staticClass:"tokenicon-image",attrs:{"src":_vm.image,"alt":_vm.alt},on:{"error":_vm.imageError}})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlbkljb24udnVlP2I1NzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsNkJBQTZCLFlBQVkscUNBQXFDLDhCQUE4QixLQUFLLHdCQUF3QjtBQUNuUDtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRva2VuaWNvbi13cmFwXCJ9LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6XCJ0b2tlbmljb24taW1hZ2VcIixhdHRyczp7XCJzcmNcIjpfdm0uaW1hZ2UsXCJhbHRcIjpfdm0uYWx0fSxvbjp7XCJlcnJvclwiOl92bS5pbWFnZUVycm9yfX0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTgwMGMxMTVlXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvVG9rZW5JY29uLnZ1ZVxuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlP2M1N2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0yOTY2YjY0NFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RvZ2dsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///82\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'label\',{staticClass:"toggle-wrap",on:{"click":_vm.onClick}},[_c(\'input\',{staticClass:"toggle-input",attrs:{"type":"checkbox"},domProps:{"checked":_vm.value},on:{"change":_vm.onChange}}),_vm._v(" "),_c(\'div\',{staticClass:"toggle-switch"}),_vm._v(" "),_c(\'div\',{staticClass:"toggle-text"},[_vm._v(_vm._s(_vm.text))])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2dnbGUudnVlP2Y4YmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixtQkFBbUIsOEJBQThCLHFCQUFxQixjQUFjLGtDQUFrQyxrQkFBa0IsV0FBVyxvQkFBb0IsS0FBSyx1QkFBdUIsd0JBQXdCLDRCQUE0Qix3QkFBd0IsMEJBQTBCO0FBQ2xZO0FBQ0EsaUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6IjgzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6XCJ0b2dnbGUtd3JhcFwiLG9uOntcImNsaWNrXCI6X3ZtLm9uQ2xpY2t9fSxbX2MoJ2lucHV0Jyx7c3RhdGljQ2xhc3M6XCJ0b2dnbGUtaW5wdXRcIixhdHRyczp7XCJ0eXBlXCI6XCJjaGVja2JveFwifSxkb21Qcm9wczp7XCJjaGVja2VkXCI6X3ZtLnZhbHVlfSxvbjp7XCJjaGFuZ2VcIjpfdm0ub25DaGFuZ2V9fSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0b2dnbGUtc3dpdGNoXCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRvZ2dsZS10ZXh0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS50ZXh0KSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0yOTY2YjY0NFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RvZ2dsZS52dWVcbi8vIG1vZHVsZSBpZCA9IDgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///83\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{class:{ \'transparent\': !_vm.values.length }},[_c(\'svg\',{attrs:{"viewBox":_vm.svgBox,"xmlns":"http://www.w3.org/2000/svg"}},[_c(\'polyline\',{staticClass:"polyline",attrs:{"fill":"none","stroke":"#f0f0f0","stroke-width":"2","stroke-linecap":"round","points":_vm.chartPoints}}),_vm._v(" "),_c(\'circle\',{staticClass:"circle",attrs:{"cx":_vm.cx,"cy":_vm.cy,"r":"3","fill":"#f0f0f0","stroke":"none"}})])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9MaW5lQ2hhcnQudnVlPzY4ODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixxQkFBcUIsT0FBTyxxQ0FBcUMsWUFBWSxPQUFPLDJEQUEyRCxpQkFBaUIsOEJBQThCLHVHQUF1RywyQkFBMkIsNEJBQTRCLGtFQUFrRTtBQUN2ZjtBQUNBLGlCQUFpQjtBQUNqQixrRSIsImZpbGUiOiI4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzZWN0aW9uJyx7Y2xhc3M6eyAndHJhbnNwYXJlbnQnOiAhX3ZtLnZhbHVlcy5sZW5ndGggfX0sW19jKCdzdmcnLHthdHRyczp7XCJ2aWV3Qm94XCI6X3ZtLnN2Z0JveCxcInhtbG5zXCI6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifX0sW19jKCdwb2x5bGluZScse3N0YXRpY0NsYXNzOlwicG9seWxpbmVcIixhdHRyczp7XCJmaWxsXCI6XCJub25lXCIsXCJzdHJva2VcIjpcIiNmMGYwZjBcIixcInN0cm9rZS13aWR0aFwiOlwiMlwiLFwic3Ryb2tlLWxpbmVjYXBcIjpcInJvdW5kXCIsXCJwb2ludHNcIjpfdm0uY2hhcnRQb2ludHN9fSksX3ZtLl92KFwiIFwiKSxfYygnY2lyY2xlJyx7c3RhdGljQ2xhc3M6XCJjaXJjbGVcIixhdHRyczp7XCJjeFwiOl92bS5jeCxcImN5XCI6X3ZtLmN5LFwiclwiOlwiM1wiLFwiZmlsbFwiOlwiI2YwZjBmMFwiLFwic3Ryb2tlXCI6XCJub25lXCJ9fSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0xOTJkOTAzMVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0xpbmVDaGFydC52dWVcbi8vIG1vZHVsZSBpZCA9IDg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///84\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'main\',{staticClass:"page-wrap",class:{ \'collapsed\': _vm.header.collapsed, \'opaque\': _vm.header.opaque }},[_c(\'section\',{staticClass:"page-topbar"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-space"},[_c(\'Search\',{staticClass:"light push-right",model:{value:(_vm.searchStr),callback:function ($$v) {_vm.searchStr=$$v},expression:"searchStr"}}),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 text-clip text-big text-center push-right if-medium"},[_vm._v("24h Change")]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap"},[_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-info-hover icon-down-open",attrs:{"slot":"trigger"},slot:"trigger"},[_vm._v(_vm._s(_vm.limitCountLabel))]),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"heading"},[_c(\'span\',{staticClass:"form-label"},[_vm._v("List Limit Options")])]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 10 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 10 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 20 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 20 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 50 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 50 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 100 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" 100 tokens\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.limitList( 0 )}}},[_c(\'i\',{staticClass:"icon-list-add iconLeft"}),_vm._v(" All tokens\\n              ")])])]),_vm._v(" \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-info-hover iconLeft",attrs:{"slot":"trigger"},slot:"trigger"},[_c(\'i\',{class:_vm.$sorter.getStyles( \'ticker\' )}),_vm._v(" "+_vm._s(_vm.sortByLabel)+"\\n            ")]),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"heading"},[_c(\'span\',{staticClass:"form-label"},[_vm._v("List Sorting Options")])]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'token\', \'asc\' )}}},[_c(\'i\',{staticClass:"icon-bitcoin iconLeft"}),_vm._v(" Token\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'percent\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-percent iconLeft"}),_vm._v(" Percent\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'close\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-chart-line iconLeft"}),_vm._v(" Price\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'volatility\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-chart-line iconLeft"}),_vm._v(" Volatility\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'danger\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-alert iconLeft"}),_vm._v(" Danger\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'change\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-clock iconLeft"}),_vm._v(" Change\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'assetVolume\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-chart-area iconLeft"}),_vm._v(" Volume\\n              ")]),_vm._v(" "),_c(\'li\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'trades\', \'desc\' )}}},[_c(\'i\',{staticClass:"icon-reload iconLeft"}),_vm._v(" Trades\\n              ")])])]),_vm._v(" \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-primary-hover icon-star iconLeft",attrs:{"slot":"trigger"},domProps:{"textContent":_vm._s(_vm.options.prices.asset)},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"heading"},[_c(\'span\',{staticClass:"form-label"},[_vm._v("Filter by Market")])]),_vm._v(" "),_vm._l((_vm.assetsList),function(asset){return _c(\'li\',{key:asset,staticClass:"clickable",on:{"click":function($event){_vm.toggleAsset( asset )}}},[_c(\'i\',{staticClass:"icon-star iconLeft"}),_vm._v(" "+_vm._s(asset)+"\\n              ")])})],2)]),_vm._v(" \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-primary-hover icon-config",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'div\',{staticClass:"pad-h",attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Live Price Options")]),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Show top coins price in header\'},on:{"change":_vm.saveOptions},model:{value:(_vm.options.prices.header),callback:function ($$v) {_vm.$set(_vm.options.prices, "header", $$v)},expression:"options.prices.header"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Show price chart for in list\'},on:{"change":_vm.saveOptions},model:{value:(_vm.options.prices.chart),callback:function ($$v) {_vm.$set(_vm.options.prices, "chart", $$v)},expression:"options.prices.chart"}})],1)])],1)],1)])]),_vm._v(" "),(!_vm.listCount)?_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card pad-all flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"icon-help iconLarge push-right"}),_vm._v(" "),_c(\'div\',{staticClass:"text-clip flex-1"},[(_vm.searchStr)?_c(\'div\',[_c(\'span\',{staticClass:"text-bright"},[_vm._v("No match for "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.searchStr))])]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v("Can\'t find anything matching your search input.")])]):_c(\'div\',[_c(\'span\',{staticClass:"text-bright"},[_vm._v("No price data available")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v("Price data from remote API has not loaded yet.")])])])])])]):_vm._e(),_vm._v(" "),_c(\'section\',{staticClass:"pagelist-wrap"},[_c(\'div\',{staticClass:"container"},[(_vm.tickerList.length)?_c(\'div\',{staticClass:"pagelist-item flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"iconWidth push-right if-small"}),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'token\', \'asc\' )}}},[_vm._v("Token")])]),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'close\', \'desc\' )}}},[_vm._v("Price")])]),_vm._v(" "),(_vm.options.prices.chart)?_c(\'div\',{staticClass:"well push-right flex-1 if-medium disabled"}):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'percent\', \'desc\' )}}},[_vm._v("Percent")])]),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'assetVolume\', \'desc\' )}}},[_vm._v("Volume")])]),_vm._v(" "),_c(\'div\',{staticClass:"text-right text-clip flex-1 if-large"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'ticker\', \'trades\', \'desc\' )}}},[_vm._v("Book")])])]):_vm._e(),_vm._v(" "),_vm._l((_vm.tickerList),function(p){return _c(\'div\',{key:p.symbol,staticClass:"pagelist-item flex-row flex-middle flex-stretch clickable",class:p.style,on:{"click":function($event){$event.stopPropagation();_vm.setRoute( p.route )}}},[_c(\'div\',{staticClass:"push-right if-small",class:{ \'alarm-bubble\': p.alarms }},[_c(\'TokenIcon\',{attrs:{"image":p.image,"alt":p.token}})],1),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'big\',{staticClass:"text-primary"},[_vm._v(_vm._s(p.token))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(p.name))])],1),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'big\',{staticClass:"text-nowrap text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(p.close, p.asset ))+" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(p.asset))])]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-nowrap color"},[_vm._v(_vm._s(p.sign)+_vm._s(_vm._f("toFixed")(p.change, p.asset ))+" "),_c(\'span\',{staticClass:"text-info"},[_vm._v("24H")])])],1),_vm._v(" "),(_vm.options.prices.chart)?_c(\'div\',{staticClass:"well push-right flex-1 if-medium"},[_c(\'LineChart\',{attrs:{"width":200,"height":28,"values":p.history}})],1):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'big\',{staticClass:"text-nowrap color"},[_vm._v(_vm._s(p.sign)+_vm._s(_vm._f("toMoney")(p.percent, 3 ))+"%")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-chart-line iconLeft",attrs:{"title":"High/Low Volatility Score"}},[_vm._v(_vm._s(_vm._f("toFixed")(p.volatility, 3 )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"push-right text-clip flex-1"},[_c(\'big\',{staticClass:"text-nowrap text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(p.assetVolume))+" "),_c(\'span\',{staticClass:"text-nowrap text-info"},[_vm._v(_vm._s(p.asset))])]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-nowrap text-default"},[_vm._v(_vm._s(_vm._f("toMoney")(p.tokenVolume))+" "),_c(\'span\',{staticClass:"text-nowrap text-info"},[_vm._v(_vm._s(p.token))])])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-right text-clip flex-1 if-large"},[_c(\'big\',{staticClass:"text-nowrap text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(p.trades)))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-primary-hover",attrs:{"title":\'Trade \'+ p.token},on:{"click":function($event){$event.stopPropagation();_vm.tradeLink( p.token, p.asset )}}},[_vm._v("Trades")])],1)])}),_vm._v(" "),(_vm.listCount)?_c(\'div\',{staticClass:"pagelist-item flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"text-info icon-list iconLeft"},[_vm._v(_vm._s(_vm.listLeftText))]),_vm._v(" "),(_vm.listLeft)?_c(\'button\',{staticClass:"text-bright-hover icon-list-add iconLeft",on:{"click":function($event){_vm.limitList( 0 )}}},[_vm._v("Show all")]):_vm._e()]):_vm._e()],2)]),_vm._v(" "),_c(\'Spinner\',{ref:"spinner",staticClass:"fixed"})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///85\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsPage_vue__ = __webpack_require__(27);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_75ba0097_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsPage_vue__ = __webpack_require__(89);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_75ba0097_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzUGFnZS52dWU/OTA1NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI4Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9OZXdzUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05ld3NQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzViYTAwOTdcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9OZXdzUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9OZXdzUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * File data import/export helper module\r\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  // export some data to a json file by name\n  exportData: function exportData(name, data) {\n    // prep file name and data to be saved\n    name = String(name || '') || 'export_data_' + Date.now();\n    data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(data || {}));\n\n    // create a link with download attribute\n    var elm = this._elm('a', 'fileExportLinkElement');\n    elm.setAttribute('href', data);\n    elm.setAttribute('download', name + '.json');\n    elm.setAttribute('target', '_blank');\n\n    // trigger download and remove element\n    setTimeout(function () {\n      return elm.click();\n    }, 100);\n    setTimeout(function () {\n      return elm.remove();\n    }, 1000);\n  },\n\n\n  // import a file and have it's data passed to a custom callback\n  importData: function importData(callback) {\n    if (!callback || typeof callback !== 'function') return;\n\n    // create file input element\n    var elm = this._elm('input', 'fileImportInputElement');\n    elm.setAttribute('type', 'file');\n    elm.setAttribute('accept', '.json');\n    elm.addEventListener('change', function (e) {\n\n      // remove it after a file has been selected\n      setTimeout(function () {\n        return elm.remove();\n      }, 100);\n\n      // make sure we have a file and FileReader support\n      if (!e || !e.target) return;\n      if (!e.target.files || !e.target.files.length) return;\n      if (!('FileReader' in window)) return;\n\n      // read the selected file and pass loaded data to callback\n      var reader = new FileReader();\n      reader.readAsText(e.target.files[0], 'utf-8');\n      reader.addEventListener('load', function (e) {\n        var data = JSON.parse(e.target.result) || null;\n        callback(data);\n      });\n    });\n    // trigger file select dialog\n    setTimeout(function () {\n      return elm.click();\n    }, 100);\n  },\n\n\n  // create a new hidden element\n  _elm: function _elm(tag, id) {\n    var elm = void 0;\n    // look for existing element by id\n    elm = document.getElementById(id);\n    if (elm) return elm;\n    // create a new element\n    elm = document.createElement(tag);\n    elm.setAttribute('style', 'display:block; overflow:hidden; visibility:hidden; max-height:0;');\n    elm.setAttribute('id', id);\n    document.body.appendChild(elm);\n    return elm;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9maWxlcy5qcz9mOGNiIl0sIm5hbWVzIjpbImV4cG9ydERhdGEiLCJuYW1lIiwiZGF0YSIsIlN0cmluZyIsIkRhdGUiLCJub3ciLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZWxtIiwiX2VsbSIsInNldEF0dHJpYnV0ZSIsInNldFRpbWVvdXQiLCJjbGljayIsInJlbW92ZSIsImltcG9ydERhdGEiLCJjYWxsYmFjayIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiZmlsZXMiLCJsZW5ndGgiLCJ3aW5kb3ciLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsInBhcnNlIiwicmVzdWx0IiwidGFnIiwiaWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3JlYXRlRWxlbWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCJdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUdBLHlEQUFlOztBQUViO0FBQ0FBLFlBSGEsc0JBR0RDLElBSEMsRUFHS0MsSUFITCxFQUdZO0FBQ3ZCO0FBQ0FELFdBQU9FLE9BQVFGLFFBQVEsRUFBaEIsS0FBd0IsaUJBQWdCRyxLQUFLQyxHQUFMLEVBQS9DO0FBQ0FILFdBQU8sa0NBQWlDSSxtQkFBb0JDLEtBQUtDLFNBQUwsQ0FBZ0JOLFFBQVEsRUFBeEIsQ0FBcEIsQ0FBeEM7O0FBRUE7QUFDQSxRQUFNTyxNQUFNLEtBQUtDLElBQUwsQ0FBVyxHQUFYLEVBQWdCLHVCQUFoQixDQUFaO0FBQ0FELFFBQUlFLFlBQUosQ0FBa0IsTUFBbEIsRUFBMEJULElBQTFCO0FBQ0FPLFFBQUlFLFlBQUosQ0FBa0IsVUFBbEIsRUFBOEJWLE9BQU0sT0FBcEM7QUFDQVEsUUFBSUUsWUFBSixDQUFrQixRQUFsQixFQUE0QixRQUE1Qjs7QUFFQTtBQUNBQyxlQUFZO0FBQUEsYUFBTUgsSUFBSUksS0FBSixFQUFOO0FBQUEsS0FBWixFQUErQixHQUEvQjtBQUNBRCxlQUFZO0FBQUEsYUFBTUgsSUFBSUssTUFBSixFQUFOO0FBQUEsS0FBWixFQUFnQyxJQUFoQztBQUNELEdBakJZOzs7QUFtQmI7QUFDQUMsWUFwQmEsc0JBb0JEQyxRQXBCQyxFQW9CVTtBQUNyQixRQUFLLENBQUNBLFFBQUQsSUFBYSxPQUFPQSxRQUFQLEtBQW9CLFVBQXRDLEVBQW1EOztBQUVuRDtBQUNBLFFBQU1QLE1BQU0sS0FBS0MsSUFBTCxDQUFXLE9BQVgsRUFBb0Isd0JBQXBCLENBQVo7QUFDQUQsUUFBSUUsWUFBSixDQUFrQixNQUFsQixFQUEwQixNQUExQjtBQUNBRixRQUFJRSxZQUFKLENBQWtCLFFBQWxCLEVBQTRCLE9BQTVCO0FBQ0FGLFFBQUlRLGdCQUFKLENBQXNCLFFBQXRCLEVBQWdDLGFBQUs7O0FBRW5DO0FBQ0FMLGlCQUFZO0FBQUEsZUFBTUgsSUFBSUssTUFBSixFQUFOO0FBQUEsT0FBWixFQUFnQyxHQUFoQzs7QUFFQTtBQUNBLFVBQUssQ0FBQ0ksQ0FBRCxJQUFNLENBQUNBLEVBQUVDLE1BQWQsRUFBdUI7QUFDdkIsVUFBSyxDQUFDRCxFQUFFQyxNQUFGLENBQVNDLEtBQVYsSUFBbUIsQ0FBQ0YsRUFBRUMsTUFBRixDQUFTQyxLQUFULENBQWVDLE1BQXhDLEVBQWlEO0FBQ2pELFVBQUssRUFBRyxnQkFBZ0JDLE1BQW5CLENBQUwsRUFBbUM7O0FBRW5DO0FBQ0EsVUFBTUMsU0FBUyxJQUFJQyxVQUFKLEVBQWY7QUFDQUQsYUFBT0UsVUFBUCxDQUFtQlAsRUFBRUMsTUFBRixDQUFTQyxLQUFULENBQWdCLENBQWhCLENBQW5CLEVBQXdDLE9BQXhDO0FBQ0FHLGFBQU9OLGdCQUFQLENBQXlCLE1BQXpCLEVBQWlDLGFBQUs7QUFDcEMsWUFBSWYsT0FBT0ssS0FBS21CLEtBQUwsQ0FBWVIsRUFBRUMsTUFBRixDQUFTUSxNQUFyQixLQUFpQyxJQUE1QztBQUNBWCxpQkFBVWQsSUFBVjtBQUNELE9BSEQ7QUFJRCxLQWpCRDtBQWtCQTtBQUNBVSxlQUFZO0FBQUEsYUFBTUgsSUFBSUksS0FBSixFQUFOO0FBQUEsS0FBWixFQUErQixHQUEvQjtBQUNELEdBL0NZOzs7QUFpRGI7QUFDQUgsTUFsRGEsZ0JBa0RQa0IsR0FsRE8sRUFrREZDLEVBbERFLEVBa0RHO0FBQ2QsUUFBSXBCLFlBQUo7QUFDQTtBQUNBQSxVQUFNcUIsU0FBU0MsY0FBVCxDQUF5QkYsRUFBekIsQ0FBTjtBQUNBLFFBQUtwQixHQUFMLEVBQVcsT0FBT0EsR0FBUDtBQUNYO0FBQ0FBLFVBQU1xQixTQUFTRSxhQUFULENBQXdCSixHQUF4QixDQUFOO0FBQ0FuQixRQUFJRSxZQUFKLENBQWtCLE9BQWxCLEVBQTJCLGtFQUEzQjtBQUNBRixRQUFJRSxZQUFKLENBQWtCLElBQWxCLEVBQXdCa0IsRUFBeEI7QUFDQUMsYUFBU0csSUFBVCxDQUFjQyxXQUFkLENBQTJCekIsR0FBM0I7QUFDQSxXQUFPQSxHQUFQO0FBQ0Q7QUE3RFksQ0FBZiIsImZpbGUiOiI4Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGaWxlIGRhdGEgaW1wb3J0L2V4cG9ydCBoZWxwZXIgbW9kdWxlXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcblxyXG4gIC8vIGV4cG9ydCBzb21lIGRhdGEgdG8gYSBqc29uIGZpbGUgYnkgbmFtZVxyXG4gIGV4cG9ydERhdGEoIG5hbWUsIGRhdGEgKSB7XHJcbiAgICAvLyBwcmVwIGZpbGUgbmFtZSBhbmQgZGF0YSB0byBiZSBzYXZlZFxyXG4gICAgbmFtZSA9IFN0cmluZyggbmFtZSB8fCAnJyApIHx8ICdleHBvcnRfZGF0YV8nKyBEYXRlLm5vdygpO1xyXG4gICAgZGF0YSA9ICdkYXRhOnRleHQvanNvbjtjaGFyc2V0PXV0Zi04LCcrIGVuY29kZVVSSUNvbXBvbmVudCggSlNPTi5zdHJpbmdpZnkoIGRhdGEgfHwge30gKSApO1xyXG5cclxuICAgIC8vIGNyZWF0ZSBhIGxpbmsgd2l0aCBkb3dubG9hZCBhdHRyaWJ1dGVcclxuICAgIGNvbnN0IGVsbSA9IHRoaXMuX2VsbSggJ2EnLCAnZmlsZUV4cG9ydExpbmtFbGVtZW50JyApO1xyXG4gICAgZWxtLnNldEF0dHJpYnV0ZSggJ2hyZWYnLCBkYXRhICk7XHJcbiAgICBlbG0uc2V0QXR0cmlidXRlKCAnZG93bmxvYWQnLCBuYW1lICsnLmpzb24nICk7XHJcbiAgICBlbG0uc2V0QXR0cmlidXRlKCAndGFyZ2V0JywgJ19ibGFuaycgKTtcclxuXHJcbiAgICAvLyB0cmlnZ2VyIGRvd25sb2FkIGFuZCByZW1vdmUgZWxlbWVudFxyXG4gICAgc2V0VGltZW91dCggKCkgPT4gZWxtLmNsaWNrKCksIDEwMCApO1xyXG4gICAgc2V0VGltZW91dCggKCkgPT4gZWxtLnJlbW92ZSgpLCAxMDAwICk7XHJcbiAgfSxcclxuXHJcbiAgLy8gaW1wb3J0IGEgZmlsZSBhbmQgaGF2ZSBpdCdzIGRhdGEgcGFzc2VkIHRvIGEgY3VzdG9tIGNhbGxiYWNrXHJcbiAgaW1wb3J0RGF0YSggY2FsbGJhY2sgKSB7XHJcbiAgICBpZiAoICFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicgKSByZXR1cm47XHJcblxyXG4gICAgLy8gY3JlYXRlIGZpbGUgaW5wdXQgZWxlbWVudFxyXG4gICAgY29uc3QgZWxtID0gdGhpcy5fZWxtKCAnaW5wdXQnLCAnZmlsZUltcG9ydElucHV0RWxlbWVudCcgKTtcclxuICAgIGVsbS5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ2ZpbGUnICk7XHJcbiAgICBlbG0uc2V0QXR0cmlidXRlKCAnYWNjZXB0JywgJy5qc29uJyApO1xyXG4gICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoICdjaGFuZ2UnLCBlID0+IHtcclxuXHJcbiAgICAgIC8vIHJlbW92ZSBpdCBhZnRlciBhIGZpbGUgaGFzIGJlZW4gc2VsZWN0ZWRcclxuICAgICAgc2V0VGltZW91dCggKCkgPT4gZWxtLnJlbW92ZSgpLCAxMDAgKTtcclxuXHJcbiAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBoYXZlIGEgZmlsZSBhbmQgRmlsZVJlYWRlciBzdXBwb3J0XHJcbiAgICAgIGlmICggIWUgfHwgIWUudGFyZ2V0ICkgcmV0dXJuO1xyXG4gICAgICBpZiAoICFlLnRhcmdldC5maWxlcyB8fCAhZS50YXJnZXQuZmlsZXMubGVuZ3RoICkgcmV0dXJuO1xyXG4gICAgICBpZiAoICEoICdGaWxlUmVhZGVyJyBpbiB3aW5kb3cgKSApIHJldHVybjtcclxuXHJcbiAgICAgIC8vIHJlYWQgdGhlIHNlbGVjdGVkIGZpbGUgYW5kIHBhc3MgbG9hZGVkIGRhdGEgdG8gY2FsbGJhY2tcclxuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgcmVhZGVyLnJlYWRBc1RleHQoIGUudGFyZ2V0LmZpbGVzWyAwIF0sICd1dGYtOCcgKTtcclxuICAgICAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoICdsb2FkJywgZSA9PiB7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKCBlLnRhcmdldC5yZXN1bHQgKSB8fCBudWxsO1xyXG4gICAgICAgIGNhbGxiYWNrKCBkYXRhICk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICAvLyB0cmlnZ2VyIGZpbGUgc2VsZWN0IGRpYWxvZ1xyXG4gICAgc2V0VGltZW91dCggKCkgPT4gZWxtLmNsaWNrKCksIDEwMCApO1xyXG4gIH0sXHJcblxyXG4gIC8vIGNyZWF0ZSBhIG5ldyBoaWRkZW4gZWxlbWVudFxyXG4gIF9lbG0oIHRhZywgaWQgKSB7XHJcbiAgICBsZXQgZWxtO1xyXG4gICAgLy8gbG9vayBmb3IgZXhpc3RpbmcgZWxlbWVudCBieSBpZFxyXG4gICAgZWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XHJcbiAgICBpZiAoIGVsbSApIHJldHVybiBlbG07XHJcbiAgICAvLyBjcmVhdGUgYSBuZXcgZWxlbWVudFxyXG4gICAgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggdGFnICk7XHJcbiAgICBlbG0uc2V0QXR0cmlidXRlKCAnc3R5bGUnLCAnZGlzcGxheTpibG9jazsgb3ZlcmZsb3c6aGlkZGVuOyB2aXNpYmlsaXR5OmhpZGRlbjsgbWF4LWhlaWdodDowOycgKTtcclxuICAgIGVsbS5zZXRBdHRyaWJ1dGUoICdpZCcsIGlkICk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBlbG0gKTtcclxuICAgIHJldHVybiBlbG07XHJcbiAgfSxcclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvZmlsZXMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///87\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/**\r\n * Default twitter accounts for news\r\n */\n/* harmony default export */ __webpack_exports__[\"a\"] = (['1Foxcom', 'coinbase', 'binance', 'HuobiGlobal', 'YobitExchange', 'BittrexExchange', 'Coinsquare', 'hitbtc', 'Cryptopia_NZ', 'Bitstamp', 'bitfinex', 'krakenfx', 'coindesk', 'Cointelegraph']);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlncy90d2l0dGVyQWNjb3VudHMuanM/ZTZjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0EseURBQWUsQ0FDYixTQURhLEVBRWIsVUFGYSxFQUdiLFNBSGEsRUFJYixhQUphLEVBS2IsZUFMYSxFQU1iLGlCQU5hLEVBT2IsWUFQYSxFQVFiLFFBUmEsRUFTYixjQVRhLEVBVWIsVUFWYSxFQVdiLFVBWGEsRUFZYixVQVphLEVBYWIsVUFiYSxFQWNiLGVBZGEsQ0FBZiIsImZpbGUiOiI4OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBEZWZhdWx0IHR3aXR0ZXIgYWNjb3VudHMgZm9yIG5ld3NcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICAnMUZveGNvbScsXHJcbiAgJ2NvaW5iYXNlJyxcclxuICAnYmluYW5jZScsXHJcbiAgJ0h1b2JpR2xvYmFsJyxcclxuICAnWW9iaXRFeGNoYW5nZScsXHJcbiAgJ0JpdHRyZXhFeGNoYW5nZScsXHJcbiAgJ0NvaW5zcXVhcmUnLFxyXG4gICdoaXRidGMnLFxyXG4gICdDcnlwdG9waWFfTlonLFxyXG4gICdCaXRzdGFtcCcsXHJcbiAgJ2JpdGZpbmV4JyxcclxuICAna3Jha2VuZngnLFxyXG4gICdjb2luZGVzaycsXHJcbiAgJ0NvaW50ZWxlZ3JhcGgnLFxyXG5dO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29uZmlncy90d2l0dGVyQWNjb3VudHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'main\',{staticClass:"page-wrap",class:{ \'collapsed\': _vm.header.collapsed, \'opaque\': _vm.header.opaque }},[_c(\'section\',{staticClass:"page-topbar"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-space"},[_c(\'Search\',{staticClass:"light push-right",model:{value:(_vm.searchStr),callback:function ($$v) {_vm.searchStr=$$v},expression:"searchStr"}}),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 text-clip text-big text-center push-right if-medium"},[_vm._v("\\n          Twitter News ("+_vm._s(_vm.newCount)+"/"+_vm._s(_vm.newsEntries.length)+")\\n        ")]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap"},[_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-primary-hover icon-down-open iconLeft",attrs:{"slot":"trigger"},slot:"trigger"},[_vm._v(_vm._s(_vm.filterLabel))]),_vm._v(" "),_c(\'div\',{attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"flex-row flex-top flex-space pad-h push-bottom"},[_c(\'div\',{staticClass:"flex-1 push-right form-label icon-twtr iconLeft"},[_vm._v("Twitter Accounts ("+_vm._s(_vm.accountsList.length)+")")]),_vm._v(" "),(_vm.searchHandle)?_c(\'button\',{staticClass:"text-bright-hover icon-list iconLeft",on:{"click":function($event){_vm.searchHandle = \'\'}}},[_vm._v("Show all")]):_vm._e()]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-wrap push-bottom"},[_c(\'div\',{staticClass:"tablelist-content"},_vm._l((_vm.accountsList),function(a){return _c(\'div\',{key:a.handle,staticClass:"tablelist-row flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-1 text-bright-hover text-clip clickable push-right",on:{"click":function($event){_vm.applyFilters( \'\', a.handle )}}},[_c(\'span\',{staticClass:"text-info icon-twtr"}),_vm._v(" "),_c(\'span\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-clip",class:{ \'text-gain\': a.active, \'text-danger text-striked\': a.error },attrs:{"title":a.name}},[_vm._v("@"+_vm._s(a.handle))])]),_vm._v(" "),_c(\'div\',{staticClass:"push-right"},[_c(\'span\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"clickable",attrs:{"title":"Fetch"},on:{"click":function($event){_vm.fetchByHandle( a.handle )}}},[(a.fetching)?_c(\'span\',{staticClass:"text-badge text-primary"},[_vm._v("...")]):_c(\'span\',{staticClass:"text-badge"},[_vm._v(_vm._s(a.count))])])]),_vm._v(" "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close text-danger-hover",attrs:{"title":"Remove"},on:{"click":function($event){_vm.removeTwitterHandler( a.handle )}}})])}))]),_vm._v(" "),_c(\'form\',{staticClass:"twitter-accounts-form pad-h push-bottom",attrs:{"action":"#","autocomplete":"off"},on:{"submit":function($event){$event.preventDefault();return _vm.accountFormHandler($event)}}},[_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'div\',{staticClass:"icon-twtr iconLeft"}),_vm._v(" "),_c(\'input\',{staticClass:"flex-1",attrs:{"type":"text","name":"handle","placeholder":"Add twitter @handle..."}}),_vm._v(" "),_c(\'button\',{staticClass:"icon-add text-primary-hover",attrs:{"type":"submit"}})])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap pad-h"},[_c(\'button\',{staticClass:"icon-add iconLeft text-bright-hover",on:{"click":function($event){_vm.importAccounts()}}},[_vm._v("Import List")]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("  ")]),_vm._v(" "),_c(\'button\',{staticClass:"icon-save iconLeft text-bright-hover",on:{"click":function($event){_vm.exportAccounts()}}},[_vm._v("Export List")])])])]),_vm._v("  \\n\\n          "),_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-primary-hover icon-config",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'div\',{staticClass:"pad-h",attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("News & Notifications Options")]),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Auto re-fetch latest news\'},on:{"change":_vm.saveOptions},model:{value:(_vm.options.news.enabled),callback:function ($$v) {_vm.$set(_vm.options.news, "enabled", $$v)},expression:"options.news.enabled"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Notify when news is available\'},on:{"change":_vm.saveOptions},model:{value:(_vm.options.news.notify),callback:function ($$v) {_vm.$set(_vm.options.news, "notify", $$v)},expression:"options.news.notify"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'E-mail news notifications\'},on:{"change":_vm.saveOptions},model:{value:(_vm.options.news.send),callback:function ($$v) {_vm.$set(_vm.options.news, "send", $$v)},expression:"options.news.send"}})],1),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("How often to send fetch requests")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.interval),expression:"options.news.interval"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"60","step":"1"},domProps:{"value":(_vm.options.news.interval)},on:{"change":_vm.saveOptions,"__r":function($event){_vm.$set(_vm.options.news, "interval", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.interval, \'sec\', \'secs\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Delay re-fetching from same source")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.delay),expression:"options.news.delay"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"60","max":"600","step":"10"},domProps:{"value":(_vm.options.news.delay)},on:{"change":_vm.saveOptions,"__r":function($event){_vm.$set(_vm.options.news, "delay", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.delay, \'sec\', \'secs\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Tweets to fetch from each source")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.tweets),expression:"options.news.tweets"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"10","step":"1"},domProps:{"value":(_vm.options.news.tweets)},on:{"change":_vm.saveOptions,"__r":function($event){_vm.$set(_vm.options.news, "tweets", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.tweets, \'tweet\', \'tweets\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Limit tweets by days posted")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.days),expression:"options.news.days"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"30","step":"1"},domProps:{"value":(_vm.options.news.days)},on:{"change":_vm.saveOptions,"__r":function($event){_vm.$set(_vm.options.news, "days", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.options.news.days, \'day\', \'days\' )))])])]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Total number of tweets to store")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.total),expression:"options.news.total"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"10","max":"200","step":"10"},domProps:{"value":(_vm.options.news.total)},on:{"change":_vm.saveOptions,"__r":function($event){_vm.$set(_vm.options.news, "total", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.options.news.total))])])]),_vm._v(" "),_c(\'div\',[_c(\'div\',{staticClass:"form-label push-bottom push-small"},[_vm._v("Limit visible tweets on page")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.news.max),expression:"options.news.max"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"10","max":"100","step":"10"},domProps:{"value":(_vm.options.news.max)},on:{"change":_vm.saveOptions,"__r":function($event){_vm.$set(_vm.options.news, "max", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.options.news.max))])])])])])],1)],1)])]),_vm._v(" "),_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card tablelist-wrap"},[_c(\'div\',{staticClass:"tablelist-header"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"tablelist-20 text-clip push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sentiment\', \'name\', \'asc\' )}}},[_vm._v("\\n                Name "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'sentiment\', \'name\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-10 text-nowrap push-right if-small"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sentiment\', \'token\', \'asc\' )}}},[_vm._v("\\n                Token "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'sentiment\', \'token\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-10 text-nowrap text-right push-right if-small"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sentiment\', \'count\', \'desc\' )}}},[_vm._v("\\n                Tweets "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'sentiment\', \'count\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-30 text-nowrap text-grey push-right if-medium"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sentiment\', \'barPercent\', \'desc\' )}}},[_vm._v("\\n                Mention % "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'sentiment\', \'barPercent\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sentiment\', \'sentiment\', \'asc\' )}}},[_vm._v("\\n                Sentiment "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'sentiment\', \'sentiment\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-10 text-nowrap text-grey text-right"},[_vm._v("\\n              Details\\n            ")])])]),_vm._v(" "),(!_vm.chartData.length)?_c(\'div\',{staticClass:"tablelist-content pad-v text-center text-info"},[_c(\'div\',{staticClass:"icon-chart-line iconLarge"}),_vm._v(" "),_c(\'div\',[_vm._v("Sentiment analysis data for each Binance token based on loaded tweets.")]),_vm._v(" "),_c(\'div\',{domProps:{"innerHTML":_vm._s(_vm.sentimentInfoText)}})]):_vm._e(),_vm._v(" "),(_vm.chartData.length)?_c(\'div\',{staticClass:"tablelist-content"},_vm._l((_vm.chartList),function(d){return _c(\'div\',{key:d.token,staticClass:"tablelist-row flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"tablelist-20 text-clip text-primary push-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],attrs:{"title":"Search"},on:{"click":function($event){_vm.applyFilters( d.search, \'\' )}}},[_c(\'i\',{staticClass:"icon-search text-info"}),_vm._v(" "+_vm._s(d.name))])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-10 text-clip text-secondary push-right if-small"},[_vm._v(_vm._s(d.token))]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-10 text-nowrap text-right push-right if-small"},[_vm._v(_vm._s(d.count))]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-30 text-nowrap push-right if-medium"},[(d.barPercent)?_c(\'div\',{staticClass:"percent-bar"},[_c(\'div\',{class:d.barColor,style:({ \'width\': d.barPercent +\'%\' })})]):_vm._e()]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap push-right",class:d.styles,domProps:{"innerHTML":_vm._s(d.sentiment)}}),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-10 text-nowrap text-right"},[(d.route)?_c(\'button\',{staticClass:"icon-chart-line iconLeft text-btn bg-info-hover",on:{"click":function($event){$event.stopPropagation();_vm.$bus.emit( \'setRoute\', d.route )}}},[_vm._v("Info")]):_vm._e()])])})):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-header"},[_c(\'div\',{staticClass:"newspage-chart-row flex-row flex-middle flex-stretch text-grey"},[_c(\'div\',{staticClass:"flex-1 text-clip"},[_vm._v("Sentiment analysis for "+_vm._s(_vm._f("toNoun")(_vm.chartData.length, \'token\', \'tokens\' ))+" found in all available tweets.")]),_vm._v(" "),_c(\'div\',{staticClass:"text-right"},[_c(\'button\',{staticClass:"icon-close iconLeft text-danger-hover",on:{"click":function($event){_vm.flushTweets()}}},[_vm._v("Flush Data")])])])])])])]),_vm._v(" "),(!_vm.tweetsList.length)?_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card pad-all flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"icon-help iconLarge text-grey push-right"}),_vm._v(" "),_c(\'div\',{staticClass:"flex-1"},[(_vm.searchStr)?_c(\'div\',[_c(\'h3\',{staticClass:"text-bright"},[_vm._v("No Match For "),_c(\'span\',{staticClass:"text-primary"},[_vm._v(_vm._s(_vm.searchStr))])]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("Can\'t find anything matching your search input.")])]):(_vm.searchHandle)?_c(\'div\',[_c(\'h3\',{staticClass:"text-bright"},[_vm._v("No News Data For "),_c(\'a\',{staticClass:"text-primary-hover",attrs:{"href":\'https://twitter.com/\'+ _vm.searchHandle,"target":"_blank"}},[_vm._v(_vm._s(_vm.filterLabel))])]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("There are no entries available for the selected news source.")])]):_c(\'div\',[_c(\'h3\',{staticClass:"text-primary"},[_vm._v("No News Data Yet")]),_vm._v(" "),_c(\'span\',{staticClass:"text-grey"},[_vm._v("News data from remote sources has not loaded yet.")])])])])])]):_vm._e(),_vm._v(" "),_c(\'section\',{staticClass:"pagelist-wrap",attrs:{"id":"newspage-list"}},[_c(\'div\',{staticClass:"container"},_vm._l((_vm.tweetsList),function(t){return _c(\'div\',{key:t.id,staticClass:"pagelist-item flex-row flex-top flex-stretch"},[_c(\'div\',{staticClass:"push-right",class:{ \'alert-bubble\': t.isNew }},[_c(\'img\',{staticClass:"img-round",attrs:{"src":t.avatar,"width":"68","height":"68","alt":t.handle}})]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1"},[_c(\'div\',{staticClass:"flex-row flex-space push-bottom"},[_c(\'h3\',{staticClass:"text-clip clickable",on:{"click":function($event){_vm.openLink( \'https://twitter.com/\'+ t.handle )}}},[_c(\'span\',{staticClass:"text-primary-hover"},[_vm._v(_vm._s(t.name))]),_vm._v(" "),_c(\'small\',{staticClass:"text-smaller text-grey-hover"},[_vm._v("@"+_vm._s(t.handle))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-clip if-small"},[_c(\'a\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-secondary-hover",attrs:{"href":t.link,"target":"_blank","title":"View tweet"}},[_vm._v(_vm._s(_vm._f("toElapsed")(t.time, \'ago\', true )))]),_vm._v("  \\n              "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close text-danger-hover",attrs:{"type":"button","title":"Delete"},on:{"click":function($event){_vm.deleteTweet( t.id )}}})])]),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-wrap",domProps:{"innerHTML":_vm._s(_vm.tweetHtml( t.text ))}})])])}))])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TradePage_vue__ = __webpack_require__(28);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2abad3a4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TradePage_vue__ = __webpack_require__(95);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(91)\n}\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TradePage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_2abad3a4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TradePage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UcmFkZVBhZ2UudnVlP2VjMWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0Esd0JBQW9WO0FBQ3BWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1xcXCJvbWl0XFxcIjoxLFxcXCJyZW1vdmVcXFwiOnRydWV9IXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTJhYmFkM2E0XFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjpmYWxzZX0hcG9zdGNzcy1sb2FkZXIhc2Fzcy1sb2FkZXI/ZGF0YT1AaW1wb3J0IFxcXCIuL3NyYy9zY3NzL2dsb2JhbHMuc2Nzc1xcXCI7IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vVHJhZGVQYWdlLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RyYWRlUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1RyYWRlUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTJhYmFkM2E0XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVHJhZGVQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9UcmFkZVBhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///90\n')},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UcmFkZVBhZ2UudnVlPzZiMWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0yYWJhZDNhNFwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjpmYWxzZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanM/ZGF0YT1AaW1wb3J0IFwiLi9zcmMvc2Nzcy9nbG9iYWxzLnNjc3NcIjshLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RyYWRlUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///91\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Prompt Class.\n * Asks user for input, or show a confirmation dialog.\n */\nvar Prompt = function () {\n\n  // class constructor\n  function Prompt(options) {\n    var _this = this;\n\n    _classCallCheck(this, Prompt);\n\n    this._options = Object.assign({\n      // title to show on prompt window\n      title: 'Enter a value',\n      // default value to be inserted\n      value: '',\n      // show confirm message instead of a prompt input\n      confirm: '',\n      // text for input placeholder\n      inputText: 'Type here...',\n      // text to show on accept button\n      acceptText: 'Accept',\n      // text to show on cancel button\n      cancelText: 'Cancel',\n      // function to call on accept\n      onAccept: null,\n      // function to call on cancel\n      onCancel: null,\n      // function to call on empty input\n      onEmpty: null,\n      // don't accept empty input values for prompts\n      forceValue: true,\n      // class used to animate loader in/out\n      toggleClass: 'prompt-visible',\n      // duration of css animation on show/hide toggle\n      toggleDuration: 600,\n      // z-index for loader when active\n      zIndex: 99999\n      // ...\n    }, options);\n\n    this._title = this._elm('div', { class: 'prompt-title' });\n    this._title.innerHTML = this._options.title || '';\n\n    this._message = this._elm('div', { class: 'prompt-message' });\n    this._message.innerHTML = this._options.confirm || '';\n\n    this._input = this._elm('input', { class: 'prompt-input', placeholder: this._options.inputText });\n    this._input.value = this._options.value || '';\n\n    this._accept = this._elm('button', { class: 'prompt-accept-btn', type: 'submit' });\n    this._accept.innerHTML = this._options.acceptText;\n\n    this._cancel = this._elm('button', { class: 'prompt-cancel-btn', type: 'button' });\n    this._cancel.innerHTML = this._options.cancelText;\n\n    this._buttons = this._elm('div', { class: 'prompt-buttons' });\n    this._buttons.appendChild(this._accept);\n    this._buttons.appendChild(this._cancel);\n\n    this._container = this._elm('form', { class: 'prompt-container', action: '#' });\n    this._container.addEventListener('submit', this._onAccept.bind(this), true);\n    this._container.appendChild(this._title);\n\n    if (this._options.confirm) {\n      this._container.appendChild(this._message);\n    } else {\n      this._container.appendChild(this._input);\n    }\n    this._container.appendChild(this._buttons);\n\n    this._overlay = this._elm('div', { class: 'prompt-overlay' });\n    this._overlay.addEventListener('click', this._onCancel.bind(this), true);\n    this._overlay.appendChild(this._container);\n\n    document.body.appendChild(this._overlay);\n\n    setTimeout(function () {\n      _this._overlay.classList.add(_this._options.toggleClass);\n      _this._input.selectionStart = _this._input.selectionEnd = 10000;\n      _this._input.focus();\n    }, 60);\n  }\n\n  // remove prompt from page\n\n\n  _createClass(Prompt, [{\n    key: '_remove',\n    value: function _remove() {\n      var _this2 = this;\n\n      this._overlay.classList.remove(this._options.toggleClass);\n\n      setTimeout(function () {\n        if (document.body.contains(_this2._overlay)) {\n          document.body.removeChild(_this2._overlay);\n        }\n      }, this._options.toggleDuration);\n    }\n\n    // on accept button\n\n  }, {\n    key: '_onAccept',\n    value: function _onAccept(e) {\n      e.preventDefault();\n\n      if (typeof this._options.onAccept === 'function') {\n        var value = String(this._input.value || '').trim();\n\n        if (this._options.forceValue && !this._options.confirm && !value) {\n          if (typeof this._options.onEmpty === 'function') {\n            this._options.onEmpty('Must enter a value.');\n          }\n          return;\n        }\n        this._options.onAccept(value);\n      }\n      this._remove();\n    }\n\n    // on cancel bubble\n\n  }, {\n    key: '_onCancel',\n    value: function _onCancel(e) {\n      if (e.target === this._cancel || e.target === this._overlay) {\n        if (typeof this._options.onCancel === 'function') {\n          this._options.onCancel(this._input.value);\n        }\n        this._remove();\n      }\n    }\n\n    /**\n     * Create new element and apply attributes\n     * @param {string} tag   Tag name\n     * @param {object} atts  Attributes key/val pair object\n     */\n\n  }, {\n    key: '_elm',\n    value: function _elm(tag, atts) {\n      var e = document.createElement(tag);\n      if ((typeof atts === 'undefined' ? 'undefined' : _typeof(atts)) === 'object') {\n        Object.keys(atts).forEach(function (k) {\n          return e.setAttribute(k, atts[k]);\n        });\n      }\n      return e;\n    }\n  }]);\n\n  return Prompt;\n}();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Prompt);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///92\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZT8yZWRiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjkzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9leHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4vZGlzdC9sb2FkZXIuanM/e1wib21pdFwiOjEsXCJyZW1vdmVcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtNGUxOThiMTZcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6ZmFsc2V9IS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzP2RhdGE9QGltcG9ydCBcIi4vc3JjL3Njc3MvZ2xvYmFscy5zY3NzXCI7IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///93\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{ref:"container",staticClass:"tabs-wrap",on:{"click":function($event){$event.stopPropagation();return _vm.hideDropdown($event)}}},[(!_vm.inline)?_c(\'div\',{staticClass:"tabs-toggle",on:{"click":function($event){$event.stopPropagation();return _vm.toggleDropdown($event)}}},[_c(\'span\',{staticClass:"icon-menu text-clip"},[_vm._v("  "+_vm._s(_vm.tabName))])]):_vm._e(),_vm._v(" "),_c(\'nav\',{staticClass:"tabs-nav",class:{ \'tabs-inline\': _vm.inline, \'tabs-drop\': !_vm.inline, \'visible\': _vm.visible }},_vm._l((_vm.tabs),function(tab,index){return _c(\'button\',{key:tab.name,class:[ { \'active\': tab.active }, tab.styles ],on:{"click":function($event){_vm.activateTab( index )}}},[_vm._v("\\n      "+_vm._s(tab.name)+"\\n    ")])})),_vm._v(" "),_c(\'div\',{staticClass:"tabs-content"},[_vm._t("default")],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWJzLnZ1ZT9lNDliIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0IsaUJBQWlCLDRDQUE0Qyx5QkFBeUIseUJBQXlCLGtDQUFrQywwQkFBMEIsOEJBQThCLHlCQUF5Qix5QkFBeUIsb0NBQW9DLGFBQWEsa0NBQWtDLHNFQUFzRSw4QkFBOEIsK0VBQStFLHVDQUF1QyxvQkFBb0Isc0JBQXNCLHVCQUF1QixtQkFBbUIseUJBQXlCLDJCQUEyQixpREFBaUQseUJBQXlCLDJCQUEyQjtBQUM5MkI7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7cmVmOlwiY29udGFpbmVyXCIsc3RhdGljQ2xhc3M6XCJ0YWJzLXdyYXBcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0uaGlkZURyb3Bkb3duKCRldmVudCl9fX0sWyghX3ZtLmlubGluZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGFicy10b2dnbGVcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO3JldHVybiBfdm0udG9nZ2xlRHJvcGRvd24oJGV2ZW50KX19fSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb24tbWVudSB0ZXh0LWNsaXBcIn0sW192bS5fdihcIsKgwqBcIitfdm0uX3MoX3ZtLnRhYk5hbWUpKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnbmF2Jyx7c3RhdGljQ2xhc3M6XCJ0YWJzLW5hdlwiLGNsYXNzOnsgJ3RhYnMtaW5saW5lJzogX3ZtLmlubGluZSwgJ3RhYnMtZHJvcCc6ICFfdm0uaW5saW5lLCAndmlzaWJsZSc6IF92bS52aXNpYmxlIH19LF92bS5fbCgoX3ZtLnRhYnMpLGZ1bmN0aW9uKHRhYixpbmRleCl7cmV0dXJuIF9jKCdidXR0b24nLHtrZXk6dGFiLm5hbWUsY2xhc3M6WyB7ICdhY3RpdmUnOiB0YWIuYWN0aXZlIH0sIHRhYi5zdHlsZXMgXSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmFjdGl2YXRlVGFiKCBpbmRleCApfX19LFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3ModGFiLm5hbWUpK1wiXFxuICAgIFwiKV0pfSkpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGFicy1jb250ZW50XCJ9LFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00ZTE5OGIxNlwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL1RhYnMudnVlXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///94\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'main\',{staticClass:"page-wrap",class:{ \'collapsed\': _vm.header.collapsed, \'opaque\': _vm.header.opaque }},[_c(\'section\',{staticClass:"page-topbar"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-space"},[_c(\'Search\',{staticClass:"light push-right",model:{value:(_vm.searchStr),callback:function ($$v) {_vm.searchStr=$$v},expression:"searchStr"}}),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 text-clip text-big text-center push-right if-medium"},[_vm._v("Trading Bot")]),_vm._v(" "),_c(\'Dropdown\',[_c(\'button\',{staticClass:"form-btn bg-primary-hover icon-down-open iconLeft",attrs:{"slot":"trigger"},slot:"trigger"},[(_vm.socketStatus === 0)?_c(\'span\',[_vm._v("API Offline "),_c(\'i\',{staticClass:"icon-close"})]):_vm._e(),_vm._v(" "),(_vm.socketStatus === 1)?_c(\'span\',[_vm._v("API Connecting... "),_c(\'i\',{staticClass:"icon-signal"})]):_vm._e(),_vm._v(" "),(_vm.socketStatus === 2)?_c(\'span\',[_vm._v("API Active "),_c(\'i\',{staticClass:"icon-check"})]):_vm._e()]),_vm._v(" "),_c(\'div\',{staticClass:"text-center",attrs:{"slot":"list"},slot:"list"},[_c(\'div\',{staticClass:"form-label pad-h"},[_vm._v("Account API Connection")]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"pad-h push-bottom"},[(!_vm.canConnect)?_c(\'span\',[_vm._v("You will need to provide your API keys in the Options page and enable it to connect "),_c(\'i\',{staticClass:"icon-cry"})]):(!_vm.socketStatus)?_c(\'span\',[_vm._v("Currently not connected to your Binance account "),_c(\'i\',{staticClass:"icon-cry"})]):(_vm.socketStatus)?_c(\'span\',[_vm._v("Currently connected to your Binance account "),_c(\'i\',{staticClass:"icon-check"})]):_vm._e()]),_vm._v(" "),_c(\'div\',{staticClass:"pad-h",class:{ \'disabled\': !_vm.canConnect }},[(_vm.socketStatus === 0)?_c(\'button\',{staticClass:"form-btn bg-success-hover icon-close iconLeft",on:{"click":_vm.initUserStream}},[_vm._v("Connect")]):_vm._e(),_vm._v(" "),(_vm.socketStatus === 1)?_c(\'button\',{staticClass:"form-btn bg-info-hover icon-close iconLeft"},[_vm._v("Waiting...")]):_vm._e(),_vm._v(" "),(_vm.socketStatus === 2)?_c(\'button\',{staticClass:"form-btn bg-danger-hover icon-close iconLeft",on:{"click":_vm.stopUserStream}},[_vm._v("Disconnect")]):_vm._e()])])])],1)])]),_vm._v(" "),_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card tablelist-wrap"},[_c(\'div\',{staticClass:"tablelist-header"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"tablelist-20 text-clip push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'balances\', \'name\', \'asc\' )}}},[_vm._v("\\n                Token "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'balances\', \'name\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'balances\', \'asset\', \'asc\' )}}},[_vm._v("\\n                Symbol "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'balances\', \'asset\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-right push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'balances\', \'total\', \'desc\' )}}},[_vm._v("\\n                Total "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'balances\', \'total\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-right push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'balances\', \'free\', \'desc\' )}}},[_vm._v("\\n                Free "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'balances\', \'free\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'balances\', \'locked\', \'desc\' )}}},[_vm._v("\\n                Locked "),_c(\'i\',{staticClass:"text-primary",class:_vm.$sorter.getStyles( \'balances\', \'locked\' )})])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-right"},[_vm._v("\\n              Trade\\n            ")])])]),_vm._v(" "),(!_vm.balancesList.length)?_c(\'div\',{staticClass:"tablelist-content pad-v text-center text-info pos-rel"},[(_vm.isDisconnected)?_c(\'div\',[_c(\'div\',{staticClass:"icon-info iconLarge"}),_vm._v(" "),_c(\'div\',[_vm._v("Account balances will appear once connected to the API.")]),_vm._v(" "),(_vm.socketError)?_c(\'div\',{staticClass:"text-danger"},[_vm._v(_vm._s(_vm.socketError))]):_vm._e(),_vm._v(" "),_c(\'button\',{staticClass:"text-primary-hover icon-config iconLeft",on:{"click":function($event){_vm.$router.setRoute( \'/options\' )}}},[_vm._v("Manage Options")])]):_vm._e(),_vm._v(" "),(_vm.isWaiting)?_c(\'div\',[_c(\'div\',{staticClass:"icon-signal iconLarge"}),_vm._v(" "),_c(\'div\',{staticClass:"text-warning fx fx-pulse"},[_vm._v("Waiting for account balances data to load...")])]):_vm._e(),_vm._v(" "),(_vm.isConnected)?_c(\'div\',[_c(\'div\',{staticClass:"icon-help iconLarge"}),_vm._v(" "),(_vm.searchStr)?_c(\'div\',{staticClass:"text-danger"},[_vm._v("Could not find any results for: "+_vm._s(_vm.searchStr))]):_c(\'div\',[_vm._v("No account balances data available.")])]):_vm._e()]):_vm._e(),_vm._v(" "),(_vm.balancesList.length)?_c(\'div\',{staticClass:"tablelist-content"},_vm._l((_vm.balancesList),function(t){return _c(\'div\',{key:t.asset,staticClass:"tablelist-row flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"tablelist-20 text-clip text-bright push-right if-medium"},[_vm._v(_vm._s(t.name))]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-bright push-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-primary-hover",attrs:{"title":"Info"},on:{"click":function($event){_vm.$bus.emit( \'setRoute\', t.route )}}},[_vm._v(_vm._s(t.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-primary text-right text-monospace push-right"},[_vm._v(_vm._s(_vm._f("toFixed")(t.total)))]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-bright text-right text-monospace push-right"},[_vm._v(_vm._s(_vm._f("toFixed")(t.free)))]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-danger text-right text-monospace"},[_vm._v(_vm._s(_vm._f("toFixed")(t.locked)))]),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-20 text-nowrap text-right"},[_c(\'button\',{staticClass:"icon-chart-line iconLeft text-btn bg-info-hover",attrs:{"disabled":!_vm.checkCanTradeToken( t.asset, t.free )},on:{"click":function($event){_vm.initTokenTrade( t.asset, t.free )}}},[_vm._v("Trade")])])])})):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"tablelist-header"},[_c(\'div\',{staticClass:"tablelist-row flex-row flex-middle flex-space"},[_vm._m(0),_vm._v(" "),_c(\'div\',{staticClass:"text-clip"},[_c(\'span\',{staticClass:"text-info"},[_vm._v("Updated")]),_vm._v("  \\n              "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.socketUpdated))])])])])])])]),_vm._v(" "),_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card pad-all"},[_c(\'div\',{staticClass:"flex-row flex-space"},[_vm._m(1),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap push-right if-medium"},[_c(\'span\',{staticClass:"text-info"},[_vm._v("Bot Balance  ")]),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.balanceRemain, _vm.watchOptions.asset ))+" / "+_vm._s(_vm._f("toFixed")(_vm.balanceTotal, _vm.watchOptions.asset )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(_vm.watchOptions.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap push-right if-small"},[_c(\'span\',{staticClass:"text-info"},[_vm._v("Active Trades  ")]),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.pendingTrades)+" / "+_vm._s(_vm.totalTrades))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap"},[_c(\'span\',{staticClass:"text-info"},[_vm._v("Session P/L  ")]),_vm._v(" "),_c(\'span\',{class:{ \'text-gain\': _vm.botProfit > 0, \'text-loss\': _vm.botProfit < 0 }},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.botProfit, 3 ))+"%")])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-srtetch"},[_c(\'div\',{staticClass:"push-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"form-btn bg-info-hover",class:{ \'icon-up-open\': _vm.formShow, \'icon-down-open\': !_vm.formShow },attrs:{"title":"Toggle form"},on:{"click":_vm.toggleForm}})]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 text-clip push-right"},[_c(\'span\',{staticClass:"text-warning"},[_vm._v("Bot "+_vm._s(_vm.botActive ? \'is trading\' : \'will trade\')+" "+_vm._s(_vm.countInfo)+" using the options below.")])]),_vm._v(" "),_c(\'div\',{staticClass:"push-right"},[_c(\'Toggle\',{class:{ \'disabled\': _vm.botActive },attrs:{"text":\'Live Mode\'},model:{value:(_vm.liveMode),callback:function ($$v) {_vm.liveMode=$$v},expression:"liveMode"}})],1),_vm._v(" "),_c(\'div\',[(_vm.botActive === false)?_c(\'button\',{staticClass:"form-btn bg-success-hover icon-play iconLeft",attrs:{"disabled":!_vm.canStartBot},on:{"click":_vm.startBot}},[_vm._v("Start the Bot")]):_vm._e(),_vm._v(" "),(_vm.botActive === true)?_c(\'button\',{staticClass:"form-btn bg-danger-hover icon-stop iconLeft",on:{"click":_vm.stopBot}},[_vm._v("Bot running "+_vm._s(_vm.botElapsed)+" ...")]):_vm._e()])]),_vm._v(" "),_c(\'div\',{staticClass:"bot-form pad-top",class:{ \'visible\': _vm.formShow }},[_c(\'div\',{staticClass:"flex-grid flex-grid-md flex-middle",class:{ \'disabled\': _vm.botActive }},[_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Currency")]),_vm._v(" "),_c(\'SelectMenu\',{staticClass:"flex-1 push-right",attrs:{"options":_vm.assetOptions},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.asset),callback:function ($$v) {_vm.$set(_vm.watchOptions, "asset", $$v)},expression:"watchOptions.asset"}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.assetBalance, _vm.watchOptions.asset )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Only use")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.assetPercent),expression:"watchOptions.assetPercent"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"5","max":"100","step":"5"},domProps:{"value":(_vm.watchOptions.assetPercent)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "assetPercent", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.watchOptions.assetPercent)+"% "+_vm._s(_vm.watchOptions.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Split trades")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.assetSplit),expression:"watchOptions.assetSplit"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"1","max":"10","step":"1"},domProps:{"value":(_vm.watchOptions.assetSplit)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "assetSplit", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.watchOptions.assetSplit))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.filterType),callback:function ($$v) {_vm.$set(_vm.watchOptions, "filterType", $$v)},expression:"watchOptions.filterType"}},[_c(\'option\',{attrs:{"value":"allow"}},[_vm._v("Only tokens")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"deny"}},[_vm._v("Skip tokens")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.filterTokens),expression:"watchOptions.filterTokens"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"TOKEN1 TOKEN2 ..."},domProps:{"value":(_vm.watchOptions.filterTokens)},on:{"change":_vm.onBotOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "filterTokens", $event.target.value)}}})],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.priceType),callback:function ($$v) {_vm.$set(_vm.watchOptions, "priceType", $$v)},expression:"watchOptions.priceType"}},[_c(\'option\',{attrs:{"value":"change"}},[_vm._v("Price change")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"gain"}},[_vm._v("Price rise")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"loss"}},[_vm._v("Price drop")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceChange),expression:"watchOptions.priceChange"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.priceChange)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "priceChange", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.priceChange, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Volume gain")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volumeChange),expression:"watchOptions.volumeChange"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.volumeChange)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "volumeChange", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.volumeChange, 1 ))+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Within last")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.timeLimit),expression:"watchOptions.timeLimit"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0","max":"60","step":"1"},domProps:{"value":(_vm.watchOptions.timeLimit)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "timeLimit", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toNoun")(_vm.watchOptions.timeLimit, \'min\', \'mins\' )))])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Sell profit")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceProfit),expression:"watchOptions.priceProfit"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.priceProfit)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "priceProfit", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.priceProfit, 1 ))+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Stop loss")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.priceStop),expression:"watchOptions.priceStop"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"10.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.priceStop)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "priceStop", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.priceStop, 1 ))+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.priceCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "priceCheck", $$v)},expression:"watchOptions.priceCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Price above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Price below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.price),expression:"watchOptions.price"}],staticClass:"flex-1 push-right",attrs:{"type":"text","placeholder":"0.00000000"},domProps:{"value":(_vm.watchOptions.price)},on:{"change":_vm.onBotOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "price", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.watchOptions.asset))])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.volumeCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "volumeCheck", $$v)},expression:"watchOptions.volumeCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Volume above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Volume below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volume),expression:"watchOptions.volume"}],staticClass:"flex-1 push-right",attrs:{"type":"text","placeholder":"0000"},domProps:{"value":(_vm.watchOptions.volume)},on:{"change":_vm.onBotOptions,"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.watchOptions, "volume", $event.target.value)}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm.watchOptions.asset))])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.changeCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "changeCheck", $$v)},expression:"watchOptions.changeCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("24h % above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("24h % below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.change),expression:"watchOptions.change"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.change)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "change", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.change, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.volatilityCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "volatilityCheck", $$v)},expression:"watchOptions.volatilityCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Volatility above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Volatility below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.volatility),expression:"watchOptions.volatility"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.volatility)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "volatility", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.volatility, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'SelectMenu\',{staticClass:"push-right",attrs:{"css":\'text-primary-hover\'},on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.dangerCheck),callback:function ($$v) {_vm.$set(_vm.watchOptions, "dangerCheck", $$v)},expression:"watchOptions.dangerCheck"}},[_c(\'option\',{attrs:{"value":"above"}},[_vm._v("Danger above")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"below"}},[_vm._v("Danger below")])]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.watchOptions.danger),expression:"watchOptions.danger"}],staticClass:"flex-1 push-right",attrs:{"type":"range","min":"0.0","max":"100.0","step":"0.5"},domProps:{"value":(_vm.watchOptions.danger)},on:{"change":_vm.onBotOptions,"__r":function($event){_vm.$set(_vm.watchOptions, "danger", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.watchOptions.danger, 1 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Limit")]),_vm._v(" "),_c(\'SelectMenu\',{staticClass:"flex-1",on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.tradeLimit),callback:function ($$v) {_vm.$set(_vm.watchOptions, "tradeLimit", $$v)},expression:"watchOptions.tradeLimit"}},[_c(\'option\',{attrs:{"value":"multiple"}},[_vm._v("Multiple trades per token")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"active"}},[_vm._v("Single active trade per token")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"single"}},[_vm._v("Single trade only per token")])])],1),_vm._v(" "),_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Order type")]),_vm._v(" "),_c(\'SelectMenu\',{staticClass:"flex-1",on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.orderType),callback:function ($$v) {_vm.$set(_vm.watchOptions, "orderType", $$v)},expression:"watchOptions.orderType"}},[_c(\'option\',{attrs:{"value":"LIMIT"}},[_vm._v("LIMIT orders")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"MARKET"}},[_vm._v("MARKET orders")])])],1),_vm._v(" "),(_vm.watchOptions.orderType === \'LIMIT\')?_c(\'div\',{staticClass:"form-input text-nowrap"},[_c(\'span\',{staticClass:"push-right text-primary"},[_vm._v("Execution")]),_vm._v(" "),_c(\'SelectMenu\',{staticClass:"flex-1",on:{"change":_vm.onBotOptions},model:{value:(_vm.watchOptions.orderTime),callback:function ($$v) {_vm.$set(_vm.watchOptions, "orderTime", $$v)},expression:"watchOptions.orderTime"}},[_c(\'option\',{attrs:{"value":"GTC"}},[_vm._v("Good until canceled")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"IOC"}},[_vm._v("Immediate or cancel")]),_vm._v(" "),_c(\'option\',{attrs:{"value":"FOK"}},[_vm._v("Fill all or cancel")])])],1):_vm._e()])])])])]),_vm._v(" "),_c(\'section\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"container"},[_c(\'div\',{staticClass:"card pad-all"},[_c(\'Tabs\',{attrs:{"data":{ totalOrders: _vm.totalOrders, totalSessions: _vm.totalSessions, pendingTrades: _vm.pendingTrades, totalTrades: _vm.totalTrades }}},[_c(\'section\',{attrs:{"btn-class":"icon-chart-line iconLeft","btn-name":\'Bot Trades (\'+ _vm.pendingTrades +\'/\'+ _vm.totalTrades +\')\',"active":""}},[(!_vm.tradesList.length)?_c(\'div\',{staticClass:"pad-v text-center text-info"},[_c(\'div\',{staticClass:"icon-chart-line iconLarge"}),_vm._v(" "),_c(\'div\',[_vm._v("No trades data available.")])]):_vm._e(),_vm._v(" "),(_vm.tradesList.length)?_c(\'div\',{staticClass:"flex-list"},[_c(\'div\',{staticClass:"flex-header flex-middle flex-space"},[_c(\'div\',{staticClass:"iconWidth text-nowrap push-right if-medium"}),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'trades\', \'pair\', \'asc\' )}}},[_vm._v("Pair")]),_vm._v(" "),_c(\'span\',{staticClass:"text-info text-faded"},[_vm._v("/")]),_vm._v(" "),_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'trades\', \'time\', \'desc\' )}}},[_vm._v("Time")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'trades\', \'active\', \'asc\' )}}},[_vm._v("Status")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right"},[_vm._v("Buy Price")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right"},[_vm._v("Cur/Sell Price")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right"},[_vm._v("P/L")]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right"},[_c(\'Dropdown\',[_c(\'button\',{staticClass:"text-primary-hover icon-config",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"text-bright-hover icon-check iconLeft clickable",on:{"click":function($event){_vm.cleanTradesList()}}},[_vm._v("Remove Complete Trades")]),_vm._v(" "),_c(\'li\',{staticClass:"text-bright-hover icon-close iconLeft clickable",on:{"click":function($event){_vm.flushTradeEntries()}}},[_vm._v("Delete Trade Entries")])])])],1)]),_vm._v(" "),_vm._l((_vm.tradesList),function(t){return _c(\'div\',{key:t.id,staticClass:"flex-item flex-middle flex-stretch"},[_c(\'div\',{staticClass:"iconWidth text-nowrap push-right if-medium"},[_c(\'TokenIcon\',{attrs:{"image":t.image,"alt":t.name}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'button\',{staticClass:"text-primary-hover",on:{"click":function($event){_vm.$router.setRoute( t.route )}}},[_vm._v(_vm._s(t.pair))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(_vm._f("toElapsed")(t.time, \'ago\', true )))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{class:_vm.tradeStatus( t.status, 1 )},[_vm._v(_vm._s(_vm.tradeStatus( t.status, 0 )))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toMoney")(t.amount, 0 )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(t.token))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(t.buyPrice, t.asset )))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(t.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(t.sellPrice, t.asset )))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(t.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{class:{ \'text-gain\': t.profit > 0, \'text-loss\': t.profit < 0 }},[_vm._v(_vm._s(_vm._f("toFixed")(t.profit, 3 ))+"%")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',[(t.profit > 0)?_c(\'span\',{staticClass:"text-info"},[_vm._v("Gain")]):(t.profit < 0)?_c(\'span\',{staticClass:"text-info"},[_vm._v("Loss")]):_c(\'span\',{staticClass:"text-info"},[_vm._v("Same")])])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right"},[_c(\'Dropdown\',[_c(\'button\',{staticClass:"icon-config",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[(t.active)?_c(\'li\',{staticClass:"text-gain-hover icon-stop iconLeft clickable",class:{ \'disabled\': !_vm.isConnected },on:{"click":function($event){_vm.sellActiveTrade( t.id )}}},[_vm._v("Sell @ "+_vm._s(_vm._f("toFixed")(t.sellPrice, t.asset )))]):_vm._e(),_vm._v(" "),_c(\'li\',{staticClass:"text-bright-hover icon-visible iconLeft clickable",on:{"click":function($event){_vm.markBotTradeActive( t.id )}}},[_vm._v("Mark trade as Active")]),_vm._v(" "),_c(\'li\',{staticClass:"text-bright-hover icon-check iconLeft clickable",on:{"click":function($event){_vm.markBotTradeSold( t.id )}}},[_vm._v("Mark trade as Sold")]),_vm._v(" "),_c(\'li\',{staticClass:"text-danger-hover icon-close iconLeft clickable",on:{"click":function($event){_vm.removeTradeEntry( t.id )}}},[_vm._v("Remove from list")])])])],1)])}),_vm._v(" "),_c(\'div\',{staticClass:"flex-header flex-middle text-info flex-space"},[_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'span\',{staticClass:"icon-list iconLeft"},[_vm._v(_vm._s(_vm.tradesListText))])]),_vm._v(" "),_c(\'div\',[_vm._v("\\n                   \\n                ")])])],2):_vm._e()]),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-list iconLeft","btn-name":\'Order Activity (\'+ _vm.totalOrders +\')\'}},[(!_vm.ordersList.length)?_c(\'div\',{staticClass:"pad-v text-center text-info"},[_c(\'div\',{staticClass:"icon-list iconLarge"}),_vm._v(" "),_c(\'div\',[_vm._v("No orders data available.")])]):_vm._e(),_vm._v(" "),(_vm.ordersList.length)?_c(\'div\',{staticClass:"flex-list"},[_c(\'div\',{staticClass:"flex-header flex-middle flex-space"},[_c(\'div\',{staticClass:"iconWidth text-nowrap push-right if-medium"},[_vm._v(" ")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'orders\', \'pair\', \'asc\' )}}},[_vm._v("Pair")]),_vm._v(" "),_c(\'span\',{staticClass:"text-info text-faded"},[_vm._v("/")]),_vm._v(" "),_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'orders\', \'time\', \'desc\' )}}},[_vm._v("Time")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'orders\', \'side\', \'asc\' )}}},[_vm._v("Order")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'orders\', \'status\', \'asc\' )}}},[_vm._v("Status")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right"},[_vm._v("Price")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right if-medium"},[_vm._v("Fee")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right"},[_vm._v("Total")]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right"},[_c(\'Dropdown\',[_c(\'button\',{staticClass:"text-primary-hover icon-config",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[_c(\'li\',{staticClass:"text-bright-hover icon-close iconLeft clickable",on:{"click":function($event){_vm.cancelOpenOrders()}}},[_vm._v("Cancel Open Orders")]),_vm._v(" "),_c(\'li\',{staticClass:"text-bright-hover icon-check iconLeft clickable",on:{"click":function($event){_vm.clearOrdersList()}}},[_vm._v("Remove Complete Orders")])])])],1)]),_vm._v(" "),_vm._l((_vm.ordersList),function(o){return _c(\'div\',{key:o.id,staticClass:"flex-item flex-middle flex-space"},[_c(\'div\',{staticClass:"iconWidth text-nowrap push-right if-medium"},[_c(\'TokenIcon\',{attrs:{"image":o.image,"alt":o.token}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'button\',{staticClass:"text-primary-hover",on:{"click":function($event){_vm.$router.setRoute( o.route )}}},[_vm._v(_vm._s(o.pair))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(_vm._f("toElapsed")(o.time, \'ago\', true )))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{class:{ \'text-gain\': o.side === \'BUY\', \'text-loss\': o.side === \'SELL\' }},[_vm._v(_vm._s(o.type)+" "+_vm._s(o.side))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toMoney")(o.filled, 0 )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v("/")]),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toMoney")(o.quantity, 0 )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(o.token))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-warning text-nowrap push-right"},[_c(\'span\',{class:{ \'text-danger\': o.status === \'OPEN\', \'text-success\': o.status === \'FILLED\' }},[_vm._v(_vm._s(o.status))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(o.percent, 2 ))+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(o.asset)+" Price")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-secondary"},[_vm._v(_vm._s(_vm._f("toFixed")(o.price, o.asset )))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right if-medium"},[_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(o.feeAsset ? o.feeAsset +\' Total\' : \'Total\'))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(o.feeAmount, 8 )))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(o.asset)+" Total")]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(o.total, o.asset )))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right"},[_c(\'Dropdown\',[_c(\'button\',{staticClass:"icon-config",attrs:{"slot":"trigger"},slot:"trigger"}),_vm._v(" "),_c(\'ul\',{attrs:{"slot":"list"},slot:"list"},[(o.status === \'OPEN\')?_c(\'li\',{staticClass:"text-warning-hover icon-stop iconLeft clickable",on:{"click":function($event){_vm.cancelOrder( o.symbol, o.id, o.quantity )}}},[_vm._v("Cancel this order")]):_vm._e(),_vm._v(" "),_c(\'li\',{staticClass:"text-danger-hover icon-close iconLeft clickable",on:{"click":function($event){_vm.removeOrder( o.id )}}},[_vm._v("Remove from list")])])])],1)])})],2):_vm._e()]),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-calendar iconLeft","btn-name":\'Bot Sessions (\'+ _vm.totalSessions +\')\'}},[(!_vm.sessionsList.length)?_c(\'div\',{staticClass:"pad-v text-center text-info"},[_c(\'div\',{staticClass:"icon-calendar iconLarge"}),_vm._v(" "),_c(\'div\',[_vm._v("No bot sessions data available.")])]):_vm._e(),_vm._v(" "),(_vm.sessionsList.length)?_c(\'div\',{staticClass:"flex-list"},[_c(\'div\',{staticClass:"flex-header flex-middle flex-space"},[_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sessions\', \'pair\', \'asc\' )}}},[_vm._v("Pair")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right if-medium"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sessions\', \'time\', \'desc\' )}}},[_vm._v("Time")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sessions\', \'balance\', \'desc\' )}}},[_vm._v("Balance")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sessions\', \'complete\', \'desc\' )}}},[_vm._v("Trades")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sessions\', \'profit\', \'desc\' )}}},[_vm._v("Profit")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap text-info push-right"},[_vm._v("Duration")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"clickable",on:{"click":function($event){_vm.$sorter.sortOrder( \'sessions\', \'live\', \'desc\' )}}},[_vm._v("Live")])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-bright-hover icon-close",attrs:{"title":"Flush List"},on:{"click":_vm.flushSessionData}})])]),_vm._v(" "),_vm._l((_vm.sessionsList),function(s){return _c(\'div\',{key:s.id,staticClass:"flex-item flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-primary"},[_vm._v(_vm._s(s.pair))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(_vm._f("toElapsed")(s.time, \'ago\', true )))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(s.balance, s.asset )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(s.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(s.complete)))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v("/")]),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(s.total)))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{class:{ \'text-gain\': s.profit > 0, \'text-loss\': s.profit < 0 }},[_vm._v(_vm._s(_vm._f("toFixed")(s.profit, 3 ))+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(s.elapsed))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-10 text-nowrap push-right"},[_c(\'span\',{class:{ \'text-success\': s.live, \'text-warning\': !s.live }},[_vm._v(_vm._s(s.live ? \'Yes\' : \'No\'))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"text-loss-hover icon-close",attrs:{"title":"Remove"},on:{"click":function($event){_vm.deleteSessionEntry( s.id )}}})])])})],2):_vm._e()])])],1)])])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-right"},[_c(\'a\',{staticClass:"icon-network iconLeft",attrs:{"href":"https://www.binance.com/userCenter/balances.html","target":"_blank"}},[_vm._v("Manage account on Binance")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"text-nowrap text-bright push-right"},[_c(\'span\',{staticClass:"icon-chart-line iconLeft text-nowrap"},[_vm._v("Trade Bot")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///95\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AboutPage_vue__ = __webpack_require__(30);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c79b219e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AboutPage_vue__ = __webpack_require__(97);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AboutPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_c79b219e_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AboutPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BYm91dFBhZ2UudnVlP2E1YzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWJvdXRQYWdlLnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQWJvdXRQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYzc5YjIxOWVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9BYm91dFBhZ2UudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvQWJvdXRQYWdlLnZ1ZVxuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///96\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[_c(\'div\',{staticClass:"push-bottom"},[_vm._m(0),_vm._v(" "),_c(\'p\',[_vm._v("\\n      This application connects to the "),_c(\'a\',{staticClass:"text-primary-hover",attrs:{"href":"#"},on:{"click":_vm.goBinance}},[_vm._v("Binance.com")]),_vm._v("\\n      public "),_c(\'a\',{attrs:{"href":"https://github.com/binance-exchange/binance-official-api-docs","target":"_blank"}},[_vm._v("API")]),_vm._v("\\n      to get live 24h price change data for all crypto trading pairs on their platform and allows you to set\\n      custom alerts or watch for price change in real time and get desktop notifications when something triggers\\n      your alerts or price watch settings.\\n    ")]),_vm._v(" "),_vm._m(1)]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_vm._m(2),_vm._v(" "),_c(\'div\',{staticClass:"pad-top push-bottom"},[_c(\'Spinner\',{ref:"jsonSpinner"}),_vm._v(" "),(_vm.addrlist.length)?_c(\'Tabs\',_vm._l((_vm.addrlist),function(d){return _c(\'section\',{key:d.token,attrs:{"btn-name":d.name,"active":d.active}},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"push-right"},[_c(\'img\',{staticClass:"fx fx-zoom-in",attrs:{"src":[ \'https://chart.googleapis.com/chart?chs=80x80&cht=qr&choe=UTF-8&chl=\' + d.address ],"width":"80","height":"80","alt":d.name}})]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1"},[_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-grey push-right"},[_vm._v(_vm._s(d.token))]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(d.address),expression:"d.address"}],staticClass:" push-right text-clip",domProps:{"value":(d.address)},on:{"input":function($event){if($event.target.composing){ return; }_vm.$set(d, "address", $event.target.value)}}}),_vm._v(" "),_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-copy text-primary-hover",attrs:{"title":"Copy"},on:{"click":function($event){_vm.copyAddress( d.token, d.address )}}})]),_vm._v(" "),_c(\'div\',{staticClass:"pad-left"},[_c(\'span\',{staticClass:"text-danger icon-alert"},[_vm._v(" ")]),_vm._v("\\n              Send only "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(d.name)+" ("+_vm._s(d.token)+")")]),_vm._v(" to this address!\\n            ")])])])])})):_vm._e()],1),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_vm._m(3)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Binance Price Watch Web App "),_c(\'i\',{staticClass:"icon-down-open"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'p\',[_vm._v("\\n      This app runs entirely on the browser and only makes external requests to fetch data from various\\n      API endpoints related to cryptocurrency. Any persisting data is stored in the browser\'s\\n      "),_c(\'a\',{attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Storage","target":"_blank"}},[_vm._v("localStorage")]),_vm._v(" database.\\n      In order to get desktop notifications, you must\\n      "),_c(\'a\',{attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API","target":"_blank"}},[_vm._v("Grant Notification Permission")]),_vm._v("\\n      in your browser.\\n    ")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Author  Links & Donation "),_c(\'i\',{staticClass:"icon-down-open"})]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'a\',{staticClass:"icon-globe iconLeft",attrs:{"href":"https://rainnerlins.com/","target":"_blank"}},[_vm._v("Rainner Lins")]),_vm._v("  \\n      "),_c(\'a\',{staticClass:"icon-ghub iconLeft",attrs:{"href":"https://hithub.com/raintek","target":"_blank"}},[_vm._v("Github Profile")]),_vm._v("  \\n    ")]),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_vm._v("\\n      This app is frequently maintained by the developer to help improve it at no cost to anyone but the developer.\\n      If you find this app useful, consider sending a few coins to one of the addresses below.\\n    ")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-bottom"},[_c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      API Endpoints & Assets "),_c(\'i\',{staticClass:"icon-down-open"})]),_vm._v(" "),_c(\'ul\',[_c(\'li\',[_c(\'a\',{attrs:{"href":"https://github.com/binance-exchange/binance-official-api-docs","target":"_blank"}},[_vm._v("Binance API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Socket connection for live 24h price change data.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://github.com/CoinCapDev/CoinCap.io","target":"_blank"}},[_vm._v("Coincap API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Aggregated global data for specific tokens.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://www.mailgun.com/","target":"_blank"}},[_vm._v("Mailgun API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Mailgun API for outgoing notifications via e-mail.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://core.telegram.org/bots#creating-a-new-bot","target":"_blank"}},[_vm._v("Telegram Bot API")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Telegram Bot API for outgoing notifications via the app.")])]),_vm._v(" "),_c(\'li\',[_c(\'a\',{attrs:{"href":"https://github.com/cjdowner/cryptocurrency-icons","target":"_blank"}},[_vm._v("Crypto Icons")]),_vm._v("  \\n        "),_c(\'span\',[_vm._v("Nice looking crypto icons.")])])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///97\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_OptionsPage_vue__ = __webpack_require__(31);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_68cbc7d6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_OptionsPage_vue__ = __webpack_require__(99);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_OptionsPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_68cbc7d6_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_OptionsPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9PcHRpb25zUGFnZS52dWU/Y2ViNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiI5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9PcHRpb25zUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL09wdGlvbnNQYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IF9fdnVlX3RlbXBsYXRlX18gZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNjhjYmM3ZDZcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9PcHRpb25zUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9PcHRpb25zUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///98\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[_c(\'div\',{staticClass:"push-bottom"},[_vm._m(0),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_c(\'Toggle\',{attrs:{"text":\'Grant permission for browser notifications\'},on:{"click":_vm.askNotifyPermission},model:{value:(_vm.canNotify),callback:function ($$v) {_vm.canNotify=$$v},expression:"canNotify"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Enable browser notifications for all events\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.notify.enabled),callback:function ($$v) {_vm.$set(_vm.options.notify, "enabled", $$v)},expression:"options.notify.enabled"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Play a notification sound effect\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.audio.enabled),callback:function ($$v) {_vm.$set(_vm.options.audio, "enabled", $$v)},expression:"options.audio.enabled"}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-1 form-input push-right"},[_c(\'SelectMenu\',{staticClass:"flex-1 push-right",attrs:{"options":_vm.audioFiles},on:{"change":function($event){_vm.saveOptions( true )}},model:{value:(_vm.options.audio.file),callback:function ($$v) {_vm.$set(_vm.options.audio, "file", $$v)},expression:"options.audio.file"}}),_vm._v(" "),_c(\'button\',{staticClass:"text-bright icon-play",on:{"click":function($event){_vm.playSound()}}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 form-input push-right"},[_c(\'span\',{staticClass:"text-grey push-right"},[_vm._v("Volume")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.audio.volume),expression:"options.audio.volume"}],attrs:{"type":"range","min":"0.1","max":"1.0","step":"0.1"},domProps:{"value":(_vm.options.audio.volume)},on:{"change":function($event){_vm.saveOptions( true )},"__r":function($event){_vm.$set(_vm.options.audio, "volume", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"push-left"},[_vm._v(_vm._s(_vm.options.audio.volume))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 form-input"},[_c(\'span\',{staticClass:"text-grey push-right"},[_vm._v("Visible")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.notify.duration),expression:"options.notify.duration"}],attrs:{"type":"range","min":"5","max":"30","step":"1"},domProps:{"value":(_vm.options.notify.duration)},on:{"change":function($event){_vm.saveOptions()},"__r":function($event){_vm.$set(_vm.options.notify, "duration", $event.target.value)}}}),_vm._v(" "),_c(\'span\',{staticClass:"push-left"},[_vm._v(_vm._s(_vm.options.notify.duration)+"s")])])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_vm._m(1),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Must type full search words to see results\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.search.fullword),callback:function ($$v) {_vm.$set(_vm.options.search, "fullword", $$v)},expression:"options.search.fullword"}}),_vm._v(" "),_c(\'Toggle\',{attrs:{"text":\'Must type upper/lower case word letters\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.search.fullcase),callback:function ($$v) {_vm.$set(_vm.options.search, "fullcase", $$v)},expression:"options.search.fullcase"}})],1),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"push-bottom"},[_vm._m(2),_vm._v(" "),_c(\'Tabs\',{staticClass:"push-bottom"},[_c(\'section\',{attrs:{"btn-class":"icon-network","btn-name":"CORS Proxy","active":""}},[_c(\'form\',{staticClass:"cors-form flex-row flex-middle flex-stretch push-bottom",attrs:{"action":"#","disabled":_vm.testing},on:{"submit":_vm.corsFormSubmit}},[_c(\'div\',{staticClass:"form-input flex-1 push-right"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Proxy:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.corsProxy),expression:"corsProxy"}],attrs:{"type":"text","name":"proxyurl","placeholder":"https://..."},domProps:{"value":(_vm.corsProxy)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.corsProxy=$event.target.value}}}),_vm._v(" "),_c(\'span\',{staticClass:"push-left",class:{ \'icon-check text-gain\': _vm.urlSuccess, \'icon-close text-loss\': !_vm.urlSuccess, \'icon-clock text-warning\': _vm.testing }})]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-info-hover push-right push-small",attrs:{"type":"submit"}},[_c(\'i\',{staticClass:"icon-reload",class:{ \'iconSpin\': _vm.testing }}),_vm._v(" Test\\n          ")]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-success-hover",attrs:{"type":"button"},on:{"click":function($event){_vm.addProxy( _vm.corsProxy )}}},[_c(\'i\',{staticClass:"icon-check"}),_vm._v(" Save\\n          ")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-list push-bottom"},_vm._l((_vm.proxyList),function(p){return _c(\'div\',{key:p.url,staticClass:"flex-item flex-row flex-middle flex-stretch"},[_c(\'div\',{staticClass:"flex-1 icon-network iconLeft clickable text-clip push-right",class:{ \'text-success\': p.selected },on:{"click":function($event){_vm.setProxy( p.url )}}},[_vm._v(_vm._s(p.url))]),_vm._v(" "),_c(\'button\',{staticClass:"icon-close text-danger-hover",attrs:{"type":"button"},on:{"click":function($event){_vm.removeProxy( p.url )}}})])})),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            External proxy server used to route outgoing HTTP requests from this app to get around the browser\'s built-in\\n            "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS","target":"_blank"}},[_vm._v("Cross-Origin Resource Sharing")]),_vm._v("\\n            (CORS) protection. You can run your own proxy server by installing\\n            "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://github.com/Rob--W/cors-anywhere","target":"_blank"}},[_vm._v("CORS-Anywhere")]),_vm._v(".\\n          ")])])]),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-chart-line","btn-name":"Binance API"}},[_c(\'Toggle\',{staticClass:"push-bottom",attrs:{"text":\'Enable Binance API for trading purposes\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.binance.enabled),callback:function ($$v) {_vm.$set(_vm.options.binance, "enabled", $$v)},expression:"options.binance.enabled"}}),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Binance API Key:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.binance.apikey),expression:"options.binance.apikey"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"..."},domProps:{"value":(_vm.options.binance.apikey)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.binance, "apikey", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Binance API Secret:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.binance.apisecret),expression:"options.binance.apisecret"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"..."},domProps:{"value":(_vm.options.binance.apisecret)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.binance, "apisecret", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            Provide your "),_c(\'a\',{attrs:{"href":"#"},on:{"click":function($event){$event.preventDefault();return _vm.goBinance($event)}}},[_vm._v("Binance API keys")]),_vm._v("\\n            if you wish to use the trading features available within this app.\\n            The key you enter here will be stored in your web browser\'s local storage for use within this app only.\\n            You can find your key, or create a new one by accessing your account page on the Binance website.\\n          ")])])],1),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-at","btn-name":"Mailgun API"}},[_c(\'Toggle\',{staticClass:"push-bottom",attrs:{"text":\'Enable notifications using Mailgun API\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.mailgun.enabled),callback:function ($$v) {_vm.$set(_vm.options.mailgun, "enabled", $$v)},expression:"options.mailgun.enabled"}}),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Mailgun Domain:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.mailgun.domain),expression:"options.mailgun.domain"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"mysite.com"},domProps:{"value":(_vm.options.mailgun.domain)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.mailgun, "domain", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Mailgun API Key:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.mailgun.apikey),expression:"options.mailgun.apikey"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"key-..."},domProps:{"value":(_vm.options.mailgun.apikey)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.mailgun, "apikey", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Recipient E-mail:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.mailgun.email),expression:"options.mailgun.email"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"me@site.com"},domProps:{"value":(_vm.options.mailgun.email)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.mailgun, "email", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            This app can connect to the "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://www.mailgun.com/","target":"_blank"}},[_vm._v("Mailgun API")]),_vm._v("\\n            for sending outgoing e-mail notifications using a Mailgun account. You will need to add your Mailgun account details above.\\n          ")])])],1),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-submit","btn-name":"Telegram API"}},[_c(\'Toggle\',{staticClass:"push-bottom",attrs:{"text":\'Enable notifications using Telegram Bot API\'},on:{"change":function($event){_vm.saveOptions()}},model:{value:(_vm.options.telegram.enabled),callback:function ($$v) {_vm.$set(_vm.options.telegram, "enabled", $$v)},expression:"options.telegram.enabled"}}),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Telegram Bot Key:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.telegram.botkey),expression:"options.telegram.botkey"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"00000:xxxxx..."},domProps:{"value":(_vm.options.telegram.botkey)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.telegram, "botkey", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"form-input push-bottom"},[_c(\'span\',{staticClass:"text-nowrap text-grey push-right"},[_vm._v("Telegram User ID:")]),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.options.telegram.userid),expression:"options.telegram.userid"}],staticClass:"flex-1",attrs:{"type":"text","placeholder":"0000000..."},domProps:{"value":(_vm.options.telegram.userid)},on:{"blur":function($event){_vm.saveOptions()},"input":function($event){if($event.target.composing){ return; }_vm.$set(_vm.options.telegram, "userid", $event.target.value)}}})]),_vm._v(" "),_c(\'div\',{staticClass:"text-small text-grey"},[_c(\'p\',[_vm._v("\\n            This app can connect to the "),_c(\'a\',{staticClass:"text-nowrap",attrs:{"href":"https://core.telegram.org/bots#creating-a-new-bot","target":"_blank"}},[_vm._v("Telegram Bot API")]),_vm._v("\\n            for sending outgoing notifications using the Telegram app on desktop or mobile.\\n            You will need to provide a Bot API Token and the User chat ID above.\\n            You can use a bot such as "),_c(\'a\',{attrs:{"href":"https://t.me/@JsonDumpBot","target":"_blank"}},[_vm._v("@JsonDumpBot")]),_vm._v(" to find out what your user chat_id is.\\n          ")])])],1)])],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Browser Notifications "),_c(\'i\',{staticClass:"icon-down-open"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Search Options (Affects sentiment analysis) "),_c(\'i\',{staticClass:"icon-down-open"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"form-label push-bottom"},[_vm._v("\\n      Outgoing Requests & Notifications (Advanced) "),_c(\'i\',{staticClass:"icon-down-open"})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///99\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HistoryPage_vue__ = __webpack_require__(32);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_42885537_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HistoryPage_vue__ = __webpack_require__(101);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HistoryPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_42885537_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HistoryPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IaXN0b3J5UGFnZS52dWU/Yzg4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxMDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vSGlzdG9yeVBhZ2UudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9IaXN0b3J5UGFnZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTQyODg1NTM3XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vSGlzdG9yeVBhZ2UudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvSGlzdG9yeVBhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///100\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{staticClass:"history-page"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-stretch push-bottom"},[_c(\'div\',{staticClass:"flex-1 text-clip push-right"},[_vm._v("Recent price alert activity history ("+_vm._s(_vm.historyData.length)+")")]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-info-hover icon-close iconLeft",class:{ \'disabled\': !_vm.historyData.length },on:{"click":_vm.flushHistory}},[_vm._v("Flush")])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-list"},[(!_vm.historyData.length)?_c(\'div\',{staticClass:"flex-item"},[_vm._m(0)]):_vm._e(),_vm._v(" "),_vm._l((_vm.historyData),function(e){return _c(\'div\',{key:e.id,staticClass:"flex-item"},[_c(\'div\',{staticClass:"push-right",class:{ \'alert-bubble\': e.isNew }},[_c(\'TokenIcon\',{attrs:{"image":e.icon}})],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'div\',{staticClass:"text-default"},[_vm._v(_vm._s(e.title))]),_vm._v(" "),_c(\'div\',{staticClass:"text-info"},[_vm._v(_vm._s(_vm.formatInfo( e.info )))])]),_vm._v(" "),_c(\'div\',{staticClass:"text-clip text-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close",attrs:{"title":"Delete"},on:{"click":function($event){_vm.deleteHistory( e.id )}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-default"},[_vm._v(_vm._s(_vm._f("toElapsed")(e.time))+" ago")])])])})],2)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"flex-1 text-info text-faded"},[_c(\'span\',{staticClass:"icon-info iconLeft"},[_vm._v("There\'s nothing here right now.")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9IaXN0b3J5UGFnZS52dWU/MzU2NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLHFCQUFxQiwyQkFBMkIsWUFBWSw0REFBNEQsWUFBWSwwQ0FBMEMsZ0hBQWdILGdFQUFnRSxzQ0FBc0MsS0FBSywwQkFBMEIsNENBQTRDLHdCQUF3QixzQ0FBc0Msd0JBQXdCLHdFQUF3RSxpQkFBaUIsaUNBQWlDLFlBQVksZ0NBQWdDLDJCQUEyQixrQkFBa0IsT0FBTyxnQkFBZ0IsNEJBQTRCLGdDQUFnQyxZQUFZLDJCQUEyQixrREFBa0Qsd0JBQXdCLHFFQUFxRSxtQ0FBbUMsZUFBZSxhQUFhLG1DQUFtQyxrQ0FBa0MsaUJBQWlCLEtBQUsseUJBQXlCLDRCQUE0Qix3QkFBd0IsMkJBQTJCLDJEQUEyRDtBQUN2NUMsb0NBQW9DLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsMENBQTBDLGFBQWEsaUNBQWlDLGdEQUFnRDtBQUM1UCxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiMTAxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczpcImhpc3RvcnktcGFnZVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC1yb3cgZmxleC1taWRkbGUgZmxleC1zdHJldGNoIHB1c2gtYm90dG9tXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgdGV4dC1jbGlwIHB1c2gtcmlnaHRcIn0sW192bS5fdihcIlJlY2VudCBwcmljZSBhbGVydCBhY3Rpdml0eSBoaXN0b3J5IChcIitfdm0uX3MoX3ZtLmhpc3RvcnlEYXRhLmxlbmd0aCkrXCIpXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJmb3JtLWJ0biBiZy1pbmZvLWhvdmVyIGljb24tY2xvc2UgaWNvbkxlZnRcIixjbGFzczp7ICdkaXNhYmxlZCc6ICFfdm0uaGlzdG9yeURhdGEubGVuZ3RoIH0sb246e1wiY2xpY2tcIjpfdm0uZmx1c2hIaXN0b3J5fX0sW192bS5fdihcIkZsdXNoXCIpXSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtbGlzdFwifSxbKCFfdm0uaGlzdG9yeURhdGEubGVuZ3RoKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LWl0ZW1cIn0sW192bS5fbSgwKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0uaGlzdG9yeURhdGEpLGZ1bmN0aW9uKGUpe3JldHVybiBfYygnZGl2Jyx7a2V5OmUuaWQsc3RhdGljQ2xhc3M6XCJmbGV4LWl0ZW1cIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInB1c2gtcmlnaHRcIixjbGFzczp7ICdhbGVydC1idWJibGUnOiBlLmlzTmV3IH19LFtfYygnVG9rZW5JY29uJyx7YXR0cnM6e1wiaW1hZ2VcIjplLmljb259fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC0xIHB1c2gtcmlnaHRcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtZGVmYXVsdFwifSxbX3ZtLl92KF92bS5fcyhlLnRpdGxlKSldKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtaW5mb1wifSxbX3ZtLl92KF92bS5fcyhfdm0uZm9ybWF0SW5mbyggZS5pbmZvICkpKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWNsaXAgdGV4dC1yaWdodFwifSxbX2MoJ2J1dHRvbicse2RpcmVjdGl2ZXM6W3tuYW1lOlwidG9vbHRpcFwiLHJhd05hbWU6XCJ2LXRvb2x0aXBcIn1dLHN0YXRpY0NsYXNzOlwiaWNvbi1jbG9zZVwiLGF0dHJzOntcInRpdGxlXCI6XCJEZWxldGVcIn0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5kZWxldGVIaXN0b3J5KCBlLmlkICl9fX0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGV4dC1kZWZhdWx0XCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5fZihcInRvRWxhcHNlZFwiKShlLnRpbWUpKStcIiBhZ29cIildKV0pXSl9KV0sMildKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgdGV4dC1pbmZvIHRleHQtZmFkZWRcIn0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJpY29uLWluZm8gaWNvbkxlZnRcIn0sW192bS5fdihcIlRoZXJlJ3Mgbm90aGluZyBoZXJlIHJpZ2h0IG5vdy5cIildKV0pfV1cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTQyODg1NTM3XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvSGlzdG9yeVBhZ2UudnVlXG4vLyBtb2R1bGUgaWQgPSAxMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[(_vm.pairData.symbol)?_c(\'form\',{staticClass:"flex-row flex-middle flex-stretch push-bottom",attrs:{"action":"#"},on:{"submit":function($event){$event.preventDefault();return _vm.saveAlarm($event)}}},[_c(\'div\',{staticClass:"form-input flex-1 push-right"},[_c(\'div\',{staticClass:"icon-chart-line push-right"}),_vm._v(" "),_c(\'input\',{directives:[{name:"model",rawName:"v-model",value:(_vm.curPrice),expression:"curPrice"}],staticClass:"push-right",attrs:{"placeholder":"0.00000000","name":"price"},domProps:{"value":(_vm.curPrice)},on:{"input":function($event){if($event.target.composing){ return; }_vm.curPrice=$event.target.value}}}),_vm._v(" "),_c(\'div\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm.pairData.asset))])]),_vm._v(" "),_c(\'button\',{staticClass:"form-btn bg-info-hover icon-add iconLeft",attrs:{"type":"submit"}},[_vm._v("Create")])]):_vm._e(),_vm._v(" "),_c(\'div\',{staticClass:"flex-list"},[_c(\'div\',{staticClass:"flex-header"},[_vm._m(0),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_vm._v("Symbol")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_vm._v("Alarm")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_vm._v("Status")]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_vm._v("Created")]),_vm._v(" "),_c(\'div\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close text-danger-hover",attrs:{"title":"Delete All"},on:{"click":_vm.flushAlarms}})])]),_vm._v(" "),(!_vm.alarmsList.length)?_c(\'div\',{staticClass:"flex-item"},[_c(\'div\',{staticClass:"flex-1 text-info text-faded"},[_c(\'span\',{staticClass:"icon-info"},[_vm._v(" ")]),_vm._v(" "),(_vm.pairData.symbol)?_c(\'span\',[_vm._v("There are no alarms for "+_vm._s(_vm.pairData.symbol)+".")]):_c(\'span\',[_vm._v("There are no alarms.")])])]):_vm._e(),_vm._v(" "),_vm._l((_vm.alarmsList),function(a){return _c(\'div\',{key:a.id,staticClass:"flex-item"},[_c(\'div\',{staticClass:"push-right"},[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-alarm",class:{ \'text-gain\': a.active, \'text-info\': !a.active },attrs:{"title":"Toggle"},on:{"click":function($event){_vm.toggleAlarm( a.id, a.symbol, !a.active )}}})]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'button\',{staticClass:"text-bright-hover",on:{"click":function($event){_vm.$bus.emit( \'setRoute\', \'/symbol/\'+ a.symbol )}}},[_vm._v(_vm._s(a.pair))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'span\',{staticClass:"text-big",class:[ \'text-\'+ a.check ]},[_vm._v(_vm._s(a.sign))]),_vm._v(" "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(a.price, a.asset )))]),_vm._v(" "),_c(\'span\',{staticClass:"text-info"},[_vm._v(_vm._s(a.asset))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'span\',{class:{ \'text-success\': a.active, \'text-info\': !a.active }},[_vm._v(_vm._s(a.active ? \'Active\' : \'Triggered\'))])]),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'span\',{staticClass:"text-grey"},[_vm._v(_vm._s(_vm._f("toDate")(a.time)))])]),_vm._v(" "),_c(\'div\',[_c(\'button\',{directives:[{name:"tooltip",rawName:"v-tooltip"}],staticClass:"icon-close",attrs:{"title":"Delete"},on:{"click":function($event){_vm.deleteAlarm( a.id, a.symbol )}}})])])})],2)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"push-right"},[_c(\'span\',{staticClass:"icon-alarm text-faded"})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BbGFybXNMaXN0LnZ1ZT82ODRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBCQUEwQixhQUFhLDBCQUEwQix3QkFBd0Isc0RBQXNELG1FQUFtRSxhQUFhLEtBQUssMEJBQTBCLHdCQUF3QiwrQkFBK0IsWUFBWSwyQ0FBMkMsWUFBWSx5Q0FBeUMsMEJBQTBCLGFBQWEsMEVBQTBFLGtDQUFrQywwQ0FBMEMsV0FBVyx1QkFBdUIsS0FBSyx5QkFBeUIsNEJBQTRCLFFBQVEsRUFBRSxtQ0FBbUMsd0JBQXdCLHdCQUF3QixrRUFBa0UsOERBQThELGlCQUFpQixzREFBc0Qsd0JBQXdCLFlBQVksMEJBQTBCLGtDQUFrQyxnQ0FBZ0MsMkNBQTJDLGdDQUFnQywwQ0FBMEMsZ0NBQWdDLDJDQUEyQyxnQ0FBZ0MseURBQXlELGFBQWEsbUNBQW1DLG9EQUFvRCxxQkFBcUIsS0FBSyx5QkFBeUIscURBQXFELHdCQUF3QixZQUFZLDBDQUEwQyxhQUFhLHdCQUF3QiwyT0FBMk8saUJBQWlCLGlDQUFpQyxZQUFZLHlCQUF5QixlQUFlLGFBQWEsbUNBQW1DLGtDQUFrQyxnREFBZ0QsUUFBUSxpQkFBaUIsS0FBSyx5QkFBeUIsK0NBQStDLDBCQUEwQixnQ0FBZ0MsZUFBZSxvQ0FBb0MseUJBQXlCLG9EQUFvRCxtREFBbUQsZ0NBQWdDLGFBQWEsa0RBQWtELGtEQUFrRCwwQkFBMEIsZ0ZBQWdGLHdCQUF3QixvREFBb0QsZ0NBQWdDLGFBQWEsT0FBTyxvREFBb0QsOEVBQThFLGdDQUFnQyxhQUFhLHdCQUF3QixrRkFBa0YsYUFBYSxtQ0FBbUMsa0NBQWtDLGlCQUFpQixLQUFLLHlCQUF5QixvQ0FBb0MsTUFBTTtBQUMzeEcsb0NBQW9DLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIseUJBQXlCLGFBQWEsb0NBQW9DLElBQUk7QUFDbE0saUJBQWlCO0FBQ2pCLGtFIiwiZmlsZSI6IjEwMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdzZWN0aW9uJyxbKF92bS5wYWlyRGF0YS5zeW1ib2wpP19jKCdmb3JtJyx7c3RhdGljQ2xhc3M6XCJmbGV4LXJvdyBmbGV4LW1pZGRsZSBmbGV4LXN0cmV0Y2ggcHVzaC1ib3R0b21cIixhdHRyczp7XCJhY3Rpb25cIjpcIiNcIn0sb246e1wic3VibWl0XCI6ZnVuY3Rpb24oJGV2ZW50KXskZXZlbnQucHJldmVudERlZmF1bHQoKTtyZXR1cm4gX3ZtLnNhdmVBbGFybSgkZXZlbnQpfX19LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmb3JtLWlucHV0IGZsZXgtMSBwdXNoLXJpZ2h0XCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJpY29uLWNoYXJ0LWxpbmUgcHVzaC1yaWdodFwifSksX3ZtLl92KFwiIFwiKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWxcIix2YWx1ZTooX3ZtLmN1clByaWNlKSxleHByZXNzaW9uOlwiY3VyUHJpY2VcIn1dLHN0YXRpY0NsYXNzOlwicHVzaC1yaWdodFwiLGF0dHJzOntcInBsYWNlaG9sZGVyXCI6XCIwLjAwMDAwMDAwXCIsXCJuYW1lXCI6XCJwcmljZVwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOihfdm0uY3VyUHJpY2UpfSxvbjp7XCJpbnB1dFwiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uY3VyUHJpY2U9JGV2ZW50LnRhcmdldC52YWx1ZX19fSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWdyZXlcIn0sW192bS5fdihfdm0uX3MoX3ZtLnBhaXJEYXRhLmFzc2V0KSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiZm9ybS1idG4gYmctaW5mby1ob3ZlciBpY29uLWFkZCBpY29uTGVmdFwiLGF0dHJzOntcInR5cGVcIjpcInN1Ym1pdFwifX0sW192bS5fdihcIkNyZWF0ZVwiKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LWxpc3RcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtaGVhZGVyXCJ9LFtfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgcHVzaC1yaWdodFwifSxbX3ZtLl92KFwiU3ltYm9sXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgcHVzaC1yaWdodFwifSxbX3ZtLl92KFwiQWxhcm1cIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMSBwdXNoLXJpZ2h0XCJ9LFtfdm0uX3YoXCJTdGF0dXNcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMSBwdXNoLXJpZ2h0XCJ9LFtfdm0uX3YoXCJDcmVhdGVkXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2J1dHRvbicse2RpcmVjdGl2ZXM6W3tuYW1lOlwidG9vbHRpcFwiLHJhd05hbWU6XCJ2LXRvb2x0aXBcIn1dLHN0YXRpY0NsYXNzOlwiaWNvbi1jbG9zZSB0ZXh0LWRhbmdlci1ob3ZlclwiLGF0dHJzOntcInRpdGxlXCI6XCJEZWxldGUgQWxsXCJ9LG9uOntcImNsaWNrXCI6X3ZtLmZsdXNoQWxhcm1zfX0pXSldKSxfdm0uX3YoXCIgXCIpLCghX3ZtLmFsYXJtc0xpc3QubGVuZ3RoKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LWl0ZW1cIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMSB0ZXh0LWluZm8gdGV4dC1mYWRlZFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb24taW5mb1wifSxbX3ZtLl92KFwiwqBcIildKSxfdm0uX3YoXCIgXCIpLChfdm0ucGFpckRhdGEuc3ltYm9sKT9fYygnc3BhbicsW192bS5fdihcIlRoZXJlIGFyZSBubyBhbGFybXMgZm9yIFwiK192bS5fcyhfdm0ucGFpckRhdGEuc3ltYm9sKStcIi5cIildKTpfYygnc3BhbicsW192bS5fdihcIlRoZXJlIGFyZSBubyBhbGFybXMuXCIpXSldKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl9sKChfdm0uYWxhcm1zTGlzdCksZnVuY3Rpb24oYSl7cmV0dXJuIF9jKCdkaXYnLHtrZXk6YS5pZCxzdGF0aWNDbGFzczpcImZsZXgtaXRlbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHVzaC1yaWdodFwifSxbX2MoJ2J1dHRvbicse2RpcmVjdGl2ZXM6W3tuYW1lOlwidG9vbHRpcFwiLHJhd05hbWU6XCJ2LXRvb2x0aXBcIn1dLHN0YXRpY0NsYXNzOlwiaWNvbi1hbGFybVwiLGNsYXNzOnsgJ3RleHQtZ2Fpbic6IGEuYWN0aXZlLCAndGV4dC1pbmZvJzogIWEuYWN0aXZlIH0sYXR0cnM6e1widGl0bGVcIjpcIlRvZ2dsZVwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnRvZ2dsZUFsYXJtKCBhLmlkLCBhLnN5bWJvbCwgIWEuYWN0aXZlICl9fX0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgcHVzaC1yaWdodFwifSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwidGV4dC1icmlnaHQtaG92ZXJcIixvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLiRidXMuZW1pdCggJ3NldFJvdXRlJywgJy9zeW1ib2wvJysgYS5zeW1ib2wgKX19fSxbX3ZtLl92KF92bS5fcyhhLnBhaXIpKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgcHVzaC1yaWdodFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRleHQtYmlnXCIsY2xhc3M6WyAndGV4dC0nKyBhLmNoZWNrIF19LFtfdm0uX3YoX3ZtLl9zKGEuc2lnbikpXSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1icmlnaHRcIn0sW192bS5fdihfdm0uX3MoX3ZtLl9mKFwidG9GaXhlZFwiKShhLnByaWNlLCBhLmFzc2V0ICkpKV0pLF92bS5fdihcIiBcIiksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRleHQtaW5mb1wifSxbX3ZtLl92KF92bS5fcyhhLmFzc2V0KSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC0xIHB1c2gtcmlnaHRcIn0sW19jKCdzcGFuJyx7Y2xhc3M6eyAndGV4dC1zdWNjZXNzJzogYS5hY3RpdmUsICd0ZXh0LWluZm8nOiAhYS5hY3RpdmUgfX0sW192bS5fdihfdm0uX3MoYS5hY3RpdmUgPyAnQWN0aXZlJyA6ICdUcmlnZ2VyZWQnKSldKV0pLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC0xIHB1c2gtcmlnaHRcIn0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWdyZXlcIn0sW192bS5fdihfdm0uX3MoX3ZtLl9mKFwidG9EYXRlXCIpKGEudGltZSkpKV0pXSksX3ZtLl92KFwiIFwiKSxfYygnZGl2JyxbX2MoJ2J1dHRvbicse2RpcmVjdGl2ZXM6W3tuYW1lOlwidG9vbHRpcFwiLHJhd05hbWU6XCJ2LXRvb2x0aXBcIn1dLHN0YXRpY0NsYXNzOlwiaWNvbi1jbG9zZVwiLGF0dHJzOntcInRpdGxlXCI6XCJEZWxldGVcIn0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5kZWxldGVBbGFybSggYS5pZCwgYS5zeW1ib2wgKX19fSldKV0pfSldLDIpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwicHVzaC1yaWdodFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb24tYWxhcm0gdGV4dC1mYWRlZFwifSldKX1dXG52YXIgZXNFeHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuZXhwb3J0IGRlZmF1bHQgZXNFeHBvcnRzXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0yNTkzN2EyZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsYXJtc0xpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///102\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenPage_vue__ = __webpack_require__(35);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_28f91a70_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenPage_vue__ = __webpack_require__(106);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_TokenPage_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_28f91a70_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_TokenPage_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2tlblBhZ2UudnVlPzg1NmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDd0s7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMTAzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbmV4cG9ydCAqIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuUGFnZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhIWJhYmVsLWxvYWRlciEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL1Rva2VuUGFnZS52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTI4ZjkxYTcwXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vVG9rZW5QYWdlLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL1Rva2VuUGFnZS52dWVcbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///103\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsList_vue__ = __webpack_require__(36);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_45ef0b8c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsList_vue__ = __webpack_require__(105);\nvar normalizeComponent = __webpack_require__(0)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_NewsList_vue__["a" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_45ef0b8c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_NewsList_vue__["a" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__["a"] = (Component.exports);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzTGlzdC52dWU/YmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUN3SztBQUN4SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIxMDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhYmFiZWwtbG9hZGVyIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vTmV3c0xpc3QudnVlXCJcbmltcG9ydCBfX3Z1ZV9zY3JpcHRfXyBmcm9tIFwiISFiYWJlbC1sb2FkZXIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9OZXdzTGlzdC52dWVcIlxuLyogdGVtcGxhdGUgKi9cbmltcG9ydCBfX3Z1ZV90ZW1wbGF0ZV9fIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTQ1ZWYwYjhjXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTmV3c0xpc3QudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSAxMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///104\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',[_c(\'div\',{staticClass:"flex-list"},[(_vm.sentimentData)?_c(\'div\',{staticClass:"flex-header"},[_c(\'div\',{staticClass:"flex-1"},[_c(\'span\',{staticClass:"icon-chart-line"},[_vm._v(" ")]),_vm._v(" "),_c(\'span\',{staticClass:"text-info text-clip"},[_vm._v("Sentiment for "+_vm._s(_vm.pairData.name)+" based on "+_vm._s(_vm._f("toNoun")(_vm.newsList.length, \'tweet\', \'tweets\' ))+" is ")]),_vm._v(" "),_c(\'span\',{staticClass:"text-nowrap",class:_vm.sentimentData.styles,domProps:{"innerHTML":_vm._s(_vm.sentimentData.sentiment)}})])]):_vm._e(),_vm._v(" "),(!_vm.newsList.length)?_c(\'div\',{staticClass:"flex-item"},[_c(\'div\',{staticClass:"flex-1 text-info text-faded"},[_c(\'span\',{staticClass:"icon-info"},[_vm._v(" ")]),_vm._v(" "),(_vm.pairData.token)?_c(\'span\',[_vm._v("There are no news/events data for "+_vm._s(_vm.pairData.name)+".")]):_c(\'span\',[_vm._v("There are no news/events loaded.")])])]):_vm._e(),_vm._v(" "),_vm._l((_vm.newsList),function(t){return _c(\'div\',{key:t.id,staticClass:"flex-item"},[_c(\'div\',{staticClass:"flex-1 push-right"},[_c(\'a\',{staticClass:"icon-twtr iconLeft text-primary",attrs:{"href":t.link,"target":"_blank"}},[_vm._v(_vm._s(t.name))]),_vm._v("  \\n        "),_c(\'small\',{staticClass:"text-default"},[_vm._v("@"+_vm._s(t.handle))]),_vm._v(" "),_c(\'br\'),_vm._v(" "),_c(\'small\',{staticClass:"text-bright",domProps:{"innerHTML":_vm._s(t.text)}})])])})],2)])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OZXdzTGlzdC52dWU/ZGFiYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsYUFBYSwwQkFBMEIsd0JBQXdCLCtCQUErQix3QkFBd0IsZ0NBQWdDLDBCQUEwQixZQUFZLHFCQUFxQixhQUFhLDhCQUE4Qix1Q0FBdUMsa0NBQWtDLG9LQUFvSyxtRUFBbUUsaURBQWlELDREQUE0RCx3QkFBd0IsWUFBWSwwQ0FBMEMsYUFBYSx3QkFBd0IsNFBBQTRQLGlCQUFpQixpQ0FBaUMsWUFBWSxnQ0FBZ0MsVUFBVSxxREFBcUQsaUNBQWlDLDhEQUE4RCwyQkFBMkIsOEVBQThFLG9DQUFvQyw0QkFBNEIsTUFBTTtBQUM3OEM7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiMTA1LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NlY3Rpb24nLFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LWxpc3RcIn0sWyhfdm0uc2VudGltZW50RGF0YSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmxleC1oZWFkZXJcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMVwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb24tY2hhcnQtbGluZVwifSxbX3ZtLl92KFwiwqBcIildKSxfdm0uX3YoXCIgXCIpLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWluZm8gdGV4dC1jbGlwXCJ9LFtfdm0uX3YoXCJTZW50aW1lbnQgZm9yIFwiK192bS5fcyhfdm0ucGFpckRhdGEubmFtZSkrXCIgYmFzZWQgb24gXCIrX3ZtLl9zKF92bS5fZihcInRvTm91blwiKShfdm0ubmV3c0xpc3QubGVuZ3RoLCAndHdlZXQnLCAndHdlZXRzJyApKStcIiBpc8KgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1ub3dyYXBcIixjbGFzczpfdm0uc2VudGltZW50RGF0YS5zdHlsZXMsZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5zZW50aW1lbnREYXRhLnNlbnRpbWVudCl9fSldKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKCFfdm0ubmV3c0xpc3QubGVuZ3RoKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LWl0ZW1cIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZsZXgtMSB0ZXh0LWluZm8gdGV4dC1mYWRlZFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImljb24taW5mb1wifSxbX3ZtLl92KFwiwqBcIildKSxfdm0uX3YoXCIgXCIpLChfdm0ucGFpckRhdGEudG9rZW4pP19jKCdzcGFuJyxbX3ZtLl92KFwiVGhlcmUgYXJlIG5vIG5ld3MvZXZlbnRzIGRhdGEgZm9yIFwiK192bS5fcyhfdm0ucGFpckRhdGEubmFtZSkrXCIuXCIpXSk6X2MoJ3NwYW4nLFtfdm0uX3YoXCJUaGVyZSBhcmUgbm8gbmV3cy9ldmVudHMgbG9hZGVkLlwiKV0pXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fbCgoX3ZtLm5ld3NMaXN0KSxmdW5jdGlvbih0KXtyZXR1cm4gX2MoJ2Rpdicse2tleTp0LmlkLHN0YXRpY0NsYXNzOlwiZmxleC1pdGVtXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmbGV4LTEgcHVzaC1yaWdodFwifSxbX2MoJ2EnLHtzdGF0aWNDbGFzczpcImljb24tdHd0ciBpY29uTGVmdCB0ZXh0LXByaW1hcnlcIixhdHRyczp7XCJocmVmXCI6dC5saW5rLFwidGFyZ2V0XCI6XCJfYmxhbmtcIn19LFtfdm0uX3YoX3ZtLl9zKHQubmFtZSkpXSksX3ZtLl92KFwiIMKgXFxuICAgICAgICBcIiksX2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LWRlZmF1bHRcIn0sW192bS5fdihcIkBcIitfdm0uX3ModC5oYW5kbGUpKV0pLF92bS5fdihcIiBcIiksX2MoJ2JyJyksX3ZtLl92KFwiIFwiKSxfYygnc21hbGwnLHtzdGF0aWNDbGFzczpcInRleHQtYnJpZ2h0XCIsZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKHQudGV4dCl9fSldKV0pfSldLDIpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnZhciBlc0V4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5leHBvcnQgZGVmYXVsdCBlc0V4cG9ydHNcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTQ1ZWYwYjhjXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvTmV3c0xpc3QudnVlXG4vLyBtb2R1bGUgaWQgPSAxMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///105\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'section\',{class:_vm.modalData.style},[_c(\'div\',{staticClass:"flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"text-nowrap push-right"},[_c(\'div\',{staticClass:"flex-row flex-middle"},[_c(\'div\',{staticClass:"push-right if-medium"},[_c(\'TokenIcon\',{attrs:{"image":_vm.modalData.image,"alt":_vm.modalData.token}})],1),_vm._v(" "),_c(\'div\',[_c(\'div\',{staticClass:"form-label"},[_vm._v(_vm._s(_vm.modalData.token)+" "),(_vm.coinRank)?_c(\'span\',[_vm._v("#"+_vm._s(_vm._f("toMoney")(_vm.coinRank)))]):_vm._e()]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm.modalData.name))])],1)])]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right push-right"},[_c(\'div\',{staticClass:"form-label"},[_vm._v(_vm._s(_vm.modalData.asset)+" Price")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.close, _vm.modalData.asset )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap text-right push-right"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("Chg 24h")]),_vm._v(" "),_c(\'big\',{staticClass:"color"},[_vm._v(_vm._s(_vm.modalData.sign)+_vm._s(_vm._f("toFixed")(_vm.modalData.percent, 3 ))+"%")])],1),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap"},[_c(\'button\',{staticClass:"form-btn bg-primary-hover icon-chart-line iconLeft",on:{"click":function($event){_vm.tradeLink()}}},[_vm._v("Trade")])])]),_vm._v(" "),_c(\'hr\'),_vm._v(" "),_c(\'div\',{staticClass:"flex-grid push-bottom"},[_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("High 24h")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.high, _vm.modalData.asset )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("Low 24h")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.low, _vm.modalData.asset )))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v(_vm._s(_vm.modalData.asset)+" Vol 24h")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.modalData.assetVolume)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v(_vm._s(_vm.modalData.token)+" Vol 24h")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.modalData.tokenVolume)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("Market Cap")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.marketCap)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("Supply")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.totalSupply)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("Total Volume")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toMoney")(_vm.totalVolume)))])],1),_vm._v(" "),_c(\'div\',{staticClass:"flex-1 well text-nowrap"},[_c(\'div\',{staticClass:"form-label"},[_vm._v("USD Value")]),_vm._v(" "),_c(\'big\',{staticClass:"text-bright"},[_vm._v("$"+_vm._s(_vm._f("toMoney")(_vm.usdPrice, 3 )))])],1)]),_vm._v(" "),_c(\'div\',{staticClass:"text-nowrap well push-bottom"},[_c(\'div\',{staticClass:"flex-row flex-middle flex-space"},[_c(\'div\',{staticClass:"form-label text-clip push-right"},[_vm._v("7D Graph")]),_vm._v(" "),_c(\'div\',{staticClass:"form-label text-clip push-right"},[_vm._v("24h Volatility "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.volatility, 1 ))+"%")])]),_vm._v(" "),_c(\'div\',{staticClass:"form-label text-clip"},[_vm._v("P&D Danger "),_c(\'span\',{staticClass:"text-bright"},[_vm._v(_vm._s(_vm._f("toFixed")(_vm.modalData.danger, 1 ))+"%")])])]),_vm._v(" "),_c(\'LineChart\',{attrs:{"width":_vm.chartWidth,"height":_vm.chartHeight,"values":_vm.chartData}}),_vm._v(" "),_c(\'Spinner\',{ref:"chartSpinner",staticClass:"abs rounded"})],1),_vm._v(" "),_c(\'Tabs\',{staticClass:"tokenpage-tabs",attrs:{"data":{ alarmsCount: _vm.alarmsCount, newsCount: _vm.newsCount }}},[_c(\'section\',{attrs:{"btn-class":"icon-alarm iconLeft","btn-name":[ \'Alarms (\'+ _vm.alarmsCount +\')\' ],"active":""}},[_c(\'AlarmsList\',{attrs:{"alarmsData":_vm.alarmsData,"pairData":_vm.modalData},on:{"listCount":_vm.onAlarmsCount}})],1),_vm._v(" "),_c(\'section\',{attrs:{"btn-class":"icon-calendar iconLeft","btn-name":[ \'News (\'+ _vm.newsCount +\')\' ]}},[_c(\'NewsList\',{attrs:{"newsEntries":_vm.newsEntries,"pairData":_vm.modalData},on:{"listCount":_vm.onNewsCount}})],1)])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///106\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\'div\',{staticClass:"app-wrap"},[_c(\'Topbar\',{attrs:{"header":_vm.header,"options":_vm.options,"tickerStatus":_vm.tickerStatus,"tickerTime":_vm.tickerTime,"priceData":_vm.priceData,"historyData":_vm.historyData,"alarmsData":_vm.alarmsData,"newsEntries":_vm.newsEntries}}),_vm._v(" "),_c(\'WatchForm\',{attrs:{"header":_vm.header,"options":_vm.options,"tickerStatus":_vm.tickerStatus,"assetsList":_vm.assetsList,"priceData":_vm.priceData}}),_vm._v(" "),_c(\'main\',{staticClass:"app-main"},[_c(\'keep-alive\',[_c(_vm.mainComp,{key:_vm.mainComp,tag:"component",staticClass:"fx fx-fade-in",attrs:{"header":_vm.header,"options":_vm.options,"sortData":_vm.sortData,"tickerStatus":_vm.tickerStatus,"assetsList":_vm.assetsList,"priceData":_vm.priceData,"newsHandlers":_vm.newsHandlers,"newsEntries":_vm.newsEntries,"coinsData":_vm.coinsData}})],1)],1),_vm._v(" "),_c(\'Modal\',{ref:"modal",on:{"onDone":_vm.modalDone}},[_c(_vm.modalComp,{tag:"component",attrs:{"options":_vm.options,"sortData":_vm.sortData,"modalData":_vm.modalData,"historyData":_vm.historyData,"alarmsData":_vm.alarmsData,"newsEntries":_vm.newsEntries}})],1),_vm._v(" "),_c(\'Notify\',{ref:"notify"}),_vm._v(" "),_c(\'button\',{staticClass:"icon-up",class:{ \'visible\': _vm.header.collapsed },attrs:{"id":"btt"},on:{"click":function($event){_vm.handleClick( \'scroll\', 0 )}}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__["a"] = (esExports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcHAudnVlPzE5ZWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEJBQTBCLGFBQWEsMEJBQTBCLHdCQUF3QixpQkFBaUIsdUJBQXVCLGVBQWUsT0FBTyx5TkFBeU4sOEJBQThCLE9BQU8saUlBQWlJLHlCQUF5Qix1QkFBdUIsb0NBQW9DLG9FQUFvRSxpUEFBaVAsa0NBQWtDLGdCQUFnQix3QkFBd0Isb0JBQW9CLHVCQUF1QixpS0FBaUssK0JBQStCLGFBQWEsMkJBQTJCLDZCQUE2QixrQ0FBa0MsUUFBUSxXQUFXLEtBQUsseUJBQXlCLGlDQUFpQztBQUM3NEM7QUFDQSxpQkFBaUI7QUFDakIsa0UiLCJmaWxlIjoiMTA3LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYXBwLXdyYXBcIn0sW19jKCdUb3BiYXInLHthdHRyczp7XCJoZWFkZXJcIjpfdm0uaGVhZGVyLFwib3B0aW9uc1wiOl92bS5vcHRpb25zLFwidGlja2VyU3RhdHVzXCI6X3ZtLnRpY2tlclN0YXR1cyxcInRpY2tlclRpbWVcIjpfdm0udGlja2VyVGltZSxcInByaWNlRGF0YVwiOl92bS5wcmljZURhdGEsXCJoaXN0b3J5RGF0YVwiOl92bS5oaXN0b3J5RGF0YSxcImFsYXJtc0RhdGFcIjpfdm0uYWxhcm1zRGF0YSxcIm5ld3NFbnRyaWVzXCI6X3ZtLm5ld3NFbnRyaWVzfX0pLF92bS5fdihcIiBcIiksX2MoJ1dhdGNoRm9ybScse2F0dHJzOntcImhlYWRlclwiOl92bS5oZWFkZXIsXCJvcHRpb25zXCI6X3ZtLm9wdGlvbnMsXCJ0aWNrZXJTdGF0dXNcIjpfdm0udGlja2VyU3RhdHVzLFwiYXNzZXRzTGlzdFwiOl92bS5hc3NldHNMaXN0LFwicHJpY2VEYXRhXCI6X3ZtLnByaWNlRGF0YX19KSxfdm0uX3YoXCIgXCIpLF9jKCdtYWluJyx7c3RhdGljQ2xhc3M6XCJhcHAtbWFpblwifSxbX2MoJ2tlZXAtYWxpdmUnLFtfYyhfdm0ubWFpbkNvbXAse2tleTpfdm0ubWFpbkNvbXAsdGFnOlwiY29tcG9uZW50XCIsc3RhdGljQ2xhc3M6XCJmeCBmeC1mYWRlLWluXCIsYXR0cnM6e1wiaGVhZGVyXCI6X3ZtLmhlYWRlcixcIm9wdGlvbnNcIjpfdm0ub3B0aW9ucyxcInNvcnREYXRhXCI6X3ZtLnNvcnREYXRhLFwidGlja2VyU3RhdHVzXCI6X3ZtLnRpY2tlclN0YXR1cyxcImFzc2V0c0xpc3RcIjpfdm0uYXNzZXRzTGlzdCxcInByaWNlRGF0YVwiOl92bS5wcmljZURhdGEsXCJuZXdzSGFuZGxlcnNcIjpfdm0ubmV3c0hhbmRsZXJzLFwibmV3c0VudHJpZXNcIjpfdm0ubmV3c0VudHJpZXMsXCJjb2luc0RhdGFcIjpfdm0uY29pbnNEYXRhfX0pXSwxKV0sMSksX3ZtLl92KFwiIFwiKSxfYygnTW9kYWwnLHtyZWY6XCJtb2RhbFwiLG9uOntcIm9uRG9uZVwiOl92bS5tb2RhbERvbmV9fSxbX2MoX3ZtLm1vZGFsQ29tcCx7dGFnOlwiY29tcG9uZW50XCIsYXR0cnM6e1wib3B0aW9uc1wiOl92bS5vcHRpb25zLFwic29ydERhdGFcIjpfdm0uc29ydERhdGEsXCJtb2RhbERhdGFcIjpfdm0ubW9kYWxEYXRhLFwiaGlzdG9yeURhdGFcIjpfdm0uaGlzdG9yeURhdGEsXCJhbGFybXNEYXRhXCI6X3ZtLmFsYXJtc0RhdGEsXCJuZXdzRW50cmllc1wiOl92bS5uZXdzRW50cmllc319KV0sMSksX3ZtLl92KFwiIFwiKSxfYygnTm90aWZ5Jyx7cmVmOlwibm90aWZ5XCJ9KSxfdm0uX3YoXCIgXCIpLF9jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImljb24tdXBcIixjbGFzczp7ICd2aXNpYmxlJzogX3ZtLmhlYWRlci5jb2xsYXBzZWQgfSxhdHRyczp7XCJpZFwiOlwiYnR0XCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaGFuZGxlQ2xpY2soICdzY3JvbGwnLCAwICl9fX0pXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxudmFyIGVzRXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cbmV4cG9ydCBkZWZhdWx0IGVzRXhwb3J0c1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtMzM0NWY3MTRcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BcHAudnVlXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///107\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.5.17\n * (c) 2014-2018 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value e.g. [object Object]\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it... e.g.\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\n * now more performant in most browsers, but removing it would be breaking for\n * code that was able to run in PhantomJS 1.x, so this must be kept for\n * backwards compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n})\n\n/*  */\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (false) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm || {};\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---\x3e ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  if (!getter && arguments.length === 2) {\n    val = obj[key];\n  }\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (false\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (false\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    \"production\" !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      \"production\" !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n    \"production\" !== 'production' && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (false) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"production\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'can only contain alphanumeric characters and the hyphen, ' +\n      'and must start with a letter.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (false) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (false) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    false\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n      \" Expected \" + (expectedTypes.map(capitalize).join(', ')) +\n      \", got \" + (toRawType(value)) + \".\",\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (vm) {\n    var cur = vm;\n    while ((cur = cur.$parent)) {\n      var hooks = cur.$options.errorCaptured;\n      if (hooks) {\n        for (var i = 0; i < hooks.length; i++) {\n          try {\n            var capture = hooks[i].call(cur, err, vm, info) === false;\n            if (capture) { return }\n          } catch (e) {\n            globalHandleError(e, cur, 'errorCaptured hook');\n          }\n        }\n      }\n    }\n  }\n  globalHandleError(err, vm, info);\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      logError(e, null, 'config.errorHandler');\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (false) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n/* globals MessageChannel */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\n// microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\n// Here we use microtask by default, but expose a way to force (macro) task when\n// needed (e.g. in event handlers attached by v-on).\nvar microTimerFunc;\nvar macroTimerFunc;\nvar useMacroTask = false;\n\n// Determine (macro) task defer implementation.\n// Technically setImmediate should be the ideal choice, but it's only available\n// in IE. The only polyfill that consistently queues the callback after all DOM\n// events triggered in the same loop is by using MessageChannel.\n/* istanbul ignore if */\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else if (typeof MessageChannel !== 'undefined' && (\n  isNative(MessageChannel) ||\n  // PhantomJS\n  MessageChannel.toString() === '[object MessageChannelConstructor]'\n)) {\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = flushCallbacks;\n  macroTimerFunc = function () {\n    port.postMessage(1);\n  };\n} else {\n  /* istanbul ignore next */\n  macroTimerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\n// Determine microtask defer implementation.\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  microTimerFunc = function () {\n    p.then(flushCallbacks);\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else {\n  // fallback to macro\n  microTimerFunc = macroTimerFunc;\n}\n\n/**\n * Wrap a function so that if any code inside triggers state change,\n * the changes are queued using a (macro) task instead of a microtask.\n */\nfunction withMacroTask (fn) {\n  return fn._withTask || (fn._withTask = function () {\n    useMacroTask = true;\n    var res = fn.apply(null, arguments);\n    useMacroTask = false;\n    return res\n  })\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    if (useMacroTask) {\n      macroTimerFunc();\n    } else {\n      microTimerFunc();\n    }\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, def, cur, old, event;\n  for (name in on) {\n    def = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    /* istanbul ignore if */\n    if (isUndef(cur)) {\n      \"production\" !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      \"production\" !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once) {\n  if (once) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (false) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (false) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$1 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$1; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      \"production\" !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    \"production\" !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (false) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      \"production\" !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (false) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (false) {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {\n        defineReactive(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject).filter(function (key) {\n        /* istanbul ignore next */\n        return Object.getOwnPropertyDescriptor(inject, key).enumerable\n      })\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (false) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (false) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes) {\n      if (false) {\n        warn(\n          \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n          \"- this will likely cause render errors.\",\n          this\n        );\n      }\n      slotNodes._rendered = true;\n    }\n    nodes = slotNodes || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      \"production\" !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () { return resolveSlots(children, parent); };\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = data.scopedSlots || emptyObject;\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n\n\n\n// Register the component hook to weex native render engine.\n// The hook will be triggered by native, not javascript.\n\n\n// Updates the state of the component to weex native render engine.\n\n/*  */\n\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\n\n// listening on native callback\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  // Weex specific: invoke recycle-list optimized @render function for\n  // extracting cell-slot template.\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\n  /* istanbul ignore if */\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    _parentVnode: vnode,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    hooks[key] = componentVNodeHooks[key];\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    \"production\" !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (false\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (false) {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    // reset _rendered flag on slots for duplicate slot check\n    if (false) {\n      for (var key in vm.$slots) {\n        // $flow-disable-line\n        vm.$slots[key]._rendered = false;\n      }\n    }\n\n    if (_parentVnode) {\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {\n        if (vm.$options.renderError) {\n          try {\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n          } catch (e) {\n            handleError(e, vm, \"renderError\");\n            vnode = vm._vnode;\n          }\n        } else {\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue (options) {\n  if (false\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n}\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n}\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.5.17';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      \"production\" !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n}\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove () {\n      if (--remove.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove.listeners = listeners;\n    return remove\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (false) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (false) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (false) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (false\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (false\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n}\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n]\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n}\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n}\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value) {\n  el.attrsMap[name] = value;\n  el.attrsList.push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n  el.plain = false;\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (name === 'click') {\n    if (modifiers.right) {\n      name = 'contextmenu';\n      delete modifiers.right;\n    } else if (modifiers.middle) {\n      name = 'mouseup';\n    }\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = {\n    value: value.trim()\n  };\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (false) {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally'\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler (handler, event, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  handler = withMacroTask(handler);\n  if (once$$1) { handler = createOnceHandler(handler, event, capture); }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    event,\n    handler._withTask || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n}\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.lazy) {\n      // inputs with lazy should only be updated when not in focus\n      return false\n    }\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n}\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def) {\n  if (!def) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def === 'object') {\n    var res = {};\n    if (def.css !== false) {\n      extend(res, autoCssTransition(def.name || 'v'));\n    }\n    extend(res, def);\n    return res\n  } else if (typeof def === 'string') {\n    return autoCssTransition(def)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {}\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n]\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    \"production\" !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n}\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n}\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n}\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n}\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n}\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        false\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if (false\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n}\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n}\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n}\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('--\x3e');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)--\x3e/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([^]*?)\\s+(?:in|of)\\s+([^]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function closeElement (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        \"production\" !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        // element-scope stuff\n        processElement(element, options);\n      }\n\n      function checkRootConstraints (el) {\n        if (false) {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (false) {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      closeElement(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (false) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var res;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (element, options) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = !element.key && !element.attrsList.length;\n\n  processRef(element);\n  processSlot(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (false) {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '');\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotScope;\n    if (el.tag === 'template') {\n      slotScope = getAndRemoveAttr(el, 'scope');\n      /* istanbul ignore if */\n      if (false) {\n        warn$2(\n          \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n          \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n          \"can also be used on plain elements in addition to <template> to \" +\n          \"denote scoped slots.\",\n          true\n        );\n      }\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n      /* istanbul ignore if */\n      if (false) {\n        warn$2(\n          \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n          \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n          \"scoped slot to make it clearer.\",\n          true\n        );\n      }\n      el.slotScope = slotScope;\n    }\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      // only for non-scoped slots.\n      if (el.tag !== 'template' && !el.slotScope) {\n        addAttr(el, 'slot', slotTarget);\n      }\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (false) {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (false) {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true');\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\n/**\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\n * Turn this:\n *   <input v-model=\"data[type]\" :type=\"type\">\n * into this:\n *   <input v-if=\"type === 'checkbox'\" type=\"checkbox\" v-model=\"data[type]\">\n *   <input v-else-if=\"type === 'radio'\" type=\"radio\" v-model=\"data[type]\">\n *   <input v-else :type=\"type\" v-model=\"data[type]\">\n */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$2 = {\n  preTransformNode: preTransformNode\n}\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$2\n]\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n}\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  esc: 'Escape',\n  tab: 'Tab',\n  enter: 'Enter',\n  space: ' ',\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  'delete': ['Backspace', 'Delete']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, events[name])) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    /* istanbul ignore if */\n    return (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : handler.value;\n    /* istanbul ignore if */\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (false) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n}\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      \"production\" !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (false\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (false) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  var fn = \"function(\" + (String(el.slotScope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if\n        ? ((el.if) + \"?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  return (\"{key:\" + key + \",fn:\" + fn + \"}\")\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    /* istanbul ignore if */\n    {\n      res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n    }\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  errors\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n    }\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim())\n      );\n    } else {\n      errors.push(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\"\n      );\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (false) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {\n      if (compiled.errors && compiled.errors.length) {\n        warn$$1(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (false) {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    \"production\" !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(4), __webpack_require__(109).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(110);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxMDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanNcbi8vIG1vZHVsZSBpZCA9IDEwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///109\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(111)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///110\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///111\n")}]);